//----------------------------------------------------------------------------
//   The confidential and proprietary information contained in this file may
//   only be used by a person authorised under and to the extent permitted
//   by a subsisting licensing agreement from ARM Limited or its affiliates.
//
//          (C) COPYRIGHT [2019] ARM Limited or its affiliates.
//              ALL RIGHTS RESERVED
//
//   This entire notice must be reproduced on all copies of this file
//   and copies of this file may only be made by a person if such person is
//   permitted to do so under the terms of a subsisting license agreement
//   from ARM Limited or its affiliates.
//----------------------------------------------------------------------------

#ifndef __ACAMERA_FAULTS_CFG_CONFIG_H__
#define __ACAMERA_FAULTS_CFG_CONFIG_H__

#include "system_isp_io.h"

// File generated by isp_config.py

// ------------------------------------------------------------------------------ //
// Instance 'faults_cfg' of module 'faults_cfg'
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_BASE_ADDR ( 0x1c00 )
#define ACAMERA_FAULTS_CFG_SIZE ( 0x400 )

// ------------------------------------------------------------------------------ //
// Group: faults_cfg
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Faults mapping.
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig pclk2 top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig pclk2 top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk2_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk2_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig pclk2 top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig pclk2 top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk2_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk2_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig pclk top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig pclk top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig pclk top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig pclk top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo in crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo in crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo in crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo in crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer1 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer1 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_BRESP_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_BRESP_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_BRESP_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_BRESP_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer1 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer1 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer1 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer1 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer1 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer1 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_USER_INTFC_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_USER_INTFC_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer1 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer1 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer1_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fb manager1 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fb manager1 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_INTERNAL_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_INTERNAL_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_INTERNAL_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_INTERNAL_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager1_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager1_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fb manager1 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fb manager1 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager1_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager1_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer2 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer2 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_BRESP_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_BRESP_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_BRESP_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_BRESP_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer2 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer2 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer2 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer2 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer2 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer2 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_USER_INTFC_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_USER_INTFC_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer2 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer2 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_REG_ADDR 0x1c00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_OFFSET 0x0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c00 );
    system_isp_write_32( base + 0x1c00, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer2_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c00 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fb manager2 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fb manager2 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_INTERNAL_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_INTERNAL_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_INTERNAL_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_INTERNAL_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager2_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager2_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fb manager2 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fb manager2 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager2_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager2_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error serializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error serializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error serializer3 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error serializer3 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer3_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer3_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo in crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo in crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo in crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo in crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer3 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer3 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_BRESP_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_BRESP_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_BRESP_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_BRESP_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer3 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer3 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer3 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer3 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer3 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer3 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_USER_INTFC_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_USER_INTFC_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer3 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer3 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer3_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fb manager3 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fb manager3 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_INTERNAL_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_INTERNAL_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_INTERNAL_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_INTERNAL_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager3_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager3_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fb manager3 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fb manager3 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager3_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager3_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error serializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error serializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error serializer4 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error serializer4 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer4_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_serializer4_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo in crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo in crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo in crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo in crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_in_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer4 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer4 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_BRESP_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_BRESP_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_BRESP_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_BRESP_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer4 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer4 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer4 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer4 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer4 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer4 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_USER_INTFC_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_USER_INTFC_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi writer4 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi writer4 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_writer4_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fb manager4 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fb manager4 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_INTERNAL_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_INTERNAL_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_INTERNAL_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_INTERNAL_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager4_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager4_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fb manager4 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fb manager4 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager4_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fb_manager4_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader1 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader1 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_ARMAXWAIT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_ARMAXWAIT_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_ARMAXWAIT_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_ARMAXWAIT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader1 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader1 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RRESP_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RRESP_REG_ADDR 0x1c04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RRESP_OFFSET 0x4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RRESP_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c04 );
    system_isp_write_32( base + 0x1c04, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c04 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader1 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader1 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_USER_INTFC_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_USER_INTFC_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_USER_INTFC_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_USER_INTFC_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo out crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo out crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo out crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo out crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer1 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer1 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_GEOMETRY_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_GEOMETRY_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_GEOMETRY_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_GEOMETRY_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer1_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer1_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer1 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer1 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNDERRUN_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNDERRUN_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNDERRUN_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER1_UNDERRUN_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer1_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer1_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader2 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader2 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_ARMAXWAIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_ARMAXWAIT_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_ARMAXWAIT_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_ARMAXWAIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader2 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader2 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RRESP_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RRESP_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RRESP_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RRESP_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader2 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader2 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_USER_INTFC_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_USER_INTFC_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_USER_INTFC_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_USER_INTFC_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo out crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo out crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo out crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo out crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer2 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer2 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_GEOMETRY_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_GEOMETRY_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_GEOMETRY_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_GEOMETRY_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer2_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer2_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer2 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer2 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNDERRUN_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNDERRUN_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNDERRUN_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER2_UNDERRUN_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer2_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer2_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader3 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader3 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_ARMAXWAIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_ARMAXWAIT_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_ARMAXWAIT_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_ARMAXWAIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader3 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader3 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RRESP_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RRESP_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RRESP_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RRESP_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader3 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader3 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_USER_INTFC_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_USER_INTFC_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_USER_INTFC_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_USER_INTFC_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo out crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo out crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo out crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo out crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer3 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer3 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_GEOMETRY_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_GEOMETRY_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_GEOMETRY_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_GEOMETRY_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer3_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer3_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer3 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer3 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNDERRUN_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNDERRUN_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNDERRUN_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER3_UNDERRUN_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer3_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer3_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader4 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader4 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_ARMAXWAIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_ARMAXWAIT_REG_ADDR 0x1c08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_ARMAXWAIT_OFFSET 0x8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_ARMAXWAIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c08 );
    system_isp_write_32( base + 0x1c08, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c08 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader4 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader4 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RRESP_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RRESP_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RRESP_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RRESP_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader4 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader4 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_USER_INTFC_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_USER_INTFC_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_USER_INTFC_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_USER_INTFC_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error axi reader4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error axi reader4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_axi_reader4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo out crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo out crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error fifo out crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error fifo out crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_fifo_out_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer4 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer4 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_GEOMETRY_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_GEOMETRY_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_GEOMETRY_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_GEOMETRY_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer4_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer4_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error deserializer4 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error deserializer4 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNDERRUN_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNDERRUN_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNDERRUN_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_DESERIALIZER4_UNDERRUN_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer4_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_deserializer4_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error synchronizer framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error synchronizer framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SYNCHRONIZER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SYNCHRONIZER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SYNCHRONIZER_FRAMING_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SYNCHRONIZER_FRAMING_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SYNCHRONIZER_FRAMING_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SYNCHRONIZER_FRAMING_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_synchronizer_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_synchronizer_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scheduler input statistics overrun 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scheduler input statistics overrun (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_input_statistics_overrun_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_input_statistics_overrun_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scheduler input statistics overrun 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scheduler input statistics overrun (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_input_statistics_overrun_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_input_statistics_overrun_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scheduler input statistics overrun 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scheduler input statistics overrun (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_input_statistics_overrun_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_input_statistics_overrun_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scheduler input statistics overrun 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scheduler input statistics overrun (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_input_statistics_overrun_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_input_statistics_overrun_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scheduler config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scheduler config.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_CONFIG_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_CONFIG_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_CONFIG_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_CONFIG_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_CONFIG_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_CONFIG_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scheduler internal error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scheduler internal error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_internal_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_internal_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scheduler read geometry mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scheduler read geometry mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_read_geometry_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_read_geometry_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scheduler pq overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scheduler pq overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_pq_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_pq_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scheduler pq underflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scheduler pq underflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_pq_underflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_pq_underflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scheduler pq invalid slot mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scheduler pq invalid slot mode.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_pq_invalid_slot_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_pq_invalid_slot_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scheduler slot error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scheduler slot error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_SLOT_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_SLOT_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_SLOT_ERROR_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_SLOT_ERROR_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_SLOT_ERROR_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCHEDULER_SLOT_ERROR_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_slot_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scheduler_slot_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard access 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard access (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_0_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_0_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_0_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_0_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_access_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_access_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard access 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard access (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_1_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_1_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_1_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_1_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_access_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_access_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard access 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard access (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_2_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_2_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_2_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_2_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_access_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_access_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard access 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard access (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_3_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_3_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_3_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_3_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_access_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_access_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard access 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard access (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_4_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_4_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_4_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_ACCESS_4_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_access_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_access_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard invalid command 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard invalid command (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_invalid_command_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_invalid_command_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard invalid command 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard invalid command (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_invalid_command_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_invalid_command_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard invalid command 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard invalid command (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_invalid_command_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_invalid_command_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard invalid command 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard invalid command (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_invalid_command_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_invalid_command_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard invalid command 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard invalid command (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_REG_ADDR 0x1c0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_OFFSET 0xc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_invalid_command_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c0c );
    system_isp_write_32( base + 0x1c0c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_invalid_command_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c0c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard buffer collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard buffer collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_buffer_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_buffer_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard crc mismatch 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard crc mismatch (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_crc_mismatch_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_crc_mismatch_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard crc mismatch 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard crc mismatch (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_crc_mismatch_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_crc_mismatch_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard crc mismatch 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard crc mismatch (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_crc_mismatch_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_crc_mismatch_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard crc mismatch 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard crc mismatch (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_crc_mismatch_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_crc_mismatch_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error scoreboard crc mismatch 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error scoreboard crc mismatch (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_crc_mismatch_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_scoreboard_crc_mismatch_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error buffer config buffer access
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error buffer config buffer access.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_buffer_config_buffer_access_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_buffer_config_buffer_access_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error buffer config internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error buffer config internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_buffer_config_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_buffer_config_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error buffer config config crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error buffer config config crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_buffer_config_config_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_buffer_config_config_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RRESP_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RRESP_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RRESP_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RRESP_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_USER_INTFC_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_USER_INTFC_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_USER_INTFC_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_USER_INTFC_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma rfifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma rfifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_rfifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_rfifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma rfifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma rfifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_rfifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_rfifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_BRESP_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_BRESP_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_BRESP_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_BRESP_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma wfifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma wfifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_wfifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_wfifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma wfifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma wfifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_wfifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_wfifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma read overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma read overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_read_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_read_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma axi overread
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma axi overread.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_axi_overread_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_axi_overread_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma axi overwrite
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma axi overwrite.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_axi_overwrite_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_axi_overwrite_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error config dma internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error config dma internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_INTERNAL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_INTERNAL_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_INTERNAL_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_CONFIG_DMA_INTERNAL_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_config_dma_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error arbiter bc access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error arbiter bc access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error arbiter bc access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error arbiter bc access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error arbiter bc access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error arbiter bc access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error arbiter bc access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error arbiter bc access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error arbiter bc access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error arbiter bc access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcfe error arbiter bc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask of mcfe error arbiter bc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcfe_error_arbiter_bc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1c10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c10 );
    system_isp_write_32( base + 0x1c10, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c10 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fifo in crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fifo in crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fifo in crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fifo in crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer1 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer1 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_BRESP_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_BRESP_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_BRESP_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_BRESP_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer1 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer1 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer1 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer1 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer1 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer1 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_USER_INTFC_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_USER_INTFC_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer1 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer1 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer1_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fb manager1 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fb manager1 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_INTERNAL_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_INTERNAL_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_INTERNAL_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_INTERNAL_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager1_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager1_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fb manager1 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fb manager1 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager1_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager1_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer2 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer2 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_BRESP_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_BRESP_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_BRESP_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_BRESP_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer2 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer2 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer2 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer2 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer2 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer2 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_USER_INTFC_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_USER_INTFC_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer2 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer2 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer2_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fb manager2 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fb manager2 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_INTERNAL_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_INTERNAL_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_INTERNAL_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_INTERNAL_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager2_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager2_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fb manager2 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fb manager2 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager2_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager2_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error serializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error serializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error serializer3 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error serializer3 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer3_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer3_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fifo in crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fifo in crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fifo in crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fifo in crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer3 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer3 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_BRESP_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_BRESP_REG_ADDR 0x1c14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_BRESP_OFFSET 0x14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_BRESP_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c14 );
    system_isp_write_32( base + 0x1c14, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c14 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer3 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer3 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer3 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer3 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer3 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer3 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_USER_INTFC_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_USER_INTFC_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer3 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer3 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer3_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fb manager3 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fb manager3 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_INTERNAL_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_INTERNAL_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_INTERNAL_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_INTERNAL_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager3_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager3_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fb manager3 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fb manager3 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager3_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager3_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error serializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error serializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error serializer4 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error serializer4 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer4_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_serializer4_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fifo in crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fifo in crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fifo in crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fifo in crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fifo_in_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer4 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer4 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_BRESP_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_BRESP_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_BRESP_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_BRESP_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer4 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer4 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer4 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer4 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer4 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer4 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_USER_INTFC_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_USER_INTFC_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error axi writer4 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error axi writer4 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_axi_writer4_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fb manager4 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fb manager4 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_INTERNAL_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_INTERNAL_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_INTERNAL_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_INTERNAL_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager4_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager4_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error fb manager4 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error fb manager4 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager4_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_fb_manager4_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard access 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard access (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_0_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_0_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_0_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_0_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_access_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_access_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard access 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard access (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_1_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_1_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_1_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_1_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_access_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_access_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard access 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard access (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_2_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_2_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_2_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_2_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_access_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_access_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard access 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard access (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_3_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_3_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_3_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_3_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_access_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_access_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard access 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard access (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_4_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_4_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_4_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_ACCESS_4_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_access_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_access_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard invalid command 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard invalid command (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_invalid_command_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_invalid_command_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard invalid command 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard invalid command (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_invalid_command_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_invalid_command_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard invalid command 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard invalid command (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_invalid_command_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_invalid_command_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard invalid command 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard invalid command (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_REG_ADDR 0x1c18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_OFFSET 0x18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_invalid_command_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c18 );
    system_isp_write_32( base + 0x1c18, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_invalid_command_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c18 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard invalid command 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard invalid command (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_invalid_command_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_invalid_command_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard buffer collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard buffer collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_buffer_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_buffer_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard crc mismatch 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard crc mismatch (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_crc_mismatch_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_crc_mismatch_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard crc mismatch 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard crc mismatch (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_crc_mismatch_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_crc_mismatch_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard crc mismatch 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard crc mismatch (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_crc_mismatch_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_crc_mismatch_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard crc mismatch 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard crc mismatch (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_crc_mismatch_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_crc_mismatch_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error scoreboard crc mismatch 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error scoreboard crc mismatch (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_crc_mismatch_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_scoreboard_crc_mismatch_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error buffer config buffer access
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error buffer config buffer access.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_buffer_config_buffer_access_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_buffer_config_buffer_access_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error buffer config internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error buffer config internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_buffer_config_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_buffer_config_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error buffer config config crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error buffer config config crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_buffer_config_config_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_buffer_config_config_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error arbiter bc access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error arbiter bc access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error arbiter bc access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error arbiter bc access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error arbiter bc access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error arbiter bc access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error arbiter bc access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error arbiter bc access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error arbiter bc access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error arbiter bc access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mcbe error arbiter bc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask of mcbe error arbiter bc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mcbe_error_arbiter_bc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask stream crossbar error invalid configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Stream crossbar: Mask of stream crossbar error invalid configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_stream_crossbar_error_invalid_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_stream_crossbar_error_invalid_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_FAULT_O_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_FAULT_O_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_FAULT_O_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_FAULT_O_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame repeat sensor 1 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 1: Mask of frame repeat sensor 1 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_1_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_1_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame repeat sensor 1 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 1: Mask of frame repeat sensor 1 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_1_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_1_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask metering hist 1 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 1: Mask of metering hist 1 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_metering_hist_1_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_metering_hist_1_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_FAULT_O_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_FAULT_O_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_FAULT_O_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_FAULT_O_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame repeat sensor 2 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 2: Mask of frame repeat sensor 2 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_2_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_2_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame repeat sensor 2 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 2: Mask of frame repeat sensor 2 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_2_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_2_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask metering hist 2 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 2: Mask of metering hist 2 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_metering_hist_2_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_metering_hist_2_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_FAULT_O_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_FAULT_O_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_FAULT_O_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_FAULT_O_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame repeat sensor 3 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 3: Mask of frame repeat sensor 3 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_3_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_3_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame repeat sensor 3 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 3: Mask of frame repeat sensor 3 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_3_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_3_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask metering hist 3 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 3: Mask of metering hist 3 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_metering_hist_3_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_metering_hist_3_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_FAULT_O_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_FAULT_O_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_FAULT_O_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_FAULT_O_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame repeat sensor 4 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 4: Mask of frame repeat sensor 4 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_4_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_4_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame repeat sensor 4 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 4: Mask of frame repeat sensor 4 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_REG_ADDR 0x1c1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_OFFSET 0x1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_4_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c1c );
    system_isp_write_32( base + 0x1c1c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_repeat_sensor_4_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c1c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask metering hist 4 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 4: Mask of metering hist 4 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_metering_hist_4_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_metering_hist_4_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_FAULT_O_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_FAULT_O_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_FAULT_O_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_FAULT_O_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask input formatter parameter error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Input formatter: Mask of input formatter parameter error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INPUT_FORMATTER_PARAMETER_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INPUT_FORMATTER_PARAMETER_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INPUT_FORMATTER_PARAMETER_ERROR_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INPUT_FORMATTER_PARAMETER_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INPUT_FORMATTER_PARAMETER_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INPUT_FORMATTER_PARAMETER_ERROR_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_input_formatter_parameter_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_input_formatter_parameter_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame stitch crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Mask of frame stitch crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_stitch_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_stitch_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame stitch bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Mask of frame stitch bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_stitch_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_stitch_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame stitch bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Mask of frame stitch bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_stitch_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_stitch_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame stitch config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Mask of frame stitch config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_stitch_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_stitch_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask fstitch1 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 line repeat detector: Mask of fstitch1 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_fstitch1_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_fstitch1_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask fstitch1 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 line repeat detector: Mask of fstitch1 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_fstitch1_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_fstitch1_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask fstitch1 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 delay line check: Mask of fstitch1 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_fstitch1_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_fstitch1_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask fstitch2 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 line repeat detector: Mask of fstitch2 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_fstitch2_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_fstitch2_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask fstitch2 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 line repeat detector: Mask of fstitch2 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_fstitch2_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_fstitch2_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask fstitch2 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 delay line check: Mask of fstitch2 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_fstitch2_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_fstitch2_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask fstitch3 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 line repeat detector: Mask of fstitch3 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_fstitch3_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_fstitch3_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask fstitch3 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 line repeat detector: Mask of fstitch3 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_fstitch3_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_fstitch3_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask fstitch3 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 delay line check: Mask of fstitch3 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_fstitch3_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_fstitch3_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame repeat isp repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat isp: Mask of frame repeat isp repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_repeat_isp_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_repeat_isp_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame repeat isp repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat isp: Mask of frame repeat isp repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_repeat_isp_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_repeat_isp_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask gamma fesq config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gamma fesq: Mask of gamma fesq config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_gamma_fesq_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_gamma_fesq_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask roi hist 1 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 1: Mask of roi hist 1 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_roi_hist_1_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_roi_hist_1_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask roi hist 2 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 2: Mask of roi hist 2 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_roi_hist_2_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_roi_hist_2_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask roi hist 3 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 3: Mask of roi hist 3 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_roi_hist_3_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_roi_hist_3_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask roi hist 4 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 4: Mask of roi hist 4 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_roi_hist_4_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_roi_hist_4_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask raw frontend crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Mask of raw frontend crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_raw_frontend_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_raw_frontend_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask raw frontend bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Mask of raw frontend bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_raw_frontend_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_raw_frontend_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask raw frontend bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Mask of raw frontend bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_raw_frontend_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_raw_frontend_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask raw frontend config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Mask of raw frontend config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_raw_frontend_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_raw_frontend_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask exp fifo error serializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask of exp fifo error serializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_serializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_serializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask exp fifo error serializer output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask of exp fifo error serializer output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_serializer_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_serializer_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask exp fifo error fifo in crc fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask of exp fifo error fifo in crc fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_fifo_in_crc_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_fifo_in_crc_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask exp fifo error fifo in crc crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask of exp fifo error fifo in crc crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_fifo_in_crc_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_fifo_in_crc_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask exp fifo error deserializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask of exp fifo error deserializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1c20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_deserializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c20 );
    system_isp_write_32( base + 0x1c20, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_deserializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c20 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask exp fifo error deserializer geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask of exp fifo error deserializer geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_deserializer_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_exp_fifo_error_deserializer_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask defect pixel config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Defect pixel: Mask of defect pixel config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_defect_pixel_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_defect_pixel_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask sinter crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Mask of sinter crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_sinter_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_sinter_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask sinter bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Mask of sinter bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_sinter_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_sinter_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask sinter bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Mask of sinter bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_sinter_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_sinter_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask sinter config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Mask of sinter config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_sinter_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_sinter_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ca correction delay line checker delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction delay line checker: Mask of ca correction delay line checker delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ca_correction_delay_line_checker_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ca_correction_delay_line_checker_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ca correction error range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Mask of ca correction error range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_RANGE_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_RANGE_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_RANGE_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_RANGE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ca_correction_error_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ca_correction_error_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ca correction error cache
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Mask of ca correction error cache.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_CACHE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_CACHE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_CACHE_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_CACHE_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_CACHE_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_CACHE_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ca_correction_error_cache_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ca_correction_error_cache_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ca correction error address
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Mask of ca correction error address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_ADDRESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_ADDRESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_ADDRESS_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_ADDRESS_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_ADDRESS_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_ERROR_ADDRESS_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ca_correction_error_address_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ca_correction_error_address_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ca correction config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Mask of ca correction config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ca_correction_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ca_correction_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask gamma besq config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gamma besq: Mask of gamma besq config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_gamma_besq_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_gamma_besq_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask radial shading crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Mask of radial shading crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_radial_shading_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_radial_shading_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask radial shading bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Mask of radial shading bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_radial_shading_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_radial_shading_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask radial shading bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Mask of radial shading bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_radial_shading_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_radial_shading_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask radial shading config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Mask of radial shading config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_radial_shading_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_radial_shading_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask mesh shading config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mesh shading: Mask of mesh shading config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_mesh_shading_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_mesh_shading_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask iridix error parameter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask of iridix error parameter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_PARAMETER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_PARAMETER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_PARAMETER_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_PARAMETER_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_PARAMETER_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_PARAMETER_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_iridix_error_parameter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_iridix_error_parameter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask iridix error internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask of iridix error internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_INTERNAL_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_INTERNAL_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_INTERNAL_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_ERROR_INTERNAL_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_iridix_error_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_iridix_error_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask iridix iridix error parameter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask of iridix iridix error parameter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_PARAMETER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_PARAMETER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_PARAMETER_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_PARAMETER_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_PARAMETER_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_PARAMETER_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_iridix_iridix_error_parameter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_iridix_iridix_error_parameter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask iridix iridix error internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask of iridix iridix error internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_INTERNAL_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_INTERNAL_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_INTERNAL_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_IRIDIX_ERROR_INTERNAL_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_iridix_iridix_error_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_iridix_iridix_error_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask iridix crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask of iridix crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_iridix_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_iridix_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask iridix bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask of iridix bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_iridix_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_iridix_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask iridix bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask of iridix bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_iridix_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_iridix_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask iridix config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask of iridix config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_iridix_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_iridix_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask antifog hist config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Antifog hist: Mask of antifog hist config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_antifog_hist_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_antifog_hist_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic delay line checker delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic delay line checker: Mask of demosaic delay line checker delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_delay_line_checker_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_delay_line_checker_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic line repeat detector: Mask of demosaic line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic line repeat detector: Mask of demosaic line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic rccc crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Mask of demosaic rccc crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_rccc_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_rccc_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic rccc bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Mask of demosaic rccc bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_rccc_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_rccc_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic rccc bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Mask of demosaic rccc bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_rccc_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c24 );
    system_isp_write_32( base + 0x1c24, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_rccc_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c24 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic rccc config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Mask of demosaic rccc config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_rccc_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_rccc_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Mask of demosaic crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Mask of demosaic bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Mask of demosaic bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Mask of demosaic config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic rgbir cfg calc fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask of demosaic rgbir cfg calc fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_cfg_calc_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_cfg_calc_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic rgbir demosaic rgbir cfg calc fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask of demosaic rgbir demosaic rgbir cfg calc fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_demosaic_rgbir_cfg_calc_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_demosaic_rgbir_cfg_calc_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic rgbir crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask of demosaic rgbir crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic rgbir bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask of demosaic rgbir bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic rgbir bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask of demosaic rgbir bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask demosaic rgbir config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask of demosaic rgbir config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_demosaic_rgbir_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_FAULT_O_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_FAULT_O_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_FAULT_O_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_FAULT_O_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask out format crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Mask of out format crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_out_format_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_out_format_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask out format bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Mask of out format bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_out_format_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_out_format_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask out format bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Mask of out format bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_out_format_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_out_format_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask out format config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Mask of out format config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_out_format_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_out_format_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_FAULT_O_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_FAULT_O_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_FAULT_O_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_FAULT_O_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_FAULT_O_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_FAULT_O_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_FAULT_O_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_FAULT_O_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_FAULT_O_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_FAULT_O_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_FAULT_O_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_FAULT_O_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask crc check 1 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 1: Mask of crc check 1 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_1_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_1_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_1_FAULT_CRC_MISMATCH_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_1_FAULT_CRC_MISMATCH_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_1_FAULT_CRC_MISMATCH_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_1_FAULT_CRC_MISMATCH_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_crc_check_1_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_crc_check_1_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask crc check 2 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 2: Mask of crc check 2 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_2_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_2_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_2_FAULT_CRC_MISMATCH_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_2_FAULT_CRC_MISMATCH_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_2_FAULT_CRC_MISMATCH_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_2_FAULT_CRC_MISMATCH_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_crc_check_2_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_crc_check_2_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask crc check 3 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 3: Mask of crc check 3 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_3_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_3_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_3_FAULT_CRC_MISMATCH_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_3_FAULT_CRC_MISMATCH_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_3_FAULT_CRC_MISMATCH_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_3_FAULT_CRC_MISMATCH_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_crc_check_3_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_crc_check_3_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask crc check a1 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a1: Mask of crc check a1 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A1_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A1_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A1_FAULT_CRC_MISMATCH_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A1_FAULT_CRC_MISMATCH_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A1_FAULT_CRC_MISMATCH_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A1_FAULT_CRC_MISMATCH_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_crc_check_a1_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_crc_check_a1_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask crc check a2 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a2: Mask of crc check a2 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A2_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A2_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A2_FAULT_CRC_MISMATCH_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A2_FAULT_CRC_MISMATCH_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A2_FAULT_CRC_MISMATCH_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A2_FAULT_CRC_MISMATCH_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_crc_check_a2_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_crc_check_a2_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask crc check a3 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a3: Mask of crc check a3 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A3_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A3_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A3_FAULT_CRC_MISMATCH_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A3_FAULT_CRC_MISMATCH_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A3_FAULT_CRC_MISMATCH_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_CRC_CHECK_A3_FAULT_CRC_MISMATCH_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_crc_check_a3_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_crc_check_a3_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask pc fifo error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask of pc fifo error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask pc fifo error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask of pc fifo error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask pc fifo error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask of pc fifo error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask pc fifo error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask of pc fifo error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask pc fifo error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask of pc fifo error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask pc fifo error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask of pc fifo error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask pc fifo error synchronizer framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask of pc fifo error synchronizer framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_REG_ADDR 0x1c28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_OFFSET 0x28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_synchronizer_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c28 );
    system_isp_write_32( base + 0x1c28, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_synchronizer_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c28 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask pc fifo error combiner framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask of pc fifo error combiner framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_FRAMING_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_FRAMING_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_FRAMING_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_FRAMING_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_combiner_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_combiner_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask pc fifo error combiner configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask of pc fifo error combiner configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_CONFIGURATION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_CONFIGURATION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_CONFIGURATION_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_CONFIGURATION_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_CONFIGURATION_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_COMBINER_CONFIGURATION_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_combiner_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_combiner_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask pc fifo error deserializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask of pc fifo error deserializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_deserializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_deserializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask pc fifo error deserializer geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask of pc fifo error deserializer geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_deserializer_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_pc_fifo_error_deserializer_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask metering aexp config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering aexp: Mask of metering aexp config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_metering_aexp_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_metering_aexp_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask metering awb config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering awb: Mask of metering awb config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_metering_awb_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_metering_awb_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask uroi config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Uroi: Mask of uroi config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_UROI_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_UROI_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_UROI_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_UROI_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_UROI_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_UROI_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_uroi_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_uroi_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask raw frontend line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend line repeat detector: Mask of raw frontend line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_raw_frontend_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_raw_frontend_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask raw frontend line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend line repeat detector: Mask of raw frontend line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_raw_frontend_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_raw_frontend_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask raw frontend delay line5 check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend delay line5 check: Mask of raw frontend delay line5 check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_raw_frontend_delay_line5_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_raw_frontend_delay_line5_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask iridix delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix delay line check: Mask of iridix delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_iridix_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_iridix_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask out format yuv uv delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format yuv uv delay line check: Mask of out format yuv uv delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_out_format_yuv_uv_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_out_format_yuv_uv_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask out format uv delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format uv delay line check: Mask of out format uv delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_out_format_uv_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_out_format_uv_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask out format ab delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format ab delay line check: Mask of out format ab delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_out_format_ab_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_out_format_ab_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask sinter delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter delay line check: Mask of sinter delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_sinter_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_sinter_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask interrupts error interrupt double
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Interrupts: Mask of interrupts error interrupt double.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupts_error_interrupt_double_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupts_error_interrupt_double_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 1 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask of frame check sensor 1 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_1_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c2c );
    system_isp_write_32( base + 0x1c2c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c2c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 2 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask of frame check sensor 2 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_2_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 3 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask of frame check sensor 3 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_3_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check sensor 4 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask of frame check sensor 4 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_OFFSET 0x30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c30 );
    system_isp_write_32( base + 0x1c30, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_sensor_4_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c30 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask of frame check isp error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp crop error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask of frame check isp crop error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_crop_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c34 );
    system_isp_write_32( base + 0x1c34, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c34 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 2 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask of frame check isp out 2 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_2_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 3 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask of frame check isp out 3 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_3_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask frame check isp out 1 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask of frame check isp out 1 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_frame_check_isp_out_1_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig pclk2 top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig pclk2 top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk2_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk2_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig pclk2 top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig pclk2 top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk2_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk2_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig pclk top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig pclk top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig pclk top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig pclk top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1c38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c38 );
    system_isp_write_32( base + 0x1c38, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_pclk_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c38 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig vclk top fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig vclk top fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_vclk_top_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_vclk_top_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig vclk top fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig vclk top fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_vclk_top_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_vclk_top_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig frontend top fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig frontend top fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_frontend_top_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_frontend_top_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig frontend top fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig frontend top fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_frontend_top_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_frontend_top_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic sconfig top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic sconfig top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_sconfig_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_sconfig_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic serror metering arb access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic serror metering arb access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_serror_metering_arb_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_serror_metering_arb_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic serror metering arb access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic serror metering arb access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_serror_metering_arb_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_serror_metering_arb_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic serror arb hist access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic serror arb hist access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic serror arb hist access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic serror arb hist access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic serror arb hist access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic serror arb hist access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic serror arb hist access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic serror arb hist access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic serror arb hist access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic serror arb hist access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic serror arb hist access out of range 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic serror arb hist access out of range (bit 5).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic serror arb hist access out of range 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic serror arb hist access out of range (bit 6).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic serror arb hist access out of range 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic serror arb hist access out of range (bit 7).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask ic serror arb hist access out of range 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask of ic serror arb hist access out of range (bit 8).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_REG_ADDR 0x1c3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_OFFSET 0x3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c3c );
    system_isp_write_32( base + 0x1c3c, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_ic_serror_arb_hist_access_out_of_range_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c3c ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig pclk2 top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig pclk2 top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk2_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk2_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig pclk2 top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig pclk2 top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk2_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk2_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig pclk top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig pclk top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig pclk top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig pclk top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo in crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo in crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo in crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo in crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer1 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer1 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_BRESP_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_BRESP_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_BRESP_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_BRESP_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer1 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer1 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer1 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer1 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer1 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer1 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_USER_INTFC_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_USER_INTFC_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer1 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer1 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer1_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fb manager1 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fb manager1 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_INTERNAL_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_INTERNAL_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_INTERNAL_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_INTERNAL_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager1_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager1_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fb manager1 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fb manager1 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager1_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager1_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer2 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer2 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_BRESP_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_BRESP_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_BRESP_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_BRESP_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer2 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer2 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer2 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer2 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer2 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer2 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_USER_INTFC_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_USER_INTFC_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer2 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer2 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_REG_ADDR 0x1c40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_OFFSET 0x40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c40 );
    system_isp_write_32( base + 0x1c40, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer2_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c40 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fb manager2 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fb manager2 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_INTERNAL_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_INTERNAL_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_INTERNAL_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_INTERNAL_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager2_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager2_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fb manager2 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fb manager2 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager2_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager2_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error serializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error serializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error serializer3 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error serializer3 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer3_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer3_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo in crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo in crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo in crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo in crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer3 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer3 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_BRESP_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_BRESP_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_BRESP_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_BRESP_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer3 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer3 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer3 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer3 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer3 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer3 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_USER_INTFC_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_USER_INTFC_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer3 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer3 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer3_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fb manager3 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fb manager3 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_INTERNAL_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_INTERNAL_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_INTERNAL_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_INTERNAL_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager3_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager3_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fb manager3 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fb manager3 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager3_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager3_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error serializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error serializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error serializer4 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error serializer4 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer4_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_serializer4_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo in crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo in crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo in crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo in crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_in_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer4 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer4 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_BRESP_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_BRESP_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_BRESP_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_BRESP_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer4 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer4 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer4 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer4 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer4 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer4 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_USER_INTFC_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_USER_INTFC_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi writer4 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi writer4 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_writer4_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fb manager4 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fb manager4 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_INTERNAL_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_INTERNAL_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_INTERNAL_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_INTERNAL_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager4_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager4_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fb manager4 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fb manager4 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager4_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fb_manager4_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader1 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader1 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_ARMAXWAIT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_ARMAXWAIT_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_ARMAXWAIT_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_ARMAXWAIT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader1 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader1 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RRESP_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RRESP_REG_ADDR 0x1c44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RRESP_OFFSET 0x44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RRESP_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c44 );
    system_isp_write_32( base + 0x1c44, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c44 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader1 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader1 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_USER_INTFC_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_USER_INTFC_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_USER_INTFC_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_USER_INTFC_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo out crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo out crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo out crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo out crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer1 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer1 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_GEOMETRY_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_GEOMETRY_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_GEOMETRY_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_GEOMETRY_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer1_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer1_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer1 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer1 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNDERRUN_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNDERRUN_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNDERRUN_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER1_UNDERRUN_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer1_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer1_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader2 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader2 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_ARMAXWAIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_ARMAXWAIT_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_ARMAXWAIT_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_ARMAXWAIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader2 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader2 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RRESP_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RRESP_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RRESP_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RRESP_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader2 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader2 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_USER_INTFC_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_USER_INTFC_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_USER_INTFC_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_USER_INTFC_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo out crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo out crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo out crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo out crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer2 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer2 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_GEOMETRY_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_GEOMETRY_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_GEOMETRY_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_GEOMETRY_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer2_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer2_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer2 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer2 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNDERRUN_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNDERRUN_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNDERRUN_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER2_UNDERRUN_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer2_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer2_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader3 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader3 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_ARMAXWAIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_ARMAXWAIT_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_ARMAXWAIT_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_ARMAXWAIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader3 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader3 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RRESP_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RRESP_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RRESP_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RRESP_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader3 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader3 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_USER_INTFC_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_USER_INTFC_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_USER_INTFC_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_USER_INTFC_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo out crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo out crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo out crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo out crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer3 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer3 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_GEOMETRY_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_GEOMETRY_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_GEOMETRY_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_GEOMETRY_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer3_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer3_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer3 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer3 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNDERRUN_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNDERRUN_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNDERRUN_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER3_UNDERRUN_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer3_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer3_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader4 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader4 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_ARMAXWAIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_ARMAXWAIT_REG_ADDR 0x1c48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_ARMAXWAIT_OFFSET 0x48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_ARMAXWAIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c48 );
    system_isp_write_32( base + 0x1c48, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c48 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader4 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader4 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RRESP_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RRESP_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RRESP_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RRESP_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader4 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader4 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_USER_INTFC_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_USER_INTFC_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_USER_INTFC_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_USER_INTFC_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error axi reader4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error axi reader4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_axi_reader4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo out crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo out crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error fifo out crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error fifo out crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_fifo_out_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer4 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer4 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_GEOMETRY_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_GEOMETRY_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_GEOMETRY_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_GEOMETRY_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer4_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer4_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error deserializer4 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error deserializer4 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNDERRUN_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNDERRUN_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNDERRUN_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_DESERIALIZER4_UNDERRUN_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer4_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_deserializer4_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error synchronizer framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error synchronizer framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SYNCHRONIZER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SYNCHRONIZER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SYNCHRONIZER_FRAMING_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SYNCHRONIZER_FRAMING_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SYNCHRONIZER_FRAMING_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SYNCHRONIZER_FRAMING_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_synchronizer_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_synchronizer_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scheduler input statistics overrun 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scheduler input statistics overrun (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_input_statistics_overrun_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_input_statistics_overrun_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scheduler input statistics overrun 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scheduler input statistics overrun (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_input_statistics_overrun_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_input_statistics_overrun_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scheduler input statistics overrun 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scheduler input statistics overrun (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_input_statistics_overrun_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_input_statistics_overrun_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scheduler input statistics overrun 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scheduler input statistics overrun (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_input_statistics_overrun_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_input_statistics_overrun_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scheduler config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scheduler config.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_CONFIG_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_CONFIG_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_CONFIG_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_CONFIG_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_CONFIG_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_CONFIG_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scheduler internal error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scheduler internal error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_internal_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_internal_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scheduler read geometry mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scheduler read geometry mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_read_geometry_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_read_geometry_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scheduler pq overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scheduler pq overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_pq_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_pq_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scheduler pq underflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scheduler pq underflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_pq_underflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_pq_underflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scheduler pq invalid slot mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scheduler pq invalid slot mode.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_pq_invalid_slot_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_pq_invalid_slot_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scheduler slot error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scheduler slot error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_SLOT_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_SLOT_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_SLOT_ERROR_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_SLOT_ERROR_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_SLOT_ERROR_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCHEDULER_SLOT_ERROR_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_slot_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scheduler_slot_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard access 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard access (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_0_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_0_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_0_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_0_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_access_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_access_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard access 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard access (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_1_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_1_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_1_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_1_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_access_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_access_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard access 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard access (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_2_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_2_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_2_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_2_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_access_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_access_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard access 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard access (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_3_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_3_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_3_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_3_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_access_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_access_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard access 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard access (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_4_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_4_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_4_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_ACCESS_4_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_access_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_access_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard invalid command 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard invalid command (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_invalid_command_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_invalid_command_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard invalid command 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard invalid command (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_invalid_command_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_invalid_command_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard invalid command 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard invalid command (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_invalid_command_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_invalid_command_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard invalid command 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard invalid command (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_invalid_command_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_invalid_command_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard invalid command 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard invalid command (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_REG_ADDR 0x1c4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_OFFSET 0x4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_invalid_command_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c4c );
    system_isp_write_32( base + 0x1c4c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_invalid_command_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c4c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard buffer collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard buffer collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_buffer_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_buffer_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard crc mismatch 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard crc mismatch (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_crc_mismatch_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_crc_mismatch_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard crc mismatch 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard crc mismatch (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_crc_mismatch_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_crc_mismatch_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard crc mismatch 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard crc mismatch (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_crc_mismatch_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_crc_mismatch_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard crc mismatch 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard crc mismatch (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_crc_mismatch_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_crc_mismatch_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error scoreboard crc mismatch 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error scoreboard crc mismatch (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_crc_mismatch_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_scoreboard_crc_mismatch_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error buffer config buffer access
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error buffer config buffer access.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_buffer_config_buffer_access_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_buffer_config_buffer_access_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error buffer config internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error buffer config internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_buffer_config_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_buffer_config_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error buffer config config crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error buffer config config crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_buffer_config_config_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_buffer_config_config_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RRESP_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RRESP_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RRESP_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RRESP_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_USER_INTFC_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_USER_INTFC_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_USER_INTFC_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_USER_INTFC_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma rfifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma rfifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_rfifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_rfifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma rfifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma rfifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_rfifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_rfifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_BRESP_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_BRESP_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_BRESP_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_BRESP_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma wfifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma wfifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_wfifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_wfifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma wfifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma wfifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_wfifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_wfifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma read overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma read overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_read_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_read_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma axi overread
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma axi overread.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_axi_overread_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_axi_overread_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma axi overwrite
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma axi overwrite.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_axi_overwrite_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_axi_overwrite_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error config dma internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error config dma internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_INTERNAL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_INTERNAL_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_INTERNAL_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_CONFIG_DMA_INTERNAL_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_config_dma_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error arbiter bc access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error arbiter bc access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error arbiter bc access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error arbiter bc access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error arbiter bc access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error arbiter bc access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error arbiter bc access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error arbiter bc access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error arbiter bc access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error arbiter bc access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcfe error arbiter bc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Status of mcfe error arbiter bc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcfe_error_arbiter_bc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1c50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c50 );
    system_isp_write_32( base + 0x1c50, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c50 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fifo in crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fifo in crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fifo in crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fifo in crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer1 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer1 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_BRESP_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_BRESP_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_BRESP_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_BRESP_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer1 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer1 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer1 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer1 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer1 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer1 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_USER_INTFC_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_USER_INTFC_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer1 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer1 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer1_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fb manager1 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fb manager1 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_INTERNAL_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_INTERNAL_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_INTERNAL_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_INTERNAL_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager1_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager1_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fb manager1 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fb manager1 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager1_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager1_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer2 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer2 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_BRESP_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_BRESP_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_BRESP_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_BRESP_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer2 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer2 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer2 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer2 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer2 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer2 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_USER_INTFC_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_USER_INTFC_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer2 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer2 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer2_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fb manager2 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fb manager2 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_INTERNAL_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_INTERNAL_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_INTERNAL_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_INTERNAL_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager2_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager2_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fb manager2 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fb manager2 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager2_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager2_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error serializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error serializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error serializer3 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error serializer3 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer3_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer3_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fifo in crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fifo in crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fifo in crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fifo in crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer3 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer3 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_BRESP_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_BRESP_REG_ADDR 0x1c54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_BRESP_OFFSET 0x54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_BRESP_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c54 );
    system_isp_write_32( base + 0x1c54, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c54 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer3 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer3 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer3 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer3 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer3 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer3 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_USER_INTFC_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_USER_INTFC_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer3 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer3 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer3_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fb manager3 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fb manager3 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_INTERNAL_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_INTERNAL_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_INTERNAL_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_INTERNAL_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager3_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager3_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fb manager3 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fb manager3 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager3_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager3_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error serializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error serializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error serializer4 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error serializer4 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer4_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_serializer4_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fifo in crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fifo in crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fifo in crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fifo in crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fifo_in_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer4 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer4 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_BRESP_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_BRESP_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_BRESP_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_BRESP_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer4 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer4 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer4 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer4 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer4 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer4 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_USER_INTFC_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_USER_INTFC_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error axi writer4 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error axi writer4 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_axi_writer4_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fb manager4 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fb manager4 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_INTERNAL_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_INTERNAL_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_INTERNAL_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_INTERNAL_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager4_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager4_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error fb manager4 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error fb manager4 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager4_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_fb_manager4_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard access 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard access (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_0_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_0_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_0_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_0_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_access_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_access_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard access 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard access (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_1_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_1_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_1_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_1_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_access_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_access_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard access 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard access (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_2_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_2_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_2_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_2_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_access_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_access_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard access 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard access (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_3_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_3_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_3_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_3_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_access_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_access_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard access 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard access (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_4_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_4_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_4_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_ACCESS_4_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_access_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_access_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard invalid command 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard invalid command (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_invalid_command_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_invalid_command_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard invalid command 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard invalid command (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_invalid_command_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_invalid_command_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard invalid command 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard invalid command (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_invalid_command_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_invalid_command_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard invalid command 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard invalid command (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_REG_ADDR 0x1c58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_OFFSET 0x58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_invalid_command_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c58 );
    system_isp_write_32( base + 0x1c58, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_invalid_command_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c58 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard invalid command 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard invalid command (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_invalid_command_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_invalid_command_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard buffer collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard buffer collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_buffer_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_buffer_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard crc mismatch 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard crc mismatch (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_crc_mismatch_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_crc_mismatch_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard crc mismatch 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard crc mismatch (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_crc_mismatch_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_crc_mismatch_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard crc mismatch 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard crc mismatch (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_crc_mismatch_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_crc_mismatch_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard crc mismatch 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard crc mismatch (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_crc_mismatch_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_crc_mismatch_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error scoreboard crc mismatch 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error scoreboard crc mismatch (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_crc_mismatch_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_scoreboard_crc_mismatch_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error buffer config buffer access
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error buffer config buffer access.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_buffer_config_buffer_access_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_buffer_config_buffer_access_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error buffer config internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error buffer config internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_buffer_config_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_buffer_config_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error buffer config config crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error buffer config config crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_buffer_config_config_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_buffer_config_config_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error arbiter bc access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error arbiter bc access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error arbiter bc access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error arbiter bc access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error arbiter bc access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error arbiter bc access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error arbiter bc access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error arbiter bc access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error arbiter bc access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error arbiter bc access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mcbe error arbiter bc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Status of mcbe error arbiter bc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mcbe_error_arbiter_bc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status stream crossbar error invalid configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Stream crossbar: Status of stream crossbar error invalid configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_stream_crossbar_error_invalid_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_stream_crossbar_error_invalid_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_FAULT_O_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_FAULT_O_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_FAULT_O_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_FAULT_O_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame repeat sensor 1 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 1: Status of frame repeat sensor 1 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_1_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_1_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame repeat sensor 1 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 1: Status of frame repeat sensor 1 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_1_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_1_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status metering hist 1 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 1: Status of metering hist 1 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_metering_hist_1_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_metering_hist_1_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_FAULT_O_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_FAULT_O_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_FAULT_O_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_FAULT_O_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame repeat sensor 2 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 2: Status of frame repeat sensor 2 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_2_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_2_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame repeat sensor 2 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 2: Status of frame repeat sensor 2 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_2_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_2_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status metering hist 2 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 2: Status of metering hist 2 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_metering_hist_2_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_metering_hist_2_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_FAULT_O_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_FAULT_O_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_FAULT_O_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_FAULT_O_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame repeat sensor 3 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 3: Status of frame repeat sensor 3 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_3_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_3_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame repeat sensor 3 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 3: Status of frame repeat sensor 3 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_3_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_3_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status metering hist 3 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 3: Status of metering hist 3 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_metering_hist_3_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_metering_hist_3_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_FAULT_O_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_FAULT_O_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_FAULT_O_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_FAULT_O_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame repeat sensor 4 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 4: Status of frame repeat sensor 4 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_4_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_4_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame repeat sensor 4 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 4: Status of frame repeat sensor 4 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_REG_ADDR 0x1c5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_OFFSET 0x5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_4_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c5c );
    system_isp_write_32( base + 0x1c5c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_repeat_sensor_4_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c5c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status metering hist 4 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 4: Status of metering hist 4 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_metering_hist_4_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_metering_hist_4_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_FAULT_O_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_FAULT_O_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_FAULT_O_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_FAULT_O_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status input formatter parameter error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Input formatter: Status of input formatter parameter error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INPUT_FORMATTER_PARAMETER_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INPUT_FORMATTER_PARAMETER_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INPUT_FORMATTER_PARAMETER_ERROR_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INPUT_FORMATTER_PARAMETER_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INPUT_FORMATTER_PARAMETER_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INPUT_FORMATTER_PARAMETER_ERROR_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_input_formatter_parameter_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_input_formatter_parameter_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame stitch crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Status of frame stitch crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_stitch_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_stitch_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame stitch bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Status of frame stitch bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_stitch_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_stitch_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame stitch bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Status of frame stitch bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_stitch_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_stitch_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame stitch config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Status of frame stitch config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_stitch_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_stitch_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status fstitch1 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 line repeat detector: Status of fstitch1 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_fstitch1_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_fstitch1_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status fstitch1 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 line repeat detector: Status of fstitch1 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_fstitch1_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_fstitch1_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status fstitch1 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 delay line check: Status of fstitch1 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_fstitch1_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_fstitch1_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status fstitch2 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 line repeat detector: Status of fstitch2 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_fstitch2_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_fstitch2_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status fstitch2 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 line repeat detector: Status of fstitch2 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_fstitch2_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_fstitch2_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status fstitch2 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 delay line check: Status of fstitch2 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_fstitch2_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_fstitch2_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status fstitch3 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 line repeat detector: Status of fstitch3 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_fstitch3_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_fstitch3_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status fstitch3 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 line repeat detector: Status of fstitch3 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_fstitch3_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_fstitch3_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status fstitch3 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 delay line check: Status of fstitch3 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_fstitch3_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_fstitch3_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame repeat isp repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat isp: Status of frame repeat isp repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_repeat_isp_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_repeat_isp_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame repeat isp repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat isp: Status of frame repeat isp repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_repeat_isp_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_repeat_isp_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status gamma fesq config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gamma fesq: Status of gamma fesq config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_gamma_fesq_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_gamma_fesq_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status roi hist 1 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 1: Status of roi hist 1 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_roi_hist_1_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_roi_hist_1_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status roi hist 2 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 2: Status of roi hist 2 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_roi_hist_2_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_roi_hist_2_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status roi hist 3 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 3: Status of roi hist 3 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_roi_hist_3_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_roi_hist_3_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status roi hist 4 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 4: Status of roi hist 4 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_roi_hist_4_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_roi_hist_4_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status raw frontend crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Status of raw frontend crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_raw_frontend_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_raw_frontend_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status raw frontend bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Status of raw frontend bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_raw_frontend_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_raw_frontend_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status raw frontend bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Status of raw frontend bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_raw_frontend_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_raw_frontend_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status raw frontend config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Status of raw frontend config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_raw_frontend_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_raw_frontend_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status exp fifo error serializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Status of exp fifo error serializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_exp_fifo_error_serializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_exp_fifo_error_serializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status exp fifo error serializer output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Status of exp fifo error serializer output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_exp_fifo_error_serializer_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_exp_fifo_error_serializer_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status exp fifo error fifo in crc fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Status of exp fifo error fifo in crc fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_exp_fifo_error_fifo_in_crc_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_exp_fifo_error_fifo_in_crc_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status exp fifo error fifo in crc crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Status of exp fifo error fifo in crc crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_exp_fifo_error_fifo_in_crc_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_exp_fifo_error_fifo_in_crc_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status exp fifo error deserializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Status of exp fifo error deserializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1c60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_exp_fifo_error_deserializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c60 );
    system_isp_write_32( base + 0x1c60, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_exp_fifo_error_deserializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c60 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status exp fifo error deserializer geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Status of exp fifo error deserializer geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_exp_fifo_error_deserializer_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_exp_fifo_error_deserializer_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status defect pixel config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Defect pixel: Status of defect pixel config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_defect_pixel_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_defect_pixel_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status sinter crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Status of sinter crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_sinter_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_sinter_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status sinter bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Status of sinter bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_sinter_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_sinter_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status sinter bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Status of sinter bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_sinter_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_sinter_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status sinter config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Status of sinter config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_sinter_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_sinter_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ca correction delay line checker delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction delay line checker: Status of ca correction delay line checker delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ca_correction_delay_line_checker_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ca_correction_delay_line_checker_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ca correction error range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Status of ca correction error range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_RANGE_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_RANGE_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_RANGE_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_RANGE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ca_correction_error_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ca_correction_error_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ca correction error cache
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Status of ca correction error cache.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_CACHE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_CACHE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_CACHE_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_CACHE_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_CACHE_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_CACHE_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ca_correction_error_cache_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ca_correction_error_cache_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ca correction error address
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Status of ca correction error address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_ADDRESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_ADDRESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_ADDRESS_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_ADDRESS_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_ADDRESS_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_ERROR_ADDRESS_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ca_correction_error_address_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ca_correction_error_address_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ca correction config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Status of ca correction config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ca_correction_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ca_correction_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status gamma besq config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gamma besq: Status of gamma besq config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_gamma_besq_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_gamma_besq_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status radial shading crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Status of radial shading crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_radial_shading_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_radial_shading_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status radial shading bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Status of radial shading bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_radial_shading_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_radial_shading_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status radial shading bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Status of radial shading bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_radial_shading_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_radial_shading_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status radial shading config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Status of radial shading config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_radial_shading_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_radial_shading_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status mesh shading config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mesh shading: Status of mesh shading config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_mesh_shading_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_mesh_shading_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status iridix error parameter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Status of iridix error parameter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_PARAMETER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_PARAMETER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_PARAMETER_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_PARAMETER_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_PARAMETER_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_PARAMETER_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_iridix_error_parameter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_iridix_error_parameter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status iridix error internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Status of iridix error internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_INTERNAL_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_INTERNAL_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_INTERNAL_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_ERROR_INTERNAL_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_iridix_error_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_iridix_error_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status iridix iridix error parameter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Status of iridix iridix error parameter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_PARAMETER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_PARAMETER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_PARAMETER_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_PARAMETER_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_PARAMETER_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_PARAMETER_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_iridix_iridix_error_parameter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_iridix_iridix_error_parameter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status iridix iridix error internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Status of iridix iridix error internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_INTERNAL_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_INTERNAL_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_INTERNAL_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_IRIDIX_ERROR_INTERNAL_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_iridix_iridix_error_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_iridix_iridix_error_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status iridix crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Status of iridix crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_iridix_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_iridix_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status iridix bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Status of iridix bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_iridix_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_iridix_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status iridix bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Status of iridix bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_iridix_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_iridix_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status iridix config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Status of iridix config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_iridix_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_iridix_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status antifog hist config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Antifog hist: Status of antifog hist config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_antifog_hist_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_antifog_hist_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic delay line checker delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic delay line checker: Status of demosaic delay line checker delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_delay_line_checker_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_delay_line_checker_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic line repeat detector: Status of demosaic line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic line repeat detector: Status of demosaic line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic rccc crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Status of demosaic rccc crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_rccc_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_rccc_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic rccc bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Status of demosaic rccc bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_rccc_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_rccc_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic rccc bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Status of demosaic rccc bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_rccc_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c64 );
    system_isp_write_32( base + 0x1c64, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_rccc_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c64 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic rccc config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Status of demosaic rccc config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_rccc_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_rccc_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Status of demosaic crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Status of demosaic bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Status of demosaic bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Status of demosaic config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic rgbir cfg calc fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Status of demosaic rgbir cfg calc fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_cfg_calc_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_cfg_calc_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic rgbir demosaic rgbir cfg calc fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Status of demosaic rgbir demosaic rgbir cfg calc fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_demosaic_rgbir_cfg_calc_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_demosaic_rgbir_cfg_calc_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic rgbir crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Status of demosaic rgbir crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic rgbir bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Status of demosaic rgbir bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic rgbir bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Status of demosaic rgbir bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status demosaic rgbir config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Status of demosaic rgbir config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_demosaic_rgbir_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_FAULT_O_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_FAULT_O_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_FAULT_O_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_FAULT_O_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status out format crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Status of out format crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_out_format_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_out_format_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status out format bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Status of out format bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_out_format_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_out_format_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status out format bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Status of out format bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_out_format_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_out_format_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status out format config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Status of out format config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_out_format_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_out_format_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_FAULT_O_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_FAULT_O_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_FAULT_O_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_FAULT_O_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_FAULT_O_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_FAULT_O_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_FAULT_O_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_FAULT_O_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_FAULT_O_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_FAULT_O_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_FAULT_O_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_FAULT_O_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status crc check 1 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 1: Status of crc check 1 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_1_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_1_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_1_FAULT_CRC_MISMATCH_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_1_FAULT_CRC_MISMATCH_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_1_FAULT_CRC_MISMATCH_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_1_FAULT_CRC_MISMATCH_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_crc_check_1_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_crc_check_1_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status crc check 2 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 2: Status of crc check 2 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_2_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_2_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_2_FAULT_CRC_MISMATCH_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_2_FAULT_CRC_MISMATCH_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_2_FAULT_CRC_MISMATCH_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_2_FAULT_CRC_MISMATCH_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_crc_check_2_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_crc_check_2_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status crc check 3 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 3: Status of crc check 3 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_3_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_3_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_3_FAULT_CRC_MISMATCH_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_3_FAULT_CRC_MISMATCH_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_3_FAULT_CRC_MISMATCH_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_3_FAULT_CRC_MISMATCH_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_crc_check_3_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_crc_check_3_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status crc check a1 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a1: Status of crc check a1 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A1_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A1_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A1_FAULT_CRC_MISMATCH_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A1_FAULT_CRC_MISMATCH_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A1_FAULT_CRC_MISMATCH_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A1_FAULT_CRC_MISMATCH_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_crc_check_a1_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_crc_check_a1_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status crc check a2 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a2: Status of crc check a2 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A2_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A2_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A2_FAULT_CRC_MISMATCH_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A2_FAULT_CRC_MISMATCH_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A2_FAULT_CRC_MISMATCH_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A2_FAULT_CRC_MISMATCH_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_crc_check_a2_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_crc_check_a2_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status crc check a3 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a3: Status of crc check a3 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A3_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A3_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A3_FAULT_CRC_MISMATCH_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A3_FAULT_CRC_MISMATCH_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A3_FAULT_CRC_MISMATCH_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_CRC_CHECK_A3_FAULT_CRC_MISMATCH_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_crc_check_a3_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_crc_check_a3_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status pc fifo error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Status of pc fifo error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_pc_fifo_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_pc_fifo_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status pc fifo error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Status of pc fifo error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_pc_fifo_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_pc_fifo_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status pc fifo error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Status of pc fifo error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_pc_fifo_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_pc_fifo_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status pc fifo error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Status of pc fifo error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_pc_fifo_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_pc_fifo_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status pc fifo error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Status of pc fifo error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_pc_fifo_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_pc_fifo_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status pc fifo error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Status of pc fifo error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_pc_fifo_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_pc_fifo_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status pc fifo error synchronizer framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Status of pc fifo error synchronizer framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_REG_ADDR 0x1c68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_OFFSET 0x68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_pc_fifo_error_synchronizer_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c68 );
    system_isp_write_32( base + 0x1c68, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_pc_fifo_error_synchronizer_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c68 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status pc fifo error combiner framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Status of pc fifo error combiner framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_FRAMING_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_FRAMING_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_FRAMING_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_FRAMING_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_pc_fifo_error_combiner_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_pc_fifo_error_combiner_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status pc fifo error combiner configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Status of pc fifo error combiner configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_CONFIGURATION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_CONFIGURATION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_CONFIGURATION_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_CONFIGURATION_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_CONFIGURATION_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_COMBINER_CONFIGURATION_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_pc_fifo_error_combiner_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_pc_fifo_error_combiner_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status pc fifo error deserializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Status of pc fifo error deserializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_pc_fifo_error_deserializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_pc_fifo_error_deserializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status pc fifo error deserializer geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Status of pc fifo error deserializer geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_pc_fifo_error_deserializer_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_pc_fifo_error_deserializer_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status metering aexp config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering aexp: Status of metering aexp config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_metering_aexp_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_metering_aexp_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status metering awb config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering awb: Status of metering awb config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_metering_awb_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_metering_awb_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status uroi config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Uroi: Status of uroi config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_UROI_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_UROI_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_UROI_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_UROI_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_UROI_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_UROI_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_uroi_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_uroi_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status raw frontend line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend line repeat detector: Status of raw frontend line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_raw_frontend_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_raw_frontend_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status raw frontend line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend line repeat detector: Status of raw frontend line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_raw_frontend_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_raw_frontend_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status raw frontend delay line5 check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend delay line5 check: Status of raw frontend delay line5 check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_raw_frontend_delay_line5_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_raw_frontend_delay_line5_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status iridix delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix delay line check: Status of iridix delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_iridix_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_iridix_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status out format yuv uv delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format yuv uv delay line check: Status of out format yuv uv delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_out_format_yuv_uv_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_out_format_yuv_uv_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status out format uv delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format uv delay line check: Status of out format uv delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_out_format_uv_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_out_format_uv_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status out format ab delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format ab delay line check: Status of out format ab delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_out_format_ab_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_out_format_ab_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status sinter delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter delay line check: Status of sinter delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_sinter_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_sinter_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status interrupts error interrupt double
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Interrupts: Status of interrupts error interrupt double.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_interrupts_error_interrupt_double_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_interrupts_error_interrupt_double_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 1 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Status of frame check sensor 1 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_1_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c6c );
    system_isp_write_32( base + 0x1c6c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c6c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 2 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Status of frame check sensor 2 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_2_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 3 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Status of frame check sensor 3 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_3_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check sensor 4 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Status of frame check sensor 4 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_OFFSET 0x70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c70 );
    system_isp_write_32( base + 0x1c70, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_sensor_4_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c70 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Status of frame check isp error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp crop error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Status of frame check isp crop error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_crop_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c74 );
    system_isp_write_32( base + 0x1c74, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c74 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 2 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Status of frame check isp out 2 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_2_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 3 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Status of frame check isp out 3 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_3_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Status frame check isp out 1 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Status of frame check isp out 1 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_frame_check_isp_out_1_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig pclk2 top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig pclk2 top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk2_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk2_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig pclk2 top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig pclk2 top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk2_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk2_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig pclk top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig pclk top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig pclk top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig pclk top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1c78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c78 );
    system_isp_write_32( base + 0x1c78, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_pclk_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c78 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig vclk top fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig vclk top fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_vclk_top_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_vclk_top_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig vclk top fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig vclk top fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_vclk_top_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_vclk_top_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig frontend top fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig frontend top fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_frontend_top_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_frontend_top_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig frontend top fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig frontend top fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_frontend_top_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_frontend_top_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic sconfig top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic sconfig top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_sconfig_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_sconfig_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic serror metering arb access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic serror metering arb access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_serror_metering_arb_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_serror_metering_arb_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic serror metering arb access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic serror metering arb access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_serror_metering_arb_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_serror_metering_arb_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic serror arb hist access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic serror arb hist access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic serror arb hist access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic serror arb hist access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic serror arb hist access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic serror arb hist access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic serror arb hist access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic serror arb hist access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic serror arb hist access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic serror arb hist access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic serror arb hist access out of range 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic serror arb hist access out of range (bit 5).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic serror arb hist access out of range 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic serror arb hist access out of range (bit 6).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic serror arb hist access out of range 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic serror arb hist access out of range (bit 7).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Status ic serror arb hist access out of range 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Status of ic serror arb hist access out of range (bit 8).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_REG_ADDR 0x1c7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_OFFSET 0x7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_STATUS_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c7c );
    system_isp_write_32( base + 0x1c7c, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_status_ic_serror_arb_hist_access_out_of_range_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c7c ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig pclk2 top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig pclk2 top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk2_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk2_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig pclk2 top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig pclk2 top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk2_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk2_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig pclk top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig pclk top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig pclk top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig pclk top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo in crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo in crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo in crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo in crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer1 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer1 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_BRESP_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_BRESP_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_BRESP_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_BRESP_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer1 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer1 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer1 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer1 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer1 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer1 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer1 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer1 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer1_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fb manager1 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fb manager1 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_INTERNAL_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_INTERNAL_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_INTERNAL_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_INTERNAL_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager1_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager1_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fb manager1 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fb manager1 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager1_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager1_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer2 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer2 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_BRESP_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_BRESP_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_BRESP_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_BRESP_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer2 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer2 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer2 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer2 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer2 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer2 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer2 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer2 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_REG_ADDR 0x1c80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_OFFSET 0x80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c80 );
    system_isp_write_32( base + 0x1c80, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer2_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c80 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fb manager2 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fb manager2 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_INTERNAL_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_INTERNAL_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_INTERNAL_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_INTERNAL_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager2_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager2_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fb manager2 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fb manager2 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager2_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager2_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error serializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error serializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error serializer3 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error serializer3 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer3_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer3_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo in crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo in crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo in crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo in crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer3 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer3 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_BRESP_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_BRESP_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_BRESP_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_BRESP_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer3 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer3 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer3 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer3 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer3 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer3 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer3 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer3 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer3_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fb manager3 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fb manager3 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_INTERNAL_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_INTERNAL_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_INTERNAL_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_INTERNAL_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager3_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager3_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fb manager3 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fb manager3 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager3_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager3_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error serializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error serializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error serializer4 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error serializer4 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer4_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_serializer4_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo in crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo in crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo in crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo in crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_in_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer4 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer4 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_BRESP_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_BRESP_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_BRESP_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_BRESP_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer4 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer4 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer4 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer4 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer4 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer4 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi writer4 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi writer4 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_writer4_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fb manager4 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fb manager4 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_INTERNAL_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_INTERNAL_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_INTERNAL_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_INTERNAL_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager4_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager4_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fb manager4 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fb manager4 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager4_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fb_manager4_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader1 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader1 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader1 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader1 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RRESP_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RRESP_REG_ADDR 0x1c84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RRESP_OFFSET 0x84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RRESP_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c84 );
    system_isp_write_32( base + 0x1c84, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c84 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader1 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader1 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_USER_INTFC_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_USER_INTFC_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_USER_INTFC_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_USER_INTFC_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo out crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo out crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo out crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo out crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer1 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer1 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer1_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer1_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer1 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer1 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer1_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer1_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader2 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader2 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader2 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader2 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RRESP_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RRESP_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RRESP_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RRESP_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader2 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader2 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_USER_INTFC_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_USER_INTFC_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_USER_INTFC_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_USER_INTFC_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo out crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo out crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo out crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo out crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer2 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer2 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer2_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer2_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer2 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer2 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer2_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer2_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader3 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader3 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader3 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader3 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RRESP_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RRESP_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RRESP_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RRESP_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader3 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader3 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_USER_INTFC_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_USER_INTFC_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_USER_INTFC_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_USER_INTFC_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo out crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo out crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo out crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo out crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer3 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer3 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer3_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer3_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer3 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer3 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer3_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer3_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader4 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader4 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_REG_ADDR 0x1c88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_OFFSET 0x88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c88 );
    system_isp_write_32( base + 0x1c88, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c88 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader4 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader4 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RRESP_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RRESP_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RRESP_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RRESP_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader4 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader4 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_USER_INTFC_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_USER_INTFC_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_USER_INTFC_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_USER_INTFC_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error axi reader4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error axi reader4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_axi_reader4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo out crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo out crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error fifo out crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error fifo out crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_fifo_out_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer4 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer4 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer4_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer4_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error deserializer4 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error deserializer4 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer4_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_deserializer4_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error synchronizer framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error synchronizer framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SYNCHRONIZER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SYNCHRONIZER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SYNCHRONIZER_FRAMING_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SYNCHRONIZER_FRAMING_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SYNCHRONIZER_FRAMING_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SYNCHRONIZER_FRAMING_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_synchronizer_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_synchronizer_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scheduler input statistics overrun 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scheduler input statistics overrun (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_input_statistics_overrun_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_input_statistics_overrun_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scheduler input statistics overrun 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scheduler input statistics overrun (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_input_statistics_overrun_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_input_statistics_overrun_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scheduler input statistics overrun 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scheduler input statistics overrun (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_input_statistics_overrun_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_input_statistics_overrun_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scheduler input statistics overrun 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scheduler input statistics overrun (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_input_statistics_overrun_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_input_statistics_overrun_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scheduler config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scheduler config.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_CONFIG_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_CONFIG_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_CONFIG_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_CONFIG_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_CONFIG_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_CONFIG_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scheduler internal error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scheduler internal error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_internal_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_internal_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scheduler read geometry mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scheduler read geometry mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_read_geometry_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_read_geometry_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scheduler pq overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scheduler pq overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_pq_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_pq_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scheduler pq underflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scheduler pq underflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_pq_underflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_pq_underflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scheduler pq invalid slot mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scheduler pq invalid slot mode.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_pq_invalid_slot_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_pq_invalid_slot_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scheduler slot error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scheduler slot error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_slot_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scheduler_slot_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard access 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard access (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_0_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_0_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_0_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_0_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_access_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_access_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard access 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard access (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_1_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_1_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_1_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_1_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_access_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_access_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard access 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard access (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_2_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_2_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_2_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_2_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_access_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_access_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard access 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard access (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_3_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_3_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_3_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_3_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_access_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_access_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard access 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard access (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_4_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_4_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_4_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_ACCESS_4_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_access_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_access_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard invalid command 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard invalid command (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_invalid_command_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_invalid_command_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard invalid command 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard invalid command (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_invalid_command_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_invalid_command_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard invalid command 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard invalid command (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_invalid_command_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_invalid_command_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard invalid command 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard invalid command (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_invalid_command_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_invalid_command_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard invalid command 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard invalid command (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_REG_ADDR 0x1c8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_OFFSET 0x8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_invalid_command_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c8c );
    system_isp_write_32( base + 0x1c8c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_invalid_command_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c8c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard buffer collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard buffer collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_buffer_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_buffer_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard crc mismatch 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard crc mismatch (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_crc_mismatch_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_crc_mismatch_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard crc mismatch 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard crc mismatch (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_crc_mismatch_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_crc_mismatch_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard crc mismatch 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard crc mismatch (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_crc_mismatch_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_crc_mismatch_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard crc mismatch 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard crc mismatch (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_crc_mismatch_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_crc_mismatch_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error scoreboard crc mismatch 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error scoreboard crc mismatch (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_crc_mismatch_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_scoreboard_crc_mismatch_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error buffer config buffer access
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error buffer config buffer access.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_buffer_config_buffer_access_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_buffer_config_buffer_access_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error buffer config internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error buffer config internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_buffer_config_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_buffer_config_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error buffer config config crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error buffer config config crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_buffer_config_config_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_buffer_config_config_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RRESP_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RRESP_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RRESP_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RRESP_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma rfifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma rfifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_rfifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_rfifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma rfifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma rfifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_rfifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_rfifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_BRESP_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_BRESP_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_BRESP_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_BRESP_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma wfifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma wfifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_wfifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_wfifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma wfifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma wfifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_wfifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_wfifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma read overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma read overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_read_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_read_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma axi overread
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma axi overread.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_axi_overread_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_axi_overread_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma axi overwrite
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma axi overwrite.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_axi_overwrite_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_axi_overwrite_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error config dma internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error config dma internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_INTERNAL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_INTERNAL_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_INTERNAL_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_CONFIG_DMA_INTERNAL_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_config_dma_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error arbiter bc access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error arbiter bc access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error arbiter bc access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error arbiter bc access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error arbiter bc access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error arbiter bc access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error arbiter bc access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error arbiter bc access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error arbiter bc access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error arbiter bc access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcfe error arbiter bc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Mask Interrupt of mcfe error arbiter bc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcfe_error_arbiter_bc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1c90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c90 );
    system_isp_write_32( base + 0x1c90, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c90 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fifo in crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fifo in crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fifo in crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fifo in crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer1 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer1 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_BRESP_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_BRESP_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_BRESP_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_BRESP_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer1 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer1 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer1 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer1 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer1 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer1 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer1 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer1 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer1_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fb manager1 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fb manager1 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_INTERNAL_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_INTERNAL_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_INTERNAL_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_INTERNAL_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager1_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager1_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fb manager1 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fb manager1 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager1_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager1_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer2 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer2 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_BRESP_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_BRESP_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_BRESP_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_BRESP_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer2 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer2 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer2 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer2 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer2 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer2 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer2 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer2 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer2_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fb manager2 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fb manager2 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_INTERNAL_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_INTERNAL_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_INTERNAL_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_INTERNAL_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager2_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager2_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fb manager2 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fb manager2 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager2_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager2_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error serializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error serializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error serializer3 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error serializer3 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer3_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer3_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fifo in crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fifo in crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fifo in crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fifo in crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer3 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer3 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_BRESP_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_BRESP_REG_ADDR 0x1c94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_BRESP_OFFSET 0x94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_BRESP_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c94 );
    system_isp_write_32( base + 0x1c94, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c94 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer3 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer3 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer3 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer3 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer3 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer3 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer3 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer3 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer3_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fb manager3 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fb manager3 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_INTERNAL_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_INTERNAL_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_INTERNAL_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_INTERNAL_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager3_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager3_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fb manager3 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fb manager3 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager3_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager3_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error serializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error serializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error serializer4 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error serializer4 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer4_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_serializer4_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fifo in crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fifo in crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fifo in crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fifo in crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fifo_in_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer4 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer4 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_BRESP_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_BRESP_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_BRESP_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_BRESP_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer4 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer4 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer4 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer4 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer4 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer4 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error axi writer4 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error axi writer4 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_axi_writer4_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fb manager4 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fb manager4 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_INTERNAL_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_INTERNAL_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_INTERNAL_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_INTERNAL_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager4_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager4_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error fb manager4 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error fb manager4 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager4_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_fb_manager4_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard access 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard access (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_0_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_0_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_0_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_0_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_access_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_access_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard access 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard access (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_1_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_1_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_1_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_1_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_access_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_access_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard access 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard access (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_2_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_2_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_2_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_2_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_access_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_access_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard access 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard access (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_3_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_3_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_3_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_3_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_access_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_access_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard access 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard access (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_4_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_4_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_4_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_ACCESS_4_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_access_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_access_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard invalid command 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard invalid command (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_invalid_command_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_invalid_command_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard invalid command 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard invalid command (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_invalid_command_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_invalid_command_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard invalid command 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard invalid command (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_invalid_command_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_invalid_command_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard invalid command 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard invalid command (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_REG_ADDR 0x1c98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_OFFSET 0x98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_invalid_command_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c98 );
    system_isp_write_32( base + 0x1c98, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_invalid_command_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c98 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard invalid command 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard invalid command (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_invalid_command_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_invalid_command_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard buffer collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard buffer collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_buffer_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_buffer_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard crc mismatch 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard crc mismatch (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_crc_mismatch_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_crc_mismatch_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard crc mismatch 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard crc mismatch (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_crc_mismatch_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_crc_mismatch_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard crc mismatch 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard crc mismatch (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_crc_mismatch_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_crc_mismatch_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard crc mismatch 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard crc mismatch (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_crc_mismatch_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_crc_mismatch_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error scoreboard crc mismatch 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error scoreboard crc mismatch (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_crc_mismatch_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_scoreboard_crc_mismatch_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error buffer config buffer access
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error buffer config buffer access.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_buffer_config_buffer_access_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_buffer_config_buffer_access_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error buffer config internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error buffer config internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_buffer_config_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_buffer_config_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error buffer config config crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error buffer config config crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_buffer_config_config_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_buffer_config_config_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error arbiter bc access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error arbiter bc access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error arbiter bc access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error arbiter bc access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error arbiter bc access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error arbiter bc access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error arbiter bc access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error arbiter bc access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error arbiter bc access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error arbiter bc access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mcbe error arbiter bc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Mask Interrupt of mcbe error arbiter bc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mcbe_error_arbiter_bc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt stream crossbar error invalid configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Stream crossbar: Mask Interrupt of stream crossbar error invalid configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_stream_crossbar_error_invalid_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_stream_crossbar_error_invalid_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_FAULT_O_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_FAULT_O_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_FAULT_O_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_FAULT_O_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame repeat sensor 1 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 1: Mask Interrupt of frame repeat sensor 1 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_1_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_1_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame repeat sensor 1 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 1: Mask Interrupt of frame repeat sensor 1 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_1_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_1_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt metering hist 1 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 1: Mask Interrupt of metering hist 1 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_metering_hist_1_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_metering_hist_1_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_FAULT_O_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_FAULT_O_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_FAULT_O_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_FAULT_O_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame repeat sensor 2 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 2: Mask Interrupt of frame repeat sensor 2 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_2_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_2_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame repeat sensor 2 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 2: Mask Interrupt of frame repeat sensor 2 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_2_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_2_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt metering hist 2 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 2: Mask Interrupt of metering hist 2 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_metering_hist_2_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_metering_hist_2_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_FAULT_O_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_FAULT_O_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_FAULT_O_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_FAULT_O_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame repeat sensor 3 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 3: Mask Interrupt of frame repeat sensor 3 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_3_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_3_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame repeat sensor 3 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 3: Mask Interrupt of frame repeat sensor 3 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_3_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_3_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt metering hist 3 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 3: Mask Interrupt of metering hist 3 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_metering_hist_3_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_metering_hist_3_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_FAULT_O_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_FAULT_O_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_FAULT_O_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_FAULT_O_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame repeat sensor 4 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 4: Mask Interrupt of frame repeat sensor 4 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_4_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_4_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame repeat sensor 4 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 4: Mask Interrupt of frame repeat sensor 4 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_REG_ADDR 0x1c9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_OFFSET 0x9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_4_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1c9c );
    system_isp_write_32( base + 0x1c9c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_sensor_4_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1c9c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt metering hist 4 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 4: Mask Interrupt of metering hist 4 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_metering_hist_4_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_metering_hist_4_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_FAULT_O_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_FAULT_O_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_FAULT_O_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_FAULT_O_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt input formatter parameter error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Input formatter: Mask Interrupt of input formatter parameter error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INPUT_FORMATTER_PARAMETER_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INPUT_FORMATTER_PARAMETER_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INPUT_FORMATTER_PARAMETER_ERROR_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INPUT_FORMATTER_PARAMETER_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INPUT_FORMATTER_PARAMETER_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INPUT_FORMATTER_PARAMETER_ERROR_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_input_formatter_parameter_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_input_formatter_parameter_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame stitch crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Mask Interrupt of frame stitch crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_stitch_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_stitch_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame stitch bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Mask Interrupt of frame stitch bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_stitch_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_stitch_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame stitch bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Mask Interrupt of frame stitch bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_stitch_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_stitch_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame stitch config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Mask Interrupt of frame stitch config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_stitch_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_stitch_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt fstitch1 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 line repeat detector: Mask Interrupt of fstitch1 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch1_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch1_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt fstitch1 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 line repeat detector: Mask Interrupt of fstitch1 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch1_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch1_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt fstitch1 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 delay line check: Mask Interrupt of fstitch1 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch1_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch1_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt fstitch2 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 line repeat detector: Mask Interrupt of fstitch2 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch2_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch2_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt fstitch2 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 line repeat detector: Mask Interrupt of fstitch2 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch2_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch2_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt fstitch2 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 delay line check: Mask Interrupt of fstitch2 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch2_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch2_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt fstitch3 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 line repeat detector: Mask Interrupt of fstitch3 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch3_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch3_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt fstitch3 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 line repeat detector: Mask Interrupt of fstitch3 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch3_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch3_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt fstitch3 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 delay line check: Mask Interrupt of fstitch3 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch3_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_fstitch3_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame repeat isp repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat isp: Mask Interrupt of frame repeat isp repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_isp_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_isp_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame repeat isp repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat isp: Mask Interrupt of frame repeat isp repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_isp_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_repeat_isp_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt gamma fesq config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gamma fesq: Mask Interrupt of gamma fesq config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_gamma_fesq_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_gamma_fesq_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt roi hist 1 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 1: Mask Interrupt of roi hist 1 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_roi_hist_1_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_roi_hist_1_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt roi hist 2 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 2: Mask Interrupt of roi hist 2 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_roi_hist_2_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_roi_hist_2_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt roi hist 3 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 3: Mask Interrupt of roi hist 3 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_roi_hist_3_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_roi_hist_3_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt roi hist 4 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 4: Mask Interrupt of roi hist 4 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_roi_hist_4_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_roi_hist_4_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt raw frontend crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Mask Interrupt of raw frontend crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt raw frontend bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Mask Interrupt of raw frontend bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt raw frontend bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Mask Interrupt of raw frontend bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt raw frontend config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Mask Interrupt of raw frontend config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt exp fifo error serializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask Interrupt of exp fifo error serializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_serializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_serializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt exp fifo error serializer output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask Interrupt of exp fifo error serializer output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_serializer_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_serializer_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt exp fifo error fifo in crc fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask Interrupt of exp fifo error fifo in crc fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_fifo_in_crc_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_fifo_in_crc_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt exp fifo error fifo in crc crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask Interrupt of exp fifo error fifo in crc crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_fifo_in_crc_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_fifo_in_crc_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt exp fifo error deserializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask Interrupt of exp fifo error deserializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1ca0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0xa0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_deserializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca0 );
    system_isp_write_32( base + 0x1ca0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_deserializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt exp fifo error deserializer geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Mask Interrupt of exp fifo error deserializer geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_deserializer_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_exp_fifo_error_deserializer_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt defect pixel config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Defect pixel: Mask Interrupt of defect pixel config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_defect_pixel_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_defect_pixel_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt sinter crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Mask Interrupt of sinter crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_sinter_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_sinter_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt sinter bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Mask Interrupt of sinter bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_sinter_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_sinter_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt sinter bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Mask Interrupt of sinter bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_sinter_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_sinter_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt sinter config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Mask Interrupt of sinter config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_sinter_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_sinter_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ca correction delay line checker delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction delay line checker: Mask Interrupt of ca correction delay line checker delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ca_correction_delay_line_checker_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ca_correction_delay_line_checker_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ca correction error range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Mask Interrupt of ca correction error range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_RANGE_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_RANGE_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_RANGE_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_RANGE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ca_correction_error_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ca_correction_error_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ca correction error cache
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Mask Interrupt of ca correction error cache.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_CACHE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_CACHE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_CACHE_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_CACHE_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_CACHE_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_CACHE_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ca_correction_error_cache_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ca_correction_error_cache_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ca correction error address
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Mask Interrupt of ca correction error address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_ADDRESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_ADDRESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_ADDRESS_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_ADDRESS_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_ADDRESS_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_ERROR_ADDRESS_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ca_correction_error_address_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ca_correction_error_address_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ca correction config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Mask Interrupt of ca correction config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ca_correction_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ca_correction_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt gamma besq config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gamma besq: Mask Interrupt of gamma besq config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_gamma_besq_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_gamma_besq_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt radial shading crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Mask Interrupt of radial shading crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_radial_shading_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_radial_shading_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt radial shading bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Mask Interrupt of radial shading bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_radial_shading_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_radial_shading_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt radial shading bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Mask Interrupt of radial shading bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_radial_shading_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_radial_shading_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt radial shading config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Mask Interrupt of radial shading config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_radial_shading_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_radial_shading_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt mesh shading config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mesh shading: Mask Interrupt of mesh shading config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_mesh_shading_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_mesh_shading_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt iridix error parameter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask Interrupt of iridix error parameter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_PARAMETER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_PARAMETER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_PARAMETER_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_PARAMETER_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_PARAMETER_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_PARAMETER_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_error_parameter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_error_parameter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt iridix error internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask Interrupt of iridix error internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_INTERNAL_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_INTERNAL_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_INTERNAL_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_ERROR_INTERNAL_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_error_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_error_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt iridix iridix error parameter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask Interrupt of iridix iridix error parameter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_PARAMETER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_PARAMETER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_PARAMETER_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_PARAMETER_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_PARAMETER_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_PARAMETER_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_iridix_error_parameter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_iridix_error_parameter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt iridix iridix error internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask Interrupt of iridix iridix error internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_INTERNAL_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_INTERNAL_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_INTERNAL_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_IRIDIX_ERROR_INTERNAL_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_iridix_error_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_iridix_error_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt iridix crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask Interrupt of iridix crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt iridix bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask Interrupt of iridix bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt iridix bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask Interrupt of iridix bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt iridix config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Mask Interrupt of iridix config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt antifog hist config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Antifog hist: Mask Interrupt of antifog hist config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_antifog_hist_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_antifog_hist_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic delay line checker delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic delay line checker: Mask Interrupt of demosaic delay line checker delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_delay_line_checker_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_delay_line_checker_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic line repeat detector: Mask Interrupt of demosaic line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic line repeat detector: Mask Interrupt of demosaic line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic rccc crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Mask Interrupt of demosaic rccc crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rccc_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rccc_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic rccc bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Mask Interrupt of demosaic rccc bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rccc_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rccc_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic rccc bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Mask Interrupt of demosaic rccc bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1ca4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0xa4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rccc_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca4 );
    system_isp_write_32( base + 0x1ca4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rccc_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic rccc config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Mask Interrupt of demosaic rccc config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rccc_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rccc_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Mask Interrupt of demosaic crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Mask Interrupt of demosaic bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Mask Interrupt of demosaic bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Mask Interrupt of demosaic config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic rgbir cfg calc fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask Interrupt of demosaic rgbir cfg calc fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_cfg_calc_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_cfg_calc_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic rgbir demosaic rgbir cfg calc fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask Interrupt of demosaic rgbir demosaic rgbir cfg calc fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_demosaic_rgbir_cfg_calc_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_demosaic_rgbir_cfg_calc_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic rgbir crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask Interrupt of demosaic rgbir crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic rgbir bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask Interrupt of demosaic rgbir bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic rgbir bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask Interrupt of demosaic rgbir bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt demosaic rgbir config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Mask Interrupt of demosaic rgbir config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_demosaic_rgbir_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_FAULT_O_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_FAULT_O_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_FAULT_O_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_FAULT_O_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt out format crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Mask Interrupt of out format crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt out format bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Mask Interrupt of out format bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt out format bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Mask Interrupt of out format bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt out format config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Mask Interrupt of out format config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_FAULT_O_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_FAULT_O_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_FAULT_O_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_FAULT_O_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_FAULT_O_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_FAULT_O_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_FAULT_O_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_FAULT_O_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_FAULT_O_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_FAULT_O_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_FAULT_O_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_FAULT_O_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt crc check 1 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 1: Mask Interrupt of crc check 1 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_1_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_1_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_1_FAULT_CRC_MISMATCH_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_1_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_1_FAULT_CRC_MISMATCH_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_1_FAULT_CRC_MISMATCH_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_1_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_1_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt crc check 2 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 2: Mask Interrupt of crc check 2 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_2_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_2_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_2_FAULT_CRC_MISMATCH_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_2_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_2_FAULT_CRC_MISMATCH_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_2_FAULT_CRC_MISMATCH_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_2_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_2_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt crc check 3 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 3: Mask Interrupt of crc check 3 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_3_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_3_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_3_FAULT_CRC_MISMATCH_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_3_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_3_FAULT_CRC_MISMATCH_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_3_FAULT_CRC_MISMATCH_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_3_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_3_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt crc check a1 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a1: Mask Interrupt of crc check a1 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_a1_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_a1_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt crc check a2 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a2: Mask Interrupt of crc check a2 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_a2_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_a2_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt crc check a3 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a3: Mask Interrupt of crc check a3 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_a3_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_crc_check_a3_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt pc fifo error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask Interrupt of pc fifo error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt pc fifo error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask Interrupt of pc fifo error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt pc fifo error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask Interrupt of pc fifo error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt pc fifo error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask Interrupt of pc fifo error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt pc fifo error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask Interrupt of pc fifo error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt pc fifo error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask Interrupt of pc fifo error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt pc fifo error synchronizer framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask Interrupt of pc fifo error synchronizer framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_REG_ADDR 0x1ca8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_OFFSET 0xa8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_synchronizer_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ca8 );
    system_isp_write_32( base + 0x1ca8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_synchronizer_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ca8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt pc fifo error combiner framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask Interrupt of pc fifo error combiner framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_FRAMING_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_FRAMING_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_FRAMING_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_FRAMING_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_combiner_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_combiner_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt pc fifo error combiner configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask Interrupt of pc fifo error combiner configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_combiner_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_combiner_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt pc fifo error deserializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask Interrupt of pc fifo error deserializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_deserializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_deserializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt pc fifo error deserializer geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Mask Interrupt of pc fifo error deserializer geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_deserializer_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_pc_fifo_error_deserializer_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt metering aexp config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering aexp: Mask Interrupt of metering aexp config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_metering_aexp_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_metering_aexp_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt metering awb config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering awb: Mask Interrupt of metering awb config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_metering_awb_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_metering_awb_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt uroi config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Uroi: Mask Interrupt of uroi config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_UROI_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_UROI_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_UROI_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_UROI_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_UROI_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_UROI_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_uroi_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_uroi_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt raw frontend line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend line repeat detector: Mask Interrupt of raw frontend line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt raw frontend line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend line repeat detector: Mask Interrupt of raw frontend line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt raw frontend delay line5 check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend delay line5 check: Mask Interrupt of raw frontend delay line5 check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_delay_line5_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_raw_frontend_delay_line5_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt iridix delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix delay line check: Mask Interrupt of iridix delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_iridix_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt out format yuv uv delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format yuv uv delay line check: Mask Interrupt of out format yuv uv delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_yuv_uv_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_yuv_uv_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt out format uv delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format uv delay line check: Mask Interrupt of out format uv delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_uv_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_uv_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt out format ab delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format ab delay line check: Mask Interrupt of out format ab delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_ab_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_out_format_ab_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt sinter delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter delay line check: Mask Interrupt of sinter delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_sinter_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_sinter_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt interrupts error interrupt double
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Interrupts: Mask Interrupt of interrupts error interrupt double.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_interrupts_error_interrupt_double_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_interrupts_error_interrupt_double_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 1 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Mask Interrupt of frame check sensor 1 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_1_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1cac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0xac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cac );
    system_isp_write_32( base + 0x1cac, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cac ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 2 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Mask Interrupt of frame check sensor 2 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_2_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 3 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Mask Interrupt of frame check sensor 3 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_3_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check sensor 4 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Mask Interrupt of frame check sensor 4 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_REG_ADDR 0x1cb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_OFFSET 0xb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb0 );
    system_isp_write_32( base + 0x1cb0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_sensor_4_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Mask Interrupt of frame check isp error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp crop error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Mask Interrupt of frame check isp crop error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_crop_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0xb4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb4 );
    system_isp_write_32( base + 0x1cb4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 2 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Mask Interrupt of frame check isp out 2 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_2_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 3 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Mask Interrupt of frame check isp out 3 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_3_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 17
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 19
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 21
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 22
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 25
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 26
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt frame check isp out 1 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Mask Interrupt of frame check isp out 1 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_FIELD_OFFSET 27
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_frame_check_isp_out_1_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig pclk2 top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig pclk2 top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk2_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk2_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig pclk2 top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig pclk2 top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 29
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk2_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk2_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig pclk top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig pclk top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig pclk top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig pclk top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1cb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_OFFSET 0xb8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cb8 );
    system_isp_write_32( base + 0x1cb8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_pclk_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cb8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig vclk top fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig vclk top fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_vclk_top_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_vclk_top_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig vclk top fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig vclk top fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_FIELD_OFFSET 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_vclk_top_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_vclk_top_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig frontend top fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig frontend top fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 2
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_frontend_top_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_frontend_top_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig frontend top fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig frontend top fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_FIELD_OFFSET 3
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_frontend_top_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_frontend_top_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic sconfig top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic sconfig top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 5
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_sconfig_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic serror metering arb access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic serror metering arb access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 6
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_metering_arb_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_metering_arb_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic serror metering arb access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic serror metering arb access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_metering_arb_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_metering_arb_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic serror arb hist access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic serror arb hist access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic serror arb hist access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic serror arb hist access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 9
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic serror arb hist access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic serror arb hist access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic serror arb hist access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic serror arb hist access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 11
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic serror arb hist access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic serror arb hist access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 12
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic serror arb hist access out of range 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic serror arb hist access out of range (bit 5).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_FIELD_OFFSET 13
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic serror arb hist access out of range 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic serror arb hist access out of range (bit 6).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_FIELD_OFFSET 14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic serror arb hist access out of range 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic serror arb hist access out of range (bit 7).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Mask Interrupt ic serror arb hist access out of range 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Mask Interrupt of ic serror arb hist access out of range (bit 8).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_REG_ADDR 0x1cbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_OFFSET 0xbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_MASK_INTERRUPT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cbc );
    system_isp_write_32( base + 0x1cbc, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_mask_interrupt_ic_serror_arb_hist_access_out_of_range_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cbc ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig pclk2 top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig pclk2 top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1cc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0xc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk2_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc0 );
    system_isp_write_32( base + 0x1cc0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk2_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig pclk2 top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig pclk2 top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1cc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0xc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk2_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc0 );
    system_isp_write_32( base + 0x1cc0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk2_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig pclk2 top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig pclk2 top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1cc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_OFFSET 0xc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk2_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc0 );
    system_isp_write_32( base + 0x1cc0, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk2_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc0 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig pclk2 top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig pclk2 top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1cc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_OFFSET 0xc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk2_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc0 );
    system_isp_write_32( base + 0x1cc0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk2_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig pclk top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig pclk top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1cc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0xc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc0 );
    system_isp_write_32( base + 0x1cc0, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc0 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig pclk top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig pclk top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1cc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0xc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc0 );
    system_isp_write_32( base + 0x1cc0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig pclk top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig pclk top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1cc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_OFFSET 0xc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc0 );
    system_isp_write_32( base + 0x1cc0, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc0 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig pclk top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig pclk top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1cc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_OFFSET 0xc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc0 );
    system_isp_write_32( base + 0x1cc0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1cc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0xc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc4 );
    system_isp_write_32( base + 0x1cc4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig top apb fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig top apb fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1cc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_OFFSET 0xc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_top_apb_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc4 );
    system_isp_write_32( base + 0x1cc4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_top_apb_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1cc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_OFFSET 0xc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc4 );
    system_isp_write_32( base + 0x1cc4, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc4 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig top apb fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig top apb fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_REG_ADDR 0x1cc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_OFFSET 0xc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_APB_FAULT_H_RVALID_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_top_apb_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc4 );
    system_isp_write_32( base + 0x1cc4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_top_apb_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1cc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0xc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc4 );
    system_isp_write_32( base + 0x1cc4, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc4 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1cc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0xc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc4 );
    system_isp_write_32( base + 0x1cc4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1cc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0xc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc4 );
    system_isp_write_32( base + 0x1cc4, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc4 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1cc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0xc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc4 );
    system_isp_write_32( base + 0x1cc4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo in crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo in crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1cc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_OFFSET 0xc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc8 );
    system_isp_write_32( base + 0x1cc8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo in crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo in crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1cc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_OFFSET 0xc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc8 );
    system_isp_write_32( base + 0x1cc8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo in crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo in crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1cc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0xc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc8 );
    system_isp_write_32( base + 0x1cc8, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc8 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo in crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo in crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1cc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0xc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc8 );
    system_isp_write_32( base + 0x1cc8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer1 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer1 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_BRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_BRESP_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_BRESP_REG_ADDR 0x1cc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_BRESP_OFFSET 0xc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_BRESP_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc8 );
    system_isp_write_32( base + 0x1cc8, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc8 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer1 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer1 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_BRESP_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_BRESP_REG_ADDR 0x1cc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_BRESP_OFFSET 0xc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_BRESP_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc8 );
    system_isp_write_32( base + 0x1cc8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer1 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer1 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_REG_ADDR 0x1cc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_OFFSET 0xc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc8 );
    system_isp_write_32( base + 0x1cc8, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc8 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer1 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer1 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_REG_ADDR 0x1cc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_OFFSET 0xc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cc8 );
    system_isp_write_32( base + 0x1cc8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cc8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer1 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer1 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_REG_ADDR 0x1ccc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_OFFSET 0xcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ccc );
    system_isp_write_32( base + 0x1ccc, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ccc ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer1 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer1 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_REG_ADDR 0x1ccc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_OFFSET 0xcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ccc );
    system_isp_write_32( base + 0x1ccc, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ccc ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer1 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer1 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_REG_ADDR 0x1ccc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_OFFSET 0xcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ccc );
    system_isp_write_32( base + 0x1ccc, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ccc ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer1 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer1 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_REG_ADDR 0x1ccc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_OFFSET 0xcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ccc );
    system_isp_write_32( base + 0x1ccc, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ccc ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_REG_ADDR 0x1ccc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_OFFSET 0xcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ccc );
    system_isp_write_32( base + 0x1ccc, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ccc ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_USER_INTFC_REG_ADDR 0x1ccc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_USER_INTFC_OFFSET 0xcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ccc );
    system_isp_write_32( base + 0x1ccc, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ccc ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_REG_ADDR 0x1ccc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_OFFSET 0xcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ccc );
    system_isp_write_32( base + 0x1ccc, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ccc ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_REG_ADDR 0x1ccc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_OFFSET 0xcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ccc );
    system_isp_write_32( base + 0x1ccc, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ccc ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1cd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_OFFSET 0xd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd0 );
    system_isp_write_32( base + 0x1cd0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1cd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_OFFSET 0xd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd0 );
    system_isp_write_32( base + 0x1cd0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer1 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer1 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_REG_ADDR 0x1cd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_OFFSET 0xd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd0 );
    system_isp_write_32( base + 0x1cd0, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer1_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd0 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer1 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer1 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_REG_ADDR 0x1cd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_OFFSET 0xd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd0 );
    system_isp_write_32( base + 0x1cd0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer1_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fb manager1 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fb manager1 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_INTERNAL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_INTERNAL_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_INTERNAL_REG_ADDR 0x1cd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_INTERNAL_OFFSET 0xd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_INTERNAL_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager1_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd0 );
    system_isp_write_32( base + 0x1cd0, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager1_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd0 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fb manager1 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fb manager1 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_INTERNAL_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_INTERNAL_REG_ADDR 0x1cd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_INTERNAL_OFFSET 0xd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_INTERNAL_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager1_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd0 );
    system_isp_write_32( base + 0x1cd0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager1_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fb manager1 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fb manager1 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_REG_ADDR 0x1cd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_OFFSET 0xd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager1_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd0 );
    system_isp_write_32( base + 0x1cd0, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager1_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd0 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fb manager1 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fb manager1 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_REG_ADDR 0x1cd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_OFFSET 0xd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager1_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd0 );
    system_isp_write_32( base + 0x1cd0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager1_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1cd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0xd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd4 );
    system_isp_write_32( base + 0x1cd4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1cd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0xd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd4 );
    system_isp_write_32( base + 0x1cd4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1cd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0xd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd4 );
    system_isp_write_32( base + 0x1cd4, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd4 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1cd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0xd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd4 );
    system_isp_write_32( base + 0x1cd4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1cd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0xd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd4 );
    system_isp_write_32( base + 0x1cd4, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd4 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1cd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0xd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd4 );
    system_isp_write_32( base + 0x1cd4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1cd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0xd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd4 );
    system_isp_write_32( base + 0x1cd4, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd4 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1cd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0xd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd4 );
    system_isp_write_32( base + 0x1cd4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer2 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer2 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_BRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_BRESP_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_BRESP_REG_ADDR 0x1cd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_BRESP_OFFSET 0xd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_BRESP_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd8 );
    system_isp_write_32( base + 0x1cd8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer2 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer2 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_BRESP_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_BRESP_REG_ADDR 0x1cd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_BRESP_OFFSET 0xd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_BRESP_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd8 );
    system_isp_write_32( base + 0x1cd8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer2 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer2 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_REG_ADDR 0x1cd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_OFFSET 0xd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd8 );
    system_isp_write_32( base + 0x1cd8, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd8 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer2 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer2 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_REG_ADDR 0x1cd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_OFFSET 0xd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd8 );
    system_isp_write_32( base + 0x1cd8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer2 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer2 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_REG_ADDR 0x1cd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_OFFSET 0xd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd8 );
    system_isp_write_32( base + 0x1cd8, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd8 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer2 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer2 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_REG_ADDR 0x1cd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_OFFSET 0xd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd8 );
    system_isp_write_32( base + 0x1cd8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer2 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer2 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_REG_ADDR 0x1cd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_OFFSET 0xd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd8 );
    system_isp_write_32( base + 0x1cd8, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd8 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer2 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer2 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_REG_ADDR 0x1cd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_OFFSET 0xd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cd8 );
    system_isp_write_32( base + 0x1cd8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cd8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_REG_ADDR 0x1cdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_OFFSET 0xdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cdc );
    system_isp_write_32( base + 0x1cdc, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cdc ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_USER_INTFC_REG_ADDR 0x1cdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_USER_INTFC_OFFSET 0xdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cdc );
    system_isp_write_32( base + 0x1cdc, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cdc ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_REG_ADDR 0x1cdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_OFFSET 0xdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cdc );
    system_isp_write_32( base + 0x1cdc, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cdc ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_REG_ADDR 0x1cdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_OFFSET 0xdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cdc );
    system_isp_write_32( base + 0x1cdc, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cdc ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1cdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_OFFSET 0xdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cdc );
    system_isp_write_32( base + 0x1cdc, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cdc ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1cdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_OFFSET 0xdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cdc );
    system_isp_write_32( base + 0x1cdc, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cdc ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer2 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer2 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_REG_ADDR 0x1cdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_OFFSET 0xdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cdc );
    system_isp_write_32( base + 0x1cdc, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer2_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cdc ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer2 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer2 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_REG_ADDR 0x1cdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_OFFSET 0xdc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cdc );
    system_isp_write_32( base + 0x1cdc, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer2_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cdc ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fb manager2 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fb manager2 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_INTERNAL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_INTERNAL_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_INTERNAL_REG_ADDR 0x1ce0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_INTERNAL_OFFSET 0xe0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_INTERNAL_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager2_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce0 );
    system_isp_write_32( base + 0x1ce0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager2_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fb manager2 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fb manager2 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_INTERNAL_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_INTERNAL_REG_ADDR 0x1ce0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_INTERNAL_OFFSET 0xe0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_INTERNAL_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager2_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce0 );
    system_isp_write_32( base + 0x1ce0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager2_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fb manager2 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fb manager2 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_REG_ADDR 0x1ce0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_OFFSET 0xe0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager2_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce0 );
    system_isp_write_32( base + 0x1ce0, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager2_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce0 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fb manager2 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fb manager2 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_REG_ADDR 0x1ce0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_OFFSET 0xe0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager2_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce0 );
    system_isp_write_32( base + 0x1ce0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager2_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error serializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error serializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1ce0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0xe0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce0 );
    system_isp_write_32( base + 0x1ce0, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce0 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error serializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error serializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1ce0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0xe0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce0 );
    system_isp_write_32( base + 0x1ce0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error serializer3 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error serializer3 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_REG_ADDR 0x1ce0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_OFFSET 0xe0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer3_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce0 );
    system_isp_write_32( base + 0x1ce0, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer3_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce0 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error serializer3 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error serializer3 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_REG_ADDR 0x1ce0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_OFFSET 0xe0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer3_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce0 );
    system_isp_write_32( base + 0x1ce0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer3_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo in crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo in crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1ce4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_OFFSET 0xe4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce4 );
    system_isp_write_32( base + 0x1ce4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo in crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo in crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1ce4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_OFFSET 0xe4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce4 );
    system_isp_write_32( base + 0x1ce4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo in crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo in crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1ce4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0xe4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce4 );
    system_isp_write_32( base + 0x1ce4, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce4 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo in crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo in crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1ce4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0xe4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce4 );
    system_isp_write_32( base + 0x1ce4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer3 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer3 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_BRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_BRESP_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_BRESP_REG_ADDR 0x1ce4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_BRESP_OFFSET 0xe4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_BRESP_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce4 );
    system_isp_write_32( base + 0x1ce4, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce4 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer3 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer3 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_BRESP_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_BRESP_REG_ADDR 0x1ce4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_BRESP_OFFSET 0xe4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_BRESP_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce4 );
    system_isp_write_32( base + 0x1ce4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer3 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer3 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_REG_ADDR 0x1ce4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_OFFSET 0xe4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce4 );
    system_isp_write_32( base + 0x1ce4, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce4 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer3 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer3 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_REG_ADDR 0x1ce4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_OFFSET 0xe4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce4 );
    system_isp_write_32( base + 0x1ce4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer3 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer3 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_REG_ADDR 0x1ce8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_OFFSET 0xe8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce8 );
    system_isp_write_32( base + 0x1ce8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer3 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer3 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_REG_ADDR 0x1ce8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_OFFSET 0xe8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce8 );
    system_isp_write_32( base + 0x1ce8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer3 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer3 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_REG_ADDR 0x1ce8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_OFFSET 0xe8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce8 );
    system_isp_write_32( base + 0x1ce8, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce8 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer3 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer3 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_REG_ADDR 0x1ce8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_OFFSET 0xe8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce8 );
    system_isp_write_32( base + 0x1ce8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_REG_ADDR 0x1ce8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_OFFSET 0xe8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce8 );
    system_isp_write_32( base + 0x1ce8, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce8 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_USER_INTFC_REG_ADDR 0x1ce8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_USER_INTFC_OFFSET 0xe8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce8 );
    system_isp_write_32( base + 0x1ce8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_REG_ADDR 0x1ce8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_OFFSET 0xe8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce8 );
    system_isp_write_32( base + 0x1ce8, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce8 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_REG_ADDR 0x1ce8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_OFFSET 0xe8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ce8 );
    system_isp_write_32( base + 0x1ce8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ce8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1cec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_OFFSET 0xec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cec );
    system_isp_write_32( base + 0x1cec, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cec ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1cec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_OFFSET 0xec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cec );
    system_isp_write_32( base + 0x1cec, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cec ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer3 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer3 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_REG_ADDR 0x1cec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_OFFSET 0xec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cec );
    system_isp_write_32( base + 0x1cec, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer3_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cec ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer3 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer3 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_REG_ADDR 0x1cec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_OFFSET 0xec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cec );
    system_isp_write_32( base + 0x1cec, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer3_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cec ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fb manager3 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fb manager3 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_INTERNAL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_INTERNAL_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_INTERNAL_REG_ADDR 0x1cec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_INTERNAL_OFFSET 0xec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_INTERNAL_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager3_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cec );
    system_isp_write_32( base + 0x1cec, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager3_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cec ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fb manager3 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fb manager3 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_INTERNAL_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_INTERNAL_REG_ADDR 0x1cec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_INTERNAL_OFFSET 0xec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_INTERNAL_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager3_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cec );
    system_isp_write_32( base + 0x1cec, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager3_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cec ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fb manager3 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fb manager3 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_REG_ADDR 0x1cec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_OFFSET 0xec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager3_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cec );
    system_isp_write_32( base + 0x1cec, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager3_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cec ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fb manager3 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fb manager3 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_REG_ADDR 0x1cec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_OFFSET 0xec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager3_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cec );
    system_isp_write_32( base + 0x1cec, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager3_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cec ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error serializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error serializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1cf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0xf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf0 );
    system_isp_write_32( base + 0x1cf0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error serializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error serializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1cf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0xf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf0 );
    system_isp_write_32( base + 0x1cf0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error serializer4 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error serializer4 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_REG_ADDR 0x1cf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_OFFSET 0xf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer4_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf0 );
    system_isp_write_32( base + 0x1cf0, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_serializer4_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf0 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error serializer4 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error serializer4 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_REG_ADDR 0x1cf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_OFFSET 0xf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer4_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf0 );
    system_isp_write_32( base + 0x1cf0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_serializer4_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo in crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo in crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1cf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_OFFSET 0xf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf0 );
    system_isp_write_32( base + 0x1cf0, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf0 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo in crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo in crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1cf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_OFFSET 0xf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf0 );
    system_isp_write_32( base + 0x1cf0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo in crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo in crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1cf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0xf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf0 );
    system_isp_write_32( base + 0x1cf0, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_in_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf0 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo in crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo in crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1cf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0xf0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf0 );
    system_isp_write_32( base + 0x1cf0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_in_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer4 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer4 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_BRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_BRESP_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_BRESP_REG_ADDR 0x1cf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_BRESP_OFFSET 0xf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_BRESP_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf4 );
    system_isp_write_32( base + 0x1cf4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer4 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer4 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_BRESP_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_BRESP_REG_ADDR 0x1cf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_BRESP_OFFSET 0xf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_BRESP_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf4 );
    system_isp_write_32( base + 0x1cf4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer4 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer4 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_REG_ADDR 0x1cf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_OFFSET 0xf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf4 );
    system_isp_write_32( base + 0x1cf4, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf4 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer4 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer4 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_REG_ADDR 0x1cf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_OFFSET 0xf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf4 );
    system_isp_write_32( base + 0x1cf4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer4 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer4 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_REG_ADDR 0x1cf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_OFFSET 0xf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf4 );
    system_isp_write_32( base + 0x1cf4, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf4 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer4 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer4 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_REG_ADDR 0x1cf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_OFFSET 0xf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf4 );
    system_isp_write_32( base + 0x1cf4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer4 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer4 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_REG_ADDR 0x1cf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_OFFSET 0xf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf4 );
    system_isp_write_32( base + 0x1cf4, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf4 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer4 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer4 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_REG_ADDR 0x1cf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_OFFSET 0xf4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf4 );
    system_isp_write_32( base + 0x1cf4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_REG_ADDR 0x1cf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_OFFSET 0xf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf8 );
    system_isp_write_32( base + 0x1cf8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_USER_INTFC_REG_ADDR 0x1cf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_USER_INTFC_OFFSET 0xf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf8 );
    system_isp_write_32( base + 0x1cf8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_REG_ADDR 0x1cf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_OFFSET 0xf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf8 );
    system_isp_write_32( base + 0x1cf8, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf8 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_REG_ADDR 0x1cf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_OFFSET 0xf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf8 );
    system_isp_write_32( base + 0x1cf8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1cf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_OFFSET 0xf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf8 );
    system_isp_write_32( base + 0x1cf8, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf8 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1cf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_OFFSET 0xf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf8 );
    system_isp_write_32( base + 0x1cf8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi writer4 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi writer4 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_REG_ADDR 0x1cf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_OFFSET 0xf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf8 );
    system_isp_write_32( base + 0x1cf8, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_writer4_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf8 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi writer4 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi writer4 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_REG_ADDR 0x1cf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_OFFSET 0xf8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cf8 );
    system_isp_write_32( base + 0x1cf8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_writer4_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cf8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fb manager4 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fb manager4 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_INTERNAL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_INTERNAL_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_INTERNAL_REG_ADDR 0x1cfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_INTERNAL_OFFSET 0xfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_INTERNAL_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager4_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cfc );
    system_isp_write_32( base + 0x1cfc, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager4_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cfc ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fb manager4 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fb manager4 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_INTERNAL_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_INTERNAL_REG_ADDR 0x1cfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_INTERNAL_OFFSET 0xfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_INTERNAL_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager4_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cfc );
    system_isp_write_32( base + 0x1cfc, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager4_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cfc ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fb manager4 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fb manager4 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_REG_ADDR 0x1cfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_OFFSET 0xfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager4_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cfc );
    system_isp_write_32( base + 0x1cfc, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fb_manager4_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cfc ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fb manager4 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fb manager4 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_REG_ADDR 0x1cfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_OFFSET 0xfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager4_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cfc );
    system_isp_write_32( base + 0x1cfc, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fb_manager4_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cfc ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader1 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader1 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_REG_ADDR 0x1cfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_OFFSET 0xfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_ARMAXWAIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cfc );
    system_isp_write_32( base + 0x1cfc, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cfc ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader1 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader1 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_ARMAXWAIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_ARMAXWAIT_REG_ADDR 0x1cfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_ARMAXWAIT_OFFSET 0xfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_ARMAXWAIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cfc );
    system_isp_write_32( base + 0x1cfc, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cfc ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader1 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader1 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RRESP_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RRESP_REG_ADDR 0x1cfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RRESP_OFFSET 0xfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RRESP_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cfc );
    system_isp_write_32( base + 0x1cfc, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cfc ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader1 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader1 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RRESP_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RRESP_REG_ADDR 0x1cfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RRESP_OFFSET 0xfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RRESP_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1cfc );
    system_isp_write_32( base + 0x1cfc, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1cfc ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader1 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader1 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_REG_ADDR 0x1d00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_OFFSET 0x100
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d00 );
    system_isp_write_32( base + 0x1d00, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d00 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader1 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader1 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_REG_ADDR 0x1d00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_OFFSET 0x100
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_RXNFR_OSTAND_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d00 );
    system_isp_write_32( base + 0x1d00, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d00 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_USER_INTFC_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_USER_INTFC_REG_ADDR 0x1d00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_USER_INTFC_OFFSET 0x100
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_USER_INTFC_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d00 );
    system_isp_write_32( base + 0x1d00, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d00 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_USER_INTFC_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_USER_INTFC_REG_ADDR 0x1d00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_USER_INTFC_OFFSET 0x100
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_USER_INTFC_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d00 );
    system_isp_write_32( base + 0x1d00, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d00 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_REG_ADDR 0x1d00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_OFFSET 0x100
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d00 );
    system_isp_write_32( base + 0x1d00, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d00 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_REG_ADDR 0x1d00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_OFFSET 0x100
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_FULL_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d00 );
    system_isp_write_32( base + 0x1d00, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d00 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1d00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_OFFSET 0x100
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d00 );
    system_isp_write_32( base + 0x1d00, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d00 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1d00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_OFFSET 0x100
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d00 );
    system_isp_write_32( base + 0x1d00, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d00 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo out crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo out crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1d04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x104
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d04 );
    system_isp_write_32( base + 0x1d04, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d04 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo out crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo out crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1d04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x104
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d04 );
    system_isp_write_32( base + 0x1d04, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d04 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo out crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo out crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x104
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d04 );
    system_isp_write_32( base + 0x1d04, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d04 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo out crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo out crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x104
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d04 );
    system_isp_write_32( base + 0x1d04, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d04 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1d04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x104
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d04 );
    system_isp_write_32( base + 0x1d04, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d04 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1d04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x104
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d04 );
    system_isp_write_32( base + 0x1d04, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d04 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer1 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer1 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_REG_ADDR 0x1d04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_OFFSET 0x104
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_GEOMETRY_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer1_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d04 );
    system_isp_write_32( base + 0x1d04, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer1_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d04 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer1 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer1 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_GEOMETRY_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_GEOMETRY_REG_ADDR 0x1d04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_GEOMETRY_OFFSET 0x104
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_GEOMETRY_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer1_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d04 );
    system_isp_write_32( base + 0x1d04, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer1_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d04 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer1 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer1 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_REG_ADDR 0x1d08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_OFFSET 0x108
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER1_UNDERRUN_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer1_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d08 );
    system_isp_write_32( base + 0x1d08, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer1_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d08 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer1 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer1 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNDERRUN_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNDERRUN_REG_ADDR 0x1d08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNDERRUN_OFFSET 0x108
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER1_UNDERRUN_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer1_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d08 );
    system_isp_write_32( base + 0x1d08, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer1_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d08 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader2 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader2 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_REG_ADDR 0x1d08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_OFFSET 0x108
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_ARMAXWAIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d08 );
    system_isp_write_32( base + 0x1d08, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d08 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader2 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader2 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_ARMAXWAIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_ARMAXWAIT_REG_ADDR 0x1d08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_ARMAXWAIT_OFFSET 0x108
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_ARMAXWAIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d08 );
    system_isp_write_32( base + 0x1d08, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d08 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader2 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader2 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RRESP_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RRESP_REG_ADDR 0x1d08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RRESP_OFFSET 0x108
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RRESP_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d08 );
    system_isp_write_32( base + 0x1d08, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d08 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader2 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader2 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RRESP_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RRESP_REG_ADDR 0x1d08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RRESP_OFFSET 0x108
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RRESP_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d08 );
    system_isp_write_32( base + 0x1d08, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d08 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader2 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader2 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_REG_ADDR 0x1d08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_OFFSET 0x108
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d08 );
    system_isp_write_32( base + 0x1d08, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d08 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader2 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader2 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_REG_ADDR 0x1d08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_OFFSET 0x108
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_RXNFR_OSTAND_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d08 );
    system_isp_write_32( base + 0x1d08, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d08 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_USER_INTFC_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_USER_INTFC_REG_ADDR 0x1d0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_USER_INTFC_OFFSET 0x10c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_USER_INTFC_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d0c );
    system_isp_write_32( base + 0x1d0c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d0c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_USER_INTFC_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_USER_INTFC_REG_ADDR 0x1d0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_USER_INTFC_OFFSET 0x10c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_USER_INTFC_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d0c );
    system_isp_write_32( base + 0x1d0c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d0c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_REG_ADDR 0x1d0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_OFFSET 0x10c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d0c );
    system_isp_write_32( base + 0x1d0c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d0c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_REG_ADDR 0x1d0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_OFFSET 0x10c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_FULL_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d0c );
    system_isp_write_32( base + 0x1d0c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d0c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1d0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_OFFSET 0x10c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d0c );
    system_isp_write_32( base + 0x1d0c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d0c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1d0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_OFFSET 0x10c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d0c );
    system_isp_write_32( base + 0x1d0c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d0c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo out crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo out crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1d0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x10c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d0c );
    system_isp_write_32( base + 0x1d0c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d0c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo out crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo out crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1d0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x10c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d0c );
    system_isp_write_32( base + 0x1d0c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d0c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo out crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo out crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x110
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d10 );
    system_isp_write_32( base + 0x1d10, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d10 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo out crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo out crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x110
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d10 );
    system_isp_write_32( base + 0x1d10, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d10 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1d10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x110
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d10 );
    system_isp_write_32( base + 0x1d10, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d10 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1d10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x110
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d10 );
    system_isp_write_32( base + 0x1d10, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d10 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer2 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer2 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_REG_ADDR 0x1d10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_OFFSET 0x110
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_GEOMETRY_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer2_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d10 );
    system_isp_write_32( base + 0x1d10, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer2_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d10 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer2 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer2 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_GEOMETRY_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_GEOMETRY_REG_ADDR 0x1d10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_GEOMETRY_OFFSET 0x110
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_GEOMETRY_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer2_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d10 );
    system_isp_write_32( base + 0x1d10, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer2_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d10 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer2 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer2 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_REG_ADDR 0x1d10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_OFFSET 0x110
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER2_UNDERRUN_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer2_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d10 );
    system_isp_write_32( base + 0x1d10, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer2_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d10 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer2 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer2 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNDERRUN_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNDERRUN_REG_ADDR 0x1d10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNDERRUN_OFFSET 0x110
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER2_UNDERRUN_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer2_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d10 );
    system_isp_write_32( base + 0x1d10, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer2_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d10 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader3 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader3 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_REG_ADDR 0x1d14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_OFFSET 0x114
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_ARMAXWAIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d14 );
    system_isp_write_32( base + 0x1d14, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d14 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader3 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader3 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_ARMAXWAIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_ARMAXWAIT_REG_ADDR 0x1d14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_ARMAXWAIT_OFFSET 0x114
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_ARMAXWAIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d14 );
    system_isp_write_32( base + 0x1d14, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d14 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader3 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader3 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RRESP_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RRESP_REG_ADDR 0x1d14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RRESP_OFFSET 0x114
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RRESP_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d14 );
    system_isp_write_32( base + 0x1d14, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d14 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader3 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader3 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RRESP_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RRESP_REG_ADDR 0x1d14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RRESP_OFFSET 0x114
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RRESP_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d14 );
    system_isp_write_32( base + 0x1d14, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d14 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader3 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader3 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_REG_ADDR 0x1d14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_OFFSET 0x114
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d14 );
    system_isp_write_32( base + 0x1d14, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d14 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader3 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader3 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_REG_ADDR 0x1d14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_OFFSET 0x114
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_RXNFR_OSTAND_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d14 );
    system_isp_write_32( base + 0x1d14, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d14 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_USER_INTFC_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_USER_INTFC_REG_ADDR 0x1d14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_USER_INTFC_OFFSET 0x114
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_USER_INTFC_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d14 );
    system_isp_write_32( base + 0x1d14, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d14 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_USER_INTFC_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_USER_INTFC_REG_ADDR 0x1d14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_USER_INTFC_OFFSET 0x114
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_USER_INTFC_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d14 );
    system_isp_write_32( base + 0x1d14, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d14 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_REG_ADDR 0x1d18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_OFFSET 0x118
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d18 );
    system_isp_write_32( base + 0x1d18, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d18 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_REG_ADDR 0x1d18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_OFFSET 0x118
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_FULL_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d18 );
    system_isp_write_32( base + 0x1d18, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d18 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1d18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_OFFSET 0x118
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d18 );
    system_isp_write_32( base + 0x1d18, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d18 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1d18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_OFFSET 0x118
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d18 );
    system_isp_write_32( base + 0x1d18, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d18 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo out crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo out crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1d18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x118
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d18 );
    system_isp_write_32( base + 0x1d18, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d18 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo out crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo out crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1d18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x118
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d18 );
    system_isp_write_32( base + 0x1d18, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d18 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo out crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo out crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x118
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d18 );
    system_isp_write_32( base + 0x1d18, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d18 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo out crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo out crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x118
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d18 );
    system_isp_write_32( base + 0x1d18, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d18 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1d1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x11c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d1c );
    system_isp_write_32( base + 0x1d1c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d1c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1d1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x11c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d1c );
    system_isp_write_32( base + 0x1d1c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d1c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer3 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer3 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_REG_ADDR 0x1d1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_OFFSET 0x11c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_GEOMETRY_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer3_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d1c );
    system_isp_write_32( base + 0x1d1c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer3_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d1c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer3 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer3 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_GEOMETRY_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_GEOMETRY_REG_ADDR 0x1d1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_GEOMETRY_OFFSET 0x11c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_GEOMETRY_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer3_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d1c );
    system_isp_write_32( base + 0x1d1c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer3_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d1c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer3 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer3 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_REG_ADDR 0x1d1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_OFFSET 0x11c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER3_UNDERRUN_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer3_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d1c );
    system_isp_write_32( base + 0x1d1c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer3_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d1c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer3 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer3 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNDERRUN_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNDERRUN_REG_ADDR 0x1d1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNDERRUN_OFFSET 0x11c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER3_UNDERRUN_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer3_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d1c );
    system_isp_write_32( base + 0x1d1c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer3_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d1c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader4 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader4 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_REG_ADDR 0x1d1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_OFFSET 0x11c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_ARMAXWAIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d1c );
    system_isp_write_32( base + 0x1d1c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d1c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader4 armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader4 armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_ARMAXWAIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_ARMAXWAIT_REG_ADDR 0x1d1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_ARMAXWAIT_OFFSET 0x11c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_ARMAXWAIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d1c );
    system_isp_write_32( base + 0x1d1c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d1c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader4 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader4 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RRESP_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RRESP_REG_ADDR 0x1d20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RRESP_OFFSET 0x120
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RRESP_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d20 );
    system_isp_write_32( base + 0x1d20, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d20 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader4 rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader4 rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RRESP_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RRESP_REG_ADDR 0x1d20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RRESP_OFFSET 0x120
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RRESP_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d20 );
    system_isp_write_32( base + 0x1d20, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d20 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader4 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader4 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_REG_ADDR 0x1d20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_OFFSET 0x120
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d20 );
    system_isp_write_32( base + 0x1d20, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d20 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader4 rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader4 rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_REG_ADDR 0x1d20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_OFFSET 0x120
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_RXNFR_OSTAND_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d20 );
    system_isp_write_32( base + 0x1d20, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d20 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_USER_INTFC_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_USER_INTFC_REG_ADDR 0x1d20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_USER_INTFC_OFFSET 0x120
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_USER_INTFC_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d20 );
    system_isp_write_32( base + 0x1d20, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d20 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_USER_INTFC_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_USER_INTFC_REG_ADDR 0x1d20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_USER_INTFC_OFFSET 0x120
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_USER_INTFC_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d20 );
    system_isp_write_32( base + 0x1d20, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d20 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_REG_ADDR 0x1d20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_OFFSET 0x120
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d20 );
    system_isp_write_32( base + 0x1d20, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d20 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_REG_ADDR 0x1d20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_OFFSET 0x120
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_FULL_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d20 );
    system_isp_write_32( base + 0x1d20, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d20 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error axi reader4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error axi reader4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1d24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_OFFSET 0x124
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d24 );
    system_isp_write_32( base + 0x1d24, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_axi_reader4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d24 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error axi reader4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error axi reader4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1d24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_OFFSET 0x124
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_AXI_READER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d24 );
    system_isp_write_32( base + 0x1d24, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_axi_reader4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d24 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo out crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo out crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1d24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x124
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d24 );
    system_isp_write_32( base + 0x1d24, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d24 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo out crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo out crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1d24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x124
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d24 );
    system_isp_write_32( base + 0x1d24, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d24 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error fifo out crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error fifo out crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x124
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d24 );
    system_isp_write_32( base + 0x1d24, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_fifo_out_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d24 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error fifo out crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error fifo out crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x124
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_FIFO_OUT_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d24 );
    system_isp_write_32( base + 0x1d24, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_fifo_out_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d24 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1d24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x124
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d24 );
    system_isp_write_32( base + 0x1d24, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d24 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1d24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x124
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d24 );
    system_isp_write_32( base + 0x1d24, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d24 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer4 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer4 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_REG_ADDR 0x1d28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_OFFSET 0x128
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_GEOMETRY_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer4_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d28 );
    system_isp_write_32( base + 0x1d28, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer4_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d28 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer4 geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer4 geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_GEOMETRY_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_GEOMETRY_REG_ADDR 0x1d28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_GEOMETRY_OFFSET 0x128
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_GEOMETRY_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer4_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d28 );
    system_isp_write_32( base + 0x1d28, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer4_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d28 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error deserializer4 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error deserializer4 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_REG_ADDR 0x1d28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_OFFSET 0x128
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_DESERIALIZER4_UNDERRUN_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer4_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d28 );
    system_isp_write_32( base + 0x1d28, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_deserializer4_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d28 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error deserializer4 underrun
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error deserializer4 underrun.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNDERRUN_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNDERRUN_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNDERRUN_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNDERRUN_REG_ADDR 0x1d28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNDERRUN_OFFSET 0x128
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_DESERIALIZER4_UNDERRUN_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer4_underrun_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d28 );
    system_isp_write_32( base + 0x1d28, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_deserializer4_underrun_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d28 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error synchronizer framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error synchronizer framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SYNCHRONIZER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SYNCHRONIZER_FRAMING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SYNCHRONIZER_FRAMING_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SYNCHRONIZER_FRAMING_REG_ADDR 0x1d28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SYNCHRONIZER_FRAMING_OFFSET 0x128
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SYNCHRONIZER_FRAMING_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_synchronizer_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d28 );
    system_isp_write_32( base + 0x1d28, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_synchronizer_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d28 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error synchronizer framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error synchronizer framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SYNCHRONIZER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SYNCHRONIZER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SYNCHRONIZER_FRAMING_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SYNCHRONIZER_FRAMING_REG_ADDR 0x1d28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SYNCHRONIZER_FRAMING_OFFSET 0x128
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SYNCHRONIZER_FRAMING_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_synchronizer_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d28 );
    system_isp_write_32( base + 0x1d28, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_synchronizer_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d28 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scheduler input statistics overrun 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scheduler input statistics overrun (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_REG_ADDR 0x1d28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_OFFSET 0x128
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_input_statistics_overrun_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d28 );
    system_isp_write_32( base + 0x1d28, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_input_statistics_overrun_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d28 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scheduler input statistics overrun 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scheduler input statistics overrun (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_REG_ADDR 0x1d28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_OFFSET 0x128
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_0_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_input_statistics_overrun_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d28 );
    system_isp_write_32( base + 0x1d28, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_input_statistics_overrun_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d28 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scheduler input statistics overrun 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scheduler input statistics overrun (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_REG_ADDR 0x1d2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_OFFSET 0x12c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_input_statistics_overrun_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d2c );
    system_isp_write_32( base + 0x1d2c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_input_statistics_overrun_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d2c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scheduler input statistics overrun 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scheduler input statistics overrun (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_REG_ADDR 0x1d2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_OFFSET 0x12c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_1_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_input_statistics_overrun_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d2c );
    system_isp_write_32( base + 0x1d2c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_input_statistics_overrun_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d2c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scheduler input statistics overrun 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scheduler input statistics overrun (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_REG_ADDR 0x1d2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_OFFSET 0x12c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_input_statistics_overrun_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d2c );
    system_isp_write_32( base + 0x1d2c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_input_statistics_overrun_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d2c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scheduler input statistics overrun 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scheduler input statistics overrun (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_REG_ADDR 0x1d2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_OFFSET 0x12c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_2_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_input_statistics_overrun_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d2c );
    system_isp_write_32( base + 0x1d2c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_input_statistics_overrun_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d2c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scheduler input statistics overrun 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scheduler input statistics overrun (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_REG_ADDR 0x1d2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_OFFSET 0x12c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_input_statistics_overrun_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d2c );
    system_isp_write_32( base + 0x1d2c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_input_statistics_overrun_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d2c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scheduler input statistics overrun 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scheduler input statistics overrun (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_REG_ADDR 0x1d2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_OFFSET 0x12c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INPUT_STATISTICS_OVERRUN_3_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_input_statistics_overrun_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d2c );
    system_isp_write_32( base + 0x1d2c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_input_statistics_overrun_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d2c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scheduler config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scheduler config.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_CONFIG_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_CONFIG_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_CONFIG_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_CONFIG_REG_ADDR 0x1d2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_CONFIG_OFFSET 0x12c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_CONFIG_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d2c );
    system_isp_write_32( base + 0x1d2c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d2c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scheduler config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scheduler config.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_CONFIG_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_CONFIG_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_CONFIG_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_CONFIG_REG_ADDR 0x1d2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_CONFIG_OFFSET 0x12c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_CONFIG_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d2c );
    system_isp_write_32( base + 0x1d2c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d2c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scheduler internal error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scheduler internal error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_REG_ADDR 0x1d30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_OFFSET 0x130
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_internal_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d30 );
    system_isp_write_32( base + 0x1d30, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_internal_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d30 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scheduler internal error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scheduler internal error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_REG_ADDR 0x1d30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_OFFSET 0x130
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_INTERNAL_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_internal_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d30 );
    system_isp_write_32( base + 0x1d30, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_internal_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d30 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scheduler read geometry mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scheduler read geometry mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_REG_ADDR 0x1d30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_OFFSET 0x130
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_read_geometry_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d30 );
    system_isp_write_32( base + 0x1d30, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_read_geometry_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d30 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scheduler read geometry mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scheduler read geometry mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_REG_ADDR 0x1d30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_OFFSET 0x130
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_READ_GEOMETRY_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_read_geometry_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d30 );
    system_isp_write_32( base + 0x1d30, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_read_geometry_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d30 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scheduler pq overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scheduler pq overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_REG_ADDR 0x1d30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_OFFSET 0x130
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_pq_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d30 );
    system_isp_write_32( base + 0x1d30, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_pq_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d30 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scheduler pq overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scheduler pq overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_REG_ADDR 0x1d30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_OFFSET 0x130
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_pq_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d30 );
    system_isp_write_32( base + 0x1d30, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_pq_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d30 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scheduler pq underflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scheduler pq underflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_REG_ADDR 0x1d30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_OFFSET 0x130
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_pq_underflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d30 );
    system_isp_write_32( base + 0x1d30, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_pq_underflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d30 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scheduler pq underflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scheduler pq underflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_REG_ADDR 0x1d30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_OFFSET 0x130
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_UNDERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_pq_underflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d30 );
    system_isp_write_32( base + 0x1d30, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_pq_underflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d30 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scheduler pq invalid slot mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scheduler pq invalid slot mode.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_REG_ADDR 0x1d34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_OFFSET 0x134
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_pq_invalid_slot_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d34 );
    system_isp_write_32( base + 0x1d34, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_pq_invalid_slot_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d34 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scheduler pq invalid slot mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scheduler pq invalid slot mode.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_REG_ADDR 0x1d34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_OFFSET 0x134
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_PQ_INVALID_SLOT_MODE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_pq_invalid_slot_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d34 );
    system_isp_write_32( base + 0x1d34, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_pq_invalid_slot_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d34 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scheduler slot error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scheduler slot error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_REG_ADDR 0x1d34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_OFFSET 0x134
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCHEDULER_SLOT_ERROR_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_slot_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d34 );
    system_isp_write_32( base + 0x1d34, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scheduler_slot_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d34 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scheduler slot error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scheduler slot error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_SLOT_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_SLOT_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_SLOT_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_SLOT_ERROR_REG_ADDR 0x1d34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_SLOT_ERROR_OFFSET 0x134
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCHEDULER_SLOT_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_slot_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d34 );
    system_isp_write_32( base + 0x1d34, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scheduler_slot_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d34 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard access 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard access (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_0_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_0_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_0_REG_ADDR 0x1d34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_0_OFFSET 0x134
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_0_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_access_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d34 );
    system_isp_write_32( base + 0x1d34, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_access_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d34 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard access 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard access (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_0_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_0_REG_ADDR 0x1d34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_0_OFFSET 0x134
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_0_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_access_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d34 );
    system_isp_write_32( base + 0x1d34, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_access_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d34 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard access 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard access (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_1_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_1_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_1_REG_ADDR 0x1d34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_1_OFFSET 0x134
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_1_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_access_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d34 );
    system_isp_write_32( base + 0x1d34, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_access_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d34 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard access 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard access (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_1_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_1_REG_ADDR 0x1d34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_1_OFFSET 0x134
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_1_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_access_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d34 );
    system_isp_write_32( base + 0x1d34, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_access_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d34 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard access 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard access (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_2_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_2_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_2_REG_ADDR 0x1d38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_2_OFFSET 0x138
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_2_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_access_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d38 );
    system_isp_write_32( base + 0x1d38, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_access_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d38 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard access 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard access (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_2_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_2_REG_ADDR 0x1d38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_2_OFFSET 0x138
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_2_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_access_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d38 );
    system_isp_write_32( base + 0x1d38, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_access_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d38 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard access 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard access (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_3_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_3_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_3_REG_ADDR 0x1d38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_3_OFFSET 0x138
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_3_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_access_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d38 );
    system_isp_write_32( base + 0x1d38, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_access_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d38 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard access 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard access (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_3_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_3_REG_ADDR 0x1d38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_3_OFFSET 0x138
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_3_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_access_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d38 );
    system_isp_write_32( base + 0x1d38, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_access_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d38 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard access 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard access (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_4_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_4_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_4_REG_ADDR 0x1d38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_4_OFFSET 0x138
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_ACCESS_4_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_access_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d38 );
    system_isp_write_32( base + 0x1d38, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_access_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d38 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard access 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard access (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_4_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_4_REG_ADDR 0x1d38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_4_OFFSET 0x138
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_ACCESS_4_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_access_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d38 );
    system_isp_write_32( base + 0x1d38, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_access_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d38 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard invalid command 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard invalid command (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_REG_ADDR 0x1d38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_OFFSET 0x138
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_invalid_command_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d38 );
    system_isp_write_32( base + 0x1d38, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_invalid_command_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d38 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard invalid command 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard invalid command (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_REG_ADDR 0x1d38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_OFFSET 0x138
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_invalid_command_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d38 );
    system_isp_write_32( base + 0x1d38, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_invalid_command_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d38 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard invalid command 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard invalid command (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_REG_ADDR 0x1d3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_OFFSET 0x13c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_invalid_command_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d3c );
    system_isp_write_32( base + 0x1d3c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_invalid_command_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d3c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard invalid command 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard invalid command (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_REG_ADDR 0x1d3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_OFFSET 0x13c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_invalid_command_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d3c );
    system_isp_write_32( base + 0x1d3c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_invalid_command_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d3c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard invalid command 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard invalid command (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_REG_ADDR 0x1d3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_OFFSET 0x13c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_invalid_command_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d3c );
    system_isp_write_32( base + 0x1d3c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_invalid_command_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d3c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard invalid command 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard invalid command (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_REG_ADDR 0x1d3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_OFFSET 0x13c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_invalid_command_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d3c );
    system_isp_write_32( base + 0x1d3c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_invalid_command_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d3c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard invalid command 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard invalid command (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_REG_ADDR 0x1d3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_OFFSET 0x13c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_invalid_command_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d3c );
    system_isp_write_32( base + 0x1d3c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_invalid_command_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d3c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard invalid command 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard invalid command (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_REG_ADDR 0x1d3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_OFFSET 0x13c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_invalid_command_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d3c );
    system_isp_write_32( base + 0x1d3c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_invalid_command_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d3c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard invalid command 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard invalid command (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_REG_ADDR 0x1d3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_OFFSET 0x13c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_invalid_command_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d3c );
    system_isp_write_32( base + 0x1d3c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_invalid_command_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d3c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard invalid command 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard invalid command (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_REG_ADDR 0x1d3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_OFFSET 0x13c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_invalid_command_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d3c );
    system_isp_write_32( base + 0x1d3c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_invalid_command_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d3c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard buffer collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard buffer collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_REG_ADDR 0x1d40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_OFFSET 0x140
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_buffer_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d40 );
    system_isp_write_32( base + 0x1d40, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_buffer_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d40 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard buffer collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard buffer collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_REG_ADDR 0x1d40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_OFFSET 0x140
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_buffer_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d40 );
    system_isp_write_32( base + 0x1d40, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_buffer_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d40 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard crc mismatch 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard crc mismatch (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_REG_ADDR 0x1d40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_OFFSET 0x140
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_crc_mismatch_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d40 );
    system_isp_write_32( base + 0x1d40, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_crc_mismatch_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d40 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard crc mismatch 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard crc mismatch (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_REG_ADDR 0x1d40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_OFFSET 0x140
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_crc_mismatch_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d40 );
    system_isp_write_32( base + 0x1d40, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_crc_mismatch_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d40 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard crc mismatch 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard crc mismatch (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_REG_ADDR 0x1d40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_OFFSET 0x140
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_crc_mismatch_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d40 );
    system_isp_write_32( base + 0x1d40, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_crc_mismatch_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d40 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard crc mismatch 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard crc mismatch (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_REG_ADDR 0x1d40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_OFFSET 0x140
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_crc_mismatch_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d40 );
    system_isp_write_32( base + 0x1d40, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_crc_mismatch_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d40 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard crc mismatch 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard crc mismatch (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_REG_ADDR 0x1d40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_OFFSET 0x140
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_crc_mismatch_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d40 );
    system_isp_write_32( base + 0x1d40, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_crc_mismatch_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d40 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard crc mismatch 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard crc mismatch (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_REG_ADDR 0x1d40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_OFFSET 0x140
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_crc_mismatch_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d40 );
    system_isp_write_32( base + 0x1d40, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_crc_mismatch_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d40 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard crc mismatch 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard crc mismatch (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_REG_ADDR 0x1d44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_OFFSET 0x144
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_crc_mismatch_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d44 );
    system_isp_write_32( base + 0x1d44, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_crc_mismatch_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d44 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard crc mismatch 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard crc mismatch (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_REG_ADDR 0x1d44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_OFFSET 0x144
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_crc_mismatch_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d44 );
    system_isp_write_32( base + 0x1d44, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_crc_mismatch_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d44 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error scoreboard crc mismatch 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error scoreboard crc mismatch (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_REG_ADDR 0x1d44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_OFFSET 0x144
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_crc_mismatch_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d44 );
    system_isp_write_32( base + 0x1d44, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_scoreboard_crc_mismatch_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d44 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error scoreboard crc mismatch 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error scoreboard crc mismatch (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_REG_ADDR 0x1d44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_OFFSET 0x144
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_crc_mismatch_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d44 );
    system_isp_write_32( base + 0x1d44, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_scoreboard_crc_mismatch_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d44 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error buffer config buffer access
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error buffer config buffer access.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_REG_ADDR 0x1d44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_OFFSET 0x144
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_buffer_config_buffer_access_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d44 );
    system_isp_write_32( base + 0x1d44, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_buffer_config_buffer_access_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d44 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error buffer config buffer access
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error buffer config buffer access.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_REG_ADDR 0x1d44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_OFFSET 0x144
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_buffer_config_buffer_access_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d44 );
    system_isp_write_32( base + 0x1d44, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_buffer_config_buffer_access_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d44 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error buffer config internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error buffer config internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_REG_ADDR 0x1d44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_OFFSET 0x144
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_buffer_config_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d44 );
    system_isp_write_32( base + 0x1d44, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_buffer_config_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d44 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error buffer config internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error buffer config internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_REG_ADDR 0x1d44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_OFFSET 0x144
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_buffer_config_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d44 );
    system_isp_write_32( base + 0x1d44, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_buffer_config_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d44 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error buffer config config crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error buffer config config crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_REG_ADDR 0x1d48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_OFFSET 0x148
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_buffer_config_config_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d48 );
    system_isp_write_32( base + 0x1d48, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_buffer_config_config_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d48 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error buffer config config crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error buffer config config crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_REG_ADDR 0x1d48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_OFFSET 0x148
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_buffer_config_config_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d48 );
    system_isp_write_32( base + 0x1d48, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_buffer_config_config_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d48 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_REG_ADDR 0x1d48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_OFFSET 0x148
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d48 );
    system_isp_write_32( base + 0x1d48, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d48 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma armaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma armaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_REG_ADDR 0x1d48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_OFFSET 0x148
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_ARMAXWAIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_armaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d48 );
    system_isp_write_32( base + 0x1d48, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_armaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d48 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RRESP_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RRESP_REG_ADDR 0x1d48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RRESP_OFFSET 0x148
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RRESP_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d48 );
    system_isp_write_32( base + 0x1d48, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d48 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma rresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma rresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RRESP_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RRESP_REG_ADDR 0x1d48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RRESP_OFFSET 0x148
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RRESP_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_rresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d48 );
    system_isp_write_32( base + 0x1d48, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_rresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d48 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_REG_ADDR 0x1d48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_OFFSET 0x148
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d48 );
    system_isp_write_32( base + 0x1d48, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d48 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma rxnfr ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma rxnfr ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_REG_ADDR 0x1d48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_OFFSET 0x148
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RXNFR_OSTAND_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_rxnfr_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d48 );
    system_isp_write_32( base + 0x1d48, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_rxnfr_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d48 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_REG_ADDR 0x1d4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_OFFSET 0x14c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_USER_INTFC_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d4c );
    system_isp_write_32( base + 0x1d4c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d4c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_USER_INTFC_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_USER_INTFC_REG_ADDR 0x1d4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_USER_INTFC_OFFSET 0x14c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_USER_INTFC_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d4c );
    system_isp_write_32( base + 0x1d4c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d4c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma rfifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma rfifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_REG_ADDR 0x1d4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_OFFSET 0x14c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_rfifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d4c );
    system_isp_write_32( base + 0x1d4c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_rfifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d4c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma rfifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma rfifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_REG_ADDR 0x1d4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_OFFSET 0x14c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_FULL_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_rfifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d4c );
    system_isp_write_32( base + 0x1d4c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_rfifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d4c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma rfifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma rfifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_REG_ADDR 0x1d4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_OFFSET 0x14c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_rfifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d4c );
    system_isp_write_32( base + 0x1d4c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_rfifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d4c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma rfifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma rfifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_REG_ADDR 0x1d4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_OFFSET 0x14c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_RFIFO_FAIL_EMPTY_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_rfifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d4c );
    system_isp_write_32( base + 0x1d4c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_rfifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d4c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_BRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_BRESP_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_BRESP_REG_ADDR 0x1d4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_BRESP_OFFSET 0x14c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_BRESP_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d4c );
    system_isp_write_32( base + 0x1d4c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d4c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_BRESP_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_BRESP_REG_ADDR 0x1d4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_BRESP_OFFSET 0x14c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_BRESP_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d4c );
    system_isp_write_32( base + 0x1d4c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d4c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_REG_ADDR 0x1d50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_OFFSET 0x150
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d50 );
    system_isp_write_32( base + 0x1d50, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d50 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_REG_ADDR 0x1d50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_OFFSET 0x150
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AWMAXWAIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d50 );
    system_isp_write_32( base + 0x1d50, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d50 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_REG_ADDR 0x1d50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_OFFSET 0x150
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d50 );
    system_isp_write_32( base + 0x1d50, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d50 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_REG_ADDR 0x1d50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_OFFSET 0x150
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WMAXWAIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d50 );
    system_isp_write_32( base + 0x1d50, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d50 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_REG_ADDR 0x1d50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_OFFSET 0x150
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d50 );
    system_isp_write_32( base + 0x1d50, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d50 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_REG_ADDR 0x1d50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_OFFSET 0x150
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WXACT_OSTAND_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d50 );
    system_isp_write_32( base + 0x1d50, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d50 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma wfifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma wfifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_REG_ADDR 0x1d50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_OFFSET 0x150
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_wfifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d50 );
    system_isp_write_32( base + 0x1d50, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_wfifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d50 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma wfifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma wfifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_REG_ADDR 0x1d50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_OFFSET 0x150
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_FULL_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_wfifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d50 );
    system_isp_write_32( base + 0x1d50, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_wfifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d50 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma wfifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma wfifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_REG_ADDR 0x1d54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_OFFSET 0x154
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_wfifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d54 );
    system_isp_write_32( base + 0x1d54, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_wfifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d54 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma wfifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma wfifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_REG_ADDR 0x1d54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_OFFSET 0x154
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_WFIFO_FAIL_EMPTY_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_wfifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d54 );
    system_isp_write_32( base + 0x1d54, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_wfifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d54 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma read overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma read overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_REG_ADDR 0x1d54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_OFFSET 0x154
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_read_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d54 );
    system_isp_write_32( base + 0x1d54, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_read_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d54 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma read overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma read overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_REG_ADDR 0x1d54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_OFFSET 0x154
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_READ_OVERFLOW_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_read_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d54 );
    system_isp_write_32( base + 0x1d54, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_read_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d54 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma axi overread
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma axi overread.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_REG_ADDR 0x1d54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_OFFSET 0x154
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_axi_overread_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d54 );
    system_isp_write_32( base + 0x1d54, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_axi_overread_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d54 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma axi overread
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma axi overread.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_REG_ADDR 0x1d54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_OFFSET 0x154
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERREAD_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_axi_overread_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d54 );
    system_isp_write_32( base + 0x1d54, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_axi_overread_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d54 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma axi overwrite
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma axi overwrite.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_REG_ADDR 0x1d54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_OFFSET 0x154
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_axi_overwrite_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d54 );
    system_isp_write_32( base + 0x1d54, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_axi_overwrite_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d54 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma axi overwrite
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma axi overwrite.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_REG_ADDR 0x1d54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_OFFSET 0x154
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_AXI_OVERWRITE_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_axi_overwrite_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d54 );
    system_isp_write_32( base + 0x1d54, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_axi_overwrite_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d54 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error config dma internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error config dma internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_INTERNAL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_INTERNAL_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_INTERNAL_REG_ADDR 0x1d58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_INTERNAL_OFFSET 0x158
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_CONFIG_DMA_INTERNAL_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d58 );
    system_isp_write_32( base + 0x1d58, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_config_dma_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d58 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error config dma internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error config dma internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_INTERNAL_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_INTERNAL_REG_ADDR 0x1d58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_INTERNAL_OFFSET 0x158
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_CONFIG_DMA_INTERNAL_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d58 );
    system_isp_write_32( base + 0x1d58, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_config_dma_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d58 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error arbiter bc access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error arbiter bc access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1d58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_OFFSET 0x158
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d58 );
    system_isp_write_32( base + 0x1d58, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d58 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error arbiter bc access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error arbiter bc access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1d58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_OFFSET 0x158
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d58 );
    system_isp_write_32( base + 0x1d58, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d58 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error arbiter bc access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error arbiter bc access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1d58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_OFFSET 0x158
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d58 );
    system_isp_write_32( base + 0x1d58, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d58 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error arbiter bc access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error arbiter bc access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1d58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_OFFSET 0x158
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d58 );
    system_isp_write_32( base + 0x1d58, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d58 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error arbiter bc access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error arbiter bc access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1d58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_OFFSET 0x158
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d58 );
    system_isp_write_32( base + 0x1d58, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d58 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error arbiter bc access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error arbiter bc access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1d58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_OFFSET 0x158
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d58 );
    system_isp_write_32( base + 0x1d58, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d58 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error arbiter bc access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error arbiter bc access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1d5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_OFFSET 0x15c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d5c );
    system_isp_write_32( base + 0x1d5c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d5c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error arbiter bc access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error arbiter bc access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1d5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_OFFSET 0x15c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d5c );
    system_isp_write_32( base + 0x1d5c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d5c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error arbiter bc access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error arbiter bc access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1d5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_OFFSET 0x15c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d5c );
    system_isp_write_32( base + 0x1d5c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d5c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error arbiter bc access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error arbiter bc access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1d5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_OFFSET 0x15c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d5c );
    system_isp_write_32( base + 0x1d5c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d5c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcfe error arbiter bc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot of mcfe error arbiter bc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_REG_ADDR 0x1d5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_OFFSET 0x15c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d5c );
    system_isp_write_32( base + 0x1d5c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcfe_error_arbiter_bc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d5c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcfe error arbiter bc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcfe: Slot Multiple of mcfe error arbiter bc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_REG_ADDR 0x1d5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_OFFSET 0x15c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCFE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d5c );
    system_isp_write_32( base + 0x1d5c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcfe_error_arbiter_bc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d5c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1d5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x15c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d5c );
    system_isp_write_32( base + 0x1d5c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d5c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1d5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x15c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d5c );
    system_isp_write_32( base + 0x1d5c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d5c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1d60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x160
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d60 );
    system_isp_write_32( base + 0x1d60, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d60 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1d60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x160
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d60 );
    system_isp_write_32( base + 0x1d60, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d60 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fifo in crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fifo in crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1d60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x160
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d60 );
    system_isp_write_32( base + 0x1d60, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d60 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fifo in crc1 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fifo in crc1 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_REG_ADDR 0x1d60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_OFFSET 0x160
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_FIFO_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc1_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d60 );
    system_isp_write_32( base + 0x1d60, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc1_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d60 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fifo in crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fifo in crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x160
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d60 );
    system_isp_write_32( base + 0x1d60, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d60 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fifo in crc1 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fifo in crc1 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_OFFSET 0x160
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC1_CRC_FIFO_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc1_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d60 );
    system_isp_write_32( base + 0x1d60, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc1_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d60 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer1 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer1 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_BRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_BRESP_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_BRESP_REG_ADDR 0x1d60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_BRESP_OFFSET 0x160
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_BRESP_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d60 );
    system_isp_write_32( base + 0x1d60, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d60 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer1 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer1 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_BRESP_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_BRESP_REG_ADDR 0x1d60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_BRESP_OFFSET 0x160
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_BRESP_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d60 );
    system_isp_write_32( base + 0x1d60, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d60 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer1 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer1 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_REG_ADDR 0x1d64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_OFFSET 0x164
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d64 );
    system_isp_write_32( base + 0x1d64, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d64 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer1 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer1 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_REG_ADDR 0x1d64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_OFFSET 0x164
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_AWMAXWAIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d64 );
    system_isp_write_32( base + 0x1d64, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d64 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer1 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer1 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_REG_ADDR 0x1d64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_OFFSET 0x164
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d64 );
    system_isp_write_32( base + 0x1d64, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d64 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer1 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer1 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_REG_ADDR 0x1d64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_OFFSET 0x164
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WMAXWAIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d64 );
    system_isp_write_32( base + 0x1d64, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d64 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer1 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer1 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_REG_ADDR 0x1d64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_OFFSET 0x164
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d64 );
    system_isp_write_32( base + 0x1d64, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d64 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer1 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer1 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_REG_ADDR 0x1d64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_OFFSET 0x164
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_WXACT_OSTAND_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d64 );
    system_isp_write_32( base + 0x1d64, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d64 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_REG_ADDR 0x1d64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_OFFSET 0x164
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d64 );
    system_isp_write_32( base + 0x1d64, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d64 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer1 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer1 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_USER_INTFC_REG_ADDR 0x1d64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_USER_INTFC_OFFSET 0x164
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_USER_INTFC_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d64 );
    system_isp_write_32( base + 0x1d64, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d64 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_REG_ADDR 0x1d68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_OFFSET 0x168
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d68 );
    system_isp_write_32( base + 0x1d68, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d68 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer1 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer1 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_REG_ADDR 0x1d68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_OFFSET 0x168
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_FULL_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d68 );
    system_isp_write_32( base + 0x1d68, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d68 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1d68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_OFFSET 0x168
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d68 );
    system_isp_write_32( base + 0x1d68, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d68 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer1 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer1 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_REG_ADDR 0x1d68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_OFFSET 0x168
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FIFO_FAIL_EMPTY_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d68 );
    system_isp_write_32( base + 0x1d68, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d68 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer1 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer1 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_REG_ADDR 0x1d68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_OFFSET 0x168
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d68 );
    system_isp_write_32( base + 0x1d68, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer1_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d68 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer1 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer1 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_REG_ADDR 0x1d68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_OFFSET 0x168
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER1_FRAME_DROPPED_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d68 );
    system_isp_write_32( base + 0x1d68, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer1_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d68 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fb manager1 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fb manager1 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_INTERNAL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_INTERNAL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_INTERNAL_REG_ADDR 0x1d68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_INTERNAL_OFFSET 0x168
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_INTERNAL_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager1_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d68 );
    system_isp_write_32( base + 0x1d68, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager1_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d68 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fb manager1 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fb manager1 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_INTERNAL_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_INTERNAL_REG_ADDR 0x1d68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_INTERNAL_OFFSET 0x168
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_INTERNAL_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager1_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d68 );
    system_isp_write_32( base + 0x1d68, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager1_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d68 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fb manager1 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fb manager1 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_REG_ADDR 0x1d6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_OFFSET 0x16c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager1_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d6c );
    system_isp_write_32( base + 0x1d6c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager1_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d6c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fb manager1 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fb manager1 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_REG_ADDR 0x1d6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_OFFSET 0x16c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER1_POOL_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager1_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d6c );
    system_isp_write_32( base + 0x1d6c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager1_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d6c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1d6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x16c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d6c );
    system_isp_write_32( base + 0x1d6c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d6c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1d6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x16c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d6c );
    system_isp_write_32( base + 0x1d6c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d6c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1d6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x16c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d6c );
    system_isp_write_32( base + 0x1d6c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d6c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1d6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x16c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d6c );
    system_isp_write_32( base + 0x1d6c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d6c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1d6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x16c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d6c );
    system_isp_write_32( base + 0x1d6c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d6c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1d6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x16c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d6c );
    system_isp_write_32( base + 0x1d6c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d6c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x170
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d70 );
    system_isp_write_32( base + 0x1d70, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d70 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x170
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d70 );
    system_isp_write_32( base + 0x1d70, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d70 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer2 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer2 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_BRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_BRESP_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_BRESP_REG_ADDR 0x1d70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_BRESP_OFFSET 0x170
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_BRESP_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d70 );
    system_isp_write_32( base + 0x1d70, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d70 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer2 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer2 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_BRESP_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_BRESP_REG_ADDR 0x1d70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_BRESP_OFFSET 0x170
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_BRESP_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d70 );
    system_isp_write_32( base + 0x1d70, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d70 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer2 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer2 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_REG_ADDR 0x1d70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_OFFSET 0x170
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d70 );
    system_isp_write_32( base + 0x1d70, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d70 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer2 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer2 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_REG_ADDR 0x1d70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_OFFSET 0x170
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_AWMAXWAIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d70 );
    system_isp_write_32( base + 0x1d70, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d70 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer2 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer2 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_REG_ADDR 0x1d70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_OFFSET 0x170
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d70 );
    system_isp_write_32( base + 0x1d70, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d70 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer2 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer2 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_REG_ADDR 0x1d70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_OFFSET 0x170
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WMAXWAIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d70 );
    system_isp_write_32( base + 0x1d70, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d70 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer2 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer2 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_REG_ADDR 0x1d74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_OFFSET 0x174
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d74 );
    system_isp_write_32( base + 0x1d74, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d74 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer2 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer2 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_REG_ADDR 0x1d74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_OFFSET 0x174
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_WXACT_OSTAND_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d74 );
    system_isp_write_32( base + 0x1d74, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d74 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_REG_ADDR 0x1d74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_OFFSET 0x174
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d74 );
    system_isp_write_32( base + 0x1d74, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d74 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer2 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer2 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_USER_INTFC_REG_ADDR 0x1d74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_USER_INTFC_OFFSET 0x174
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_USER_INTFC_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d74 );
    system_isp_write_32( base + 0x1d74, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d74 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_REG_ADDR 0x1d74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_OFFSET 0x174
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d74 );
    system_isp_write_32( base + 0x1d74, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d74 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer2 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer2 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_REG_ADDR 0x1d74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_OFFSET 0x174
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_FULL_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d74 );
    system_isp_write_32( base + 0x1d74, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d74 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1d74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_OFFSET 0x174
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d74 );
    system_isp_write_32( base + 0x1d74, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d74 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer2 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer2 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_REG_ADDR 0x1d74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_OFFSET 0x174
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FIFO_FAIL_EMPTY_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d74 );
    system_isp_write_32( base + 0x1d74, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d74 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer2 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer2 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_REG_ADDR 0x1d78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_OFFSET 0x178
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d78 );
    system_isp_write_32( base + 0x1d78, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer2_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d78 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer2 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer2 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_REG_ADDR 0x1d78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_OFFSET 0x178
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER2_FRAME_DROPPED_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d78 );
    system_isp_write_32( base + 0x1d78, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer2_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d78 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fb manager2 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fb manager2 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_INTERNAL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_INTERNAL_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_INTERNAL_REG_ADDR 0x1d78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_INTERNAL_OFFSET 0x178
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_INTERNAL_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager2_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d78 );
    system_isp_write_32( base + 0x1d78, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager2_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d78 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fb manager2 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fb manager2 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_INTERNAL_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_INTERNAL_REG_ADDR 0x1d78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_INTERNAL_OFFSET 0x178
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_INTERNAL_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager2_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d78 );
    system_isp_write_32( base + 0x1d78, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager2_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d78 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fb manager2 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fb manager2 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_REG_ADDR 0x1d78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_OFFSET 0x178
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager2_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d78 );
    system_isp_write_32( base + 0x1d78, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager2_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d78 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fb manager2 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fb manager2 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_REG_ADDR 0x1d78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_OFFSET 0x178
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER2_POOL_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager2_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d78 );
    system_isp_write_32( base + 0x1d78, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager2_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d78 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error serializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error serializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1d78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x178
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d78 );
    system_isp_write_32( base + 0x1d78, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d78 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error serializer3 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error serializer3 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_REG_ADDR 0x1d78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_OFFSET 0x178
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer3_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d78 );
    system_isp_write_32( base + 0x1d78, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer3_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d78 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error serializer3 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error serializer3 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_REG_ADDR 0x1d7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_OFFSET 0x17c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer3_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d7c );
    system_isp_write_32( base + 0x1d7c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer3_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d7c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error serializer3 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error serializer3 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_REG_ADDR 0x1d7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_OFFSET 0x17c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER3_OUTPUT_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer3_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d7c );
    system_isp_write_32( base + 0x1d7c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer3_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d7c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fifo in crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fifo in crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1d7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x17c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d7c );
    system_isp_write_32( base + 0x1d7c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d7c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fifo in crc3 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fifo in crc3 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_REG_ADDR 0x1d7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_OFFSET 0x17c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_FIFO_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc3_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d7c );
    system_isp_write_32( base + 0x1d7c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc3_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d7c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fifo in crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fifo in crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x17c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d7c );
    system_isp_write_32( base + 0x1d7c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d7c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fifo in crc3 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fifo in crc3 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_OFFSET 0x17c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC3_CRC_FIFO_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc3_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d7c );
    system_isp_write_32( base + 0x1d7c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc3_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d7c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer3 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer3 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_BRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_BRESP_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_BRESP_REG_ADDR 0x1d7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_BRESP_OFFSET 0x17c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_BRESP_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d7c );
    system_isp_write_32( base + 0x1d7c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d7c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer3 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer3 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_BRESP_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_BRESP_REG_ADDR 0x1d7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_BRESP_OFFSET 0x17c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_BRESP_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d7c );
    system_isp_write_32( base + 0x1d7c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d7c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer3 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer3 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_REG_ADDR 0x1d80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_OFFSET 0x180
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d80 );
    system_isp_write_32( base + 0x1d80, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d80 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer3 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer3 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_REG_ADDR 0x1d80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_OFFSET 0x180
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_AWMAXWAIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d80 );
    system_isp_write_32( base + 0x1d80, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d80 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer3 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer3 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_REG_ADDR 0x1d80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_OFFSET 0x180
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d80 );
    system_isp_write_32( base + 0x1d80, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d80 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer3 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer3 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_REG_ADDR 0x1d80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_OFFSET 0x180
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WMAXWAIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d80 );
    system_isp_write_32( base + 0x1d80, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d80 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer3 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer3 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_REG_ADDR 0x1d80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_OFFSET 0x180
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d80 );
    system_isp_write_32( base + 0x1d80, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d80 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer3 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer3 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_REG_ADDR 0x1d80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_OFFSET 0x180
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_WXACT_OSTAND_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d80 );
    system_isp_write_32( base + 0x1d80, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d80 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_REG_ADDR 0x1d80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_OFFSET 0x180
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d80 );
    system_isp_write_32( base + 0x1d80, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d80 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer3 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer3 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_USER_INTFC_REG_ADDR 0x1d80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_USER_INTFC_OFFSET 0x180
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_USER_INTFC_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d80 );
    system_isp_write_32( base + 0x1d80, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d80 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_REG_ADDR 0x1d84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_OFFSET 0x184
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d84 );
    system_isp_write_32( base + 0x1d84, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d84 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer3 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer3 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_REG_ADDR 0x1d84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_OFFSET 0x184
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_FULL_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d84 );
    system_isp_write_32( base + 0x1d84, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d84 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1d84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_OFFSET 0x184
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d84 );
    system_isp_write_32( base + 0x1d84, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d84 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer3 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer3 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_REG_ADDR 0x1d84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_OFFSET 0x184
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FIFO_FAIL_EMPTY_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d84 );
    system_isp_write_32( base + 0x1d84, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d84 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer3 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer3 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_REG_ADDR 0x1d84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_OFFSET 0x184
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d84 );
    system_isp_write_32( base + 0x1d84, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer3_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d84 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer3 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer3 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_REG_ADDR 0x1d84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_OFFSET 0x184
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER3_FRAME_DROPPED_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d84 );
    system_isp_write_32( base + 0x1d84, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer3_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d84 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fb manager3 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fb manager3 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_INTERNAL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_INTERNAL_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_INTERNAL_REG_ADDR 0x1d84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_INTERNAL_OFFSET 0x184
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_INTERNAL_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager3_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d84 );
    system_isp_write_32( base + 0x1d84, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager3_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d84 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fb manager3 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fb manager3 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_INTERNAL_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_INTERNAL_REG_ADDR 0x1d84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_INTERNAL_OFFSET 0x184
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_INTERNAL_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager3_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d84 );
    system_isp_write_32( base + 0x1d84, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager3_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d84 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fb manager3 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fb manager3 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_REG_ADDR 0x1d88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_OFFSET 0x188
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager3_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d88 );
    system_isp_write_32( base + 0x1d88, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager3_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d88 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fb manager3 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fb manager3 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_REG_ADDR 0x1d88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_OFFSET 0x188
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER3_POOL_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager3_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d88 );
    system_isp_write_32( base + 0x1d88, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager3_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d88 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error serializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error serializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1d88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x188
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d88 );
    system_isp_write_32( base + 0x1d88, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d88 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error serializer4 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error serializer4 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_REG_ADDR 0x1d88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_OFFSET 0x188
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer4_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d88 );
    system_isp_write_32( base + 0x1d88, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer4_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d88 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error serializer4 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error serializer4 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_REG_ADDR 0x1d88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_OFFSET 0x188
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer4_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d88 );
    system_isp_write_32( base + 0x1d88, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_serializer4_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d88 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error serializer4 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error serializer4 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_REG_ADDR 0x1d88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_OFFSET 0x188
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SERIALIZER4_OUTPUT_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer4_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d88 );
    system_isp_write_32( base + 0x1d88, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_serializer4_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d88 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fifo in crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fifo in crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1d88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x188
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d88 );
    system_isp_write_32( base + 0x1d88, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d88 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fifo in crc4 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fifo in crc4 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_REG_ADDR 0x1d88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_OFFSET 0x188
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_FIFO_CRC_MISMATCH_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc4_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d88 );
    system_isp_write_32( base + 0x1d88, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc4_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d88 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fifo in crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fifo in crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x18c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d8c );
    system_isp_write_32( base + 0x1d8c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fifo_in_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d8c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fifo in crc4 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fifo in crc4 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_REG_ADDR 0x1d8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_OFFSET 0x18c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FIFO_IN_CRC4_CRC_FIFO_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc4_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d8c );
    system_isp_write_32( base + 0x1d8c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fifo_in_crc4_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d8c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer4 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer4 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_BRESP_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_BRESP_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_BRESP_REG_ADDR 0x1d8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_BRESP_OFFSET 0x18c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_BRESP_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d8c );
    system_isp_write_32( base + 0x1d8c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d8c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer4 bresp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer4 bresp.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_BRESP_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_BRESP_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_BRESP_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_BRESP_REG_ADDR 0x1d8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_BRESP_OFFSET 0x18c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_BRESP_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_bresp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d8c );
    system_isp_write_32( base + 0x1d8c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_bresp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d8c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer4 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer4 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_REG_ADDR 0x1d8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_OFFSET 0x18c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d8c );
    system_isp_write_32( base + 0x1d8c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d8c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer4 awmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer4 awmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_REG_ADDR 0x1d8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_OFFSET 0x18c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_AWMAXWAIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_awmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d8c );
    system_isp_write_32( base + 0x1d8c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_awmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d8c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer4 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer4 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_REG_ADDR 0x1d8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_OFFSET 0x18c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d8c );
    system_isp_write_32( base + 0x1d8c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d8c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer4 wmaxwait
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer4 wmaxwait.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_REG_ADDR 0x1d8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_OFFSET 0x18c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WMAXWAIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_wmaxwait_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d8c );
    system_isp_write_32( base + 0x1d8c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_wmaxwait_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d8c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer4 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer4 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_REG_ADDR 0x1d90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_OFFSET 0x190
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d90 );
    system_isp_write_32( base + 0x1d90, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d90 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer4 wxact ostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer4 wxact ostand.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_REG_ADDR 0x1d90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_OFFSET 0x190
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_WXACT_OSTAND_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_wxact_ostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d90 );
    system_isp_write_32( base + 0x1d90, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_wxact_ostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d90 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_REG_ADDR 0x1d90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_OFFSET 0x190
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d90 );
    system_isp_write_32( base + 0x1d90, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d90 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer4 user intfc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer4 user intfc.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_USER_INTFC_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_USER_INTFC_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_USER_INTFC_REG_ADDR 0x1d90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_USER_INTFC_OFFSET 0x190
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_USER_INTFC_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_user_intfc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d90 );
    system_isp_write_32( base + 0x1d90, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_user_intfc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d90 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_REG_ADDR 0x1d90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_OFFSET 0x190
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d90 );
    system_isp_write_32( base + 0x1d90, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d90 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer4 fifo fail full
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer4 fifo fail full.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_REG_ADDR 0x1d90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_OFFSET 0x190
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_FULL_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_fifo_fail_full_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d90 );
    system_isp_write_32( base + 0x1d90, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_fifo_fail_full_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d90 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1d90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_OFFSET 0x190
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d90 );
    system_isp_write_32( base + 0x1d90, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d90 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer4 fifo fail empty
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer4 fifo fail empty.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_REG_ADDR 0x1d90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_OFFSET 0x190
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FIFO_FAIL_EMPTY_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_fifo_fail_empty_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d90 );
    system_isp_write_32( base + 0x1d90, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_fifo_fail_empty_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d90 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error axi writer4 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error axi writer4 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_REG_ADDR 0x1d94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_OFFSET 0x194
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d94 );
    system_isp_write_32( base + 0x1d94, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_axi_writer4_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d94 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error axi writer4 frame dropped
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error axi writer4 frame dropped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_REG_ADDR 0x1d94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_OFFSET 0x194
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_AXI_WRITER4_FRAME_DROPPED_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_frame_dropped_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d94 );
    system_isp_write_32( base + 0x1d94, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_axi_writer4_frame_dropped_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d94 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fb manager4 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fb manager4 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_INTERNAL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_INTERNAL_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_INTERNAL_REG_ADDR 0x1d94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_INTERNAL_OFFSET 0x194
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_INTERNAL_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager4_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d94 );
    system_isp_write_32( base + 0x1d94, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager4_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d94 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fb manager4 internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fb manager4 internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_INTERNAL_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_INTERNAL_REG_ADDR 0x1d94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_INTERNAL_OFFSET 0x194
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_INTERNAL_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager4_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d94 );
    system_isp_write_32( base + 0x1d94, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager4_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d94 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error fb manager4 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error fb manager4 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_REG_ADDR 0x1d94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_OFFSET 0x194
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager4_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d94 );
    system_isp_write_32( base + 0x1d94, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_fb_manager4_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d94 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error fb manager4 pool overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error fb manager4 pool overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_REG_ADDR 0x1d94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_OFFSET 0x194
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_FB_MANAGER4_POOL_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager4_pool_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d94 );
    system_isp_write_32( base + 0x1d94, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_fb_manager4_pool_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d94 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard access 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard access (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_0_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_0_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_0_REG_ADDR 0x1d94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_0_OFFSET 0x194
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_0_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_access_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d94 );
    system_isp_write_32( base + 0x1d94, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_access_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d94 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard access 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard access (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_0_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_0_REG_ADDR 0x1d94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_0_OFFSET 0x194
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_0_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_access_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d94 );
    system_isp_write_32( base + 0x1d94, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_access_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d94 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard access 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard access (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_1_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_1_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_1_REG_ADDR 0x1d98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_1_OFFSET 0x198
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_1_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_access_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d98 );
    system_isp_write_32( base + 0x1d98, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_access_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d98 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard access 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard access (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_1_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_1_REG_ADDR 0x1d98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_1_OFFSET 0x198
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_1_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_access_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d98 );
    system_isp_write_32( base + 0x1d98, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_access_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d98 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard access 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard access (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_2_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_2_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_2_REG_ADDR 0x1d98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_2_OFFSET 0x198
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_2_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_access_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d98 );
    system_isp_write_32( base + 0x1d98, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_access_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d98 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard access 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard access (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_2_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_2_REG_ADDR 0x1d98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_2_OFFSET 0x198
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_2_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_access_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d98 );
    system_isp_write_32( base + 0x1d98, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_access_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d98 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard access 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard access (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_3_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_3_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_3_REG_ADDR 0x1d98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_3_OFFSET 0x198
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_3_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_access_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d98 );
    system_isp_write_32( base + 0x1d98, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_access_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d98 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard access 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard access (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_3_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_3_REG_ADDR 0x1d98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_3_OFFSET 0x198
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_3_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_access_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d98 );
    system_isp_write_32( base + 0x1d98, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_access_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d98 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard access 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard access (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_4_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_4_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_4_REG_ADDR 0x1d98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_4_OFFSET 0x198
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_ACCESS_4_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_access_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d98 );
    system_isp_write_32( base + 0x1d98, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_access_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d98 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard access 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard access (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_4_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_4_REG_ADDR 0x1d98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_4_OFFSET 0x198
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_ACCESS_4_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_access_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d98 );
    system_isp_write_32( base + 0x1d98, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_access_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d98 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard invalid command 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard invalid command (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_REG_ADDR 0x1d9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_OFFSET 0x19c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_invalid_command_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d9c );
    system_isp_write_32( base + 0x1d9c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_invalid_command_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d9c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard invalid command 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard invalid command (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_REG_ADDR 0x1d9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_OFFSET 0x19c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_0_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_invalid_command_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d9c );
    system_isp_write_32( base + 0x1d9c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_invalid_command_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d9c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard invalid command 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard invalid command (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_REG_ADDR 0x1d9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_OFFSET 0x19c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_invalid_command_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d9c );
    system_isp_write_32( base + 0x1d9c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_invalid_command_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d9c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard invalid command 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard invalid command (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_REG_ADDR 0x1d9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_OFFSET 0x19c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_1_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_invalid_command_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d9c );
    system_isp_write_32( base + 0x1d9c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_invalid_command_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d9c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard invalid command 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard invalid command (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_REG_ADDR 0x1d9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_OFFSET 0x19c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_invalid_command_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d9c );
    system_isp_write_32( base + 0x1d9c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_invalid_command_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d9c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard invalid command 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard invalid command (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_REG_ADDR 0x1d9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_OFFSET 0x19c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_2_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_invalid_command_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d9c );
    system_isp_write_32( base + 0x1d9c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_invalid_command_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d9c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard invalid command 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard invalid command (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_REG_ADDR 0x1d9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_OFFSET 0x19c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_invalid_command_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d9c );
    system_isp_write_32( base + 0x1d9c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_invalid_command_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d9c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard invalid command 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard invalid command (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_REG_ADDR 0x1d9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_OFFSET 0x19c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_3_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_invalid_command_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1d9c );
    system_isp_write_32( base + 0x1d9c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_invalid_command_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1d9c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard invalid command 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard invalid command (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_REG_ADDR 0x1da0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_OFFSET 0x1a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_invalid_command_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da0 );
    system_isp_write_32( base + 0x1da0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_invalid_command_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard invalid command 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard invalid command (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_REG_ADDR 0x1da0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_OFFSET 0x1a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_INVALID_COMMAND_4_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_invalid_command_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da0 );
    system_isp_write_32( base + 0x1da0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_invalid_command_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard buffer collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard buffer collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_REG_ADDR 0x1da0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_OFFSET 0x1a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_buffer_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da0 );
    system_isp_write_32( base + 0x1da0, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_buffer_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da0 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard buffer collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard buffer collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_REG_ADDR 0x1da0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_OFFSET 0x1a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_BUFFER_COLLISION_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_buffer_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da0 );
    system_isp_write_32( base + 0x1da0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_buffer_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard crc mismatch 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard crc mismatch (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_REG_ADDR 0x1da0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_OFFSET 0x1a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_crc_mismatch_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da0 );
    system_isp_write_32( base + 0x1da0, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_crc_mismatch_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da0 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard crc mismatch 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard crc mismatch (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_REG_ADDR 0x1da0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_OFFSET 0x1a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_0_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_crc_mismatch_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da0 );
    system_isp_write_32( base + 0x1da0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_crc_mismatch_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard crc mismatch 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard crc mismatch (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_REG_ADDR 0x1da0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_OFFSET 0x1a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_crc_mismatch_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da0 );
    system_isp_write_32( base + 0x1da0, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_crc_mismatch_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da0 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard crc mismatch 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard crc mismatch (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_REG_ADDR 0x1da0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_OFFSET 0x1a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_1_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_crc_mismatch_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da0 );
    system_isp_write_32( base + 0x1da0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_crc_mismatch_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard crc mismatch 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard crc mismatch (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_REG_ADDR 0x1da4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_OFFSET 0x1a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_crc_mismatch_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da4 );
    system_isp_write_32( base + 0x1da4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_crc_mismatch_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard crc mismatch 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard crc mismatch (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_REG_ADDR 0x1da4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_OFFSET 0x1a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_2_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_crc_mismatch_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da4 );
    system_isp_write_32( base + 0x1da4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_crc_mismatch_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard crc mismatch 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard crc mismatch (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_REG_ADDR 0x1da4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_OFFSET 0x1a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_crc_mismatch_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da4 );
    system_isp_write_32( base + 0x1da4, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_crc_mismatch_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da4 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard crc mismatch 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard crc mismatch (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_REG_ADDR 0x1da4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_OFFSET 0x1a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_3_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_crc_mismatch_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da4 );
    system_isp_write_32( base + 0x1da4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_crc_mismatch_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error scoreboard crc mismatch 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error scoreboard crc mismatch (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_REG_ADDR 0x1da4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_OFFSET 0x1a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_crc_mismatch_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da4 );
    system_isp_write_32( base + 0x1da4, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_scoreboard_crc_mismatch_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da4 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error scoreboard crc mismatch 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error scoreboard crc mismatch (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_REG_ADDR 0x1da4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_OFFSET 0x1a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_SCOREBOARD_CRC_MISMATCH_4_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_crc_mismatch_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da4 );
    system_isp_write_32( base + 0x1da4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_scoreboard_crc_mismatch_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error buffer config buffer access
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error buffer config buffer access.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_REG_ADDR 0x1da4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_OFFSET 0x1a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_buffer_config_buffer_access_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da4 );
    system_isp_write_32( base + 0x1da4, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_buffer_config_buffer_access_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da4 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error buffer config buffer access
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error buffer config buffer access.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_REG_ADDR 0x1da4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_OFFSET 0x1a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_BUFFER_ACCESS_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_buffer_config_buffer_access_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da4 );
    system_isp_write_32( base + 0x1da4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_buffer_config_buffer_access_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error buffer config internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error buffer config internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_REG_ADDR 0x1da8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_OFFSET 0x1a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_buffer_config_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da8 );
    system_isp_write_32( base + 0x1da8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_buffer_config_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error buffer config internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error buffer config internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_REG_ADDR 0x1da8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_OFFSET 0x1a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_INTERNAL_FAULT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_buffer_config_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da8 );
    system_isp_write_32( base + 0x1da8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_buffer_config_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error buffer config config crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error buffer config config crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_REG_ADDR 0x1da8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_OFFSET 0x1a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_buffer_config_config_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da8 );
    system_isp_write_32( base + 0x1da8, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_buffer_config_config_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da8 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error buffer config config crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error buffer config config crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_REG_ADDR 0x1da8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_OFFSET 0x1a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_BUFFER_CONFIG_CONFIG_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_buffer_config_config_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da8 );
    system_isp_write_32( base + 0x1da8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_buffer_config_config_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error arbiter bc access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error arbiter bc access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1da8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_OFFSET 0x1a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da8 );
    system_isp_write_32( base + 0x1da8, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da8 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error arbiter bc access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error arbiter bc access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1da8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_OFFSET 0x1a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da8 );
    system_isp_write_32( base + 0x1da8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error arbiter bc access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error arbiter bc access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1da8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_OFFSET 0x1a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da8 );
    system_isp_write_32( base + 0x1da8, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da8 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error arbiter bc access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error arbiter bc access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1da8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_OFFSET 0x1a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1da8 );
    system_isp_write_32( base + 0x1da8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1da8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error arbiter bc access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error arbiter bc access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1dac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_OFFSET 0x1ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dac );
    system_isp_write_32( base + 0x1dac, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dac ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error arbiter bc access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error arbiter bc access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1dac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_OFFSET 0x1ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dac );
    system_isp_write_32( base + 0x1dac, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dac ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error arbiter bc access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error arbiter bc access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1dac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_OFFSET 0x1ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dac );
    system_isp_write_32( base + 0x1dac, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dac ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error arbiter bc access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error arbiter bc access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1dac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_OFFSET 0x1ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dac );
    system_isp_write_32( base + 0x1dac, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dac ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error arbiter bc access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error arbiter bc access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1dac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_OFFSET 0x1ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dac );
    system_isp_write_32( base + 0x1dac, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dac ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error arbiter bc access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error arbiter bc access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1dac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_OFFSET 0x1ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dac );
    system_isp_write_32( base + 0x1dac, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dac ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mcbe error arbiter bc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot of mcbe error arbiter bc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_REG_ADDR 0x1dac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_OFFSET 0x1ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dac );
    system_isp_write_32( base + 0x1dac, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mcbe_error_arbiter_bc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dac ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mcbe error arbiter bc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mcbe: Slot Multiple of mcbe error arbiter bc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_REG_ADDR 0x1dac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_OFFSET 0x1ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MCBE_ERROR_ARBITER_BC_FIFO_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dac );
    system_isp_write_32( base + 0x1dac, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mcbe_error_arbiter_bc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dac ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot stream crossbar error invalid configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Stream crossbar: Slot of stream crossbar error invalid configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_REG_ADDR 0x1db0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_OFFSET 0x1b0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_stream_crossbar_error_invalid_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db0 );
    system_isp_write_32( base + 0x1db0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_stream_crossbar_error_invalid_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple stream crossbar error invalid configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Stream crossbar: Slot Multiple of stream crossbar error invalid configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_REG_ADDR 0x1db0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_OFFSET 0x1b0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_STREAM_CROSSBAR_ERROR_INVALID_CONFIGURATION_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_stream_crossbar_error_invalid_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db0 );
    system_isp_write_32( base + 0x1db0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_stream_crossbar_error_invalid_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_FAULT_O_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_FAULT_O_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_FAULT_O_REG_ADDR 0x1db0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_FAULT_O_OFFSET 0x1b0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_FAULT_O_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db0 );
    system_isp_write_32( base + 0x1db0, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db0 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_FAULT_O_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_FAULT_O_REG_ADDR 0x1db0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_FAULT_O_OFFSET 0x1b0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_FAULT_O_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db0 );
    system_isp_write_32( base + 0x1db0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame repeat sensor 1 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 1: Slot of frame repeat sensor 1 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_REG_ADDR 0x1db0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_OFFSET 0x1b0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_1_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db0 );
    system_isp_write_32( base + 0x1db0, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_1_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db0 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame repeat sensor 1 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 1: Slot Multiple of frame repeat sensor 1 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_REG_ADDR 0x1db0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_OFFSET 0x1b0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_WARNING_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_1_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db0 );
    system_isp_write_32( base + 0x1db0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_1_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame repeat sensor 1 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 1: Slot of frame repeat sensor 1 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_REG_ADDR 0x1db0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_OFFSET 0x1b0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_1_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db0 );
    system_isp_write_32( base + 0x1db0, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_1_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db0 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame repeat sensor 1 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 1: Slot Multiple of frame repeat sensor 1 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_REG_ADDR 0x1db0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_OFFSET 0x1b0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_1_REPEATING_FRAME_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_1_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db0 );
    system_isp_write_32( base + 0x1db0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_1_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot metering hist 1 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 1: Slot of metering hist 1 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1db4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1b4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_metering_hist_1_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db4 );
    system_isp_write_32( base + 0x1db4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_metering_hist_1_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple metering hist 1 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 1: Slot Multiple of metering hist 1 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1db4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1b4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_metering_hist_1_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db4 );
    system_isp_write_32( base + 0x1db4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_metering_hist_1_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_FAULT_O_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_FAULT_O_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_FAULT_O_REG_ADDR 0x1db4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_FAULT_O_OFFSET 0x1b4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_FAULT_O_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db4 );
    system_isp_write_32( base + 0x1db4, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db4 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_FAULT_O_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_FAULT_O_REG_ADDR 0x1db4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_FAULT_O_OFFSET 0x1b4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_FAULT_O_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db4 );
    system_isp_write_32( base + 0x1db4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame repeat sensor 2 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 2: Slot of frame repeat sensor 2 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_REG_ADDR 0x1db4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_OFFSET 0x1b4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_2_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db4 );
    system_isp_write_32( base + 0x1db4, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_2_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db4 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame repeat sensor 2 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 2: Slot Multiple of frame repeat sensor 2 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_REG_ADDR 0x1db4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_OFFSET 0x1b4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_WARNING_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_2_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db4 );
    system_isp_write_32( base + 0x1db4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_2_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame repeat sensor 2 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 2: Slot of frame repeat sensor 2 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_REG_ADDR 0x1db4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_OFFSET 0x1b4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_2_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db4 );
    system_isp_write_32( base + 0x1db4, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_2_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db4 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame repeat sensor 2 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 2: Slot Multiple of frame repeat sensor 2 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_REG_ADDR 0x1db4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_OFFSET 0x1b4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_2_REPEATING_FRAME_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_2_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db4 );
    system_isp_write_32( base + 0x1db4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_2_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot metering hist 2 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 2: Slot of metering hist 2 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1db8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1b8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_metering_hist_2_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db8 );
    system_isp_write_32( base + 0x1db8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_metering_hist_2_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple metering hist 2 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 2: Slot Multiple of metering hist 2 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1db8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1b8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_metering_hist_2_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db8 );
    system_isp_write_32( base + 0x1db8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_metering_hist_2_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_FAULT_O_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_FAULT_O_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_FAULT_O_REG_ADDR 0x1db8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_FAULT_O_OFFSET 0x1b8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_FAULT_O_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db8 );
    system_isp_write_32( base + 0x1db8, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db8 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_FAULT_O_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_FAULT_O_REG_ADDR 0x1db8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_FAULT_O_OFFSET 0x1b8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_FAULT_O_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db8 );
    system_isp_write_32( base + 0x1db8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame repeat sensor 3 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 3: Slot of frame repeat sensor 3 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_REG_ADDR 0x1db8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_OFFSET 0x1b8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_3_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db8 );
    system_isp_write_32( base + 0x1db8, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_3_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db8 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame repeat sensor 3 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 3: Slot Multiple of frame repeat sensor 3 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_REG_ADDR 0x1db8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_OFFSET 0x1b8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_WARNING_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_3_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db8 );
    system_isp_write_32( base + 0x1db8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_3_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame repeat sensor 3 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 3: Slot of frame repeat sensor 3 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_REG_ADDR 0x1db8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_OFFSET 0x1b8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_3_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db8 );
    system_isp_write_32( base + 0x1db8, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_3_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db8 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame repeat sensor 3 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 3: Slot Multiple of frame repeat sensor 3 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_REG_ADDR 0x1db8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_OFFSET 0x1b8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_3_REPEATING_FRAME_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_3_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1db8 );
    system_isp_write_32( base + 0x1db8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_3_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1db8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot metering hist 3 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 3: Slot of metering hist 3 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1bc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_metering_hist_3_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dbc );
    system_isp_write_32( base + 0x1dbc, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_metering_hist_3_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dbc ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple metering hist 3 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 3: Slot Multiple of metering hist 3 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1bc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_metering_hist_3_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dbc );
    system_isp_write_32( base + 0x1dbc, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_metering_hist_3_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dbc ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_FAULT_O_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_FAULT_O_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_FAULT_O_REG_ADDR 0x1dbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_FAULT_O_OFFSET 0x1bc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_FAULT_O_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dbc );
    system_isp_write_32( base + 0x1dbc, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dbc ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_FAULT_O_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_FAULT_O_REG_ADDR 0x1dbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_FAULT_O_OFFSET 0x1bc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_FAULT_O_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dbc );
    system_isp_write_32( base + 0x1dbc, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dbc ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame repeat sensor 4 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 4: Slot of frame repeat sensor 4 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_REG_ADDR 0x1dbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_OFFSET 0x1bc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_4_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dbc );
    system_isp_write_32( base + 0x1dbc, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_4_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dbc ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame repeat sensor 4 repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 4: Slot Multiple of frame repeat sensor 4 repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_REG_ADDR 0x1dbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_OFFSET 0x1bc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_WARNING_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_4_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dbc );
    system_isp_write_32( base + 0x1dbc, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_4_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dbc ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame repeat sensor 4 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 4: Slot of frame repeat sensor 4 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_REG_ADDR 0x1dbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_OFFSET 0x1bc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_4_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dbc );
    system_isp_write_32( base + 0x1dbc, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_repeat_sensor_4_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dbc ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame repeat sensor 4 repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat sensor 4: Slot Multiple of frame repeat sensor 4 repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_REG_ADDR 0x1dbc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_OFFSET 0x1bc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_SENSOR_4_REPEATING_FRAME_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_4_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dbc );
    system_isp_write_32( base + 0x1dbc, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_sensor_4_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dbc ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot metering hist 4 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 4: Slot of metering hist 4 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1c0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_metering_hist_4_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc0 );
    system_isp_write_32( base + 0x1dc0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_metering_hist_4_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple metering hist 4 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering hist 4: Slot Multiple of metering hist 4 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1c0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_metering_hist_4_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc0 );
    system_isp_write_32( base + 0x1dc0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_metering_hist_4_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_FAULT_O_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_FAULT_O_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_FAULT_O_REG_ADDR 0x1dc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_FAULT_O_OFFSET 0x1c0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_FAULT_O_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc0 );
    system_isp_write_32( base + 0x1dc0, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc0 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_FAULT_O_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_FAULT_O_REG_ADDR 0x1dc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_FAULT_O_OFFSET 0x1c0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_FAULT_O_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc0 );
    system_isp_write_32( base + 0x1dc0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot input formatter parameter error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Input formatter: Slot of input formatter parameter error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INPUT_FORMATTER_PARAMETER_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INPUT_FORMATTER_PARAMETER_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INPUT_FORMATTER_PARAMETER_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INPUT_FORMATTER_PARAMETER_ERROR_REG_ADDR 0x1dc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INPUT_FORMATTER_PARAMETER_ERROR_OFFSET 0x1c0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INPUT_FORMATTER_PARAMETER_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_input_formatter_parameter_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc0 );
    system_isp_write_32( base + 0x1dc0, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_input_formatter_parameter_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc0 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple input formatter parameter error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Input formatter: Slot Multiple of input formatter parameter error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INPUT_FORMATTER_PARAMETER_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INPUT_FORMATTER_PARAMETER_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INPUT_FORMATTER_PARAMETER_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INPUT_FORMATTER_PARAMETER_ERROR_REG_ADDR 0x1dc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INPUT_FORMATTER_PARAMETER_ERROR_OFFSET 0x1c0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INPUT_FORMATTER_PARAMETER_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_input_formatter_parameter_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc0 );
    system_isp_write_32( base + 0x1dc0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_input_formatter_parameter_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame stitch crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Slot of frame stitch crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1dc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1c0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_stitch_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc0 );
    system_isp_write_32( base + 0x1dc0, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_stitch_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc0 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame stitch crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Slot Multiple of frame stitch crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1dc0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1c0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_stitch_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc0 );
    system_isp_write_32( base + 0x1dc0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_stitch_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame stitch bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Slot of frame stitch bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1dc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1c4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_stitch_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc4 );
    system_isp_write_32( base + 0x1dc4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_stitch_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame stitch bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Slot Multiple of frame stitch bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1dc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1c4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_stitch_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc4 );
    system_isp_write_32( base + 0x1dc4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_stitch_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame stitch bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Slot of frame stitch bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1dc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1c4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_stitch_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc4 );
    system_isp_write_32( base + 0x1dc4, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_stitch_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc4 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame stitch bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Slot Multiple of frame stitch bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1dc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1c4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_stitch_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc4 );
    system_isp_write_32( base + 0x1dc4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_stitch_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame stitch config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Slot of frame stitch config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1c4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_stitch_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc4 );
    system_isp_write_32( base + 0x1dc4, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_stitch_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc4 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame stitch config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame stitch: Slot Multiple of frame stitch config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1c4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_STITCH_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_stitch_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc4 );
    system_isp_write_32( base + 0x1dc4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_stitch_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot fstitch1 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 line repeat detector: Slot of fstitch1 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1dc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x1c4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_fstitch1_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc4 );
    system_isp_write_32( base + 0x1dc4, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_fstitch1_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc4 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple fstitch1 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 line repeat detector: Slot Multiple of fstitch1 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1dc4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x1c4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_fstitch1_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc4 );
    system_isp_write_32( base + 0x1dc4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_fstitch1_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot fstitch1 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 line repeat detector: Slot of fstitch1 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1dc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x1c8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_fstitch1_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc8 );
    system_isp_write_32( base + 0x1dc8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_fstitch1_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple fstitch1 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 line repeat detector: Slot Multiple of fstitch1 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1dc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x1c8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_fstitch1_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc8 );
    system_isp_write_32( base + 0x1dc8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_fstitch1_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot fstitch1 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 delay line check: Slot of fstitch1 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1dc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x1c8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_fstitch1_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc8 );
    system_isp_write_32( base + 0x1dc8, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_fstitch1_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc8 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple fstitch1 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch1 delay line check: Slot Multiple of fstitch1 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1dc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x1c8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH1_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_fstitch1_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc8 );
    system_isp_write_32( base + 0x1dc8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_fstitch1_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot fstitch2 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 line repeat detector: Slot of fstitch2 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1dc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x1c8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_fstitch2_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc8 );
    system_isp_write_32( base + 0x1dc8, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_fstitch2_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc8 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple fstitch2 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 line repeat detector: Slot Multiple of fstitch2 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1dc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x1c8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_fstitch2_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc8 );
    system_isp_write_32( base + 0x1dc8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_fstitch2_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot fstitch2 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 line repeat detector: Slot of fstitch2 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1dc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x1c8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_fstitch2_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc8 );
    system_isp_write_32( base + 0x1dc8, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_fstitch2_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc8 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple fstitch2 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 line repeat detector: Slot Multiple of fstitch2 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1dc8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x1c8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_fstitch2_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dc8 );
    system_isp_write_32( base + 0x1dc8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_fstitch2_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dc8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot fstitch2 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 delay line check: Slot of fstitch2 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1dcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x1cc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_fstitch2_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dcc );
    system_isp_write_32( base + 0x1dcc, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_fstitch2_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dcc ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple fstitch2 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch2 delay line check: Slot Multiple of fstitch2 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1dcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x1cc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH2_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_fstitch2_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dcc );
    system_isp_write_32( base + 0x1dcc, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_fstitch2_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dcc ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot fstitch3 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 line repeat detector: Slot of fstitch3 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1dcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x1cc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_fstitch3_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dcc );
    system_isp_write_32( base + 0x1dcc, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_fstitch3_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dcc ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple fstitch3 line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 line repeat detector: Slot Multiple of fstitch3 line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1dcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x1cc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_fstitch3_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dcc );
    system_isp_write_32( base + 0x1dcc, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_fstitch3_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dcc ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot fstitch3 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 line repeat detector: Slot of fstitch3 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1dcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x1cc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_fstitch3_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dcc );
    system_isp_write_32( base + 0x1dcc, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_fstitch3_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dcc ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple fstitch3 line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 line repeat detector: Slot Multiple of fstitch3 line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1dcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x1cc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_fstitch3_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dcc );
    system_isp_write_32( base + 0x1dcc, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_fstitch3_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dcc ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot fstitch3 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 delay line check: Slot of fstitch3 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1dcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x1cc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_fstitch3_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dcc );
    system_isp_write_32( base + 0x1dcc, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_fstitch3_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dcc ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple fstitch3 delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Fstitch3 delay line check: Slot Multiple of fstitch3 delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1dcc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x1cc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FSTITCH3_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_fstitch3_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dcc );
    system_isp_write_32( base + 0x1dcc, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_fstitch3_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dcc ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame repeat isp repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat isp: Slot of frame repeat isp repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_REG_ADDR 0x1dd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_OFFSET 0x1d0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_repeat_isp_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd0 );
    system_isp_write_32( base + 0x1dd0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_repeat_isp_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame repeat isp repeating frame warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat isp: Slot Multiple of frame repeat isp repeating frame warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_REG_ADDR 0x1dd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_OFFSET 0x1d0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_WARNING_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_isp_repeating_frame_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd0 );
    system_isp_write_32( base + 0x1dd0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_isp_repeating_frame_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame repeat isp repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat isp: Slot of frame repeat isp repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_REG_ADDR 0x1dd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_OFFSET 0x1d0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_repeat_isp_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd0 );
    system_isp_write_32( base + 0x1dd0, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_repeat_isp_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd0 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame repeat isp repeating frame error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame repeat isp: Slot Multiple of frame repeat isp repeating frame error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_REG_ADDR 0x1dd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_OFFSET 0x1d0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_REPEAT_ISP_REPEATING_FRAME_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_isp_repeating_frame_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd0 );
    system_isp_write_32( base + 0x1dd0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_repeat_isp_repeating_frame_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot gamma fesq config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gamma fesq: Slot of gamma fesq config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_gamma_fesq_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd0 );
    system_isp_write_32( base + 0x1dd0, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_gamma_fesq_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd0 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple gamma fesq config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gamma fesq: Slot Multiple of gamma fesq config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_FESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_gamma_fesq_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd0 );
    system_isp_write_32( base + 0x1dd0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_gamma_fesq_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot roi hist 1 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 1: Slot of roi hist 1 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_roi_hist_1_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd0 );
    system_isp_write_32( base + 0x1dd0, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_roi_hist_1_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd0 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple roi hist 1 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 1: Slot Multiple of roi hist 1 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_1_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_roi_hist_1_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd0 );
    system_isp_write_32( base + 0x1dd0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_roi_hist_1_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot roi hist 2 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 2: Slot of roi hist 2 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_roi_hist_2_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd4 );
    system_isp_write_32( base + 0x1dd4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_roi_hist_2_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple roi hist 2 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 2: Slot Multiple of roi hist 2 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_2_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_roi_hist_2_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd4 );
    system_isp_write_32( base + 0x1dd4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_roi_hist_2_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot roi hist 3 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 3: Slot of roi hist 3 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_roi_hist_3_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd4 );
    system_isp_write_32( base + 0x1dd4, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_roi_hist_3_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd4 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple roi hist 3 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 3: Slot Multiple of roi hist 3 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_3_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_roi_hist_3_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd4 );
    system_isp_write_32( base + 0x1dd4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_roi_hist_3_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot roi hist 4 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 4: Slot of roi hist 4 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_roi_hist_4_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd4 );
    system_isp_write_32( base + 0x1dd4, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_roi_hist_4_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd4 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple roi hist 4 config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Roi hist 4: Slot Multiple of roi hist 4 config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ROI_HIST_4_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_roi_hist_4_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd4 );
    system_isp_write_32( base + 0x1dd4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_roi_hist_4_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot raw frontend crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Slot of raw frontend crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1dd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1d4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_raw_frontend_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd4 );
    system_isp_write_32( base + 0x1dd4, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_raw_frontend_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd4 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple raw frontend crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Slot Multiple of raw frontend crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1dd4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1d4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd4 );
    system_isp_write_32( base + 0x1dd4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot raw frontend bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Slot of raw frontend bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1dd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1d8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_raw_frontend_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd8 );
    system_isp_write_32( base + 0x1dd8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_raw_frontend_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple raw frontend bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Slot Multiple of raw frontend bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1dd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1d8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd8 );
    system_isp_write_32( base + 0x1dd8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot raw frontend bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Slot of raw frontend bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1dd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1d8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_raw_frontend_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd8 );
    system_isp_write_32( base + 0x1dd8, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_raw_frontend_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd8 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple raw frontend bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Slot Multiple of raw frontend bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1dd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1d8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd8 );
    system_isp_write_32( base + 0x1dd8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot raw frontend config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Slot of raw frontend config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_raw_frontend_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd8 );
    system_isp_write_32( base + 0x1dd8, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_raw_frontend_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd8 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple raw frontend config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend: Slot Multiple of raw frontend config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1d8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd8 );
    system_isp_write_32( base + 0x1dd8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot exp fifo error serializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot of exp fifo error serializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1dd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x1d8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_serializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd8 );
    system_isp_write_32( base + 0x1dd8, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_serializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd8 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple exp fifo error serializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot Multiple of exp fifo error serializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1dd8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x1d8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_serializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dd8 );
    system_isp_write_32( base + 0x1dd8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_serializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dd8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot exp fifo error serializer output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot of exp fifo error serializer output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_REG_ADDR 0x1ddc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_OFFSET 0x1dc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_serializer_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ddc );
    system_isp_write_32( base + 0x1ddc, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_serializer_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ddc ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple exp fifo error serializer output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot Multiple of exp fifo error serializer output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_REG_ADDR 0x1ddc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_OFFSET 0x1dc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_SERIALIZER_OUTPUT_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_serializer_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ddc );
    system_isp_write_32( base + 0x1ddc, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_serializer_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ddc ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot exp fifo error fifo in crc fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot of exp fifo error fifo in crc fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_REG_ADDR 0x1ddc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_OFFSET 0x1dc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_fifo_in_crc_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ddc );
    system_isp_write_32( base + 0x1ddc, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_fifo_in_crc_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ddc ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple exp fifo error fifo in crc fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot Multiple of exp fifo error fifo in crc fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_REG_ADDR 0x1ddc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_OFFSET 0x1dc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_FIFO_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_fifo_in_crc_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ddc );
    system_isp_write_32( base + 0x1ddc, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_fifo_in_crc_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ddc ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot exp fifo error fifo in crc crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot of exp fifo error fifo in crc crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_REG_ADDR 0x1ddc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_OFFSET 0x1dc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_fifo_in_crc_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ddc );
    system_isp_write_32( base + 0x1ddc, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_fifo_in_crc_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ddc ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple exp fifo error fifo in crc crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot Multiple of exp fifo error fifo in crc crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_REG_ADDR 0x1ddc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_OFFSET 0x1dc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_FIFO_IN_CRC_CRC_FIFO_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_fifo_in_crc_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ddc );
    system_isp_write_32( base + 0x1ddc, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_fifo_in_crc_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ddc ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot exp fifo error deserializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot of exp fifo error deserializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1ddc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x1dc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_deserializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ddc );
    system_isp_write_32( base + 0x1ddc, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_deserializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ddc ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple exp fifo error deserializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot Multiple of exp fifo error deserializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1ddc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x1dc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_deserializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ddc );
    system_isp_write_32( base + 0x1ddc, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_deserializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ddc ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot exp fifo error deserializer geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot of exp fifo error deserializer geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_REG_ADDR 0x1de0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_OFFSET 0x1e0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_deserializer_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de0 );
    system_isp_write_32( base + 0x1de0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_exp_fifo_error_deserializer_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple exp fifo error deserializer geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Exp fifo: Slot Multiple of exp fifo error deserializer geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_REG_ADDR 0x1de0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_OFFSET 0x1e0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_EXP_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_deserializer_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de0 );
    system_isp_write_32( base + 0x1de0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_exp_fifo_error_deserializer_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot defect pixel config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Defect pixel: Slot of defect pixel config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1de0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1e0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_defect_pixel_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de0 );
    system_isp_write_32( base + 0x1de0, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_defect_pixel_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de0 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple defect pixel config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Defect pixel: Slot Multiple of defect pixel config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1de0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1e0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEFECT_PIXEL_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_defect_pixel_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de0 );
    system_isp_write_32( base + 0x1de0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_defect_pixel_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot sinter crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Slot of sinter crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1de0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1e0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_sinter_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de0 );
    system_isp_write_32( base + 0x1de0, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_sinter_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de0 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple sinter crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Slot Multiple of sinter crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1de0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1e0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_sinter_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de0 );
    system_isp_write_32( base + 0x1de0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_sinter_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot sinter bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Slot of sinter bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1de0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1e0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_sinter_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de0 );
    system_isp_write_32( base + 0x1de0, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_sinter_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de0 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple sinter bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Slot Multiple of sinter bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1de0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1e0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_sinter_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de0 );
    system_isp_write_32( base + 0x1de0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_sinter_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot sinter bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Slot of sinter bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1de4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1e4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_sinter_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de4 );
    system_isp_write_32( base + 0x1de4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_sinter_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple sinter bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Slot Multiple of sinter bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1de4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1e4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_sinter_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de4 );
    system_isp_write_32( base + 0x1de4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_sinter_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot sinter config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Slot of sinter config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1de4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1e4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_sinter_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de4 );
    system_isp_write_32( base + 0x1de4, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_sinter_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de4 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple sinter config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter: Slot Multiple of sinter config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1de4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1e4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_sinter_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de4 );
    system_isp_write_32( base + 0x1de4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_sinter_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ca correction delay line checker delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction delay line checker: Slot of ca correction delay line checker delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_REG_ADDR 0x1de4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_OFFSET 0x1e4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ca_correction_delay_line_checker_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de4 );
    system_isp_write_32( base + 0x1de4, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ca_correction_delay_line_checker_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de4 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ca correction delay line checker delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction delay line checker: Slot Multiple of ca correction delay line checker delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_REG_ADDR 0x1de4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_OFFSET 0x1e4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ca_correction_delay_line_checker_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de4 );
    system_isp_write_32( base + 0x1de4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ca_correction_delay_line_checker_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ca correction error range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Slot of ca correction error range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_RANGE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_RANGE_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_RANGE_REG_ADDR 0x1de4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_RANGE_OFFSET 0x1e4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_RANGE_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ca_correction_error_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de4 );
    system_isp_write_32( base + 0x1de4, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ca_correction_error_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de4 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ca correction error range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Slot Multiple of ca correction error range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_RANGE_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_RANGE_REG_ADDR 0x1de4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_RANGE_OFFSET 0x1e4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_RANGE_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ca_correction_error_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de4 );
    system_isp_write_32( base + 0x1de4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ca_correction_error_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ca correction error cache
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Slot of ca correction error cache.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_CACHE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_CACHE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_CACHE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_CACHE_REG_ADDR 0x1de8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_CACHE_OFFSET 0x1e8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_CACHE_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ca_correction_error_cache_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de8 );
    system_isp_write_32( base + 0x1de8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ca_correction_error_cache_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ca correction error cache
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Slot Multiple of ca correction error cache.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_CACHE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_CACHE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_CACHE_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_CACHE_REG_ADDR 0x1de8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_CACHE_OFFSET 0x1e8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_CACHE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ca_correction_error_cache_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de8 );
    system_isp_write_32( base + 0x1de8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ca_correction_error_cache_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ca correction error address
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Slot of ca correction error address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_ADDRESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_ADDRESS_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_ADDRESS_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_ADDRESS_REG_ADDR 0x1de8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_ADDRESS_OFFSET 0x1e8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_ERROR_ADDRESS_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ca_correction_error_address_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de8 );
    system_isp_write_32( base + 0x1de8, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ca_correction_error_address_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de8 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ca correction error address
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Slot Multiple of ca correction error address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_ADDRESS_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_ADDRESS_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_ADDRESS_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_ADDRESS_REG_ADDR 0x1de8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_ADDRESS_OFFSET 0x1e8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_ERROR_ADDRESS_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ca_correction_error_address_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de8 );
    system_isp_write_32( base + 0x1de8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ca_correction_error_address_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ca correction config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Slot of ca correction config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1de8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1e8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ca_correction_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de8 );
    system_isp_write_32( base + 0x1de8, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ca_correction_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de8 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ca correction config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ca correction: Slot Multiple of ca correction config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1de8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1e8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CA_CORRECTION_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ca_correction_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de8 );
    system_isp_write_32( base + 0x1de8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ca_correction_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot gamma besq config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gamma besq: Slot of gamma besq config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1de8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1e8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_gamma_besq_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de8 );
    system_isp_write_32( base + 0x1de8, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_gamma_besq_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de8 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple gamma besq config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gamma besq: Slot Multiple of gamma besq config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1de8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1e8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_GAMMA_BESQ_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_gamma_besq_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1de8 );
    system_isp_write_32( base + 0x1de8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_gamma_besq_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1de8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot radial shading crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Slot of radial shading crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1dec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1ec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_radial_shading_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dec );
    system_isp_write_32( base + 0x1dec, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_radial_shading_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dec ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple radial shading crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Slot Multiple of radial shading crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1dec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1ec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_radial_shading_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dec );
    system_isp_write_32( base + 0x1dec, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_radial_shading_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dec ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot radial shading bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Slot of radial shading bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1dec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1ec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_radial_shading_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dec );
    system_isp_write_32( base + 0x1dec, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_radial_shading_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dec ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple radial shading bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Slot Multiple of radial shading bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1dec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1ec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_radial_shading_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dec );
    system_isp_write_32( base + 0x1dec, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_radial_shading_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dec ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot radial shading bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Slot of radial shading bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1dec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1ec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_radial_shading_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dec );
    system_isp_write_32( base + 0x1dec, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_radial_shading_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dec ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple radial shading bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Slot Multiple of radial shading bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1dec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1ec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_radial_shading_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dec );
    system_isp_write_32( base + 0x1dec, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_radial_shading_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dec ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot radial shading config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Slot of radial shading config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1ec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_radial_shading_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dec );
    system_isp_write_32( base + 0x1dec, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_radial_shading_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dec ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple radial shading config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading: Slot Multiple of radial shading config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1dec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1ec
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RADIAL_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_radial_shading_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dec );
    system_isp_write_32( base + 0x1dec, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_radial_shading_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dec ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mesh shading config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mesh shading: Slot of mesh shading config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1df0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1f0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_mesh_shading_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df0 );
    system_isp_write_32( base + 0x1df0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_mesh_shading_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple mesh shading config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mesh shading: Slot Multiple of mesh shading config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1df0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1f0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_MESH_SHADING_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_mesh_shading_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df0 );
    system_isp_write_32( base + 0x1df0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_mesh_shading_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot iridix error parameter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot of iridix error parameter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_PARAMETER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_PARAMETER_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_PARAMETER_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_PARAMETER_REG_ADDR 0x1df0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_PARAMETER_OFFSET 0x1f0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_PARAMETER_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_iridix_error_parameter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df0 );
    system_isp_write_32( base + 0x1df0, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_iridix_error_parameter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df0 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple iridix error parameter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot Multiple of iridix error parameter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_PARAMETER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_PARAMETER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_PARAMETER_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_PARAMETER_REG_ADDR 0x1df0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_PARAMETER_OFFSET 0x1f0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_PARAMETER_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_iridix_error_parameter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df0 );
    system_isp_write_32( base + 0x1df0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_iridix_error_parameter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot iridix error internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot of iridix error internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_INTERNAL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_INTERNAL_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_INTERNAL_REG_ADDR 0x1df0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_INTERNAL_OFFSET 0x1f0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_ERROR_INTERNAL_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_iridix_error_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df0 );
    system_isp_write_32( base + 0x1df0, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_iridix_error_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df0 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple iridix error internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot Multiple of iridix error internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_INTERNAL_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_INTERNAL_REG_ADDR 0x1df0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_INTERNAL_OFFSET 0x1f0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_ERROR_INTERNAL_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_iridix_error_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df0 );
    system_isp_write_32( base + 0x1df0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_iridix_error_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot iridix iridix error parameter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot of iridix iridix error parameter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_PARAMETER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_PARAMETER_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_PARAMETER_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_PARAMETER_REG_ADDR 0x1df0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_PARAMETER_OFFSET 0x1f0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_PARAMETER_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_iridix_iridix_error_parameter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df0 );
    system_isp_write_32( base + 0x1df0, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_iridix_iridix_error_parameter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df0 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple iridix iridix error parameter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot Multiple of iridix iridix error parameter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_PARAMETER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_PARAMETER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_PARAMETER_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_PARAMETER_REG_ADDR 0x1df0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_PARAMETER_OFFSET 0x1f0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_PARAMETER_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_iridix_iridix_error_parameter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df0 );
    system_isp_write_32( base + 0x1df0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_iridix_iridix_error_parameter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot iridix iridix error internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot of iridix iridix error internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_INTERNAL_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_INTERNAL_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_INTERNAL_REG_ADDR 0x1df4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_INTERNAL_OFFSET 0x1f4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_IRIDIX_ERROR_INTERNAL_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_iridix_iridix_error_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df4 );
    system_isp_write_32( base + 0x1df4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_iridix_iridix_error_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple iridix iridix error internal
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot Multiple of iridix iridix error internal.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_INTERNAL_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_INTERNAL_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_INTERNAL_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_INTERNAL_REG_ADDR 0x1df4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_INTERNAL_OFFSET 0x1f4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_IRIDIX_ERROR_INTERNAL_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_iridix_iridix_error_internal_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df4 );
    system_isp_write_32( base + 0x1df4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_iridix_iridix_error_internal_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot iridix crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot of iridix crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1df4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1f4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_iridix_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df4 );
    system_isp_write_32( base + 0x1df4, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_iridix_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df4 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple iridix crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot Multiple of iridix crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1df4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1f4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_iridix_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df4 );
    system_isp_write_32( base + 0x1df4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_iridix_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot iridix bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot of iridix bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1df4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1f4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_iridix_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df4 );
    system_isp_write_32( base + 0x1df4, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_iridix_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df4 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple iridix bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot Multiple of iridix bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1df4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1f4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_iridix_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df4 );
    system_isp_write_32( base + 0x1df4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_iridix_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot iridix bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot of iridix bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1df4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1f4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_iridix_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df4 );
    system_isp_write_32( base + 0x1df4, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_iridix_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df4 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple iridix bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot Multiple of iridix bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1df4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1f4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_iridix_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df4 );
    system_isp_write_32( base + 0x1df4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_iridix_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot iridix config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot of iridix config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1df8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1f8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_iridix_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df8 );
    system_isp_write_32( base + 0x1df8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_iridix_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple iridix config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix: Slot Multiple of iridix config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1df8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1f8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_iridix_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df8 );
    system_isp_write_32( base + 0x1df8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_iridix_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot antifog hist config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Antifog hist: Slot of antifog hist config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1df8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1f8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_antifog_hist_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df8 );
    system_isp_write_32( base + 0x1df8, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_antifog_hist_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df8 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple antifog hist config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Antifog hist: Slot Multiple of antifog hist config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1df8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x1f8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_ANTIFOG_HIST_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_antifog_hist_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df8 );
    system_isp_write_32( base + 0x1df8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_antifog_hist_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic delay line checker delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic delay line checker: Slot of demosaic delay line checker delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_REG_ADDR 0x1df8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_OFFSET 0x1f8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_delay_line_checker_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df8 );
    system_isp_write_32( base + 0x1df8, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_delay_line_checker_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df8 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic delay line checker delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic delay line checker: Slot Multiple of demosaic delay line checker delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_REG_ADDR 0x1df8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_OFFSET 0x1f8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_DELAY_LINE_CHECKER_DELAY_LINE_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_delay_line_checker_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df8 );
    system_isp_write_32( base + 0x1df8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_delay_line_checker_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic line repeat detector: Slot of demosaic line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1df8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x1f8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df8 );
    system_isp_write_32( base + 0x1df8, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df8 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic line repeat detector: Slot Multiple of demosaic line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1df8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x1f8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1df8 );
    system_isp_write_32( base + 0x1df8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1df8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic line repeat detector: Slot of demosaic line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1dfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x1fc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dfc );
    system_isp_write_32( base + 0x1dfc, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dfc ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic line repeat detector: Slot Multiple of demosaic line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1dfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x1fc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dfc );
    system_isp_write_32( base + 0x1dfc, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dfc ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic rccc crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Slot of demosaic rccc crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1dfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1fc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_rccc_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dfc );
    system_isp_write_32( base + 0x1dfc, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_rccc_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dfc ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic rccc crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Slot Multiple of demosaic rccc crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1dfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x1fc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rccc_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dfc );
    system_isp_write_32( base + 0x1dfc, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rccc_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dfc ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic rccc bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Slot of demosaic rccc bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1dfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1fc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_rccc_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dfc );
    system_isp_write_32( base + 0x1dfc, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_rccc_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dfc ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic rccc bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Slot Multiple of demosaic rccc bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1dfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x1fc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rccc_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dfc );
    system_isp_write_32( base + 0x1dfc, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rccc_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dfc ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic rccc bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Slot of demosaic rccc bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1dfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1fc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_rccc_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dfc );
    system_isp_write_32( base + 0x1dfc, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_rccc_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dfc ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic rccc bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Slot Multiple of demosaic rccc bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1dfc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x1fc
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rccc_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1dfc );
    system_isp_write_32( base + 0x1dfc, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rccc_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1dfc ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic rccc config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Slot of demosaic rccc config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x200
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_rccc_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e00 );
    system_isp_write_32( base + 0x1e00, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_rccc_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e00 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic rccc config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rccc: Slot Multiple of demosaic rccc config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x200
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RCCC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rccc_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e00 );
    system_isp_write_32( base + 0x1e00, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rccc_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e00 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Slot of demosaic crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1e00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x200
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e00 );
    system_isp_write_32( base + 0x1e00, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e00 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Slot Multiple of demosaic crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1e00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x200
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e00 );
    system_isp_write_32( base + 0x1e00, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e00 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Slot of demosaic bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1e00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x200
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e00 );
    system_isp_write_32( base + 0x1e00, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e00 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Slot Multiple of demosaic bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1e00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x200
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e00 );
    system_isp_write_32( base + 0x1e00, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e00 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Slot of demosaic bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1e00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x200
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e00 );
    system_isp_write_32( base + 0x1e00, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e00 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Slot Multiple of demosaic bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1e00
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x200
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e00 );
    system_isp_write_32( base + 0x1e00, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e00 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Slot of demosaic config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x204
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e04 );
    system_isp_write_32( base + 0x1e04, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e04 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic: Slot Multiple of demosaic config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x204
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e04 );
    system_isp_write_32( base + 0x1e04, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e04 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic rgbir cfg calc fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot of demosaic rgbir cfg calc fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_REG_ADDR 0x1e04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_OFFSET 0x204
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_cfg_calc_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e04 );
    system_isp_write_32( base + 0x1e04, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_cfg_calc_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e04 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic rgbir cfg calc fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot Multiple of demosaic rgbir cfg calc fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_REG_ADDR 0x1e04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_OFFSET 0x204
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_cfg_calc_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e04 );
    system_isp_write_32( base + 0x1e04, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_cfg_calc_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e04 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic rgbir demosaic rgbir cfg calc fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot of demosaic rgbir demosaic rgbir cfg calc fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_REG_ADDR 0x1e04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_OFFSET 0x204
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_demosaic_rgbir_cfg_calc_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e04 );
    system_isp_write_32( base + 0x1e04, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_demosaic_rgbir_cfg_calc_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e04 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic rgbir demosaic rgbir cfg calc fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot Multiple of demosaic rgbir demosaic rgbir cfg calc fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_REG_ADDR 0x1e04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_OFFSET 0x204
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_DEMOSAIC_RGBIR_CFG_CALC_FAULT_O_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_demosaic_rgbir_cfg_calc_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e04 );
    system_isp_write_32( base + 0x1e04, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_demosaic_rgbir_cfg_calc_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e04 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic rgbir crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot of demosaic rgbir crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1e04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x204
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e04 );
    system_isp_write_32( base + 0x1e04, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e04 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic rgbir crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot Multiple of demosaic rgbir crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1e04
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x204
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e04 );
    system_isp_write_32( base + 0x1e04, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e04 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic rgbir bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot of demosaic rgbir bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1e08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x208
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e08 );
    system_isp_write_32( base + 0x1e08, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e08 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic rgbir bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot Multiple of demosaic rgbir bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1e08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x208
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e08 );
    system_isp_write_32( base + 0x1e08, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e08 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic rgbir bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot of demosaic rgbir bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1e08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x208
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e08 );
    system_isp_write_32( base + 0x1e08, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e08 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic rgbir bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot Multiple of demosaic rgbir bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1e08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x208
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e08 );
    system_isp_write_32( base + 0x1e08, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e08 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot demosaic rgbir config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot of demosaic rgbir config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x208
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e08 );
    system_isp_write_32( base + 0x1e08, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_demosaic_rgbir_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e08 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple demosaic rgbir config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Demosaic rgbir: Slot Multiple of demosaic rgbir config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x208
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_DEMOSAIC_RGBIR_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e08 );
    system_isp_write_32( base + 0x1e08, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_demosaic_rgbir_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e08 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_FAULT_O_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_FAULT_O_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_FAULT_O_REG_ADDR 0x1e08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_FAULT_O_OFFSET 0x208
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_FAULT_O_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e08 );
    system_isp_write_32( base + 0x1e08, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e08 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_FAULT_O_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_FAULT_O_REG_ADDR 0x1e08
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_FAULT_O_OFFSET 0x208
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_FAULT_O_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e08 );
    system_isp_write_32( base + 0x1e08, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e08 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot out format crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Slot of out format crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1e0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x20c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_out_format_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e0c );
    system_isp_write_32( base + 0x1e0c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_out_format_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e0c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple out format crc data bist o fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Slot Multiple of out format crc data bist o fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_REG_ADDR 0x1e0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_OFFSET 0x20c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CRC_DATA_BIST_O_FAULT_CRC_MISMATCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_out_format_crc_data_bist_o_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e0c );
    system_isp_write_32( base + 0x1e0c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_out_format_crc_data_bist_o_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e0c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot out format bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Slot of out format bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1e0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x20c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_out_format_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e0c );
    system_isp_write_32( base + 0x1e0c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_out_format_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e0c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple out format bist sequencer error test timeout
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Slot Multiple of out format bist sequencer error test timeout.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_REG_ADDR 0x1e0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_OFFSET 0x20c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_TIMEOUT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_out_format_bist_sequencer_error_test_timeout_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e0c );
    system_isp_write_32( base + 0x1e0c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_out_format_bist_sequencer_error_test_timeout_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e0c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot out format bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Slot of out format bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1e0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x20c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_out_format_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e0c );
    system_isp_write_32( base + 0x1e0c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_out_format_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e0c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple out format bist sequencer error test collision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Slot Multiple of out format bist sequencer error test collision.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_REG_ADDR 0x1e0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_OFFSET 0x20c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_BIST_SEQUENCER_ERROR_TEST_COLLISION_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_out_format_bist_sequencer_error_test_collision_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e0c );
    system_isp_write_32( base + 0x1e0c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_out_format_bist_sequencer_error_test_collision_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e0c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot out format config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Slot of out format config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x20c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_out_format_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e0c );
    system_isp_write_32( base + 0x1e0c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_out_format_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e0c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple out format config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format: Slot Multiple of out format config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e0c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x20c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_out_format_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e0c );
    system_isp_write_32( base + 0x1e0c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_out_format_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e0c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_FAULT_O_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_FAULT_O_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_FAULT_O_REG_ADDR 0x1e10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_FAULT_O_OFFSET 0x210
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_FAULT_O_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e10 );
    system_isp_write_32( base + 0x1e10, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e10 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_FAULT_O_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_FAULT_O_REG_ADDR 0x1e10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_FAULT_O_OFFSET 0x210
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_FAULT_O_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e10 );
    system_isp_write_32( base + 0x1e10, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e10 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_FAULT_O_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_FAULT_O_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_FAULT_O_REG_ADDR 0x1e10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_FAULT_O_OFFSET 0x210
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_FAULT_O_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e10 );
    system_isp_write_32( base + 0x1e10, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e10 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_FAULT_O_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_FAULT_O_REG_ADDR 0x1e10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_FAULT_O_OFFSET 0x210
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_FAULT_O_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e10 );
    system_isp_write_32( base + 0x1e10, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e10 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_FAULT_O_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_FAULT_O_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_FAULT_O_REG_ADDR 0x1e10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_FAULT_O_OFFSET 0x210
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_FAULT_O_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e10 );
    system_isp_write_32( base + 0x1e10, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e10 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 fault o
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 fault o.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_FAULT_O_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_FAULT_O_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_FAULT_O_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_FAULT_O_REG_ADDR 0x1e10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_FAULT_O_OFFSET 0x210
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_FAULT_O_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_fault_o_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e10 );
    system_isp_write_32( base + 0x1e10, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_fault_o_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e10 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot crc check 1 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 1: Slot of crc check 1 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_1_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_1_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_1_FAULT_CRC_MISMATCH_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_1_FAULT_CRC_MISMATCH_REG_ADDR 0x1e10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_1_FAULT_CRC_MISMATCH_OFFSET 0x210
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_1_FAULT_CRC_MISMATCH_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_crc_check_1_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e10 );
    system_isp_write_32( base + 0x1e10, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_crc_check_1_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e10 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple crc check 1 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 1: Slot Multiple of crc check 1 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_1_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_1_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_1_FAULT_CRC_MISMATCH_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_1_FAULT_CRC_MISMATCH_REG_ADDR 0x1e10
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_1_FAULT_CRC_MISMATCH_OFFSET 0x210
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_1_FAULT_CRC_MISMATCH_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_1_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e10 );
    system_isp_write_32( base + 0x1e10, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_1_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e10 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot crc check 2 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 2: Slot of crc check 2 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_2_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_2_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_2_FAULT_CRC_MISMATCH_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_2_FAULT_CRC_MISMATCH_REG_ADDR 0x1e14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_2_FAULT_CRC_MISMATCH_OFFSET 0x214
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_2_FAULT_CRC_MISMATCH_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_crc_check_2_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e14 );
    system_isp_write_32( base + 0x1e14, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_crc_check_2_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e14 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple crc check 2 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 2: Slot Multiple of crc check 2 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_2_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_2_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_2_FAULT_CRC_MISMATCH_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_2_FAULT_CRC_MISMATCH_REG_ADDR 0x1e14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_2_FAULT_CRC_MISMATCH_OFFSET 0x214
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_2_FAULT_CRC_MISMATCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_2_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e14 );
    system_isp_write_32( base + 0x1e14, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_2_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e14 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot crc check 3 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 3: Slot of crc check 3 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_3_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_3_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_3_FAULT_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_3_FAULT_CRC_MISMATCH_REG_ADDR 0x1e14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_3_FAULT_CRC_MISMATCH_OFFSET 0x214
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_3_FAULT_CRC_MISMATCH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_crc_check_3_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e14 );
    system_isp_write_32( base + 0x1e14, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_crc_check_3_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e14 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple crc check 3 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check 3: Slot Multiple of crc check 3 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_3_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_3_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_3_FAULT_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_3_FAULT_CRC_MISMATCH_REG_ADDR 0x1e14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_3_FAULT_CRC_MISMATCH_OFFSET 0x214
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_3_FAULT_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_3_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e14 );
    system_isp_write_32( base + 0x1e14, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_3_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e14 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot crc check a1 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a1: Slot of crc check a1 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_REG_ADDR 0x1e14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_OFFSET 0x214
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A1_FAULT_CRC_MISMATCH_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_crc_check_a1_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e14 );
    system_isp_write_32( base + 0x1e14, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_crc_check_a1_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e14 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple crc check a1 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a1: Slot Multiple of crc check a1 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A1_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A1_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A1_FAULT_CRC_MISMATCH_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A1_FAULT_CRC_MISMATCH_REG_ADDR 0x1e14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A1_FAULT_CRC_MISMATCH_OFFSET 0x214
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A1_FAULT_CRC_MISMATCH_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_a1_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e14 );
    system_isp_write_32( base + 0x1e14, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_a1_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e14 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot crc check a2 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a2: Slot of crc check a2 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_REG_ADDR 0x1e14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_OFFSET 0x214
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A2_FAULT_CRC_MISMATCH_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_crc_check_a2_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e14 );
    system_isp_write_32( base + 0x1e14, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_crc_check_a2_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e14 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple crc check a2 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a2: Slot Multiple of crc check a2 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A2_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A2_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A2_FAULT_CRC_MISMATCH_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A2_FAULT_CRC_MISMATCH_REG_ADDR 0x1e14
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A2_FAULT_CRC_MISMATCH_OFFSET 0x214
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A2_FAULT_CRC_MISMATCH_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_a2_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e14 );
    system_isp_write_32( base + 0x1e14, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_a2_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e14 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot crc check a3 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a3: Slot of crc check a3 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_REG_ADDR 0x1e18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_OFFSET 0x218
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_CRC_CHECK_A3_FAULT_CRC_MISMATCH_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_crc_check_a3_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e18 );
    system_isp_write_32( base + 0x1e18, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_crc_check_a3_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e18 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple crc check a3 fault crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crc check a3: Slot Multiple of crc check a3 fault crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A3_FAULT_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A3_FAULT_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A3_FAULT_CRC_MISMATCH_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A3_FAULT_CRC_MISMATCH_REG_ADDR 0x1e18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A3_FAULT_CRC_MISMATCH_OFFSET 0x218
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_CRC_CHECK_A3_FAULT_CRC_MISMATCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_a3_fault_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e18 );
    system_isp_write_32( base + 0x1e18, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_crc_check_a3_fault_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e18 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot pc fifo error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot of pc fifo error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1e18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x218
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e18 );
    system_isp_write_32( base + 0x1e18, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e18 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple pc fifo error serializer1 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot Multiple of pc fifo error serializer1 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_REG_ADDR 0x1e18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_OFFSET 0x218
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_UNSUPPORTED_FORMAT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_serializer1_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e18 );
    system_isp_write_32( base + 0x1e18, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_serializer1_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e18 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot pc fifo error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot of pc fifo error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1e18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x218
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e18 );
    system_isp_write_32( base + 0x1e18, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e18 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple pc fifo error serializer1 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot Multiple of pc fifo error serializer1 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_REG_ADDR 0x1e18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_OFFSET 0x218
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER1_OUTPUT_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_serializer1_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e18 );
    system_isp_write_32( base + 0x1e18, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_serializer1_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e18 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot pc fifo error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot of pc fifo error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1e18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x218
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e18 );
    system_isp_write_32( base + 0x1e18, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e18 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple pc fifo error serializer2 unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot Multiple of pc fifo error serializer2 unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_REG_ADDR 0x1e18
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_OFFSET 0x218
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_UNSUPPORTED_FORMAT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_serializer2_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e18 );
    system_isp_write_32( base + 0x1e18, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_serializer2_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e18 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot pc fifo error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot of pc fifo error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1e1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x21c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e1c );
    system_isp_write_32( base + 0x1e1c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e1c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple pc fifo error serializer2 output overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot Multiple of pc fifo error serializer2 output overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_REG_ADDR 0x1e1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_OFFSET 0x21c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SERIALIZER2_OUTPUT_OVERFLOW_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_serializer2_output_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e1c );
    system_isp_write_32( base + 0x1e1c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_serializer2_output_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e1c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot pc fifo error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot of pc fifo error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1e1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x21c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e1c );
    system_isp_write_32( base + 0x1e1c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e1c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple pc fifo error fifo in crc2 fifo crc mismatch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot Multiple of pc fifo error fifo in crc2 fifo crc mismatch.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_REG_ADDR 0x1e1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_OFFSET 0x21c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_FIFO_CRC_MISMATCH_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_fifo_in_crc2_fifo_crc_mismatch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e1c );
    system_isp_write_32( base + 0x1e1c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_fifo_in_crc2_fifo_crc_mismatch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e1c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot pc fifo error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot of pc fifo error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1e1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x21c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e1c );
    system_isp_write_32( base + 0x1e1c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e1c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple pc fifo error fifo in crc2 crc fifo overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot Multiple of pc fifo error fifo in crc2 crc fifo overflow.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_REG_ADDR 0x1e1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_OFFSET 0x21c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_FIFO_IN_CRC2_CRC_FIFO_OVERFLOW_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_fifo_in_crc2_crc_fifo_overflow_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e1c );
    system_isp_write_32( base + 0x1e1c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_fifo_in_crc2_crc_fifo_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e1c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot pc fifo error synchronizer framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot of pc fifo error synchronizer framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_REG_ADDR 0x1e1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_OFFSET 0x21c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_synchronizer_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e1c );
    system_isp_write_32( base + 0x1e1c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_synchronizer_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e1c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple pc fifo error synchronizer framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot Multiple of pc fifo error synchronizer framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_REG_ADDR 0x1e1c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_OFFSET 0x21c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_SYNCHRONIZER_FRAMING_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_synchronizer_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e1c );
    system_isp_write_32( base + 0x1e1c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_synchronizer_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e1c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot pc fifo error combiner framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot of pc fifo error combiner framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_FRAMING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_FRAMING_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_FRAMING_REG_ADDR 0x1e20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_FRAMING_OFFSET 0x220
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_FRAMING_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_combiner_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e20 );
    system_isp_write_32( base + 0x1e20, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_combiner_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e20 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple pc fifo error combiner framing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot Multiple of pc fifo error combiner framing.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_FRAMING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_FRAMING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_FRAMING_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_FRAMING_REG_ADDR 0x1e20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_FRAMING_OFFSET 0x220
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_FRAMING_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_combiner_framing_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e20 );
    system_isp_write_32( base + 0x1e20, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_combiner_framing_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e20 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot pc fifo error combiner configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot of pc fifo error combiner configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_REG_ADDR 0x1e20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_OFFSET 0x220
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_COMBINER_CONFIGURATION_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_combiner_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e20 );
    system_isp_write_32( base + 0x1e20, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_combiner_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e20 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple pc fifo error combiner configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot Multiple of pc fifo error combiner configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_CONFIGURATION_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_CONFIGURATION_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_CONFIGURATION_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_CONFIGURATION_REG_ADDR 0x1e20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_CONFIGURATION_OFFSET 0x220
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_COMBINER_CONFIGURATION_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_combiner_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e20 );
    system_isp_write_32( base + 0x1e20, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_combiner_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e20 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot pc fifo error deserializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot of pc fifo error deserializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1e20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x220
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_deserializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e20 );
    system_isp_write_32( base + 0x1e20, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_deserializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e20 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple pc fifo error deserializer unsupported format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot Multiple of pc fifo error deserializer unsupported format.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_REG_ADDR 0x1e20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_OFFSET 0x220
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_UNSUPPORTED_FORMAT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_deserializer_unsupported_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e20 );
    system_isp_write_32( base + 0x1e20, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_deserializer_unsupported_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e20 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot pc fifo error deserializer geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot of pc fifo error deserializer geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_REG_ADDR 0x1e20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_OFFSET 0x220
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_deserializer_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e20 );
    system_isp_write_32( base + 0x1e20, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_pc_fifo_error_deserializer_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e20 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple pc fifo error deserializer geometry
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pc fifo: Slot Multiple of pc fifo error deserializer geometry.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_REG_ADDR 0x1e20
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_OFFSET 0x220
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_PC_FIFO_ERROR_DESERIALIZER_GEOMETRY_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_deserializer_geometry_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e20 );
    system_isp_write_32( base + 0x1e20, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_pc_fifo_error_deserializer_geometry_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e20 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot metering aexp config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering aexp: Slot of metering aexp config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x224
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_metering_aexp_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e24 );
    system_isp_write_32( base + 0x1e24, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_metering_aexp_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e24 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple metering aexp config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering aexp: Slot Multiple of metering aexp config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x224
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AEXP_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_metering_aexp_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e24 );
    system_isp_write_32( base + 0x1e24, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_metering_aexp_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e24 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot metering awb config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering awb: Slot of metering awb config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x224
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_metering_awb_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e24 );
    system_isp_write_32( base + 0x1e24, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_metering_awb_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e24 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple metering awb config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Metering awb: Slot Multiple of metering awb config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x224
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_METERING_AWB_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_metering_awb_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e24 );
    system_isp_write_32( base + 0x1e24, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_metering_awb_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e24 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot uroi config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Uroi: Slot of uroi config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_UROI_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_UROI_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_UROI_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_UROI_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_UROI_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x224
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_UROI_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_uroi_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e24 );
    system_isp_write_32( base + 0x1e24, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_uroi_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e24 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple uroi config checker config error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Uroi: Slot Multiple of uroi config checker config error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_UROI_CONFIG_CHECKER_CONFIG_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_UROI_CONFIG_CHECKER_CONFIG_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_UROI_CONFIG_CHECKER_CONFIG_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_UROI_CONFIG_CHECKER_CONFIG_ERROR_REG_ADDR 0x1e24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_UROI_CONFIG_CHECKER_CONFIG_ERROR_OFFSET 0x224
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_UROI_CONFIG_CHECKER_CONFIG_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_uroi_config_checker_config_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e24 );
    system_isp_write_32( base + 0x1e24, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_uroi_config_checker_config_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e24 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot raw frontend line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend line repeat detector: Slot of raw frontend line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1e24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x224
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_raw_frontend_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e24 );
    system_isp_write_32( base + 0x1e24, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_raw_frontend_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e24 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple raw frontend line repeat detector repeating line warning
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend line repeat detector: Slot Multiple of raw frontend line repeat detector repeating line warning.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_REG_ADDR 0x1e24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_OFFSET 0x224
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_WARNING_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_line_repeat_detector_repeating_line_warning_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e24 );
    system_isp_write_32( base + 0x1e24, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_line_repeat_detector_repeating_line_warning_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e24 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot raw frontend line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend line repeat detector: Slot of raw frontend line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1e28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x228
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_raw_frontend_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e28 );
    system_isp_write_32( base + 0x1e28, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_raw_frontend_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e28 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple raw frontend line repeat detector repeating line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend line repeat detector: Slot Multiple of raw frontend line repeat detector repeating line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_REG_ADDR 0x1e28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_OFFSET 0x228
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_LINE_REPEAT_DETECTOR_REPEATING_LINE_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_line_repeat_detector_repeating_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e28 );
    system_isp_write_32( base + 0x1e28, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_line_repeat_detector_repeating_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e28 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot raw frontend delay line5 check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend delay line5 check: Slot of raw frontend delay line5 check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_OFFSET 0x228
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_raw_frontend_delay_line5_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e28 );
    system_isp_write_32( base + 0x1e28, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_raw_frontend_delay_line5_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e28 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple raw frontend delay line5 check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Raw frontend delay line5 check: Slot Multiple of raw frontend delay line5 check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_OFFSET 0x228
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_RAW_FRONTEND_DELAY_LINE5_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_delay_line5_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e28 );
    system_isp_write_32( base + 0x1e28, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_raw_frontend_delay_line5_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e28 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot iridix delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix delay line check: Slot of iridix delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x228
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_iridix_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e28 );
    system_isp_write_32( base + 0x1e28, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_iridix_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e28 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple iridix delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix delay line check: Slot Multiple of iridix delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x228
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IRIDIX_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_iridix_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e28 );
    system_isp_write_32( base + 0x1e28, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_iridix_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e28 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot out format yuv uv delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format yuv uv delay line check: Slot of out format yuv uv delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x228
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_out_format_yuv_uv_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e28 );
    system_isp_write_32( base + 0x1e28, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_out_format_yuv_uv_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e28 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple out format yuv uv delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format yuv uv delay line check: Slot Multiple of out format yuv uv delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e28
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x228
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_YUV_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_out_format_yuv_uv_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e28 );
    system_isp_write_32( base + 0x1e28, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_out_format_yuv_uv_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e28 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot out format uv delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format uv delay line check: Slot of out format uv delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x22c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_out_format_uv_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e2c );
    system_isp_write_32( base + 0x1e2c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_out_format_uv_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e2c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple out format uv delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format uv delay line check: Slot Multiple of out format uv delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x22c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_UV_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_out_format_uv_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e2c );
    system_isp_write_32( base + 0x1e2c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_out_format_uv_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e2c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot out format ab delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format ab delay line check: Slot of out format ab delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x22c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_out_format_ab_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e2c );
    system_isp_write_32( base + 0x1e2c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_out_format_ab_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e2c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple out format ab delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Out format ab delay line check: Slot Multiple of out format ab delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x22c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_OUT_FORMAT_AB_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_out_format_ab_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e2c );
    system_isp_write_32( base + 0x1e2c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_out_format_ab_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e2c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot sinter delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter delay line check: Slot of sinter delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x22c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_sinter_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e2c );
    system_isp_write_32( base + 0x1e2c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_sinter_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e2c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple sinter delay line check delay line error
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter delay line check: Slot Multiple of sinter delay line check delay line error.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_REG_ADDR 0x1e2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_OFFSET 0x22c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_SINTER_DELAY_LINE_CHECK_DELAY_LINE_ERROR_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_sinter_delay_line_check_delay_line_error_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e2c );
    system_isp_write_32( base + 0x1e2c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_sinter_delay_line_check_delay_line_error_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e2c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot interrupts error interrupt double
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Interrupts: Slot of interrupts error interrupt double.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_REG_ADDR 0x1e2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_OFFSET 0x22c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_interrupts_error_interrupt_double_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e2c );
    system_isp_write_32( base + 0x1e2c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_interrupts_error_interrupt_double_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e2c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple interrupts error interrupt double
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Interrupts: Slot Multiple of interrupts error interrupt double.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_REG_ADDR 0x1e2c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_OFFSET 0x22c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_INTERRUPTS_ERROR_INTERRUPT_DOUBLE_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_interrupts_error_interrupt_double_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e2c );
    system_isp_write_32( base + 0x1e2c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_interrupts_error_interrupt_double_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e2c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x230
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e30 );
    system_isp_write_32( base + 0x1e30, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e30 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x230
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e30 );
    system_isp_write_32( base + 0x1e30, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e30 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x230
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e30 );
    system_isp_write_32( base + 0x1e30, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e30 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x230
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e30 );
    system_isp_write_32( base + 0x1e30, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e30 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x230
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e30 );
    system_isp_write_32( base + 0x1e30, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e30 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x230
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e30 );
    system_isp_write_32( base + 0x1e30, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e30 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x230
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e30 );
    system_isp_write_32( base + 0x1e30, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e30 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e30
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x230
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e30 );
    system_isp_write_32( base + 0x1e30, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e30 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x234
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e34 );
    system_isp_write_32( base + 0x1e34, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e34 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x234
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e34 );
    system_isp_write_32( base + 0x1e34, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e34 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x234
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e34 );
    system_isp_write_32( base + 0x1e34, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e34 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x234
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e34 );
    system_isp_write_32( base + 0x1e34, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e34 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x234
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e34 );
    system_isp_write_32( base + 0x1e34, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e34 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x234
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e34 );
    system_isp_write_32( base + 0x1e34, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e34 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x234
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e34 );
    system_isp_write_32( base + 0x1e34, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e34 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e34
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x234
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e34 );
    system_isp_write_32( base + 0x1e34, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e34 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x238
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e38 );
    system_isp_write_32( base + 0x1e38, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e38 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x238
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e38 );
    system_isp_write_32( base + 0x1e38, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e38 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x238
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e38 );
    system_isp_write_32( base + 0x1e38, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e38 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x238
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e38 );
    system_isp_write_32( base + 0x1e38, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e38 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_OFFSET 0x238
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e38 );
    system_isp_write_32( base + 0x1e38, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e38 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_OFFSET 0x238
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e38 );
    system_isp_write_32( base + 0x1e38, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e38 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 1 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot of frame check sensor 1 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_OFFSET 0x238
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e38 );
    system_isp_write_32( base + 0x1e38, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_1_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e38 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 1 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 1: Slot Multiple of frame check sensor 1 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e38
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_OFFSET 0x238
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_1_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e38 );
    system_isp_write_32( base + 0x1e38, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_1_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e38 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x23c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e3c );
    system_isp_write_32( base + 0x1e3c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e3c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x23c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e3c );
    system_isp_write_32( base + 0x1e3c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e3c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x23c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e3c );
    system_isp_write_32( base + 0x1e3c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e3c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x23c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e3c );
    system_isp_write_32( base + 0x1e3c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e3c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x23c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e3c );
    system_isp_write_32( base + 0x1e3c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e3c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x23c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e3c );
    system_isp_write_32( base + 0x1e3c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e3c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x23c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e3c );
    system_isp_write_32( base + 0x1e3c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e3c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e3c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x23c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e3c );
    system_isp_write_32( base + 0x1e3c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e3c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x240
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e40 );
    system_isp_write_32( base + 0x1e40, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e40 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x240
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e40 );
    system_isp_write_32( base + 0x1e40, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e40 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x240
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e40 );
    system_isp_write_32( base + 0x1e40, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e40 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x240
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e40 );
    system_isp_write_32( base + 0x1e40, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e40 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x240
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e40 );
    system_isp_write_32( base + 0x1e40, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e40 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x240
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e40 );
    system_isp_write_32( base + 0x1e40, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e40 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x240
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e40 );
    system_isp_write_32( base + 0x1e40, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e40 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e40
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x240
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e40 );
    system_isp_write_32( base + 0x1e40, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e40 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x244
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e44 );
    system_isp_write_32( base + 0x1e44, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e44 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x244
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e44 );
    system_isp_write_32( base + 0x1e44, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e44 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x244
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e44 );
    system_isp_write_32( base + 0x1e44, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e44 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x244
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e44 );
    system_isp_write_32( base + 0x1e44, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e44 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_OFFSET 0x244
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e44 );
    system_isp_write_32( base + 0x1e44, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e44 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_OFFSET 0x244
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e44 );
    system_isp_write_32( base + 0x1e44, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e44 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 2 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot of frame check sensor 2 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_OFFSET 0x244
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e44 );
    system_isp_write_32( base + 0x1e44, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_2_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e44 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 2 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 2: Slot Multiple of frame check sensor 2 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e44
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_OFFSET 0x244
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_2_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e44 );
    system_isp_write_32( base + 0x1e44, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_2_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e44 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x248
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e48 );
    system_isp_write_32( base + 0x1e48, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e48 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x248
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e48 );
    system_isp_write_32( base + 0x1e48, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e48 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x248
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e48 );
    system_isp_write_32( base + 0x1e48, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e48 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x248
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e48 );
    system_isp_write_32( base + 0x1e48, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e48 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x248
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e48 );
    system_isp_write_32( base + 0x1e48, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e48 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x248
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e48 );
    system_isp_write_32( base + 0x1e48, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e48 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x248
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e48 );
    system_isp_write_32( base + 0x1e48, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e48 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e48
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x248
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e48 );
    system_isp_write_32( base + 0x1e48, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e48 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x24c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e4c );
    system_isp_write_32( base + 0x1e4c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e4c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x24c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e4c );
    system_isp_write_32( base + 0x1e4c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e4c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x24c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e4c );
    system_isp_write_32( base + 0x1e4c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e4c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x24c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e4c );
    system_isp_write_32( base + 0x1e4c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e4c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x24c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e4c );
    system_isp_write_32( base + 0x1e4c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e4c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x24c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e4c );
    system_isp_write_32( base + 0x1e4c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e4c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x24c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e4c );
    system_isp_write_32( base + 0x1e4c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e4c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e4c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x24c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e4c );
    system_isp_write_32( base + 0x1e4c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e4c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x250
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e50 );
    system_isp_write_32( base + 0x1e50, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e50 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x250
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e50 );
    system_isp_write_32( base + 0x1e50, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e50 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x250
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e50 );
    system_isp_write_32( base + 0x1e50, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e50 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x250
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e50 );
    system_isp_write_32( base + 0x1e50, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e50 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_OFFSET 0x250
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e50 );
    system_isp_write_32( base + 0x1e50, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e50 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_OFFSET 0x250
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e50 );
    system_isp_write_32( base + 0x1e50, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e50 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 3 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot of frame check sensor 3 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_OFFSET 0x250
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e50 );
    system_isp_write_32( base + 0x1e50, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_3_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e50 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 3 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 3: Slot Multiple of frame check sensor 3 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e50
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_OFFSET 0x250
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_3_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e50 );
    system_isp_write_32( base + 0x1e50, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_3_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e50 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x254
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e54 );
    system_isp_write_32( base + 0x1e54, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e54 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x254
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e54 );
    system_isp_write_32( base + 0x1e54, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e54 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x254
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e54 );
    system_isp_write_32( base + 0x1e54, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e54 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x254
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e54 );
    system_isp_write_32( base + 0x1e54, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e54 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x254
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e54 );
    system_isp_write_32( base + 0x1e54, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e54 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x254
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e54 );
    system_isp_write_32( base + 0x1e54, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e54 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x254
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e54 );
    system_isp_write_32( base + 0x1e54, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e54 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e54
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x254
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e54 );
    system_isp_write_32( base + 0x1e54, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e54 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x258
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e58 );
    system_isp_write_32( base + 0x1e58, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e58 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x258
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e58 );
    system_isp_write_32( base + 0x1e58, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e58 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x258
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e58 );
    system_isp_write_32( base + 0x1e58, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e58 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x258
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e58 );
    system_isp_write_32( base + 0x1e58, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e58 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x258
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e58 );
    system_isp_write_32( base + 0x1e58, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e58 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x258
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e58 );
    system_isp_write_32( base + 0x1e58, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e58 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x258
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e58 );
    system_isp_write_32( base + 0x1e58, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e58 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e58
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x258
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e58 );
    system_isp_write_32( base + 0x1e58, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e58 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x25c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e5c );
    system_isp_write_32( base + 0x1e5c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e5c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x25c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e5c );
    system_isp_write_32( base + 0x1e5c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e5c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x25c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e5c );
    system_isp_write_32( base + 0x1e5c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e5c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x25c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e5c );
    system_isp_write_32( base + 0x1e5c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e5c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_OFFSET 0x25c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e5c );
    system_isp_write_32( base + 0x1e5c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e5c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_OFFSET 0x25c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e5c );
    system_isp_write_32( base + 0x1e5c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e5c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check sensor 4 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot of frame check sensor 4 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_OFFSET 0x25c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e5c );
    system_isp_write_32( base + 0x1e5c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_sensor_4_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e5c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check sensor 4 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check sensor 4: Slot Multiple of frame check sensor 4 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e5c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_OFFSET 0x25c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_SENSOR_4_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e5c );
    system_isp_write_32( base + 0x1e5c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_sensor_4_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e5c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x260
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e60 );
    system_isp_write_32( base + 0x1e60, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e60 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x260
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e60 );
    system_isp_write_32( base + 0x1e60, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e60 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x260
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e60 );
    system_isp_write_32( base + 0x1e60, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e60 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x260
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e60 );
    system_isp_write_32( base + 0x1e60, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e60 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x260
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e60 );
    system_isp_write_32( base + 0x1e60, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e60 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x260
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e60 );
    system_isp_write_32( base + 0x1e60, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e60 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x260
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e60 );
    system_isp_write_32( base + 0x1e60, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e60 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e60
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x260
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e60 );
    system_isp_write_32( base + 0x1e60, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e60 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x264
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e64 );
    system_isp_write_32( base + 0x1e64, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e64 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x264
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e64 );
    system_isp_write_32( base + 0x1e64, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e64 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x264
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e64 );
    system_isp_write_32( base + 0x1e64, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e64 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x264
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e64 );
    system_isp_write_32( base + 0x1e64, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e64 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x264
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e64 );
    system_isp_write_32( base + 0x1e64, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e64 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x264
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e64 );
    system_isp_write_32( base + 0x1e64, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e64 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x264
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e64 );
    system_isp_write_32( base + 0x1e64, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e64 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e64
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x264
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e64 );
    system_isp_write_32( base + 0x1e64, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e64 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x268
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e68 );
    system_isp_write_32( base + 0x1e68, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e68 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x268
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e68 );
    system_isp_write_32( base + 0x1e68, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e68 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x268
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e68 );
    system_isp_write_32( base + 0x1e68, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e68 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x268
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e68 );
    system_isp_write_32( base + 0x1e68, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e68 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_OFFSET 0x268
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e68 );
    system_isp_write_32( base + 0x1e68, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e68 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_OFFSET 0x268
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e68 );
    system_isp_write_32( base + 0x1e68, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e68 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot of frame check isp error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_OFFSET 0x268
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e68 );
    system_isp_write_32( base + 0x1e68, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e68 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp: Slot Multiple of frame check isp error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e68
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_OFFSET 0x268
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e68 );
    system_isp_write_32( base + 0x1e68, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e68 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x26c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e6c );
    system_isp_write_32( base + 0x1e6c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e6c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x26c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e6c );
    system_isp_write_32( base + 0x1e6c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e6c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x26c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e6c );
    system_isp_write_32( base + 0x1e6c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e6c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x26c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e6c );
    system_isp_write_32( base + 0x1e6c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e6c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x26c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e6c );
    system_isp_write_32( base + 0x1e6c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e6c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x26c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e6c );
    system_isp_write_32( base + 0x1e6c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e6c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x26c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e6c );
    system_isp_write_32( base + 0x1e6c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e6c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e6c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x26c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e6c );
    system_isp_write_32( base + 0x1e6c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e6c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x270
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e70 );
    system_isp_write_32( base + 0x1e70, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e70 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x270
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e70 );
    system_isp_write_32( base + 0x1e70, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e70 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x270
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e70 );
    system_isp_write_32( base + 0x1e70, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e70 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x270
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e70 );
    system_isp_write_32( base + 0x1e70, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e70 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x270
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e70 );
    system_isp_write_32( base + 0x1e70, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e70 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x270
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e70 );
    system_isp_write_32( base + 0x1e70, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e70 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x270
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e70 );
    system_isp_write_32( base + 0x1e70, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e70 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e70
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x270
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e70 );
    system_isp_write_32( base + 0x1e70, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e70 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x274
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e74 );
    system_isp_write_32( base + 0x1e74, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e74 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x274
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e74 );
    system_isp_write_32( base + 0x1e74, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e74 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x274
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e74 );
    system_isp_write_32( base + 0x1e74, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e74 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x274
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e74 );
    system_isp_write_32( base + 0x1e74, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e74 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_OFFSET 0x274
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e74 );
    system_isp_write_32( base + 0x1e74, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e74 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_OFFSET 0x274
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e74 );
    system_isp_write_32( base + 0x1e74, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e74 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp crop error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot of frame check isp crop error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_OFFSET 0x274
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e74 );
    system_isp_write_32( base + 0x1e74, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_crop_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e74 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp crop error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp crop: Slot Multiple of frame check isp crop error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e74
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_OFFSET 0x274
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_CROP_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e74 );
    system_isp_write_32( base + 0x1e74, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_crop_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e74 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x278
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e78 );
    system_isp_write_32( base + 0x1e78, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e78 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x278
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e78 );
    system_isp_write_32( base + 0x1e78, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e78 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x278
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e78 );
    system_isp_write_32( base + 0x1e78, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e78 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x278
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e78 );
    system_isp_write_32( base + 0x1e78, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e78 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x278
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e78 );
    system_isp_write_32( base + 0x1e78, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e78 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x278
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e78 );
    system_isp_write_32( base + 0x1e78, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e78 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x278
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e78 );
    system_isp_write_32( base + 0x1e78, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e78 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e78
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x278
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e78 );
    system_isp_write_32( base + 0x1e78, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e78 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x27c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e7c );
    system_isp_write_32( base + 0x1e7c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e7c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x27c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e7c );
    system_isp_write_32( base + 0x1e7c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e7c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x27c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e7c );
    system_isp_write_32( base + 0x1e7c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e7c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x27c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e7c );
    system_isp_write_32( base + 0x1e7c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e7c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x27c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e7c );
    system_isp_write_32( base + 0x1e7c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e7c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x27c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e7c );
    system_isp_write_32( base + 0x1e7c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e7c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x27c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e7c );
    system_isp_write_32( base + 0x1e7c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e7c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e7c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x27c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e7c );
    system_isp_write_32( base + 0x1e7c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e7c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x280
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e80 );
    system_isp_write_32( base + 0x1e80, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e80 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x280
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e80 );
    system_isp_write_32( base + 0x1e80, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e80 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x280
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e80 );
    system_isp_write_32( base + 0x1e80, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e80 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x280
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e80 );
    system_isp_write_32( base + 0x1e80, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e80 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_OFFSET 0x280
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e80 );
    system_isp_write_32( base + 0x1e80, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e80 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_OFFSET 0x280
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e80 );
    system_isp_write_32( base + 0x1e80, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e80 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 2 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot of frame check isp out 2 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_OFFSET 0x280
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e80 );
    system_isp_write_32( base + 0x1e80, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_2_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e80 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 2 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 2: Slot Multiple of frame check isp out 2 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e80
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_OFFSET 0x280
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_2_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e80 );
    system_isp_write_32( base + 0x1e80, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_2_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e80 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x284
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e84 );
    system_isp_write_32( base + 0x1e84, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e84 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x284
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e84 );
    system_isp_write_32( base + 0x1e84, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e84 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x284
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e84 );
    system_isp_write_32( base + 0x1e84, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e84 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x284
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e84 );
    system_isp_write_32( base + 0x1e84, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e84 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x284
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e84 );
    system_isp_write_32( base + 0x1e84, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e84 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x284
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e84 );
    system_isp_write_32( base + 0x1e84, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e84 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x284
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e84 );
    system_isp_write_32( base + 0x1e84, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e84 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e84
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x284
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e84 );
    system_isp_write_32( base + 0x1e84, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e84 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x288
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e88 );
    system_isp_write_32( base + 0x1e88, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e88 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x288
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e88 );
    system_isp_write_32( base + 0x1e88, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e88 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x288
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e88 );
    system_isp_write_32( base + 0x1e88, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e88 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x288
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e88 );
    system_isp_write_32( base + 0x1e88, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e88 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x288
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e88 );
    system_isp_write_32( base + 0x1e88, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e88 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x288
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e88 );
    system_isp_write_32( base + 0x1e88, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e88 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x288
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e88 );
    system_isp_write_32( base + 0x1e88, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e88 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e88
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x288
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e88 );
    system_isp_write_32( base + 0x1e88, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e88 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x28c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e8c );
    system_isp_write_32( base + 0x1e8c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e8c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x28c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e8c );
    system_isp_write_32( base + 0x1e8c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e8c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x28c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e8c );
    system_isp_write_32( base + 0x1e8c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e8c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x28c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e8c );
    system_isp_write_32( base + 0x1e8c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e8c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_OFFSET 0x28c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e8c );
    system_isp_write_32( base + 0x1e8c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e8c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_OFFSET 0x28c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e8c );
    system_isp_write_32( base + 0x1e8c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e8c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 3 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot of frame check isp out 3 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_OFFSET 0x28c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e8c );
    system_isp_write_32( base + 0x1e8c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_3_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e8c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 3 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 3: Slot Multiple of frame check isp out 3 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e8c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_OFFSET 0x28c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_3_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e8c );
    system_isp_write_32( base + 0x1e8c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_3_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e8c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x290
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e90 );
    system_isp_write_32( base + 0x1e90, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e90 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error active width below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error active width below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_REG_ADDR 0x1e90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_OFFSET 0x290
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_active_width_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e90 );
    system_isp_write_32( base + 0x1e90, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_active_width_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e90 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x290
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e90 );
    system_isp_write_32( base + 0x1e90, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e90 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error active width above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error active width above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_REG_ADDR 0x1e90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_OFFSET 0x290
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_WIDTH_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_active_width_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e90 );
    system_isp_write_32( base + 0x1e90, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_active_width_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e90 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x290
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e90 );
    system_isp_write_32( base + 0x1e90, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e90 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error active height below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error active height below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_REG_ADDR 0x1e90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_OFFSET 0x290
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_active_height_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e90 );
    system_isp_write_32( base + 0x1e90, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_active_height_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e90 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x290
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e90 );
    system_isp_write_32( base + 0x1e90, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e90 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error active height above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error active height above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_REG_ADDR 0x1e90
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_OFFSET 0x290
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_ACTIVE_HEIGHT_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_active_height_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e90 );
    system_isp_write_32( base + 0x1e90, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_active_height_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e90 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x294
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e94 );
    system_isp_write_32( base + 0x1e94, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e94 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error horizontal blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error horizontal blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_OFFSET 0x294
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_horizontal_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e94 );
    system_isp_write_32( base + 0x1e94, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_horizontal_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e94 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x294
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e94 );
    system_isp_write_32( base + 0x1e94, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e94 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error horizontal blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error horizontal blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_OFFSET 0x294
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_HORIZONTAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_horizontal_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e94 );
    system_isp_write_32( base + 0x1e94, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_horizontal_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e94 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x294
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e94 );
    system_isp_write_32( base + 0x1e94, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e94 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error vertical blank below limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error vertical blank below limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_REG_ADDR 0x1e94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_OFFSET 0x294
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_BELOW_LIMIT_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_vertical_blank_below_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e94 );
    system_isp_write_32( base + 0x1e94, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_vertical_blank_below_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e94 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x294
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e94 );
    system_isp_write_32( base + 0x1e94, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e94 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error vertical blank above limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error vertical blank above limit.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_REG_ADDR 0x1e94
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_OFFSET 0x294
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_VERTICAL_BLANK_ABOVE_LIMIT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_vertical_blank_above_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e94 );
    system_isp_write_32( base + 0x1e94, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_vertical_blank_above_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e94 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x298
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e98 );
    system_isp_write_32( base + 0x1e98, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e98 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error field during active video
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error field during active video.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_REG_ADDR 0x1e98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_OFFSET 0x298
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_FIELD_DURING_ACTIVE_VIDEO_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_field_during_active_video_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e98 );
    system_isp_write_32( base + 0x1e98, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_field_during_active_video_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e98 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x298
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e98 );
    system_isp_write_32( base + 0x1e98, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e98 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error extra field during vblanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error extra field during vblanking.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_REG_ADDR 0x1e98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_OFFSET 0x298
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_EXTRA_FIELD_DURING_VBLANKING_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_extra_field_during_vblanking_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e98 );
    system_isp_write_32( base + 0x1e98, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_extra_field_during_vblanking_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e98 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_OFFSET 0x298
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e98 );
    system_isp_write_32( base + 0x1e98, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e98 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error manual trigger.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_REG_ADDR 0x1e98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_OFFSET 0x298
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_MANUAL_TRIGGER_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e98 );
    system_isp_write_32( base + 0x1e98, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e98 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot frame check isp out 1 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot of frame check isp out 1 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_OFFSET 0x298
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e98 );
    system_isp_write_32( base + 0x1e98, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_frame_check_isp_out_1_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e98 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple frame check isp out 1 error internal fault
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame check isp out 1: Slot Multiple of frame check isp out 1 error internal fault.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_REG_ADDR 0x1e98
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_OFFSET 0x298
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_FRAME_CHECK_ISP_OUT_1_ERROR_INTERNAL_FAULT_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_internal_fault_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e98 );
    system_isp_write_32( base + 0x1e98, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_frame_check_isp_out_1_error_internal_fault_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e98 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig pclk2 top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig pclk2 top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1e9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x29c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk2_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e9c );
    system_isp_write_32( base + 0x1e9c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk2_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e9c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig pclk2 top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig pclk2 top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1e9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x29c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk2_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e9c );
    system_isp_write_32( base + 0x1e9c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk2_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e9c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig pclk2 top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig pclk2 top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1e9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x29c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk2_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e9c );
    system_isp_write_32( base + 0x1e9c, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk2_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e9c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig pclk2 top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig pclk2 top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1e9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x29c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK2_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk2_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e9c );
    system_isp_write_32( base + 0x1e9c, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk2_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e9c ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig pclk top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig pclk top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1e9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x29c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e9c );
    system_isp_write_32( base + 0x1e9c, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e9c ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig pclk top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig pclk top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1e9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x29c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e9c );
    system_isp_write_32( base + 0x1e9c, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e9c ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig pclk top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig pclk top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1e9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x29c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e9c );
    system_isp_write_32( base + 0x1e9c, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_pclk_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e9c ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig pclk top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig pclk top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1e9c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x29c
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_PCLK_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1e9c );
    system_isp_write_32( base + 0x1e9c, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_pclk_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1e9c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig vclk top fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig vclk top fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1ea0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_OFFSET 0x2a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_vclk_top_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea0 );
    system_isp_write_32( base + 0x1ea0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_vclk_top_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig vclk top fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig vclk top fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1ea0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_OFFSET 0x2a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_vclk_top_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea0 );
    system_isp_write_32( base + 0x1ea0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_vclk_top_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig vclk top fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig vclk top fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_REG_ADDR 0x1ea0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_OFFSET 0x2a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_vclk_top_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea0 );
    system_isp_write_32( base + 0x1ea0, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_vclk_top_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea0 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig vclk top fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig vclk top fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_REG_ADDR 0x1ea0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_OFFSET 0x2a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_VCLK_TOP_FAULT_H_RVALID_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_vclk_top_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea0 );
    system_isp_write_32( base + 0x1ea0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_vclk_top_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig frontend top fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig frontend top fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1ea0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_OFFSET 0x2a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_frontend_top_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea0 );
    system_isp_write_32( base + 0x1ea0, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_frontend_top_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea0 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig frontend top fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig frontend top fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1ea0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_OFFSET 0x2a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_frontend_top_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea0 );
    system_isp_write_32( base + 0x1ea0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_frontend_top_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig frontend top fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig frontend top fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_REG_ADDR 0x1ea0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_OFFSET 0x2a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_frontend_top_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea0 );
    system_isp_write_32( base + 0x1ea0, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_frontend_top_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea0 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig frontend top fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig frontend top fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_REG_ADDR 0x1ea0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_OFFSET 0x2a0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_FRONTEND_TOP_FAULT_H_RVALID_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_frontend_top_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea0 );
    system_isp_write_32( base + 0x1ea0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_frontend_top_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1ea4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x2a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea4 );
    system_isp_write_32( base + 0x1ea4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig top cdma fault s address range
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig top cdma fault s address range.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_REG_ADDR 0x1ea4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_OFFSET 0x2a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_S_ADDRESS_RANGE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_top_cdma_fault_s_address_range_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea4 );
    system_isp_write_32( base + 0x1ea4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_top_cdma_fault_s_address_range_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic sconfig top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic sconfig top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1ea4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x2a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_sconfig_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea4 );
    system_isp_write_32( base + 0x1ea4, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_sconfig_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea4 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic sconfig top cdma fault h rvalid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic sconfig top cdma fault h rvalid.
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_REG_ADDR 0x1ea4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_OFFSET 0x2a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SCONFIG_TOP_CDMA_FAULT_H_RVALID_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_top_cdma_fault_h_rvalid_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea4 );
    system_isp_write_32( base + 0x1ea4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_sconfig_top_cdma_fault_h_rvalid_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic serror metering arb access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic serror metering arb access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1ea4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_OFFSET 0x2a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_serror_metering_arb_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea4 );
    system_isp_write_32( base + 0x1ea4, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_serror_metering_arb_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea4 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic serror metering arb access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic serror metering arb access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1ea4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_OFFSET 0x2a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_metering_arb_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea4 );
    system_isp_write_32( base + 0x1ea4, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_metering_arb_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea4 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic serror metering arb access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic serror metering arb access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1ea4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_OFFSET 0x2a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_serror_metering_arb_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea4 );
    system_isp_write_32( base + 0x1ea4, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_serror_metering_arb_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea4 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic serror metering arb access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic serror metering arb access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1ea4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_OFFSET 0x2a4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_METERING_ARB_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_metering_arb_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea4 );
    system_isp_write_32( base + 0x1ea4, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_metering_arb_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea4 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic serror arb hist access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic serror arb hist access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1ea8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_OFFSET 0x2a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea8 );
    system_isp_write_32( base + 0x1ea8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic serror arb hist access out of range 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic serror arb hist access out of range (bit 0).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_REG_ADDR 0x1ea8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_OFFSET 0x2a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_0_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea8 );
    system_isp_write_32( base + 0x1ea8, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea8 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic serror arb hist access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic serror arb hist access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1ea8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_OFFSET 0x2a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea8 );
    system_isp_write_32( base + 0x1ea8, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea8 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic serror arb hist access out of range 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic serror arb hist access out of range (bit 1).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_REG_ADDR 0x1ea8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_OFFSET 0x2a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_1_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea8 );
    system_isp_write_32( base + 0x1ea8, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea8 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic serror arb hist access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic serror arb hist access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1ea8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_OFFSET 0x2a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea8 );
    system_isp_write_32( base + 0x1ea8, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea8 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic serror arb hist access out of range 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic serror arb hist access out of range (bit 2).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_REG_ADDR 0x1ea8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_OFFSET 0x2a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_2_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea8 );
    system_isp_write_32( base + 0x1ea8, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea8 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic serror arb hist access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic serror arb hist access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1ea8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_OFFSET 0x2a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea8 );
    system_isp_write_32( base + 0x1ea8, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea8 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic serror arb hist access out of range 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic serror arb hist access out of range (bit 3).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_REG_ADDR 0x1ea8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_OFFSET 0x2a8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_3_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1ea8 );
    system_isp_write_32( base + 0x1ea8, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1ea8 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic serror arb hist access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic serror arb hist access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1eac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_OFFSET 0x2ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1eac );
    system_isp_write_32( base + 0x1eac, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1eac ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic serror arb hist access out of range 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic serror arb hist access out of range (bit 4).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_REG_ADDR 0x1eac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_OFFSET 0x2ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_4_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1eac );
    system_isp_write_32( base + 0x1eac, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1eac ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic serror arb hist access out of range 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic serror arb hist access out of range (bit 5).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_FIELD_OFFSET 8
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_REG_ADDR 0x1eac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_OFFSET 0x2ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1eac );
    system_isp_write_32( base + 0x1eac, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1eac ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic serror arb hist access out of range 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic serror arb hist access out of range (bit 5).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_FIELD_OFFSET 15
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_REG_ADDR 0x1eac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_OFFSET 0x2ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_5_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1eac );
    system_isp_write_32( base + 0x1eac, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1eac ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic serror arb hist access out of range 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic serror arb hist access out of range (bit 6).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_FIELD_OFFSET 16
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_REG_ADDR 0x1eac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_OFFSET 0x2ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1eac );
    system_isp_write_32( base + 0x1eac, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1eac ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic serror arb hist access out of range 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic serror arb hist access out of range (bit 6).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_FIELD_OFFSET 23
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_REG_ADDR 0x1eac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_OFFSET 0x2ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_6_FIELD_MASK 0x800000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1eac );
    system_isp_write_32( base + 0x1eac, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1eac ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic serror arb hist access out of range 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic serror arb hist access out of range (bit 7).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_FIELD_OFFSET 24
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_REG_ADDR 0x1eac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_OFFSET 0x2ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1eac );
    system_isp_write_32( base + 0x1eac, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1eac ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic serror arb hist access out of range 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic serror arb hist access out of range (bit 7).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_FIELD_OFFSET 31
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_REG_ADDR 0x1eac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_OFFSET 0x2ac
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_7_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1eac );
    system_isp_write_32( base + 0x1eac, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1eac ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot ic serror arb hist access out of range 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot of ic serror arb hist access out of range (bit 8).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_DATASIZE 4
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_FIELD_OFFSET 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_REG_ADDR 0x1eb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_OFFSET 0x2b0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1eb0 );
    system_isp_write_32( base + 0x1eb0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_ic_serror_arb_hist_access_out_of_range_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1eb0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot Multiple ic serror arb hist access out of range 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Ic: Slot Multiple of ic serror arb hist access out of range (bit 8).
// ------------------------------------------------------------------------------ //

#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_DEFAULT 0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_DATASIZE 1
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_FIELD_OFFSET 7
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_REG_ADDR 0x1eb0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_OFFSET 0x2b0
#define ACAMERA_FAULTS_CFG_FAULTS_CFG_SLOT_MULTIPLE_IC_SERROR_ARB_HIST_ACCESS_OUT_OF_RANGE_8_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1eb0 );
    system_isp_write_32( base + 0x1eb0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_faults_cfg_faults_cfg_slot_multiple_ic_serror_arb_hist_access_out_of_range_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1eb0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
#endif //__ACAMERA_FAULTS_CFG_CONFIG_H__
