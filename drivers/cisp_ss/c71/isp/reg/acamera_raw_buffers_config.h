//----------------------------------------------------------------------------
//   The confidential and proprietary information contained in this file may
//   only be used by a person authorised under and to the extent permitted
//   by a subsisting licensing agreement from ARM Limited or its affiliates.
//
//          (C) COPYRIGHT [2019] ARM Limited or its affiliates.
//              ALL RIGHTS RESERVED
//
//   This entire notice must be reproduced on all copies of this file
//   and copies of this file may only be made by a person if such person is
//   permitted to do so under the terms of a subsisting license agreement
//   from ARM Limited or its affiliates.
//----------------------------------------------------------------------------

#ifndef __ACAMERA_RAW_BUFFERS_CONFIG_H__
#define __ACAMERA_RAW_BUFFERS_CONFIG_H__

#include "system_isp_io.h"

// File generated by isp_config.py

// ------------------------------------------------------------------------------ //
// Instance 'raw_buffers' of module 'raw_buffers'
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_BASE_ADDR ( 0x800 )
#define ACAMERA_RAW_BUFFERS_SIZE ( 0x400 )

// ------------------------------------------------------------------------------ //
// Group: raw_buffers
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Configuration of frame buffers
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Buffer valid 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 0 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_0_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_0_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_0_REG_ADDR 0x800
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_0_OFFSET 0x0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_0_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x800 );
    system_isp_write_32( base + 0x800, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x800 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_0_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_0_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_0_REG_ADDR 0x800
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_0_OFFSET 0x0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_0_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x800 );
    system_isp_write_32( base + 0x800, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x800 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_0_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_0_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_0_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_0_REG_ADDR 0x800
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_0_OFFSET 0x0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_0_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x800 );
    system_isp_write_32( base + 0x800, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x800 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_0_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_0_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_0_REG_ADDR 0x800
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_0_OFFSET 0x0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_0_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x800 );
    system_isp_write_32( base + 0x800, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x800 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_0_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_0_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_0_REG_ADDR 0x800
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_0_OFFSET 0x0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_0_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x800 );
    system_isp_write_32( base + 0x800, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x800 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_0_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_0_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_0_REG_ADDR 0x800
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_0_OFFSET 0x0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_0_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x800 );
    system_isp_write_32( base + 0x800, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x800 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_0_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_0_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_0_REG_ADDR 0x804
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_0_OFFSET 0x4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_0_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_0_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x804, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_0_read( uint32_t base )
{
    return system_isp_read_32( base + 0x804 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_0_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_0_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_0_REG_ADDR 0x808
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_0_OFFSET 0x8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_0_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_0_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x808, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_0_read( uint32_t base )
{
    return system_isp_read_32( base + 0x808 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_0_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_0_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_0_REG_ADDR 0x80c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_0_OFFSET 0xc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_0_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x80c );
    system_isp_write_32( base + 0x80c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x80c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_0_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_0_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_0_REG_ADDR 0x810
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_0_OFFSET 0x10
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_0_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x810 );
    system_isp_write_32( base + 0x810, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x810 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_0_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_0_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_0_REG_ADDR 0x814
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_0_OFFSET 0x14
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_0_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x814 );
    system_isp_write_32( base + 0x814, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x814 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_0_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_0_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_0_REG_ADDR 0x818
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_0_OFFSET 0x18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_0_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x818 );
    system_isp_write_32( base + 0x818, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x818 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_0_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_0_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_0_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_0_REG_ADDR 0x81c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_0_OFFSET 0x1c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_0_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_0_read( uint32_t base )
{
    return system_isp_read_32( base + 0x81c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 1 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_1_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_1_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_1_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_1_REG_ADDR 0x820
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_1_OFFSET 0x20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_1_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x820 );
    system_isp_write_32( base + 0x820, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x820 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_1_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_1_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_1_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_1_REG_ADDR 0x820
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_1_OFFSET 0x20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_1_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x820 );
    system_isp_write_32( base + 0x820, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x820 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_1_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_1_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_1_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_1_REG_ADDR 0x820
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_1_OFFSET 0x20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_1_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x820 );
    system_isp_write_32( base + 0x820, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x820 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_1_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_1_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_1_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_1_REG_ADDR 0x820
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_1_OFFSET 0x20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_1_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x820 );
    system_isp_write_32( base + 0x820, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x820 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_1_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_1_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_1_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_1_REG_ADDR 0x820
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_1_OFFSET 0x20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_1_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x820 );
    system_isp_write_32( base + 0x820, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x820 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_1_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_1_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_1_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_1_REG_ADDR 0x824
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_1_OFFSET 0x24
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_1_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_1_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x824, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_1_read( uint32_t base )
{
    return system_isp_read_32( base + 0x824 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_1_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_1_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_1_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_1_REG_ADDR 0x828
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_1_OFFSET 0x28
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_1_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_1_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x828, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_1_read( uint32_t base )
{
    return system_isp_read_32( base + 0x828 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_1_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_1_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_1_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_1_REG_ADDR 0x82c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_1_OFFSET 0x2c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_1_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x82c );
    system_isp_write_32( base + 0x82c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x82c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_1_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_1_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_1_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_1_REG_ADDR 0x830
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_1_OFFSET 0x30
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_1_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x830 );
    system_isp_write_32( base + 0x830, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x830 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_1_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_1_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_1_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_1_REG_ADDR 0x834
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_1_OFFSET 0x34
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_1_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x834 );
    system_isp_write_32( base + 0x834, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x834 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_1_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_1_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_1_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_1_REG_ADDR 0x838
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_1_OFFSET 0x38
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_1_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x838 );
    system_isp_write_32( base + 0x838, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x838 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_1_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_1_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_1_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_1_REG_ADDR 0x83c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_1_OFFSET 0x3c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_1_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_1_read( uint32_t base )
{
    return system_isp_read_32( base + 0x83c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 2 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_2_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_2_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_2_REG_ADDR 0x840
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_2_OFFSET 0x40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_2_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x840 );
    system_isp_write_32( base + 0x840, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x840 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_2_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_2_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_2_REG_ADDR 0x840
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_2_OFFSET 0x40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_2_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x840 );
    system_isp_write_32( base + 0x840, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x840 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_2_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_2_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_2_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_2_REG_ADDR 0x840
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_2_OFFSET 0x40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_2_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x840 );
    system_isp_write_32( base + 0x840, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x840 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_2_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_2_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_2_REG_ADDR 0x840
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_2_OFFSET 0x40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_2_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x840 );
    system_isp_write_32( base + 0x840, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x840 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_2_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_2_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_2_REG_ADDR 0x840
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_2_OFFSET 0x40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_2_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x840 );
    system_isp_write_32( base + 0x840, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x840 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_2_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_2_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_2_REG_ADDR 0x840
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_2_OFFSET 0x40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_2_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x840 );
    system_isp_write_32( base + 0x840, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x840 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_2_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_2_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_2_REG_ADDR 0x844
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_2_OFFSET 0x44
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_2_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_2_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x844, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_2_read( uint32_t base )
{
    return system_isp_read_32( base + 0x844 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_2_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_2_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_2_REG_ADDR 0x848
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_2_OFFSET 0x48
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_2_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_2_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x848, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_2_read( uint32_t base )
{
    return system_isp_read_32( base + 0x848 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_2_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_2_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_2_REG_ADDR 0x84c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_2_OFFSET 0x4c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_2_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x84c );
    system_isp_write_32( base + 0x84c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x84c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_2_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_2_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_2_REG_ADDR 0x850
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_2_OFFSET 0x50
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_2_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x850 );
    system_isp_write_32( base + 0x850, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x850 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_2_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_2_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_2_REG_ADDR 0x854
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_2_OFFSET 0x54
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_2_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x854 );
    system_isp_write_32( base + 0x854, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x854 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_2_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_2_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_2_REG_ADDR 0x858
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_2_OFFSET 0x58
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_2_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x858 );
    system_isp_write_32( base + 0x858, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x858 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_2_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_2_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_2_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_2_REG_ADDR 0x85c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_2_OFFSET 0x5c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_2_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_2_read( uint32_t base )
{
    return system_isp_read_32( base + 0x85c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 3 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_3_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_3_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_3_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_3_REG_ADDR 0x860
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_3_OFFSET 0x60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_3_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x860 );
    system_isp_write_32( base + 0x860, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x860 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_3_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_3_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_3_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_3_REG_ADDR 0x860
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_3_OFFSET 0x60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_3_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x860 );
    system_isp_write_32( base + 0x860, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x860 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_3_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_3_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_3_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_3_REG_ADDR 0x860
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_3_OFFSET 0x60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_3_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x860 );
    system_isp_write_32( base + 0x860, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x860 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_3_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_3_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_3_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_3_REG_ADDR 0x860
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_3_OFFSET 0x60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_3_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x860 );
    system_isp_write_32( base + 0x860, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x860 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_3_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_3_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_3_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_3_REG_ADDR 0x860
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_3_OFFSET 0x60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_3_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x860 );
    system_isp_write_32( base + 0x860, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x860 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_3_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_3_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_3_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_3_REG_ADDR 0x864
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_3_OFFSET 0x64
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_3_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_3_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x864, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_3_read( uint32_t base )
{
    return system_isp_read_32( base + 0x864 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_3_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_3_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_3_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_3_REG_ADDR 0x868
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_3_OFFSET 0x68
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_3_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_3_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x868, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_3_read( uint32_t base )
{
    return system_isp_read_32( base + 0x868 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_3_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_3_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_3_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_3_REG_ADDR 0x86c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_3_OFFSET 0x6c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_3_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x86c );
    system_isp_write_32( base + 0x86c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x86c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_3_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_3_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_3_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_3_REG_ADDR 0x870
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_3_OFFSET 0x70
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_3_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x870 );
    system_isp_write_32( base + 0x870, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x870 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_3_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_3_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_3_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_3_REG_ADDR 0x874
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_3_OFFSET 0x74
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_3_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x874 );
    system_isp_write_32( base + 0x874, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x874 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_3_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_3_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_3_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_3_REG_ADDR 0x878
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_3_OFFSET 0x78
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_3_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x878 );
    system_isp_write_32( base + 0x878, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x878 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_3_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_3_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_3_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_3_REG_ADDR 0x87c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_3_OFFSET 0x7c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_3_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_3_read( uint32_t base )
{
    return system_isp_read_32( base + 0x87c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 4 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_4_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_4_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_4_REG_ADDR 0x880
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_4_OFFSET 0x80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_4_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x880 );
    system_isp_write_32( base + 0x880, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x880 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_4_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_4_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_4_REG_ADDR 0x880
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_4_OFFSET 0x80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_4_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x880 );
    system_isp_write_32( base + 0x880, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x880 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_4_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_4_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_4_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_4_REG_ADDR 0x880
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_4_OFFSET 0x80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_4_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x880 );
    system_isp_write_32( base + 0x880, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x880 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_4_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_4_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_4_REG_ADDR 0x880
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_4_OFFSET 0x80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_4_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x880 );
    system_isp_write_32( base + 0x880, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x880 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_4_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_4_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_4_REG_ADDR 0x880
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_4_OFFSET 0x80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_4_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x880 );
    system_isp_write_32( base + 0x880, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x880 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_4_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_4_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_4_REG_ADDR 0x880
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_4_OFFSET 0x80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_4_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x880 );
    system_isp_write_32( base + 0x880, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x880 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_4_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_4_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_4_REG_ADDR 0x884
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_4_OFFSET 0x84
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_4_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_4_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x884, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_4_read( uint32_t base )
{
    return system_isp_read_32( base + 0x884 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_4_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_4_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_4_REG_ADDR 0x888
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_4_OFFSET 0x88
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_4_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_4_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x888, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_4_read( uint32_t base )
{
    return system_isp_read_32( base + 0x888 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_4_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_4_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_4_REG_ADDR 0x88c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_4_OFFSET 0x8c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_4_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_4_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x88c );
    system_isp_write_32( base + 0x88c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x88c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_4_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_4_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_4_REG_ADDR 0x890
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_4_OFFSET 0x90
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_4_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_4_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x890 );
    system_isp_write_32( base + 0x890, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x890 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_4_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_4_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_4_REG_ADDR 0x894
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_4_OFFSET 0x94
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_4_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_4_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x894 );
    system_isp_write_32( base + 0x894, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x894 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_4_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_4_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_4_REG_ADDR 0x898
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_4_OFFSET 0x98
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_4_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x898 );
    system_isp_write_32( base + 0x898, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x898 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_4_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_4_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_4_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_4_REG_ADDR 0x89c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_4_OFFSET 0x9c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_4_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_4_read( uint32_t base )
{
    return system_isp_read_32( base + 0x89c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 5 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_5_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_5_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_5_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_5_REG_ADDR 0x8a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_5_OFFSET 0xa0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_5_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8a0 );
    system_isp_write_32( base + 0x8a0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8a0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_5_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_5_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_5_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_5_REG_ADDR 0x8a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_5_OFFSET 0xa0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_5_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8a0 );
    system_isp_write_32( base + 0x8a0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8a0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_5_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_5_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_5_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_5_REG_ADDR 0x8a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_5_OFFSET 0xa0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_5_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8a0 );
    system_isp_write_32( base + 0x8a0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8a0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_5_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_5_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_5_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_5_REG_ADDR 0x8a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_5_OFFSET 0xa0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_5_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8a0 );
    system_isp_write_32( base + 0x8a0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8a0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_5_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_5_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_5_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_5_REG_ADDR 0x8a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_5_OFFSET 0xa0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_5_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8a0 );
    system_isp_write_32( base + 0x8a0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8a0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_5_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_5_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_5_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_5_REG_ADDR 0x8a4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_5_OFFSET 0xa4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_5_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_5_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x8a4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_5_read( uint32_t base )
{
    return system_isp_read_32( base + 0x8a4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_5_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_5_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_5_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_5_REG_ADDR 0x8a8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_5_OFFSET 0xa8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_5_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_5_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x8a8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_5_read( uint32_t base )
{
    return system_isp_read_32( base + 0x8a8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_5_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_5_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_5_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_5_REG_ADDR 0x8ac
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_5_OFFSET 0xac
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_5_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_5_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8ac );
    system_isp_write_32( base + 0x8ac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_5_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x8ac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_5_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_5_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_5_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_5_REG_ADDR 0x8b0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_5_OFFSET 0xb0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_5_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_5_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8b0 );
    system_isp_write_32( base + 0x8b0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_5_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x8b0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_5_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_5_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_5_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_5_REG_ADDR 0x8b4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_5_OFFSET 0xb4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_5_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_5_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8b4 );
    system_isp_write_32( base + 0x8b4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_5_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x8b4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_5_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_5_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_5_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_5_REG_ADDR 0x8b8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_5_OFFSET 0xb8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_5_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8b8 );
    system_isp_write_32( base + 0x8b8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8b8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_5_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_5_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_5_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_5_REG_ADDR 0x8bc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_5_OFFSET 0xbc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_5_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_5_read( uint32_t base )
{
    return system_isp_read_32( base + 0x8bc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 6 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_6_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_6_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_6_REG_ADDR 0x8c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_6_OFFSET 0xc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_6_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8c0 );
    system_isp_write_32( base + 0x8c0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8c0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_6_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_6_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_6_REG_ADDR 0x8c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_6_OFFSET 0xc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_6_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8c0 );
    system_isp_write_32( base + 0x8c0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8c0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_6_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_6_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_6_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_6_REG_ADDR 0x8c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_6_OFFSET 0xc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_6_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8c0 );
    system_isp_write_32( base + 0x8c0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8c0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_6_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_6_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_6_REG_ADDR 0x8c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_6_OFFSET 0xc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_6_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8c0 );
    system_isp_write_32( base + 0x8c0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8c0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_6_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_6_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_6_REG_ADDR 0x8c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_6_OFFSET 0xc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_6_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8c0 );
    system_isp_write_32( base + 0x8c0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8c0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_6_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_6_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_6_REG_ADDR 0x8c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_6_OFFSET 0xc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_6_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8c0 );
    system_isp_write_32( base + 0x8c0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8c0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_6_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_6_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_6_REG_ADDR 0x8c4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_6_OFFSET 0xc4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_6_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_6_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x8c4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_6_read( uint32_t base )
{
    return system_isp_read_32( base + 0x8c4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_6_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_6_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_6_REG_ADDR 0x8c8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_6_OFFSET 0xc8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_6_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_6_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x8c8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_6_read( uint32_t base )
{
    return system_isp_read_32( base + 0x8c8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_6_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_6_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_6_REG_ADDR 0x8cc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_6_OFFSET 0xcc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_6_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_6_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8cc );
    system_isp_write_32( base + 0x8cc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_6_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x8cc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_6_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_6_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_6_REG_ADDR 0x8d0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_6_OFFSET 0xd0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_6_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_6_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8d0 );
    system_isp_write_32( base + 0x8d0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_6_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x8d0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_6_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_6_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_6_REG_ADDR 0x8d4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_6_OFFSET 0xd4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_6_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_6_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8d4 );
    system_isp_write_32( base + 0x8d4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_6_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x8d4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_6_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_6_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_6_REG_ADDR 0x8d8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_6_OFFSET 0xd8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_6_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8d8 );
    system_isp_write_32( base + 0x8d8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8d8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_6_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_6_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_6_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_6_REG_ADDR 0x8dc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_6_OFFSET 0xdc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_6_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_6_read( uint32_t base )
{
    return system_isp_read_32( base + 0x8dc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 7 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_7_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_7_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_7_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_7_REG_ADDR 0x8e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_7_OFFSET 0xe0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_7_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8e0 );
    system_isp_write_32( base + 0x8e0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8e0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_7_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_7_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_7_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_7_REG_ADDR 0x8e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_7_OFFSET 0xe0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_7_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8e0 );
    system_isp_write_32( base + 0x8e0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8e0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_7_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_7_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_7_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_7_REG_ADDR 0x8e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_7_OFFSET 0xe0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_7_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8e0 );
    system_isp_write_32( base + 0x8e0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8e0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_7_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_7_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_7_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_7_REG_ADDR 0x8e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_7_OFFSET 0xe0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_7_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8e0 );
    system_isp_write_32( base + 0x8e0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8e0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_7_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_7_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_7_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_7_REG_ADDR 0x8e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_7_OFFSET 0xe0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_7_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8e0 );
    system_isp_write_32( base + 0x8e0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8e0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_7_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_7_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_7_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_7_REG_ADDR 0x8e4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_7_OFFSET 0xe4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_7_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_7_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x8e4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_7_read( uint32_t base )
{
    return system_isp_read_32( base + 0x8e4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_7_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_7_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_7_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_7_REG_ADDR 0x8e8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_7_OFFSET 0xe8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_7_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_7_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x8e8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_7_read( uint32_t base )
{
    return system_isp_read_32( base + 0x8e8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_7_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_7_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_7_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_7_REG_ADDR 0x8ec
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_7_OFFSET 0xec
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_7_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_7_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8ec );
    system_isp_write_32( base + 0x8ec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_7_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x8ec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_7_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_7_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_7_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_7_REG_ADDR 0x8f0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_7_OFFSET 0xf0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_7_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_7_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8f0 );
    system_isp_write_32( base + 0x8f0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_7_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x8f0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_7_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_7_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_7_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_7_REG_ADDR 0x8f4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_7_OFFSET 0xf4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_7_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_7_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8f4 );
    system_isp_write_32( base + 0x8f4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_7_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x8f4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_7_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_7_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_7_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_7_REG_ADDR 0x8f8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_7_OFFSET 0xf8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_7_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x8f8 );
    system_isp_write_32( base + 0x8f8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x8f8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_7_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_7_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_7_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_7_REG_ADDR 0x8fc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_7_OFFSET 0xfc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_7_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_7_read( uint32_t base )
{
    return system_isp_read_32( base + 0x8fc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 8 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_8_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_8_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_8_REG_ADDR 0x900
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_8_OFFSET 0x100
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_8_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x900 );
    system_isp_write_32( base + 0x900, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x900 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_8_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_8_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_8_REG_ADDR 0x900
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_8_OFFSET 0x100
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_8_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x900 );
    system_isp_write_32( base + 0x900, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x900 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_8_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_8_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_8_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_8_REG_ADDR 0x900
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_8_OFFSET 0x100
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_8_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x900 );
    system_isp_write_32( base + 0x900, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x900 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_8_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_8_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_8_REG_ADDR 0x900
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_8_OFFSET 0x100
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_8_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x900 );
    system_isp_write_32( base + 0x900, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x900 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_8_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_8_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_8_REG_ADDR 0x900
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_8_OFFSET 0x100
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_8_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x900 );
    system_isp_write_32( base + 0x900, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x900 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_8_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_8_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_8_REG_ADDR 0x900
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_8_OFFSET 0x100
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_8_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x900 );
    system_isp_write_32( base + 0x900, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x900 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_8_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_8_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_8_REG_ADDR 0x904
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_8_OFFSET 0x104
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_8_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_8_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x904, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_8_read( uint32_t base )
{
    return system_isp_read_32( base + 0x904 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_8_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_8_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_8_REG_ADDR 0x908
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_8_OFFSET 0x108
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_8_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_8_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x908, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_8_read( uint32_t base )
{
    return system_isp_read_32( base + 0x908 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_8_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_8_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_8_REG_ADDR 0x90c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_8_OFFSET 0x10c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_8_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_8_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x90c );
    system_isp_write_32( base + 0x90c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_8_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x90c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_8_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_8_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_8_REG_ADDR 0x910
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_8_OFFSET 0x110
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_8_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_8_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x910 );
    system_isp_write_32( base + 0x910, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_8_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x910 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_8_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_8_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_8_REG_ADDR 0x914
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_8_OFFSET 0x114
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_8_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_8_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x914 );
    system_isp_write_32( base + 0x914, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_8_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x914 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_8_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_8_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_8_REG_ADDR 0x918
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_8_OFFSET 0x118
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_8_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x918 );
    system_isp_write_32( base + 0x918, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x918 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_8_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_8_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_8_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_8_REG_ADDR 0x91c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_8_OFFSET 0x11c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_8_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_8_read( uint32_t base )
{
    return system_isp_read_32( base + 0x91c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 9 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_9_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_9_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_9_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_9_REG_ADDR 0x920
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_9_OFFSET 0x120
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_9_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x920 );
    system_isp_write_32( base + 0x920, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x920 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_9_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_9_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_9_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_9_REG_ADDR 0x920
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_9_OFFSET 0x120
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_9_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x920 );
    system_isp_write_32( base + 0x920, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x920 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_9_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_9_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_9_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_9_REG_ADDR 0x920
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_9_OFFSET 0x120
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_9_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x920 );
    system_isp_write_32( base + 0x920, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x920 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_9_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_9_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_9_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_9_REG_ADDR 0x920
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_9_OFFSET 0x120
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_9_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x920 );
    system_isp_write_32( base + 0x920, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x920 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_9_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_9_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_9_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_9_REG_ADDR 0x920
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_9_OFFSET 0x120
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_9_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x920 );
    system_isp_write_32( base + 0x920, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x920 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_9_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_9_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_9_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_9_REG_ADDR 0x924
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_9_OFFSET 0x124
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_9_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_9_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x924, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_9_read( uint32_t base )
{
    return system_isp_read_32( base + 0x924 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_9_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_9_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_9_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_9_REG_ADDR 0x928
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_9_OFFSET 0x128
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_9_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_9_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x928, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_9_read( uint32_t base )
{
    return system_isp_read_32( base + 0x928 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_9_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_9_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_9_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_9_REG_ADDR 0x92c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_9_OFFSET 0x12c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_9_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_9_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x92c );
    system_isp_write_32( base + 0x92c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_9_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x92c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_9_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_9_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_9_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_9_REG_ADDR 0x930
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_9_OFFSET 0x130
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_9_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_9_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x930 );
    system_isp_write_32( base + 0x930, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_9_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x930 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_9_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_9_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_9_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_9_REG_ADDR 0x934
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_9_OFFSET 0x134
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_9_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_9_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x934 );
    system_isp_write_32( base + 0x934, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_9_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x934 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_9_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_9_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_9_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_9_REG_ADDR 0x938
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_9_OFFSET 0x138
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_9_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x938 );
    system_isp_write_32( base + 0x938, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x938 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_9_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_9_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_9_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_9_REG_ADDR 0x93c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_9_OFFSET 0x13c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_9_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_9_read( uint32_t base )
{
    return system_isp_read_32( base + 0x93c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 10 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_10_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_10_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_10_REG_ADDR 0x940
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_10_OFFSET 0x140
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_10_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x940 );
    system_isp_write_32( base + 0x940, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x940 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_10_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_10_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_10_REG_ADDR 0x940
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_10_OFFSET 0x140
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_10_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x940 );
    system_isp_write_32( base + 0x940, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x940 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_10_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_10_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_10_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_10_REG_ADDR 0x940
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_10_OFFSET 0x140
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_10_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x940 );
    system_isp_write_32( base + 0x940, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x940 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_10_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_10_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_10_REG_ADDR 0x940
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_10_OFFSET 0x140
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_10_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x940 );
    system_isp_write_32( base + 0x940, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x940 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_10_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_10_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_10_REG_ADDR 0x940
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_10_OFFSET 0x140
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_10_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x940 );
    system_isp_write_32( base + 0x940, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x940 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_10_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_10_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_10_REG_ADDR 0x940
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_10_OFFSET 0x140
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_10_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x940 );
    system_isp_write_32( base + 0x940, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x940 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_10_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_10_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_10_REG_ADDR 0x944
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_10_OFFSET 0x144
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_10_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_10_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x944, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_10_read( uint32_t base )
{
    return system_isp_read_32( base + 0x944 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_10_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_10_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_10_REG_ADDR 0x948
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_10_OFFSET 0x148
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_10_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_10_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x948, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_10_read( uint32_t base )
{
    return system_isp_read_32( base + 0x948 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_10_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_10_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_10_REG_ADDR 0x94c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_10_OFFSET 0x14c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_10_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x94c );
    system_isp_write_32( base + 0x94c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x94c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_10_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_10_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_10_REG_ADDR 0x950
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_10_OFFSET 0x150
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_10_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x950 );
    system_isp_write_32( base + 0x950, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x950 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_10_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_10_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_10_REG_ADDR 0x954
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_10_OFFSET 0x154
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_10_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x954 );
    system_isp_write_32( base + 0x954, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x954 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_10_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_10_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_10_REG_ADDR 0x958
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_10_OFFSET 0x158
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_10_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x958 );
    system_isp_write_32( base + 0x958, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x958 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_10_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_10_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_10_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_10_REG_ADDR 0x95c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_10_OFFSET 0x15c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_10_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_10_read( uint32_t base )
{
    return system_isp_read_32( base + 0x95c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 11 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_11_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_11_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_11_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_11_REG_ADDR 0x960
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_11_OFFSET 0x160
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_11_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x960 );
    system_isp_write_32( base + 0x960, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x960 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_11_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_11_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_11_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_11_REG_ADDR 0x960
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_11_OFFSET 0x160
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_11_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x960 );
    system_isp_write_32( base + 0x960, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x960 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_11_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_11_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_11_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_11_REG_ADDR 0x960
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_11_OFFSET 0x160
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_11_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x960 );
    system_isp_write_32( base + 0x960, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x960 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_11_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_11_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_11_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_11_REG_ADDR 0x960
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_11_OFFSET 0x160
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_11_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x960 );
    system_isp_write_32( base + 0x960, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x960 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_11_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_11_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_11_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_11_REG_ADDR 0x960
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_11_OFFSET 0x160
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_11_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x960 );
    system_isp_write_32( base + 0x960, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x960 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_11_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_11_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_11_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_11_REG_ADDR 0x964
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_11_OFFSET 0x164
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_11_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_11_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x964, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_11_read( uint32_t base )
{
    return system_isp_read_32( base + 0x964 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_11_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_11_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_11_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_11_REG_ADDR 0x968
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_11_OFFSET 0x168
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_11_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_11_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x968, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_11_read( uint32_t base )
{
    return system_isp_read_32( base + 0x968 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_11_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_11_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_11_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_11_REG_ADDR 0x96c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_11_OFFSET 0x16c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_11_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x96c );
    system_isp_write_32( base + 0x96c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x96c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_11_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_11_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_11_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_11_REG_ADDR 0x970
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_11_OFFSET 0x170
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_11_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x970 );
    system_isp_write_32( base + 0x970, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x970 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_11_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_11_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_11_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_11_REG_ADDR 0x974
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_11_OFFSET 0x174
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_11_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x974 );
    system_isp_write_32( base + 0x974, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x974 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_11_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_11_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_11_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_11_REG_ADDR 0x978
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_11_OFFSET 0x178
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_11_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x978 );
    system_isp_write_32( base + 0x978, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x978 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_11_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_11_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_11_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_11_REG_ADDR 0x97c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_11_OFFSET 0x17c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_11_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_11_read( uint32_t base )
{
    return system_isp_read_32( base + 0x97c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 12 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_12_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_12_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_12_REG_ADDR 0x980
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_12_OFFSET 0x180
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_12_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x980 );
    system_isp_write_32( base + 0x980, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x980 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_12_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_12_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_12_REG_ADDR 0x980
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_12_OFFSET 0x180
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_12_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x980 );
    system_isp_write_32( base + 0x980, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x980 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_12_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_12_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_12_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_12_REG_ADDR 0x980
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_12_OFFSET 0x180
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_12_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x980 );
    system_isp_write_32( base + 0x980, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x980 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_12_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_12_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_12_REG_ADDR 0x980
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_12_OFFSET 0x180
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_12_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x980 );
    system_isp_write_32( base + 0x980, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x980 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_12_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_12_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_12_REG_ADDR 0x980
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_12_OFFSET 0x180
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_12_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x980 );
    system_isp_write_32( base + 0x980, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x980 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_12_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_12_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_12_REG_ADDR 0x980
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_12_OFFSET 0x180
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_12_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x980 );
    system_isp_write_32( base + 0x980, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x980 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_12_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_12_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_12_REG_ADDR 0x984
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_12_OFFSET 0x184
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_12_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_12_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x984, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_12_read( uint32_t base )
{
    return system_isp_read_32( base + 0x984 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_12_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_12_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_12_REG_ADDR 0x988
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_12_OFFSET 0x188
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_12_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_12_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x988, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_12_read( uint32_t base )
{
    return system_isp_read_32( base + 0x988 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_12_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_12_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_12_REG_ADDR 0x98c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_12_OFFSET 0x18c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_12_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x98c );
    system_isp_write_32( base + 0x98c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x98c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_12_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_12_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_12_REG_ADDR 0x990
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_12_OFFSET 0x190
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_12_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x990 );
    system_isp_write_32( base + 0x990, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x990 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_12_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_12_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_12_REG_ADDR 0x994
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_12_OFFSET 0x194
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_12_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x994 );
    system_isp_write_32( base + 0x994, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x994 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_12_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_12_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_12_REG_ADDR 0x998
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_12_OFFSET 0x198
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_12_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x998 );
    system_isp_write_32( base + 0x998, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x998 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_12_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_12_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_12_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_12_REG_ADDR 0x99c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_12_OFFSET 0x19c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_12_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_12_read( uint32_t base )
{
    return system_isp_read_32( base + 0x99c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 13 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_13_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_13_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_13_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_13_REG_ADDR 0x9a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_13_OFFSET 0x1a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_13_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9a0 );
    system_isp_write_32( base + 0x9a0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9a0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_13_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_13_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_13_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_13_REG_ADDR 0x9a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_13_OFFSET 0x1a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_13_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9a0 );
    system_isp_write_32( base + 0x9a0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9a0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_13_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_13_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_13_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_13_REG_ADDR 0x9a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_13_OFFSET 0x1a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_13_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9a0 );
    system_isp_write_32( base + 0x9a0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9a0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_13_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_13_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_13_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_13_REG_ADDR 0x9a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_13_OFFSET 0x1a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_13_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9a0 );
    system_isp_write_32( base + 0x9a0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9a0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_13_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_13_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_13_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_13_REG_ADDR 0x9a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_13_OFFSET 0x1a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_13_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9a0 );
    system_isp_write_32( base + 0x9a0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9a0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_13_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_13_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_13_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_13_REG_ADDR 0x9a4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_13_OFFSET 0x1a4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_13_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_13_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x9a4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_13_read( uint32_t base )
{
    return system_isp_read_32( base + 0x9a4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_13_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_13_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_13_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_13_REG_ADDR 0x9a8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_13_OFFSET 0x1a8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_13_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_13_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x9a8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_13_read( uint32_t base )
{
    return system_isp_read_32( base + 0x9a8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_13_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_13_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_13_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_13_REG_ADDR 0x9ac
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_13_OFFSET 0x1ac
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_13_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9ac );
    system_isp_write_32( base + 0x9ac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x9ac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_13_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_13_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_13_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_13_REG_ADDR 0x9b0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_13_OFFSET 0x1b0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_13_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9b0 );
    system_isp_write_32( base + 0x9b0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x9b0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_13_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_13_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_13_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_13_REG_ADDR 0x9b4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_13_OFFSET 0x1b4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_13_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9b4 );
    system_isp_write_32( base + 0x9b4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x9b4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_13_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_13_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_13_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_13_REG_ADDR 0x9b8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_13_OFFSET 0x1b8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_13_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9b8 );
    system_isp_write_32( base + 0x9b8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9b8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_13_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_13_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_13_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_13_REG_ADDR 0x9bc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_13_OFFSET 0x1bc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_13_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_13_read( uint32_t base )
{
    return system_isp_read_32( base + 0x9bc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 14 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_14_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_14_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_14_REG_ADDR 0x9c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_14_OFFSET 0x1c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_14_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9c0 );
    system_isp_write_32( base + 0x9c0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9c0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_14_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_14_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_14_REG_ADDR 0x9c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_14_OFFSET 0x1c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_14_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9c0 );
    system_isp_write_32( base + 0x9c0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9c0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_14_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_14_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_14_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_14_REG_ADDR 0x9c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_14_OFFSET 0x1c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_14_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9c0 );
    system_isp_write_32( base + 0x9c0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9c0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_14_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_14_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_14_REG_ADDR 0x9c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_14_OFFSET 0x1c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_14_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9c0 );
    system_isp_write_32( base + 0x9c0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9c0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_14_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_14_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_14_REG_ADDR 0x9c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_14_OFFSET 0x1c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_14_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9c0 );
    system_isp_write_32( base + 0x9c0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9c0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_14_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_14_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_14_REG_ADDR 0x9c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_14_OFFSET 0x1c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_14_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9c0 );
    system_isp_write_32( base + 0x9c0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9c0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_14_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_14_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_14_REG_ADDR 0x9c4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_14_OFFSET 0x1c4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_14_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_14_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x9c4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_14_read( uint32_t base )
{
    return system_isp_read_32( base + 0x9c4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_14_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_14_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_14_REG_ADDR 0x9c8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_14_OFFSET 0x1c8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_14_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_14_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x9c8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_14_read( uint32_t base )
{
    return system_isp_read_32( base + 0x9c8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_14_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_14_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_14_REG_ADDR 0x9cc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_14_OFFSET 0x1cc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_14_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_14_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9cc );
    system_isp_write_32( base + 0x9cc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_14_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x9cc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_14_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_14_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_14_REG_ADDR 0x9d0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_14_OFFSET 0x1d0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_14_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_14_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9d0 );
    system_isp_write_32( base + 0x9d0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_14_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x9d0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_14_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_14_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_14_REG_ADDR 0x9d4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_14_OFFSET 0x1d4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_14_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_14_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9d4 );
    system_isp_write_32( base + 0x9d4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_14_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x9d4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_14_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_14_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_14_REG_ADDR 0x9d8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_14_OFFSET 0x1d8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_14_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9d8 );
    system_isp_write_32( base + 0x9d8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9d8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_14_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_14_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_14_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_14_REG_ADDR 0x9dc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_14_OFFSET 0x1dc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_14_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_14_read( uint32_t base )
{
    return system_isp_read_32( base + 0x9dc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 15 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_15_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_15_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_15_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_15_REG_ADDR 0x9e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_15_OFFSET 0x1e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_15_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9e0 );
    system_isp_write_32( base + 0x9e0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9e0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_15_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_15_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_15_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_15_REG_ADDR 0x9e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_15_OFFSET 0x1e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_15_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9e0 );
    system_isp_write_32( base + 0x9e0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9e0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_15_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_15_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_15_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_15_REG_ADDR 0x9e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_15_OFFSET 0x1e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_15_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9e0 );
    system_isp_write_32( base + 0x9e0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9e0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_15_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_15_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_15_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_15_REG_ADDR 0x9e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_15_OFFSET 0x1e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_15_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9e0 );
    system_isp_write_32( base + 0x9e0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9e0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_15_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_15_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_15_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_15_REG_ADDR 0x9e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_15_OFFSET 0x1e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_15_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9e0 );
    system_isp_write_32( base + 0x9e0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9e0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_15_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_15_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_15_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_15_REG_ADDR 0x9e4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_15_OFFSET 0x1e4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_15_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_15_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x9e4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_15_read( uint32_t base )
{
    return system_isp_read_32( base + 0x9e4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_15_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_15_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_15_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_15_REG_ADDR 0x9e8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_15_OFFSET 0x1e8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_15_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_15_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x9e8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_15_read( uint32_t base )
{
    return system_isp_read_32( base + 0x9e8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_15_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_15_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_15_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_15_REG_ADDR 0x9ec
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_15_OFFSET 0x1ec
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_15_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_15_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9ec );
    system_isp_write_32( base + 0x9ec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_15_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x9ec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_15_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_15_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_15_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_15_REG_ADDR 0x9f0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_15_OFFSET 0x1f0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_15_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_15_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9f0 );
    system_isp_write_32( base + 0x9f0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_15_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x9f0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_15_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_15_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_15_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_15_REG_ADDR 0x9f4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_15_OFFSET 0x1f4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_15_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_15_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9f4 );
    system_isp_write_32( base + 0x9f4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_15_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x9f4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_15_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_15_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_15_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_15_REG_ADDR 0x9f8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_15_OFFSET 0x1f8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_15_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x9f8 );
    system_isp_write_32( base + 0x9f8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x9f8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_15_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_15_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_15_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_15_REG_ADDR 0x9fc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_15_OFFSET 0x1fc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_15_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_15_read( uint32_t base )
{
    return system_isp_read_32( base + 0x9fc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 16 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_16_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_16_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_16_REG_ADDR 0xa00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_16_OFFSET 0x200
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_16_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa00 );
    system_isp_write_32( base + 0xa00, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa00 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_16_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_16_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_16_REG_ADDR 0xa00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_16_OFFSET 0x200
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_16_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa00 );
    system_isp_write_32( base + 0xa00, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa00 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_16_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_16_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_16_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_16_REG_ADDR 0xa00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_16_OFFSET 0x200
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_16_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa00 );
    system_isp_write_32( base + 0xa00, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa00 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_16_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_16_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_16_REG_ADDR 0xa00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_16_OFFSET 0x200
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_16_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa00 );
    system_isp_write_32( base + 0xa00, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa00 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_16_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_16_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_16_REG_ADDR 0xa00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_16_OFFSET 0x200
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_16_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa00 );
    system_isp_write_32( base + 0xa00, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa00 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_16_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_16_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_16_REG_ADDR 0xa00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_16_OFFSET 0x200
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_16_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa00 );
    system_isp_write_32( base + 0xa00, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa00 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_16_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_16_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_16_REG_ADDR 0xa04
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_16_OFFSET 0x204
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_16_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_16_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xa04, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_16_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa04 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_16_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_16_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_16_REG_ADDR 0xa08
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_16_OFFSET 0x208
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_16_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_16_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xa08, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_16_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa08 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_16_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_16_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_16_REG_ADDR 0xa0c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_16_OFFSET 0x20c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_16_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_16_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa0c );
    system_isp_write_32( base + 0xa0c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_16_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa0c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_16_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_16_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_16_REG_ADDR 0xa10
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_16_OFFSET 0x210
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_16_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_16_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa10 );
    system_isp_write_32( base + 0xa10, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_16_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa10 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_16_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_16_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_16_REG_ADDR 0xa14
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_16_OFFSET 0x214
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_16_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_16_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa14 );
    system_isp_write_32( base + 0xa14, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_16_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa14 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_16_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_16_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_16_REG_ADDR 0xa18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_16_OFFSET 0x218
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_16_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa18 );
    system_isp_write_32( base + 0xa18, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa18 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_16_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_16_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_16_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_16_REG_ADDR 0xa1c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_16_OFFSET 0x21c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_16_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_16_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa1c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 17 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_17_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_17_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_17_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_17_REG_ADDR 0xa20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_17_OFFSET 0x220
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_17_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa20 );
    system_isp_write_32( base + 0xa20, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa20 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_17_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_17_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_17_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_17_REG_ADDR 0xa20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_17_OFFSET 0x220
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_17_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa20 );
    system_isp_write_32( base + 0xa20, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa20 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_17_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_17_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_17_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_17_REG_ADDR 0xa20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_17_OFFSET 0x220
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_17_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa20 );
    system_isp_write_32( base + 0xa20, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa20 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_17_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_17_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_17_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_17_REG_ADDR 0xa20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_17_OFFSET 0x220
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_17_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa20 );
    system_isp_write_32( base + 0xa20, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa20 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_17_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_17_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_17_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_17_REG_ADDR 0xa20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_17_OFFSET 0x220
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_17_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa20 );
    system_isp_write_32( base + 0xa20, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa20 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_17_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_17_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_17_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_17_REG_ADDR 0xa24
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_17_OFFSET 0x224
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_17_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_17_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xa24, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_17_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa24 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_17_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_17_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_17_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_17_REG_ADDR 0xa28
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_17_OFFSET 0x228
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_17_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_17_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xa28, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_17_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa28 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_17_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_17_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_17_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_17_REG_ADDR 0xa2c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_17_OFFSET 0x22c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_17_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_17_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa2c );
    system_isp_write_32( base + 0xa2c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_17_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa2c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_17_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_17_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_17_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_17_REG_ADDR 0xa30
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_17_OFFSET 0x230
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_17_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_17_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa30 );
    system_isp_write_32( base + 0xa30, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_17_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa30 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_17_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_17_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_17_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_17_REG_ADDR 0xa34
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_17_OFFSET 0x234
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_17_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_17_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa34 );
    system_isp_write_32( base + 0xa34, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_17_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa34 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_17_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_17_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_17_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_17_REG_ADDR 0xa38
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_17_OFFSET 0x238
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_17_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa38 );
    system_isp_write_32( base + 0xa38, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa38 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_17_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_17_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_17_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_17_REG_ADDR 0xa3c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_17_OFFSET 0x23c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_17_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_17_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa3c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 18 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_18_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_18_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_18_REG_ADDR 0xa40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_18_OFFSET 0x240
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_18_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa40 );
    system_isp_write_32( base + 0xa40, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa40 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_18_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_18_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_18_REG_ADDR 0xa40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_18_OFFSET 0x240
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_18_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa40 );
    system_isp_write_32( base + 0xa40, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa40 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_18_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_18_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_18_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_18_REG_ADDR 0xa40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_18_OFFSET 0x240
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_18_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa40 );
    system_isp_write_32( base + 0xa40, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa40 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_18_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_18_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_18_REG_ADDR 0xa40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_18_OFFSET 0x240
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_18_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa40 );
    system_isp_write_32( base + 0xa40, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa40 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_18_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_18_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_18_REG_ADDR 0xa40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_18_OFFSET 0x240
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_18_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa40 );
    system_isp_write_32( base + 0xa40, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa40 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_18_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_18_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_18_REG_ADDR 0xa40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_18_OFFSET 0x240
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_18_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa40 );
    system_isp_write_32( base + 0xa40, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa40 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_18_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_18_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_18_REG_ADDR 0xa44
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_18_OFFSET 0x244
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_18_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_18_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xa44, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_18_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa44 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_18_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_18_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_18_REG_ADDR 0xa48
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_18_OFFSET 0x248
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_18_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_18_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xa48, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_18_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa48 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_18_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_18_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_18_REG_ADDR 0xa4c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_18_OFFSET 0x24c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_18_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_18_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa4c );
    system_isp_write_32( base + 0xa4c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_18_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa4c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_18_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_18_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_18_REG_ADDR 0xa50
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_18_OFFSET 0x250
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_18_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_18_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa50 );
    system_isp_write_32( base + 0xa50, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_18_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa50 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_18_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_18_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_18_REG_ADDR 0xa54
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_18_OFFSET 0x254
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_18_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_18_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa54 );
    system_isp_write_32( base + 0xa54, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_18_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa54 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_18_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_18_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_18_REG_ADDR 0xa58
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_18_OFFSET 0x258
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_18_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa58 );
    system_isp_write_32( base + 0xa58, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa58 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_18_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_18_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_18_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_18_REG_ADDR 0xa5c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_18_OFFSET 0x25c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_18_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_18_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa5c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 19 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_19_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_19_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_19_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_19_REG_ADDR 0xa60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_19_OFFSET 0x260
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_19_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa60 );
    system_isp_write_32( base + 0xa60, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa60 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_19_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_19_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_19_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_19_REG_ADDR 0xa60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_19_OFFSET 0x260
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_19_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa60 );
    system_isp_write_32( base + 0xa60, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa60 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_19_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_19_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_19_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_19_REG_ADDR 0xa60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_19_OFFSET 0x260
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_19_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa60 );
    system_isp_write_32( base + 0xa60, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa60 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_19_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_19_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_19_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_19_REG_ADDR 0xa60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_19_OFFSET 0x260
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_19_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa60 );
    system_isp_write_32( base + 0xa60, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa60 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_19_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_19_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_19_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_19_REG_ADDR 0xa60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_19_OFFSET 0x260
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_19_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa60 );
    system_isp_write_32( base + 0xa60, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa60 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_19_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_19_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_19_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_19_REG_ADDR 0xa64
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_19_OFFSET 0x264
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_19_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_19_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xa64, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_19_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa64 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_19_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_19_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_19_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_19_REG_ADDR 0xa68
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_19_OFFSET 0x268
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_19_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_19_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xa68, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_19_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa68 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_19_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_19_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_19_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_19_REG_ADDR 0xa6c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_19_OFFSET 0x26c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_19_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_19_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa6c );
    system_isp_write_32( base + 0xa6c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_19_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa6c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_19_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_19_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_19_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_19_REG_ADDR 0xa70
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_19_OFFSET 0x270
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_19_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_19_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa70 );
    system_isp_write_32( base + 0xa70, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_19_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa70 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_19_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_19_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_19_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_19_REG_ADDR 0xa74
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_19_OFFSET 0x274
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_19_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_19_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa74 );
    system_isp_write_32( base + 0xa74, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_19_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa74 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_19_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_19_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_19_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_19_REG_ADDR 0xa78
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_19_OFFSET 0x278
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_19_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa78 );
    system_isp_write_32( base + 0xa78, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa78 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_19_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_19_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_19_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_19_REG_ADDR 0xa7c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_19_OFFSET 0x27c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_19_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_19_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa7c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 20 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_20_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_20_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_20_REG_ADDR 0xa80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_20_OFFSET 0x280
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_20_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa80 );
    system_isp_write_32( base + 0xa80, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa80 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_20_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_20_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_20_REG_ADDR 0xa80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_20_OFFSET 0x280
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_20_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa80 );
    system_isp_write_32( base + 0xa80, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa80 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_20_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_20_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_20_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_20_REG_ADDR 0xa80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_20_OFFSET 0x280
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_20_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa80 );
    system_isp_write_32( base + 0xa80, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa80 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_20_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_20_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_20_REG_ADDR 0xa80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_20_OFFSET 0x280
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_20_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa80 );
    system_isp_write_32( base + 0xa80, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa80 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_20_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_20_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_20_REG_ADDR 0xa80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_20_OFFSET 0x280
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_20_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa80 );
    system_isp_write_32( base + 0xa80, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa80 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_20_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_20_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_20_REG_ADDR 0xa80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_20_OFFSET 0x280
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_20_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa80 );
    system_isp_write_32( base + 0xa80, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa80 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_20_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_20_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_20_REG_ADDR 0xa84
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_20_OFFSET 0x284
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_20_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_20_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xa84, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_20_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa84 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_20_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_20_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_20_REG_ADDR 0xa88
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_20_OFFSET 0x288
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_20_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_20_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xa88, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_20_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa88 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_20_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_20_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_20_REG_ADDR 0xa8c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_20_OFFSET 0x28c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_20_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_20_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa8c );
    system_isp_write_32( base + 0xa8c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_20_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa8c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_20_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_20_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_20_REG_ADDR 0xa90
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_20_OFFSET 0x290
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_20_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_20_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa90 );
    system_isp_write_32( base + 0xa90, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_20_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa90 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_20_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_20_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_20_REG_ADDR 0xa94
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_20_OFFSET 0x294
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_20_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_20_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa94 );
    system_isp_write_32( base + 0xa94, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_20_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xa94 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_20_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_20_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_20_REG_ADDR 0xa98
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_20_OFFSET 0x298
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_20_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xa98 );
    system_isp_write_32( base + 0xa98, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xa98 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_20_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_20_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_20_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_20_REG_ADDR 0xa9c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_20_OFFSET 0x29c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_20_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_20_read( uint32_t base )
{
    return system_isp_read_32( base + 0xa9c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 21 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_21_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_21_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_21_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_21_REG_ADDR 0xaa0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_21_OFFSET 0x2a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_21_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xaa0 );
    system_isp_write_32( base + 0xaa0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xaa0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_21_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_21_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_21_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_21_REG_ADDR 0xaa0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_21_OFFSET 0x2a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_21_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xaa0 );
    system_isp_write_32( base + 0xaa0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xaa0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_21_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_21_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_21_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_21_REG_ADDR 0xaa0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_21_OFFSET 0x2a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_21_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xaa0 );
    system_isp_write_32( base + 0xaa0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xaa0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_21_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_21_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_21_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_21_REG_ADDR 0xaa0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_21_OFFSET 0x2a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_21_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xaa0 );
    system_isp_write_32( base + 0xaa0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xaa0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_21_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_21_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_21_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_21_REG_ADDR 0xaa0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_21_OFFSET 0x2a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_21_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xaa0 );
    system_isp_write_32( base + 0xaa0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xaa0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_21_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_21_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_21_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_21_REG_ADDR 0xaa4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_21_OFFSET 0x2a4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_21_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_21_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xaa4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_21_read( uint32_t base )
{
    return system_isp_read_32( base + 0xaa4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_21_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_21_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_21_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_21_REG_ADDR 0xaa8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_21_OFFSET 0x2a8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_21_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_21_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xaa8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_21_read( uint32_t base )
{
    return system_isp_read_32( base + 0xaa8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_21_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_21_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_21_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_21_REG_ADDR 0xaac
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_21_OFFSET 0x2ac
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_21_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_21_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xaac );
    system_isp_write_32( base + 0xaac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_21_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xaac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_21_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_21_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_21_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_21_REG_ADDR 0xab0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_21_OFFSET 0x2b0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_21_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_21_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xab0 );
    system_isp_write_32( base + 0xab0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_21_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xab0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_21_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_21_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_21_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_21_REG_ADDR 0xab4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_21_OFFSET 0x2b4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_21_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_21_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xab4 );
    system_isp_write_32( base + 0xab4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_21_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xab4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_21_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_21_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_21_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_21_REG_ADDR 0xab8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_21_OFFSET 0x2b8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_21_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xab8 );
    system_isp_write_32( base + 0xab8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xab8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_21_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_21_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_21_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_21_REG_ADDR 0xabc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_21_OFFSET 0x2bc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_21_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_21_read( uint32_t base )
{
    return system_isp_read_32( base + 0xabc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 22 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_22_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_22_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_22_REG_ADDR 0xac0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_22_OFFSET 0x2c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_22_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xac0 );
    system_isp_write_32( base + 0xac0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xac0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_22_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_22_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_22_REG_ADDR 0xac0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_22_OFFSET 0x2c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_22_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xac0 );
    system_isp_write_32( base + 0xac0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xac0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_22_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_22_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_22_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_22_REG_ADDR 0xac0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_22_OFFSET 0x2c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_22_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xac0 );
    system_isp_write_32( base + 0xac0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xac0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_22_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_22_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_22_REG_ADDR 0xac0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_22_OFFSET 0x2c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_22_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xac0 );
    system_isp_write_32( base + 0xac0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xac0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_22_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_22_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_22_REG_ADDR 0xac0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_22_OFFSET 0x2c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_22_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xac0 );
    system_isp_write_32( base + 0xac0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xac0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_22_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_22_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_22_REG_ADDR 0xac0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_22_OFFSET 0x2c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_22_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xac0 );
    system_isp_write_32( base + 0xac0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xac0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_22_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_22_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_22_REG_ADDR 0xac4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_22_OFFSET 0x2c4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_22_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_22_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xac4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_22_read( uint32_t base )
{
    return system_isp_read_32( base + 0xac4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_22_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_22_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_22_REG_ADDR 0xac8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_22_OFFSET 0x2c8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_22_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_22_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xac8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_22_read( uint32_t base )
{
    return system_isp_read_32( base + 0xac8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_22_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_22_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_22_REG_ADDR 0xacc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_22_OFFSET 0x2cc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_22_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_22_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xacc );
    system_isp_write_32( base + 0xacc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_22_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xacc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_22_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_22_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_22_REG_ADDR 0xad0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_22_OFFSET 0x2d0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_22_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_22_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xad0 );
    system_isp_write_32( base + 0xad0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_22_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xad0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_22_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_22_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_22_REG_ADDR 0xad4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_22_OFFSET 0x2d4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_22_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_22_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xad4 );
    system_isp_write_32( base + 0xad4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_22_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xad4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_22_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_22_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_22_REG_ADDR 0xad8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_22_OFFSET 0x2d8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_22_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xad8 );
    system_isp_write_32( base + 0xad8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xad8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_22_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_22_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_22_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_22_REG_ADDR 0xadc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_22_OFFSET 0x2dc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_22_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_22_read( uint32_t base )
{
    return system_isp_read_32( base + 0xadc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 23 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_23_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_23_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_23_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_23_REG_ADDR 0xae0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_23_OFFSET 0x2e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_23_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xae0 );
    system_isp_write_32( base + 0xae0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xae0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_23_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_23_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_23_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_23_REG_ADDR 0xae0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_23_OFFSET 0x2e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_23_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xae0 );
    system_isp_write_32( base + 0xae0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xae0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_23_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_23_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_23_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_23_REG_ADDR 0xae0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_23_OFFSET 0x2e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_23_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xae0 );
    system_isp_write_32( base + 0xae0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xae0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_23_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_23_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_23_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_23_REG_ADDR 0xae0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_23_OFFSET 0x2e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_23_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xae0 );
    system_isp_write_32( base + 0xae0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xae0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_23_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_23_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_23_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_23_REG_ADDR 0xae0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_23_OFFSET 0x2e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_23_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xae0 );
    system_isp_write_32( base + 0xae0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xae0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_23_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_23_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_23_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_23_REG_ADDR 0xae4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_23_OFFSET 0x2e4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_23_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_23_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xae4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_23_read( uint32_t base )
{
    return system_isp_read_32( base + 0xae4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_23_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_23_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_23_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_23_REG_ADDR 0xae8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_23_OFFSET 0x2e8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_23_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_23_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xae8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_23_read( uint32_t base )
{
    return system_isp_read_32( base + 0xae8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_23_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_23_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_23_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_23_REG_ADDR 0xaec
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_23_OFFSET 0x2ec
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_23_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_23_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xaec );
    system_isp_write_32( base + 0xaec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_23_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xaec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_23_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_23_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_23_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_23_REG_ADDR 0xaf0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_23_OFFSET 0x2f0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_23_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_23_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xaf0 );
    system_isp_write_32( base + 0xaf0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_23_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xaf0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_23_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_23_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_23_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_23_REG_ADDR 0xaf4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_23_OFFSET 0x2f4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_23_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_23_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xaf4 );
    system_isp_write_32( base + 0xaf4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_23_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xaf4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_23_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_23_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_23_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_23_REG_ADDR 0xaf8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_23_OFFSET 0x2f8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_23_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xaf8 );
    system_isp_write_32( base + 0xaf8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xaf8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_23_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_23_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_23_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_23_REG_ADDR 0xafc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_23_OFFSET 0x2fc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_23_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_23_read( uint32_t base )
{
    return system_isp_read_32( base + 0xafc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 24 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_24_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_24_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_24_REG_ADDR 0xb00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_24_OFFSET 0x300
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_24_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb00 );
    system_isp_write_32( base + 0xb00, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb00 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_24_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_24_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_24_REG_ADDR 0xb00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_24_OFFSET 0x300
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_24_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb00 );
    system_isp_write_32( base + 0xb00, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb00 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_24_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_24_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_24_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_24_REG_ADDR 0xb00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_24_OFFSET 0x300
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_24_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb00 );
    system_isp_write_32( base + 0xb00, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb00 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_24_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_24_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_24_REG_ADDR 0xb00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_24_OFFSET 0x300
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_24_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb00 );
    system_isp_write_32( base + 0xb00, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb00 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_24_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_24_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_24_REG_ADDR 0xb00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_24_OFFSET 0x300
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_24_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb00 );
    system_isp_write_32( base + 0xb00, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb00 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_24_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_24_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_24_REG_ADDR 0xb00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_24_OFFSET 0x300
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_24_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb00 );
    system_isp_write_32( base + 0xb00, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb00 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_24_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_24_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_24_REG_ADDR 0xb04
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_24_OFFSET 0x304
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_24_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_24_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xb04, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_24_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb04 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_24_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_24_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_24_REG_ADDR 0xb08
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_24_OFFSET 0x308
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_24_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_24_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xb08, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_24_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb08 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_24_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_24_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_24_REG_ADDR 0xb0c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_24_OFFSET 0x30c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_24_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_24_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb0c );
    system_isp_write_32( base + 0xb0c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_24_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb0c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_24_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_24_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_24_REG_ADDR 0xb10
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_24_OFFSET 0x310
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_24_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_24_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb10 );
    system_isp_write_32( base + 0xb10, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_24_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb10 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_24_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_24_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_24_REG_ADDR 0xb14
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_24_OFFSET 0x314
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_24_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_24_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb14 );
    system_isp_write_32( base + 0xb14, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_24_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb14 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_24_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_24_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_24_REG_ADDR 0xb18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_24_OFFSET 0x318
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_24_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb18 );
    system_isp_write_32( base + 0xb18, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb18 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_24_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_24_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_24_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_24_REG_ADDR 0xb1c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_24_OFFSET 0x31c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_24_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_24_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb1c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 25 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_25_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_25_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_25_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_25_REG_ADDR 0xb20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_25_OFFSET 0x320
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_25_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb20 );
    system_isp_write_32( base + 0xb20, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb20 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_25_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_25_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_25_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_25_REG_ADDR 0xb20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_25_OFFSET 0x320
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_25_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb20 );
    system_isp_write_32( base + 0xb20, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb20 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_25_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_25_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_25_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_25_REG_ADDR 0xb20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_25_OFFSET 0x320
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_25_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb20 );
    system_isp_write_32( base + 0xb20, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb20 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_25_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_25_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_25_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_25_REG_ADDR 0xb20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_25_OFFSET 0x320
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_25_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb20 );
    system_isp_write_32( base + 0xb20, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb20 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_25_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_25_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_25_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_25_REG_ADDR 0xb20
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_25_OFFSET 0x320
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_25_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb20 );
    system_isp_write_32( base + 0xb20, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb20 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_25_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_25_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_25_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_25_REG_ADDR 0xb24
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_25_OFFSET 0x324
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_25_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_25_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xb24, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_25_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb24 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_25_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_25_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_25_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_25_REG_ADDR 0xb28
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_25_OFFSET 0x328
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_25_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_25_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xb28, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_25_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb28 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_25_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_25_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_25_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_25_REG_ADDR 0xb2c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_25_OFFSET 0x32c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_25_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_25_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb2c );
    system_isp_write_32( base + 0xb2c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_25_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb2c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_25_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_25_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_25_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_25_REG_ADDR 0xb30
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_25_OFFSET 0x330
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_25_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_25_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb30 );
    system_isp_write_32( base + 0xb30, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_25_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb30 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_25_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_25_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_25_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_25_REG_ADDR 0xb34
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_25_OFFSET 0x334
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_25_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_25_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb34 );
    system_isp_write_32( base + 0xb34, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_25_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb34 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_25_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_25_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_25_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_25_REG_ADDR 0xb38
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_25_OFFSET 0x338
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_25_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb38 );
    system_isp_write_32( base + 0xb38, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb38 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_25_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_25_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_25_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_25_REG_ADDR 0xb3c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_25_OFFSET 0x33c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_25_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_25_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb3c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 26 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_26_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_26_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_26_REG_ADDR 0xb40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_26_OFFSET 0x340
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_26_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb40 );
    system_isp_write_32( base + 0xb40, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb40 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_26_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_26_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_26_REG_ADDR 0xb40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_26_OFFSET 0x340
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_26_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb40 );
    system_isp_write_32( base + 0xb40, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb40 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_26_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_26_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_26_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_26_REG_ADDR 0xb40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_26_OFFSET 0x340
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_26_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb40 );
    system_isp_write_32( base + 0xb40, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb40 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_26_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_26_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_26_REG_ADDR 0xb40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_26_OFFSET 0x340
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_26_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb40 );
    system_isp_write_32( base + 0xb40, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb40 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_26_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_26_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_26_REG_ADDR 0xb40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_26_OFFSET 0x340
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_26_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb40 );
    system_isp_write_32( base + 0xb40, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb40 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_26_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_26_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_26_REG_ADDR 0xb40
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_26_OFFSET 0x340
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_26_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb40 );
    system_isp_write_32( base + 0xb40, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb40 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_26_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_26_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_26_REG_ADDR 0xb44
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_26_OFFSET 0x344
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_26_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_26_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xb44, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_26_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb44 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_26_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_26_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_26_REG_ADDR 0xb48
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_26_OFFSET 0x348
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_26_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_26_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xb48, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_26_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb48 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_26_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_26_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_26_REG_ADDR 0xb4c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_26_OFFSET 0x34c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_26_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_26_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb4c );
    system_isp_write_32( base + 0xb4c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_26_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb4c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_26_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_26_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_26_REG_ADDR 0xb50
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_26_OFFSET 0x350
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_26_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_26_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb50 );
    system_isp_write_32( base + 0xb50, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_26_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb50 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_26_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_26_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_26_REG_ADDR 0xb54
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_26_OFFSET 0x354
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_26_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_26_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb54 );
    system_isp_write_32( base + 0xb54, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_26_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb54 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_26_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_26_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_26_REG_ADDR 0xb58
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_26_OFFSET 0x358
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_26_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb58 );
    system_isp_write_32( base + 0xb58, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb58 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_26_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_26_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_26_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_26_REG_ADDR 0xb5c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_26_OFFSET 0x35c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_26_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_26_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb5c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 27 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_27_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_27_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_27_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_27_REG_ADDR 0xb60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_27_OFFSET 0x360
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_27_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb60 );
    system_isp_write_32( base + 0xb60, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb60 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_27_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_27_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_27_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_27_REG_ADDR 0xb60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_27_OFFSET 0x360
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_27_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb60 );
    system_isp_write_32( base + 0xb60, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb60 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_27_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_27_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_27_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_27_REG_ADDR 0xb60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_27_OFFSET 0x360
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_27_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb60 );
    system_isp_write_32( base + 0xb60, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb60 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_27_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_27_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_27_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_27_REG_ADDR 0xb60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_27_OFFSET 0x360
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_27_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb60 );
    system_isp_write_32( base + 0xb60, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb60 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_27_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_27_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_27_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_27_REG_ADDR 0xb60
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_27_OFFSET 0x360
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_27_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb60 );
    system_isp_write_32( base + 0xb60, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb60 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_27_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_27_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_27_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_27_REG_ADDR 0xb64
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_27_OFFSET 0x364
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_27_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_27_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xb64, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_27_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb64 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_27_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_27_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_27_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_27_REG_ADDR 0xb68
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_27_OFFSET 0x368
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_27_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_27_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xb68, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_27_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb68 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_27_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_27_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_27_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_27_REG_ADDR 0xb6c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_27_OFFSET 0x36c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_27_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_27_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb6c );
    system_isp_write_32( base + 0xb6c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_27_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb6c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_27_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_27_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_27_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_27_REG_ADDR 0xb70
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_27_OFFSET 0x370
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_27_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_27_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb70 );
    system_isp_write_32( base + 0xb70, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_27_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb70 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_27_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_27_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_27_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_27_REG_ADDR 0xb74
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_27_OFFSET 0x374
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_27_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_27_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb74 );
    system_isp_write_32( base + 0xb74, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_27_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb74 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_27_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_27_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_27_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_27_REG_ADDR 0xb78
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_27_OFFSET 0x378
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_27_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb78 );
    system_isp_write_32( base + 0xb78, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb78 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_27_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_27_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_27_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_27_REG_ADDR 0xb7c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_27_OFFSET 0x37c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_27_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_27_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb7c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 28 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_28_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_28_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_28_REG_ADDR 0xb80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_28_OFFSET 0x380
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_28_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb80 );
    system_isp_write_32( base + 0xb80, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb80 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_28_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_28_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_28_REG_ADDR 0xb80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_28_OFFSET 0x380
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_28_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb80 );
    system_isp_write_32( base + 0xb80, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb80 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_28_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_28_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_28_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_28_REG_ADDR 0xb80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_28_OFFSET 0x380
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_28_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb80 );
    system_isp_write_32( base + 0xb80, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb80 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_28_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_28_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_28_REG_ADDR 0xb80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_28_OFFSET 0x380
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_28_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb80 );
    system_isp_write_32( base + 0xb80, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb80 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_28_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_28_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_28_REG_ADDR 0xb80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_28_OFFSET 0x380
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_28_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb80 );
    system_isp_write_32( base + 0xb80, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb80 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_28_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_28_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_28_REG_ADDR 0xb80
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_28_OFFSET 0x380
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_28_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb80 );
    system_isp_write_32( base + 0xb80, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb80 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_28_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_28_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_28_REG_ADDR 0xb84
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_28_OFFSET 0x384
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_28_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_28_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xb84, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_28_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb84 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_28_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_28_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_28_REG_ADDR 0xb88
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_28_OFFSET 0x388
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_28_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_28_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xb88, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_28_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb88 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_28_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_28_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_28_REG_ADDR 0xb8c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_28_OFFSET 0x38c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_28_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_28_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb8c );
    system_isp_write_32( base + 0xb8c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_28_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb8c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_28_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_28_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_28_REG_ADDR 0xb90
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_28_OFFSET 0x390
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_28_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_28_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb90 );
    system_isp_write_32( base + 0xb90, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_28_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb90 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_28_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_28_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_28_REG_ADDR 0xb94
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_28_OFFSET 0x394
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_28_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_28_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb94 );
    system_isp_write_32( base + 0xb94, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_28_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xb94 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_28_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_28_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_28_REG_ADDR 0xb98
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_28_OFFSET 0x398
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_28_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xb98 );
    system_isp_write_32( base + 0xb98, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xb98 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_28_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_28_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_28_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_28_REG_ADDR 0xb9c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_28_OFFSET 0x39c
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_28_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_28_read( uint32_t base )
{
    return system_isp_read_32( base + 0xb9c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 29 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_29_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_29_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_29_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_29_REG_ADDR 0xba0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_29_OFFSET 0x3a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_29_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xba0 );
    system_isp_write_32( base + 0xba0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xba0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_29_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_29_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_29_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_29_REG_ADDR 0xba0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_29_OFFSET 0x3a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_29_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xba0 );
    system_isp_write_32( base + 0xba0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xba0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_29_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_29_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_29_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_29_REG_ADDR 0xba0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_29_OFFSET 0x3a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_29_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xba0 );
    system_isp_write_32( base + 0xba0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xba0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_29_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_29_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_29_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_29_REG_ADDR 0xba0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_29_OFFSET 0x3a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_29_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xba0 );
    system_isp_write_32( base + 0xba0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xba0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_29_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_29_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_29_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_29_REG_ADDR 0xba0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_29_OFFSET 0x3a0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_29_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xba0 );
    system_isp_write_32( base + 0xba0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xba0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_29_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_29_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_29_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_29_REG_ADDR 0xba4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_29_OFFSET 0x3a4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_29_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_29_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xba4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_29_read( uint32_t base )
{
    return system_isp_read_32( base + 0xba4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_29_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_29_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_29_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_29_REG_ADDR 0xba8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_29_OFFSET 0x3a8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_29_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_29_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xba8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_29_read( uint32_t base )
{
    return system_isp_read_32( base + 0xba8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_29_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_29_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_29_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_29_REG_ADDR 0xbac
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_29_OFFSET 0x3ac
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_29_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_29_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbac );
    system_isp_write_32( base + 0xbac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_29_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xbac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_29_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_29_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_29_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_29_REG_ADDR 0xbb0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_29_OFFSET 0x3b0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_29_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_29_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbb0 );
    system_isp_write_32( base + 0xbb0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_29_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xbb0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_29_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_29_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_29_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_29_REG_ADDR 0xbb4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_29_OFFSET 0x3b4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_29_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_29_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbb4 );
    system_isp_write_32( base + 0xbb4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_29_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xbb4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_29_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_29_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_29_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_29_REG_ADDR 0xbb8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_29_OFFSET 0x3b8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_29_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbb8 );
    system_isp_write_32( base + 0xbb8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbb8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_29_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_29_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_29_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_29_REG_ADDR 0xbbc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_29_OFFSET 0x3bc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_29_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_29_read( uint32_t base )
{
    return system_isp_read_32( base + 0xbbc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 30 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_30_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_30_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_30_REG_ADDR 0xbc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_30_OFFSET 0x3c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_30_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbc0 );
    system_isp_write_32( base + 0xbc0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbc0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_30_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_30_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_30_REG_ADDR 0xbc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_30_OFFSET 0x3c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_30_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbc0 );
    system_isp_write_32( base + 0xbc0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbc0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_30_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_30_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_30_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_30_REG_ADDR 0xbc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_30_OFFSET 0x3c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_30_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbc0 );
    system_isp_write_32( base + 0xbc0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbc0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_30_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_30_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_30_REG_ADDR 0xbc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_30_OFFSET 0x3c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_30_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbc0 );
    system_isp_write_32( base + 0xbc0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbc0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_30_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_30_FIELD_OFFSET 18
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_30_REG_ADDR 0xbc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_30_OFFSET 0x3c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_CLONE_FLAG_30_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_clone_flag_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbc0 );
    system_isp_write_32( base + 0xbc0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_clone_flag_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbc0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_30_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_30_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_30_REG_ADDR 0xbc0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_30_OFFSET 0x3c0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_30_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbc0 );
    system_isp_write_32( base + 0xbc0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbc0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_30_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_30_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_30_REG_ADDR 0xbc4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_30_OFFSET 0x3c4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_30_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_30_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xbc4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_30_read( uint32_t base )
{
    return system_isp_read_32( base + 0xbc4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_30_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_30_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_30_REG_ADDR 0xbc8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_30_OFFSET 0x3c8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_30_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_30_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xbc8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_30_read( uint32_t base )
{
    return system_isp_read_32( base + 0xbc8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_30_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_30_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_30_REG_ADDR 0xbcc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_30_OFFSET 0x3cc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_30_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_30_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbcc );
    system_isp_write_32( base + 0xbcc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_30_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xbcc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_30_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_30_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_30_REG_ADDR 0xbd0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_30_OFFSET 0x3d0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_30_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_30_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbd0 );
    system_isp_write_32( base + 0xbd0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_30_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xbd0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_30_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_30_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_30_REG_ADDR 0xbd4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_30_OFFSET 0x3d4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_30_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_30_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbd4 );
    system_isp_write_32( base + 0xbd4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_30_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xbd4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_30_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_30_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_30_REG_ADDR 0xbd8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_30_OFFSET 0x3d8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_30_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbd8 );
    system_isp_write_32( base + 0xbd8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbd8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_30_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_30_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_30_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_30_REG_ADDR 0xbdc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_30_OFFSET 0x3dc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_30_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_30_read( uint32_t base )
{
    return system_isp_read_32( base + 0xbdc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 31 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_31_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_31_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_31_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_31_REG_ADDR 0xbe0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_31_OFFSET 0x3e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_VALID_31_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_buffer_valid_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbe0 );
    system_isp_write_32( base + 0xbe0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_valid_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbe0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits. Used by MCFE in place of MCFE input data width[7:0] in all input modes other than DIRECT.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_31_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_31_DATASIZE 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_31_FIELD_OFFSET 8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_31_REG_ADDR 0xbe0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_31_OFFSET 0x3e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_DATA_WIDTH_31_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_raw_buffers_raw_buffers_data_width_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbe0 );
    system_isp_write_32( base + 0xbe0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_data_width_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbe0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_31_DEFAULT 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_31_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_31_FIELD_OFFSET 16
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_31_REG_ADDR 0xbe0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_31_OFFSET 0x3e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_MSB_ALIGN_31_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_msb_align_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbe0 );
    system_isp_write_32( base + 0xbe0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_msb_align_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbe0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_31_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_31_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_31_FIELD_OFFSET 17
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_31_REG_ADDR 0xbe0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_31_OFFSET 0x3e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_POOL_FLAG_31_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_pool_flag_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbe0 );
    system_isp_write_32( base + 0xbe0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_pool_flag_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbe0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_31_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_31_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_31_FIELD_OFFSET 19
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_31_REG_ADDR 0xbe0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_31_OFFSET 0x3e0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_INFINITE_FLAG_31_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_raw_buffers_raw_buffers_infinite_flag_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbe0 );
    system_isp_write_32( base + 0xbe0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_infinite_flag_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbe0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_31_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_31_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_31_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_31_REG_ADDR 0xbe4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_31_OFFSET 0x3e4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BASE_ADDRESS_31_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_base_address_31_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xbe4, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_base_address_31_read( uint32_t base )
{
    return system_isp_read_32( base + 0xbe4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_31_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_31_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_31_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_31_REG_ADDR 0xbe8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_31_OFFSET 0x3e8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_LINE_OFFSET_31_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_raw_buffers_raw_buffers_line_offset_31_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xbe8, data );
}
static __inline uint32_t acamera_raw_buffers_raw_buffers_line_offset_31_read( uint32_t base )
{
    return system_isp_read_32( base + 0xbe8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_31_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_31_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_31_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_31_REG_ADDR 0xbec
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_31_OFFSET 0x3ec
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_WIDTH_31_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_width_31_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbec );
    system_isp_write_32( base + 0xbec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_width_31_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xbec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_31_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_31_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_31_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_31_REG_ADDR 0xbf0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_31_OFFSET 0x3f0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_ACTIVE_HEIGHT_31_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_active_height_31_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbf0 );
    system_isp_write_32( base + 0xbf0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_active_height_31_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xbf0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_31_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_31_DATASIZE 13
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_31_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_31_REG_ADDR 0xbf4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_31_OFFSET 0x3f4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_HEIGHT_MODULO_31_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_raw_buffers_raw_buffers_height_modulo_31_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbf4 );
    system_isp_write_32( base + 0xbf4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_raw_buffers_raw_buffers_height_modulo_31_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xbf4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_31_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_31_DATASIZE 4
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_31_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_31_REG_ADDR 0xbf8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_31_OFFSET 0x3f8
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_STATUS_31_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_raw_buffers_raw_buffers_status_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xbf8 );
    system_isp_write_32( base + 0xbf8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_raw_buffers_raw_buffers_status_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xbf8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_31_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_31_DATASIZE 32
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_31_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_31_REG_ADDR 0xbfc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_31_OFFSET 0x3fc
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CRC_31_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_crc_31_read( uint32_t base )
{
    return system_isp_read_32( base + 0xbfc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer configuration CRC
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer configuration CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_CRC_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_CRC_DATASIZE 31
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_CRC_FIELD_OFFSET 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_CRC_REG_ADDR 0xc00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_CRC_OFFSET 0x400
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_CRC_FIELD_MASK 0x7fffffff

// args: data (31-bit)
static __inline uint32_t acamera_raw_buffers_raw_buffers_buffer_configuration_crc_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xc00 ) & 0x7fffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer configuration valid CRC
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer configuration valid CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_DEFAULT 0
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_DATASIZE 1
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_FIELD_OFFSET 31
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_REG_ADDR 0xc00
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_OFFSET 0x400
#define ACAMERA_RAW_BUFFERS_RAW_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_raw_buffers_raw_buffers_buffer_configuration_valid_crc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xc00 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
#endif //__ACAMERA_RAW_BUFFERS_CONFIG_H__
