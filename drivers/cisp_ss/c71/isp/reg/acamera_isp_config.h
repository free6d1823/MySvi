//----------------------------------------------------------------------------
//   The confidential and proprietary information contained in this file may
//   only be used by a person authorised under and to the extent permitted
//   by a subsisting licensing agreement from ARM Limited or its affiliates.
//
//          (C) COPYRIGHT [2019] ARM Limited or its affiliates.
//              ALL RIGHTS RESERVED
//
//   This entire notice must be reproduced on all copies of this file
//   and copies of this file may only be made by a person if such person is
//   permitted to do so under the terms of a subsisting license agreement
//   from ARM Limited or its affiliates.
//----------------------------------------------------------------------------

#ifndef __ACAMERA_ISP_CONFIG_H__
#define __ACAMERA_ISP_CONFIG_H__

#include "system_isp_io.h"

// File generated by isp_config.py

// ------------------------------------------------------------------------------ //
// Instance 'isp' of module 'ip_config'
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BASE_ADDR ( 0xe000 )
#define ACAMERA_ISP_SIZE ( 0x2000 )

// ------------------------------------------------------------------------------ //
// Group: ID
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// ISP hardware identification registers
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: API
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Configuration space revision number
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ID_API_DEFAULT 0
#define ACAMERA_ISP_ID_API_DATASIZE 32
#define ACAMERA_ISP_ID_API_FIELD_OFFSET 0
#define ACAMERA_ISP_ID_API_REG_ADDR 0xe000
#define ACAMERA_ISP_ID_API_OFFSET 0x0
#define ACAMERA_ISP_ID_API_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_id_api_read( uint32_t base )
{
    return system_isp_read_32( base + 0xe000 );
}
// ------------------------------------------------------------------------------ //
// Register: Product
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		  Product identification number. In this case 0x55
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ID_PRODUCT_DEFAULT 0
#define ACAMERA_ISP_ID_PRODUCT_DATASIZE 32
#define ACAMERA_ISP_ID_PRODUCT_FIELD_OFFSET 0
#define ACAMERA_ISP_ID_PRODUCT_REG_ADDR 0xe004
#define ACAMERA_ISP_ID_PRODUCT_OFFSET 0x4
#define ACAMERA_ISP_ID_PRODUCT_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_id_product_read( uint32_t base )
{
    return system_isp_read_32( base + 0xe004 );
}
// ------------------------------------------------------------------------------ //
// Register: Version
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		  Product version identifier. In this case 0x01000002
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ID_VERSION_DEFAULT 0
#define ACAMERA_ISP_ID_VERSION_DATASIZE 32
#define ACAMERA_ISP_ID_VERSION_FIELD_OFFSET 0
#define ACAMERA_ISP_ID_VERSION_REG_ADDR 0xe008
#define ACAMERA_ISP_ID_VERSION_OFFSET 0x8
#define ACAMERA_ISP_ID_VERSION_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_id_version_read( uint32_t base )
{
    return system_isp_read_32( base + 0xe008 );
}
// ------------------------------------------------------------------------------ //
// Register: Revision
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		  ISP hardware revision number. The value for this is supplied separately.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ID_REVISION_DEFAULT 0
#define ACAMERA_ISP_ID_REVISION_DATASIZE 32
#define ACAMERA_ISP_ID_REVISION_FIELD_OFFSET 0
#define ACAMERA_ISP_ID_REVISION_REG_ADDR 0xe00c
#define ACAMERA_ISP_ID_REVISION_OFFSET 0xc
#define ACAMERA_ISP_ID_REVISION_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_id_revision_read( uint32_t base )
{
    return system_isp_read_32( base + 0xe00c );
}
// ------------------------------------------------------------------------------ //
// Group: Top
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Miscellaneous top-level ISP controls
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Active Width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video width in pixels
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TOP_ACTIVE_WIDTH_DEFAULT 1920
#define ACAMERA_ISP_TOP_ACTIVE_WIDTH_DATASIZE 16
#define ACAMERA_ISP_TOP_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_TOP_ACTIVE_WIDTH_REG_ADDR 0xe010
#define ACAMERA_ISP_TOP_ACTIVE_WIDTH_OFFSET 0x10
#define ACAMERA_ISP_TOP_ACTIVE_WIDTH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_top_active_width_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe010 );
    system_isp_write_32( base + 0xe010, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_top_active_width_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe010 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active Height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video height in lines
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TOP_ACTIVE_HEIGHT_DEFAULT 1080
#define ACAMERA_ISP_TOP_ACTIVE_HEIGHT_DATASIZE 16
#define ACAMERA_ISP_TOP_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_TOP_ACTIVE_HEIGHT_REG_ADDR 0xe014
#define ACAMERA_ISP_TOP_ACTIVE_HEIGHT_OFFSET 0x14
#define ACAMERA_ISP_TOP_ACTIVE_HEIGHT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_top_active_height_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe014 );
    system_isp_write_32( base + 0xe014, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_top_active_height_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe014 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: RGGB start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Starting color of the rggb pattern
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TOP_RGGB_START_DEFAULT 0
#define ACAMERA_ISP_TOP_RGGB_START_DATASIZE 2
#define ACAMERA_ISP_TOP_RGGB_START_FIELD_OFFSET 0
#define ACAMERA_ISP_TOP_RGGB_START_REG_ADDR 0xe018
#define ACAMERA_ISP_TOP_RGGB_START_OFFSET 0x18
#define ACAMERA_ISP_TOP_RGGB_START_FIELD_MASK 0x3
#define ACAMERA_ISP_TOP_RGGB_START_R_GR_GB_B ( 0 )
#define ACAMERA_ISP_TOP_RGGB_START_GR_R_B_GB ( 1 )
#define ACAMERA_ISP_TOP_RGGB_START_GB_B_R_GR ( 2 )
#define ACAMERA_ISP_TOP_RGGB_START_B_GB_GR_R ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_top_rggb_start_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe018 );
    system_isp_write_32( base + 0xe018, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_top_rggb_start_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe018 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: CFA pattern
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pattern select:
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TOP_CFA_PATTERN_DEFAULT 0
#define ACAMERA_ISP_TOP_CFA_PATTERN_DATASIZE 2
#define ACAMERA_ISP_TOP_CFA_PATTERN_FIELD_OFFSET 8
#define ACAMERA_ISP_TOP_CFA_PATTERN_REG_ADDR 0xe018
#define ACAMERA_ISP_TOP_CFA_PATTERN_OFFSET 0x18
#define ACAMERA_ISP_TOP_CFA_PATTERN_FIELD_MASK 0x300
#define ACAMERA_ISP_TOP_CFA_PATTERN_RGGB ( 0 )
#define ACAMERA_ISP_TOP_CFA_PATTERN_RCCC ( 1 )
#define ACAMERA_ISP_TOP_CFA_PATTERN_RIRGB ( 2 )
#define ACAMERA_ISP_TOP_CFA_PATTERN_RGIRB ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_top_cfa_pattern_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe018 );
    system_isp_write_32( base + 0xe018, ( ( ( uint32_t )( data & 0x3 ) ) << 8 ) | ( curr & 0xfffffcff ) );
}
static __inline uint8_t acamera_isp_top_cfa_pattern_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe018 ) & 0x300 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Group: Pipeline
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: channel1 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Source select for channel 1 through VTPG and Raw FE
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CHANNEL1_SELECT_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CHANNEL1_SELECT_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_CHANNEL1_SELECT_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_CHANNEL1_SELECT_REG_ADDR 0xe020
#define ACAMERA_ISP_PIPELINE_CHANNEL1_SELECT_OFFSET 0x20
#define ACAMERA_ISP_PIPELINE_CHANNEL1_SELECT_FIELD_MASK 0x3
#define ACAMERA_ISP_PIPELINE_CHANNEL1_SELECT_INPUT_CHANNEL_1 ( 0 )
#define ACAMERA_ISP_PIPELINE_CHANNEL1_SELECT_INPUT_CHANNEL_2 ( 1 )
#define ACAMERA_ISP_PIPELINE_CHANNEL1_SELECT_INPUT_CHANNEL_3 ( 2 )
#define ACAMERA_ISP_PIPELINE_CHANNEL1_SELECT_INPUT_CHANNEL_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_channel1_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe020 );
    system_isp_write_32( base + 0xe020, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_pipeline_channel1_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe020 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: channel2 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Source select for channel 2 through VTPG and Raw FE
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CHANNEL2_SELECT_DEFAULT 1
#define ACAMERA_ISP_PIPELINE_CHANNEL2_SELECT_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_CHANNEL2_SELECT_FIELD_OFFSET 2
#define ACAMERA_ISP_PIPELINE_CHANNEL2_SELECT_REG_ADDR 0xe020
#define ACAMERA_ISP_PIPELINE_CHANNEL2_SELECT_OFFSET 0x20
#define ACAMERA_ISP_PIPELINE_CHANNEL2_SELECT_FIELD_MASK 0xc
#define ACAMERA_ISP_PIPELINE_CHANNEL2_SELECT_INPUT_CHANNEL_1 ( 0 )
#define ACAMERA_ISP_PIPELINE_CHANNEL2_SELECT_INPUT_CHANNEL_2 ( 1 )
#define ACAMERA_ISP_PIPELINE_CHANNEL2_SELECT_INPUT_CHANNEL_3 ( 2 )
#define ACAMERA_ISP_PIPELINE_CHANNEL2_SELECT_INPUT_CHANNEL_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_channel2_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe020 );
    system_isp_write_32( base + 0xe020, ( ( ( uint32_t )( data & 0x3 ) ) << 2 ) | ( curr & 0xfffffff3 ) );
}
static __inline uint8_t acamera_isp_pipeline_channel2_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe020 ) & 0xc ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: channel3 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Source select for channel 3 through VTPG and Raw FE
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CHANNEL3_SELECT_DEFAULT 2
#define ACAMERA_ISP_PIPELINE_CHANNEL3_SELECT_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_CHANNEL3_SELECT_FIELD_OFFSET 4
#define ACAMERA_ISP_PIPELINE_CHANNEL3_SELECT_REG_ADDR 0xe020
#define ACAMERA_ISP_PIPELINE_CHANNEL3_SELECT_OFFSET 0x20
#define ACAMERA_ISP_PIPELINE_CHANNEL3_SELECT_FIELD_MASK 0x30
#define ACAMERA_ISP_PIPELINE_CHANNEL3_SELECT_INPUT_CHANNEL_1 ( 0 )
#define ACAMERA_ISP_PIPELINE_CHANNEL3_SELECT_INPUT_CHANNEL_2 ( 1 )
#define ACAMERA_ISP_PIPELINE_CHANNEL3_SELECT_INPUT_CHANNEL_3 ( 2 )
#define ACAMERA_ISP_PIPELINE_CHANNEL3_SELECT_INPUT_CHANNEL_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_channel3_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe020 );
    system_isp_write_32( base + 0xe020, ( ( ( uint32_t )( data & 0x3 ) ) << 4 ) | ( curr & 0xffffffcf ) );
}
static __inline uint8_t acamera_isp_pipeline_channel3_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe020 ) & 0x30 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: channel4 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Source select for channel 4 through VTPG and Raw FE
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CHANNEL4_SELECT_DEFAULT 3
#define ACAMERA_ISP_PIPELINE_CHANNEL4_SELECT_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_CHANNEL4_SELECT_FIELD_OFFSET 6
#define ACAMERA_ISP_PIPELINE_CHANNEL4_SELECT_REG_ADDR 0xe020
#define ACAMERA_ISP_PIPELINE_CHANNEL4_SELECT_OFFSET 0x20
#define ACAMERA_ISP_PIPELINE_CHANNEL4_SELECT_FIELD_MASK 0xc0
#define ACAMERA_ISP_PIPELINE_CHANNEL4_SELECT_INPUT_CHANNEL_1 ( 0 )
#define ACAMERA_ISP_PIPELINE_CHANNEL4_SELECT_INPUT_CHANNEL_2 ( 1 )
#define ACAMERA_ISP_PIPELINE_CHANNEL4_SELECT_INPUT_CHANNEL_3 ( 2 )
#define ACAMERA_ISP_PIPELINE_CHANNEL4_SELECT_INPUT_CHANNEL_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_channel4_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe020 );
    system_isp_write_32( base + 0xe020, ( ( ( uint32_t )( data & 0x3 ) ) << 6 ) | ( curr & 0xffffff3f ) );
}
static __inline uint8_t acamera_isp_pipeline_channel4_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe020 ) & 0xc0 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: fs channel1 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Source select for channel 1 into Frame Stitch
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_FS_CHANNEL1_SELECT_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL1_SELECT_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL1_SELECT_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL1_SELECT_REG_ADDR 0xe02c
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL1_SELECT_OFFSET 0x2c
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL1_SELECT_FIELD_MASK 0x3
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL1_SELECT_FRONTEND_CHANNEL_1 ( 0 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL1_SELECT_FRONTEND_CHANNEL_2 ( 1 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL1_SELECT_FRONTEND_CHANNEL_3 ( 2 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL1_SELECT_FRONTEND_CHANNEL_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_fs_channel1_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe02c );
    system_isp_write_32( base + 0xe02c, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_pipeline_fs_channel1_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe02c ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: fs channel2 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Source select for channel 2 into Frame Stitch
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_FS_CHANNEL2_SELECT_DEFAULT 1
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL2_SELECT_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL2_SELECT_FIELD_OFFSET 2
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL2_SELECT_REG_ADDR 0xe02c
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL2_SELECT_OFFSET 0x2c
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL2_SELECT_FIELD_MASK 0xc
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL2_SELECT_FRONTEND_CHANNEL_1 ( 0 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL2_SELECT_FRONTEND_CHANNEL_2 ( 1 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL2_SELECT_FRONTEND_CHANNEL_3 ( 2 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL2_SELECT_FRONTEND_CHANNEL_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_fs_channel2_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe02c );
    system_isp_write_32( base + 0xe02c, ( ( ( uint32_t )( data & 0x3 ) ) << 2 ) | ( curr & 0xfffffff3 ) );
}
static __inline uint8_t acamera_isp_pipeline_fs_channel2_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe02c ) & 0xc ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: fs channel3 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Source select for channel 3 into Frame Stitch
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_FS_CHANNEL3_SELECT_DEFAULT 2
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL3_SELECT_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL3_SELECT_FIELD_OFFSET 4
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL3_SELECT_REG_ADDR 0xe02c
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL3_SELECT_OFFSET 0x2c
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL3_SELECT_FIELD_MASK 0x30
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL3_SELECT_FRONTEND_CHANNEL_1 ( 0 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL3_SELECT_FRONTEND_CHANNEL_2 ( 1 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL3_SELECT_FRONTEND_CHANNEL_3 ( 2 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL3_SELECT_FRONTEND_CHANNEL_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_fs_channel3_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe02c );
    system_isp_write_32( base + 0xe02c, ( ( ( uint32_t )( data & 0x3 ) ) << 4 ) | ( curr & 0xffffffcf ) );
}
static __inline uint8_t acamera_isp_pipeline_fs_channel3_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe02c ) & 0x30 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: fs channel4 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Source select for channel 4 into Frame Stitch
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_FS_CHANNEL4_SELECT_DEFAULT 3
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL4_SELECT_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL4_SELECT_FIELD_OFFSET 6
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL4_SELECT_REG_ADDR 0xe02c
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL4_SELECT_OFFSET 0x2c
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL4_SELECT_FIELD_MASK 0xc0
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL4_SELECT_FRONTEND_CHANNEL_1 ( 0 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL4_SELECT_FRONTEND_CHANNEL_2 ( 1 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL4_SELECT_FRONTEND_CHANNEL_3 ( 2 )
#define ACAMERA_ISP_PIPELINE_FS_CHANNEL4_SELECT_FRONTEND_CHANNEL_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_fs_channel4_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe02c );
    system_isp_write_32( base + 0xe02c, ( ( ( uint32_t )( data & 0x3 ) ) << 6 ) | ( curr & 0xffffff3f ) );
}
static __inline uint8_t acamera_isp_pipeline_fs_channel4_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe02c ) & 0xc0 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Flush hblank
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Horizontal blanking interval during regeneration (0=measured input interval)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_FLUSH_HBLANK_DEFAULT 32
#define ACAMERA_ISP_PIPELINE_FLUSH_HBLANK_DATASIZE 16
#define ACAMERA_ISP_PIPELINE_FLUSH_HBLANK_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_FLUSH_HBLANK_REG_ADDR 0xe028
#define ACAMERA_ISP_PIPELINE_FLUSH_HBLANK_OFFSET 0x28
#define ACAMERA_ISP_PIPELINE_FLUSH_HBLANK_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_pipeline_flush_hblank_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe028 );
    system_isp_write_32( base + 0xe028, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_pipeline_flush_hblank_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe028 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Config Buffer Mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Select ISP configuration double-buffering mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CONFIG_BUFFER_MODE_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CONFIG_BUFFER_MODE_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_CONFIG_BUFFER_MODE_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_CONFIG_BUFFER_MODE_REG_ADDR 0xe030
#define ACAMERA_ISP_PIPELINE_CONFIG_BUFFER_MODE_OFFSET 0x30
#define ACAMERA_ISP_PIPELINE_CONFIG_BUFFER_MODE_FIELD_MASK 0x3
#define ACAMERA_ISP_PIPELINE_CONFIG_BUFFER_MODE_DISABLED_CONFIG_UPDATES_IMMEDIATELY ( 0 )
#define ACAMERA_ISP_PIPELINE_CONFIG_BUFFER_MODE_BLOCKED_CONFIG_NEVER_UPDATES ( 1 )
#define ACAMERA_ISP_PIPELINE_CONFIG_BUFFER_MODE_LOCAL_MODULE_CONFIG_UPDATES_DURING_LOCAL_VERTICAL_BLANKING ( 2 )
#define ACAMERA_ISP_PIPELINE_CONFIG_BUFFER_MODE_GLOBAL_ALL_MODULE_CONFIG_UPDATED_DURING_ISP_VERTICAL_BLANKING ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_config_buffer_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe030 );
    system_isp_write_32( base + 0xe030, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_pipeline_config_buffer_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe030 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass input formatter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass input formatter module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_INPUT_FORMATTER_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_INPUT_FORMATTER_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_INPUT_FORMATTER_FIELD_OFFSET 2
#define ACAMERA_ISP_PIPELINE_BYPASS_INPUT_FORMATTER_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_INPUT_FORMATTER_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_INPUT_FORMATTER_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_input_formatter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_input_formatter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass channel switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass channel switch module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_CHANNEL_SWITCH_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_CHANNEL_SWITCH_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_CHANNEL_SWITCH_FIELD_OFFSET 3
#define ACAMERA_ISP_PIPELINE_BYPASS_CHANNEL_SWITCH_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_CHANNEL_SWITCH_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_CHANNEL_SWITCH_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_channel_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_channel_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass video test gen
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass video test generator
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_VIDEO_TEST_GEN_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_VIDEO_TEST_GEN_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_VIDEO_TEST_GEN_FIELD_OFFSET 4
#define ACAMERA_ISP_PIPELINE_BYPASS_VIDEO_TEST_GEN_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_VIDEO_TEST_GEN_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_VIDEO_TEST_GEN_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_video_test_gen_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_video_test_gen_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass RAW frontend
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass RAW frontend (green equalization and dynamic defect pixel)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_RAW_FRONTEND_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_RAW_FRONTEND_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_RAW_FRONTEND_FIELD_OFFSET 5
#define ACAMERA_ISP_PIPELINE_BYPASS_RAW_FRONTEND_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_RAW_FRONTEND_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_RAW_FRONTEND_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_raw_frontend_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_raw_frontend_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass defect pixel
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass static defect pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_DEFECT_PIXEL_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_DEFECT_PIXEL_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_DEFECT_PIXEL_FIELD_OFFSET 6
#define ACAMERA_ISP_PIPELINE_BYPASS_DEFECT_PIXEL_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_DEFECT_PIXEL_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_DEFECT_PIXEL_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_defect_pixel_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_defect_pixel_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass FS channel switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass frame stitch channel switch
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_FS_CHANNEL_SWITCH_DEFAULT 1
#define ACAMERA_ISP_PIPELINE_BYPASS_FS_CHANNEL_SWITCH_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_FS_CHANNEL_SWITCH_FIELD_OFFSET 11
#define ACAMERA_ISP_PIPELINE_BYPASS_FS_CHANNEL_SWITCH_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_FS_CHANNEL_SWITCH_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_FS_CHANNEL_SWITCH_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_fs_channel_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_fs_channel_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass frame stitch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass frame stitching logic
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_FRAME_STITCH_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_FRAME_STITCH_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_FRAME_STITCH_FIELD_OFFSET 7
#define ACAMERA_ISP_PIPELINE_BYPASS_FRAME_STITCH_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_FRAME_STITCH_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_FRAME_STITCH_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_frame_stitch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_frame_stitch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass gamma fe
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass front end gamma LUTs
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_FIELD_OFFSET 8
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_gamma_fe_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_gamma_fe_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass gamma fe sq
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass front end gamma block
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_SQ_DEFAULT 1
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_SQ_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_SQ_FIELD_OFFSET 9
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_SQ_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_SQ_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_FE_SQ_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_gamma_fe_sq_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_gamma_fe_sq_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass digital gain
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass digital gain module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_FIELD_OFFSET 10
#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_digital_gain_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_digital_gain_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Position digital gain
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Position of Digital Gain module: 0= before Gamma FE, 1=after Gamma FE
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_POSITION_DIGITAL_GAIN_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_POSITION_DIGITAL_GAIN_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_POSITION_DIGITAL_GAIN_FIELD_OFFSET 22
#define ACAMERA_ISP_PIPELINE_POSITION_DIGITAL_GAIN_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_POSITION_DIGITAL_GAIN_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_POSITION_DIGITAL_GAIN_FIELD_MASK 0x400000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_position_digital_gain_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 22 ) | ( curr & 0xffbfffff ) );
}
static __inline uint8_t acamera_isp_pipeline_position_digital_gain_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x400000 ) >> 22 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass digital gain Iridix
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass digital gain Iridix module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_IRIDIX_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_IRIDIX_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_IRIDIX_FIELD_OFFSET 21
#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_IRIDIX_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_IRIDIX_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_DIGITAL_GAIN_IRIDIX_FIELD_MASK 0x200000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_digital_gain_iridix_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 21 ) | ( curr & 0xffdfffff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_digital_gain_iridix_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x200000 ) >> 21 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass sinter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass Sinter
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_SINTER_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_SINTER_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_SINTER_FIELD_OFFSET 12
#define ACAMERA_ISP_PIPELINE_BYPASS_SINTER_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_SINTER_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_SINTER_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_sinter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_sinter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass gamma be
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass back end end gamma LUTs
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_FIELD_OFFSET 13
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_gamma_be_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_gamma_be_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass gamma be sq
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass back end gamma block
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_SQ_DEFAULT 1
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_SQ_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_SQ_FIELD_OFFSET 14
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_SQ_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_SQ_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_GAMMA_BE_SQ_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_gamma_be_sq_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_gamma_be_sq_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass white balance
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass static white balance
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_WHITE_BALANCE_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_WHITE_BALANCE_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_WHITE_BALANCE_FIELD_OFFSET 15
#define ACAMERA_ISP_PIPELINE_BYPASS_WHITE_BALANCE_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_WHITE_BALANCE_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_WHITE_BALANCE_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_white_balance_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_white_balance_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass radial shading
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass Radial Shading
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_RADIAL_SHADING_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_RADIAL_SHADING_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_RADIAL_SHADING_FIELD_OFFSET 16
#define ACAMERA_ISP_PIPELINE_BYPASS_RADIAL_SHADING_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_RADIAL_SHADING_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_RADIAL_SHADING_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_radial_shading_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_radial_shading_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass mesh shading
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass Mesh Shading
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_MESH_SHADING_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_MESH_SHADING_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_MESH_SHADING_FIELD_OFFSET 17
#define ACAMERA_ISP_PIPELINE_BYPASS_MESH_SHADING_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_MESH_SHADING_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_MESH_SHADING_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_mesh_shading_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_mesh_shading_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass iridix
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass Iridix
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_IRIDIX_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_IRIDIX_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_IRIDIX_FIELD_OFFSET 18
#define ACAMERA_ISP_PIPELINE_BYPASS_IRIDIX_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_IRIDIX_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_IRIDIX_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_iridix_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_iridix_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass demosaic
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass demosaic module (output RAW data)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_DEMOSAIC_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_DEMOSAIC_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_DEMOSAIC_FIELD_OFFSET 19
#define ACAMERA_ISP_PIPELINE_BYPASS_DEMOSAIC_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_DEMOSAIC_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_DEMOSAIC_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_demosaic_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_demosaic_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass out format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass color matrix
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_OUT_FORMAT_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_OUT_FORMAT_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_OUT_FORMAT_FIELD_OFFSET 20
#define ACAMERA_ISP_PIPELINE_BYPASS_OUT_FORMAT_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_OUT_FORMAT_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_OUT_FORMAT_FIELD_MASK 0x100000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_out_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_out_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass crop
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass cropping block
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_CROP_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_CROP_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_CROP_FIELD_OFFSET 24
#define ACAMERA_ISP_PIPELINE_BYPASS_CROP_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_CROP_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_CROP_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_crop_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_crop_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass sensor offset WDR
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass WDR sensor offset
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_WDR_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_WDR_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_WDR_FIELD_OFFSET 27
#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_WDR_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_WDR_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_WDR_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_sensor_offset_wdr_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_sensor_offset_wdr_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass sensor offset linear
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass sensor offset in linear domain
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_LINEAR_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_LINEAR_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_LINEAR_FIELD_OFFSET 31
#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_LINEAR_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_LINEAR_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_SENSOR_OFFSET_LINEAR_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_sensor_offset_linear_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_sensor_offset_linear_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass WDR gain
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass WDR gain
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_WDR_GAIN_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_WDR_GAIN_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_WDR_GAIN_FIELD_OFFSET 28
#define ACAMERA_ISP_PIPELINE_BYPASS_WDR_GAIN_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_WDR_GAIN_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_WDR_GAIN_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_wdr_gain_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_wdr_gain_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass CA correction
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass CA correction
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_BYPASS_CA_CORRECTION_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_BYPASS_CA_CORRECTION_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_BYPASS_CA_CORRECTION_FIELD_OFFSET 29
#define ACAMERA_ISP_PIPELINE_BYPASS_CA_CORRECTION_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_BYPASS_CA_CORRECTION_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_BYPASS_CA_CORRECTION_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_isp_pipeline_bypass_ca_correction_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_isp_pipeline_bypass_ca_correction_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Linear data source
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Source for linear data in the pipeline
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_LINEAR_DATA_SOURCE_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_LINEAR_DATA_SOURCE_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_LINEAR_DATA_SOURCE_FIELD_OFFSET 30
#define ACAMERA_ISP_PIPELINE_LINEAR_DATA_SOURCE_REG_ADDR 0xe040
#define ACAMERA_ISP_PIPELINE_LINEAR_DATA_SOURCE_OFFSET 0x40
#define ACAMERA_ISP_PIPELINE_LINEAR_DATA_SOURCE_FIELD_MASK 0x40000000
#define ACAMERA_ISP_PIPELINE_LINEAR_DATA_SOURCE_FRAME_STITCH ( 0 )
#define ACAMERA_ISP_PIPELINE_LINEAR_DATA_SOURCE_DECOMPANDED_SENSOR_DATA ( 1 )

// args: data (1-bit)
static __inline void acamera_isp_pipeline_linear_data_source_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe040 );
    system_isp_write_32( base + 0xe040, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_isp_pipeline_linear_data_source_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe040 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: ISP RAW output data select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Source for raw data output in the output mux
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_ISP_RAW_OUTPUT_DATA_SELECT_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_ISP_RAW_OUTPUT_DATA_SELECT_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_ISP_RAW_OUTPUT_DATA_SELECT_FIELD_OFFSET 12
#define ACAMERA_ISP_PIPELINE_ISP_RAW_OUTPUT_DATA_SELECT_REG_ADDR 0xe044
#define ACAMERA_ISP_PIPELINE_ISP_RAW_OUTPUT_DATA_SELECT_OFFSET 0x44
#define ACAMERA_ISP_PIPELINE_ISP_RAW_OUTPUT_DATA_SELECT_FIELD_MASK 0x3000
#define ACAMERA_ISP_PIPELINE_ISP_RAW_OUTPUT_DATA_SELECT_COMPANDED_SENSOR_DATA ( 0 )
#define ACAMERA_ISP_PIPELINE_ISP_RAW_OUTPUT_DATA_SELECT_FRAME_STITCH ( 1 )
#define ACAMERA_ISP_PIPELINE_ISP_RAW_OUTPUT_DATA_SELECT_POST_GAMMA_FE_COMPANDING_CURVE ( 2 )
#define ACAMERA_ISP_PIPELINE_ISP_RAW_OUTPUT_DATA_SELECT_TONE_MAPPED_DATA ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_isp_raw_output_data_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe044 );
    system_isp_write_32( base + 0xe044, ( ( ( uint32_t )( data & 0x3 ) ) << 12 ) | ( curr & 0xffffcfff ) );
}
static __inline uint8_t acamera_isp_pipeline_isp_raw_output_data_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe044 ) & 0x3000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: ISP RAW bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//          Used to select the data to be passed to the output formater. This may be either data image sensor data processed normally by the ISP or the RAW input data.
//          In the latter case the 4 input data channels are mapped on the the 4 colour planes and the RAW data can be taken from one of 3 tap points.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_ISP_RAW_BYPASS_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_ISP_RAW_BYPASS_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_ISP_RAW_BYPASS_FIELD_OFFSET 8
#define ACAMERA_ISP_PIPELINE_ISP_RAW_BYPASS_REG_ADDR 0xe044
#define ACAMERA_ISP_PIPELINE_ISP_RAW_BYPASS_OFFSET 0x44
#define ACAMERA_ISP_PIPELINE_ISP_RAW_BYPASS_FIELD_MASK 0x300
#define ACAMERA_ISP_PIPELINE_ISP_RAW_BYPASS_SELECT_PROCESSED ( 0 )
#define ACAMERA_ISP_PIPELINE_ISP_RAW_BYPASS_BYPASS_ISP_RAW_PROCESSING ( 1 )
#define ACAMERA_ISP_PIPELINE_ISP_RAW_BYPASS_BYPASS_INPUT_FORMATTING ( 2 )
#define ACAMERA_ISP_PIPELINE_ISP_RAW_BYPASS_BYPASS_MULTICHANNEL_FRONTEND ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_isp_raw_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe044 );
    system_isp_write_32( base + 0xe044, ( ( ( uint32_t )( data & 0x3 ) ) << 8 ) | ( curr & 0xfffffcff ) );
}
static __inline uint8_t acamera_isp_pipeline_isp_raw_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe044 ) & 0x300 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: AE switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// AE tap in the pipeline.  Location of AE statistic collection.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_AE_SWITCH_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_AE_SWITCH_DATASIZE 3
#define ACAMERA_ISP_PIPELINE_AE_SWITCH_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_AE_SWITCH_REG_ADDR 0xe048
#define ACAMERA_ISP_PIPELINE_AE_SWITCH_OFFSET 0x48
#define ACAMERA_ISP_PIPELINE_AE_SWITCH_FIELD_MASK 0x7
#define ACAMERA_ISP_PIPELINE_AE_SWITCH_AFTER_STATIC_WHITE_BALANCE ( 0 )
#define ACAMERA_ISP_PIPELINE_AE_SWITCH_AFTER_WDR_GAIN ( 1 )
#define ACAMERA_ISP_PIPELINE_AE_SWITCH_AFTER_SHADING ( 2 )
#define ACAMERA_ISP_PIPELINE_AE_SWITCH_AFTER_WDR_FRAME_STITCH ( 3 )
#define ACAMERA_ISP_PIPELINE_AE_SWITCH_AFTER_FRONTEND_GAMMA ( 4 )
#define ACAMERA_ISP_PIPELINE_AE_SWITCH_OFF ( 5 )

// args: data (3-bit)
static __inline void acamera_isp_pipeline_ae_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe048 );
    system_isp_write_32( base + 0xe048, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_pipeline_ae_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe048 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AWB switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// AWB tap in the pipeline.  Location of AWB statistics collection.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_AWB_SWITCH_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_AWB_SWITCH_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_AWB_SWITCH_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_AWB_SWITCH_REG_ADDR 0xe04c
#define ACAMERA_ISP_PIPELINE_AWB_SWITCH_OFFSET 0x4c
#define ACAMERA_ISP_PIPELINE_AWB_SWITCH_FIELD_MASK 0x1
#define ACAMERA_ISP_PIPELINE_AWB_SWITCH_IMMEDIATELY_BEFORE_COLOUR_MATRIX ( 0 )
#define ACAMERA_ISP_PIPELINE_AWB_SWITCH_IMMEDIATELY_AFTER_COLOUR_MATRIX ( 1 )

// args: data (1-bit)
static __inline void acamera_isp_pipeline_awb_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe04c );
    system_isp_write_32( base + 0xe04c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_pipeline_awb_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe04c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Histogram1 ISP switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Location of the channel 1 histogram tap in ISP
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_HISTOGRAM1_ISP_SWITCH_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_HISTOGRAM1_ISP_SWITCH_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_HISTOGRAM1_ISP_SWITCH_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_HISTOGRAM1_ISP_SWITCH_REG_ADDR 0xe050
#define ACAMERA_ISP_PIPELINE_HISTOGRAM1_ISP_SWITCH_OFFSET 0x50
#define ACAMERA_ISP_PIPELINE_HISTOGRAM1_ISP_SWITCH_FIELD_MASK 0x3
#define ACAMERA_ISP_PIPELINE_HISTOGRAM1_ISP_SWITCH_AFTER_WDR_GAIN_CHANNEL_1 ( 0 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM1_ISP_SWITCH_AFTER_FRAME_STITCH ( 1 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM1_ISP_SWITCH_COMPANDED_DATA_AFTER_GAMMA_FE ( 2 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM1_ISP_SWITCH_AFTER_SHADING ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_histogram1_isp_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe050 );
    system_isp_write_32( base + 0xe050, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_pipeline_histogram1_isp_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe050 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Histogram2 ISP switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Location of the channel 2 histogram tap in ISP
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_HISTOGRAM2_ISP_SWITCH_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_HISTOGRAM2_ISP_SWITCH_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_HISTOGRAM2_ISP_SWITCH_FIELD_OFFSET 8
#define ACAMERA_ISP_PIPELINE_HISTOGRAM2_ISP_SWITCH_REG_ADDR 0xe050
#define ACAMERA_ISP_PIPELINE_HISTOGRAM2_ISP_SWITCH_OFFSET 0x50
#define ACAMERA_ISP_PIPELINE_HISTOGRAM2_ISP_SWITCH_FIELD_MASK 0x300
#define ACAMERA_ISP_PIPELINE_HISTOGRAM2_ISP_SWITCH_AFTER_WDR_GAIN_CHANNEL_2 ( 0 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM2_ISP_SWITCH_AFTER_FRAME_STITCH ( 1 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM2_ISP_SWITCH_COMPANDED_DATA_AFTER_GAMMA_FE ( 2 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM2_ISP_SWITCH_AFTER_SHADING ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_histogram2_isp_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe050 );
    system_isp_write_32( base + 0xe050, ( ( ( uint32_t )( data & 0x3 ) ) << 8 ) | ( curr & 0xfffffcff ) );
}
static __inline uint8_t acamera_isp_pipeline_histogram2_isp_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe050 ) & 0x300 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Histogram3 ISP switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Location of the channel 3 histogram tap in ISP
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_HISTOGRAM3_ISP_SWITCH_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_HISTOGRAM3_ISP_SWITCH_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_HISTOGRAM3_ISP_SWITCH_FIELD_OFFSET 16
#define ACAMERA_ISP_PIPELINE_HISTOGRAM3_ISP_SWITCH_REG_ADDR 0xe050
#define ACAMERA_ISP_PIPELINE_HISTOGRAM3_ISP_SWITCH_OFFSET 0x50
#define ACAMERA_ISP_PIPELINE_HISTOGRAM3_ISP_SWITCH_FIELD_MASK 0x30000
#define ACAMERA_ISP_PIPELINE_HISTOGRAM3_ISP_SWITCH_AFTER_WDR_GAIN_CHANNEL_3 ( 0 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM3_ISP_SWITCH_AFTER_FRAME_STITCH ( 1 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM3_ISP_SWITCH_COMPANDED_DATA_AFTER_GAMMA_FE ( 2 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM3_ISP_SWITCH_AFTER_SHADING ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_histogram3_isp_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe050 );
    system_isp_write_32( base + 0xe050, ( ( ( uint32_t )( data & 0x3 ) ) << 16 ) | ( curr & 0xfffcffff ) );
}
static __inline uint8_t acamera_isp_pipeline_histogram3_isp_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe050 ) & 0x30000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Histogram4 ISP switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Location of the channel 4 histogram tap in ISP
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_HISTOGRAM4_ISP_SWITCH_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_HISTOGRAM4_ISP_SWITCH_DATASIZE 2
#define ACAMERA_ISP_PIPELINE_HISTOGRAM4_ISP_SWITCH_FIELD_OFFSET 24
#define ACAMERA_ISP_PIPELINE_HISTOGRAM4_ISP_SWITCH_REG_ADDR 0xe050
#define ACAMERA_ISP_PIPELINE_HISTOGRAM4_ISP_SWITCH_OFFSET 0x50
#define ACAMERA_ISP_PIPELINE_HISTOGRAM4_ISP_SWITCH_FIELD_MASK 0x3000000
#define ACAMERA_ISP_PIPELINE_HISTOGRAM4_ISP_SWITCH_AFTER_WDR_GAIN_CHANNEL_4 ( 0 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM4_ISP_SWITCH_AFTER_FRAME_STITCH ( 1 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM4_ISP_SWITCH_COMPANDED_DATA_AFTER_GAMMA_FE ( 2 )
#define ACAMERA_ISP_PIPELINE_HISTOGRAM4_ISP_SWITCH_AFTER_SHADING ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_pipeline_histogram4_isp_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe050 );
    system_isp_write_32( base + 0xe050, ( ( ( uint32_t )( data & 0x3 ) ) << 24 ) | ( curr & 0xfcffffff ) );
}
static __inline uint8_t acamera_isp_pipeline_histogram4_isp_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe050 ) & 0x3000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: ROI Histogram switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Location of the ROI histogram tap in ISP
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_ROI_HISTOGRAM_SWITCH_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_ROI_HISTOGRAM_SWITCH_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_ROI_HISTOGRAM_SWITCH_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_ROI_HISTOGRAM_SWITCH_REG_ADDR 0xe054
#define ACAMERA_ISP_PIPELINE_ROI_HISTOGRAM_SWITCH_OFFSET 0x54
#define ACAMERA_ISP_PIPELINE_ROI_HISTOGRAM_SWITCH_FIELD_MASK 0x1
#define ACAMERA_ISP_PIPELINE_ROI_HISTOGRAM_SWITCH_LINEAR_STITCHED_DATA ( 0 )
#define ACAMERA_ISP_PIPELINE_ROI_HISTOGRAM_SWITCH_AFTER_COMPANDING ( 1 )

// args: data (1-bit)
static __inline void acamera_isp_pipeline_roi_histogram_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe054 );
    system_isp_write_32( base + 0xe054, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_pipeline_roi_histogram_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe054 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Antifog Hist Switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Antifog histogram enable.  Enables statistics gathering for antifog global histogram
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_ANTIFOG_HIST_SWITCH_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_ANTIFOG_HIST_SWITCH_DATASIZE 1
#define ACAMERA_ISP_PIPELINE_ANTIFOG_HIST_SWITCH_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_ANTIFOG_HIST_SWITCH_REG_ADDR 0xe058
#define ACAMERA_ISP_PIPELINE_ANTIFOG_HIST_SWITCH_OFFSET 0x58
#define ACAMERA_ISP_PIPELINE_ANTIFOG_HIST_SWITCH_FIELD_MASK 0x1
#define ACAMERA_ISP_PIPELINE_ANTIFOG_HIST_SWITCH_ENABLED ( 0 )
#define ACAMERA_ISP_PIPELINE_ANTIFOG_HIST_SWITCH_DISABLED ( 1 )

// args: data (1-bit)
static __inline void acamera_isp_pipeline_antifog_hist_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe058 );
    system_isp_write_32( base + 0xe058, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_pipeline_antifog_hist_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe058 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Output tag
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Tag for output streams
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_OUTPUT_TAG_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_OUTPUT_TAG_DATASIZE 3
#define ACAMERA_ISP_PIPELINE_OUTPUT_TAG_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_OUTPUT_TAG_REG_ADDR 0xe060
#define ACAMERA_ISP_PIPELINE_OUTPUT_TAG_OFFSET 0x60
#define ACAMERA_ISP_PIPELINE_OUTPUT_TAG_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_pipeline_output_tag_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe060 );
    system_isp_write_32( base + 0xe060, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_pipeline_output_tag_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe060 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Context no
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CONTEXT_NO_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CONTEXT_NO_DATASIZE 4
#define ACAMERA_ISP_PIPELINE_CONTEXT_NO_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_CONTEXT_NO_REG_ADDR 0xe064
#define ACAMERA_ISP_PIPELINE_CONTEXT_NO_OFFSET 0x64
#define ACAMERA_ISP_PIPELINE_CONTEXT_NO_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_isp_pipeline_context_no_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe064 );
    system_isp_write_32( base + 0xe064, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_pipeline_context_no_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe064 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Test mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Raw frontend
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Test mode selector for Raw frontend
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TEST_MODE_RAW_FRONTEND_DEFAULT 0
#define ACAMERA_ISP_TEST_MODE_RAW_FRONTEND_DATASIZE 8
#define ACAMERA_ISP_TEST_MODE_RAW_FRONTEND_FIELD_OFFSET 0
#define ACAMERA_ISP_TEST_MODE_RAW_FRONTEND_REG_ADDR 0xe070
#define ACAMERA_ISP_TEST_MODE_RAW_FRONTEND_OFFSET 0x0
#define ACAMERA_ISP_TEST_MODE_RAW_FRONTEND_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_test_mode_raw_frontend_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe070 );
    system_isp_write_32( base + 0xe070, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_test_mode_raw_frontend_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe070 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame stitch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Test mode selector for Frame stitch
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TEST_MODE_FRAME_STITCH_DEFAULT 0
#define ACAMERA_ISP_TEST_MODE_FRAME_STITCH_DATASIZE 9
#define ACAMERA_ISP_TEST_MODE_FRAME_STITCH_FIELD_OFFSET 8
#define ACAMERA_ISP_TEST_MODE_FRAME_STITCH_REG_ADDR 0xe070
#define ACAMERA_ISP_TEST_MODE_FRAME_STITCH_OFFSET 0x0
#define ACAMERA_ISP_TEST_MODE_FRAME_STITCH_FIELD_MASK 0x1ff00

// args: data (9-bit)
static __inline void acamera_isp_test_mode_frame_stitch_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe070 );
    system_isp_write_32( base + 0xe070, ( ( ( uint32_t )( data & 0x1ff ) ) << 8 ) | ( curr & 0xfffe00ff ) );
}
static __inline uint16_t acamera_isp_test_mode_frame_stitch_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe070 ) & 0x1ff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Sinter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Test mode selector for Sinter
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TEST_MODE_SINTER_DEFAULT 0
#define ACAMERA_ISP_TEST_MODE_SINTER_DATASIZE 8
#define ACAMERA_ISP_TEST_MODE_SINTER_FIELD_OFFSET 24
#define ACAMERA_ISP_TEST_MODE_SINTER_REG_ADDR 0xe070
#define ACAMERA_ISP_TEST_MODE_SINTER_OFFSET 0x0
#define ACAMERA_ISP_TEST_MODE_SINTER_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_test_mode_sinter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe070 );
    system_isp_write_32( base + 0xe070, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_test_mode_sinter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe070 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Radial shading
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Test mode selector for Radial shading
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TEST_MODE_RADIAL_SHADING_DEFAULT 0
#define ACAMERA_ISP_TEST_MODE_RADIAL_SHADING_DATASIZE 8
#define ACAMERA_ISP_TEST_MODE_RADIAL_SHADING_FIELD_OFFSET 16
#define ACAMERA_ISP_TEST_MODE_RADIAL_SHADING_REG_ADDR 0xe074
#define ACAMERA_ISP_TEST_MODE_RADIAL_SHADING_OFFSET 0x4
#define ACAMERA_ISP_TEST_MODE_RADIAL_SHADING_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_test_mode_radial_shading_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe074 );
    system_isp_write_32( base + 0xe074, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_test_mode_radial_shading_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe074 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Iridix
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Test mode selector for Iridix
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TEST_MODE_IRIDIX_DEFAULT 0
#define ACAMERA_ISP_TEST_MODE_IRIDIX_DATASIZE 8
#define ACAMERA_ISP_TEST_MODE_IRIDIX_FIELD_OFFSET 24
#define ACAMERA_ISP_TEST_MODE_IRIDIX_REG_ADDR 0xe074
#define ACAMERA_ISP_TEST_MODE_IRIDIX_OFFSET 0x4
#define ACAMERA_ISP_TEST_MODE_IRIDIX_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_test_mode_iridix_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe074 );
    system_isp_write_32( base + 0xe074, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_test_mode_iridix_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe074 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Demosaic
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Test mode selector for Demosaic
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_DEFAULT 0
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_DATASIZE 8
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_FIELD_OFFSET 0
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_REG_ADDR 0xe078
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_OFFSET 0x8
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_test_mode_demosaic_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe078 );
    system_isp_write_32( base + 0xe078, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_test_mode_demosaic_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe078 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Demosaic RGBIr
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Test mode selector for Demosaic RGBIr
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RGBIR_DEFAULT 0
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RGBIR_DATASIZE 8
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RGBIR_FIELD_OFFSET 8
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RGBIR_REG_ADDR 0xe078
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RGBIR_OFFSET 0x8
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RGBIR_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_isp_test_mode_demosaic_rgbir_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe078 );
    system_isp_write_32( base + 0xe078, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_isp_test_mode_demosaic_rgbir_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe078 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Demosaic RCCC
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Test mode selector for Demosaic RCCC
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RCCC_DEFAULT 0
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RCCC_DATASIZE 8
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RCCC_FIELD_OFFSET 16
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RCCC_REG_ADDR 0xe078
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RCCC_OFFSET 0x8
#define ACAMERA_ISP_TEST_MODE_DEMOSAIC_RCCC_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_test_mode_demosaic_rccc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe078 );
    system_isp_write_32( base + 0xe078, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_test_mode_demosaic_rccc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe078 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Out format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Test mode selector for Out formatter
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TEST_MODE_OUT_FORMAT_DEFAULT 0
#define ACAMERA_ISP_TEST_MODE_OUT_FORMAT_DATASIZE 8
#define ACAMERA_ISP_TEST_MODE_OUT_FORMAT_FIELD_OFFSET 24
#define ACAMERA_ISP_TEST_MODE_OUT_FORMAT_REG_ADDR 0xe078
#define ACAMERA_ISP_TEST_MODE_OUT_FORMAT_OFFSET 0x8
#define ACAMERA_ISP_TEST_MODE_OUT_FORMAT_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_test_mode_out_format_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe078 );
    system_isp_write_32( base + 0xe078, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_test_mode_out_format_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe078 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Test trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Trigger test mode patterns manually
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TEST_MODE_TEST_TRIGGER_DEFAULT 0
#define ACAMERA_ISP_TEST_MODE_TEST_TRIGGER_DATASIZE 1
#define ACAMERA_ISP_TEST_MODE_TEST_TRIGGER_FIELD_OFFSET 24
#define ACAMERA_ISP_TEST_MODE_TEST_TRIGGER_REG_ADDR 0xe07c
#define ACAMERA_ISP_TEST_MODE_TEST_TRIGGER_OFFSET 0xc
#define ACAMERA_ISP_TEST_MODE_TEST_TRIGGER_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_isp_test_mode_test_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe07c );
    system_isp_write_32( base + 0xe07c, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_isp_test_mode_test_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe07c ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: ISP Output CRC enable
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_TEST_MODE_ISP_OUTPUT_CRC_ENABLE_DEFAULT 0
#define ACAMERA_ISP_TEST_MODE_ISP_OUTPUT_CRC_ENABLE_DATASIZE 1
#define ACAMERA_ISP_TEST_MODE_ISP_OUTPUT_CRC_ENABLE_FIELD_OFFSET 28
#define ACAMERA_ISP_TEST_MODE_ISP_OUTPUT_CRC_ENABLE_REG_ADDR 0xe07c
#define ACAMERA_ISP_TEST_MODE_ISP_OUTPUT_CRC_ENABLE_OFFSET 0xc
#define ACAMERA_ISP_TEST_MODE_ISP_OUTPUT_CRC_ENABLE_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_isp_test_mode_isp_output_crc_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe07c );
    system_isp_write_32( base + 0xe07c, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_isp_test_mode_isp_output_crc_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe07c ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Group: PC FIFO
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Control of pixel consistency statistics.
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Enable dynamic defects
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Enable dynamic defect flag bit plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_ENABLE_DYNAMIC_DEFECTS_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_ENABLE_DYNAMIC_DEFECTS_DATASIZE 1
#define ACAMERA_ISP_PC_FIFO_ENABLE_DYNAMIC_DEFECTS_FIELD_OFFSET 0
#define ACAMERA_ISP_PC_FIFO_ENABLE_DYNAMIC_DEFECTS_REG_ADDR 0xe080
#define ACAMERA_ISP_PC_FIFO_ENABLE_DYNAMIC_DEFECTS_OFFSET 0x0
#define ACAMERA_ISP_PC_FIFO_ENABLE_DYNAMIC_DEFECTS_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_pc_fifo_enable_dynamic_defects_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe080 );
    system_isp_write_32( base + 0xe080, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_pc_fifo_enable_dynamic_defects_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe080 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable static defects
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Enable static defect flag bit plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_ENABLE_STATIC_DEFECTS_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_ENABLE_STATIC_DEFECTS_DATASIZE 1
#define ACAMERA_ISP_PC_FIFO_ENABLE_STATIC_DEFECTS_FIELD_OFFSET 1
#define ACAMERA_ISP_PC_FIFO_ENABLE_STATIC_DEFECTS_REG_ADDR 0xe080
#define ACAMERA_ISP_PC_FIFO_ENABLE_STATIC_DEFECTS_OFFSET 0x0
#define ACAMERA_ISP_PC_FIFO_ENABLE_STATIC_DEFECTS_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_pc_fifo_enable_static_defects_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe080 );
    system_isp_write_32( base + 0xe080, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_pc_fifo_enable_static_defects_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe080 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable WDR inconsistency
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Enable WDR inconsistency bit plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_INCONSISTENCY_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_INCONSISTENCY_DATASIZE 1
#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_INCONSISTENCY_FIELD_OFFSET 2
#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_INCONSISTENCY_REG_ADDR 0xe080
#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_INCONSISTENCY_OFFSET 0x0
#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_INCONSISTENCY_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_isp_pc_fifo_enable_wdr_inconsistency_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe080 );
    system_isp_write_32( base + 0xe080, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_isp_pc_fifo_enable_wdr_inconsistency_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe080 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable WDR flicker
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Enable WDR flicker bit plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_FLICKER_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_FLICKER_DATASIZE 1
#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_FLICKER_FIELD_OFFSET 3
#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_FLICKER_REG_ADDR 0xe080
#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_FLICKER_OFFSET 0x0
#define ACAMERA_ISP_PC_FIFO_ENABLE_WDR_FLICKER_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_pc_fifo_enable_wdr_flicker_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe080 );
    system_isp_write_32( base + 0xe080, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_pc_fifo_enable_wdr_flicker_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe080 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Counter overflow dynamic defects
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Overflow flag for dynamic defect pixel counter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_DYNAMIC_DEFECTS_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_DYNAMIC_DEFECTS_DATASIZE 1
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_DYNAMIC_DEFECTS_FIELD_OFFSET 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_DYNAMIC_DEFECTS_REG_ADDR 0xe084
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_DYNAMIC_DEFECTS_OFFSET 0x4
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_DYNAMIC_DEFECTS_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_isp_pc_fifo_counter_overflow_dynamic_defects_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe084 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Counter overflow static defects
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Overflow flag for static defect pixel counter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_STATIC_DEFECTS_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_STATIC_DEFECTS_DATASIZE 1
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_STATIC_DEFECTS_FIELD_OFFSET 1
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_STATIC_DEFECTS_REG_ADDR 0xe084
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_STATIC_DEFECTS_OFFSET 0x4
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_STATIC_DEFECTS_FIELD_MASK 0x2

// args: data (1-bit)
static __inline uint8_t acamera_isp_pc_fifo_counter_overflow_static_defects_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe084 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Counter overflow wdr inconsistency
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Overflow flag for WDR inconsistency counter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_INCONSISTENCY_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_INCONSISTENCY_DATASIZE 1
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_INCONSISTENCY_FIELD_OFFSET 2
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_INCONSISTENCY_REG_ADDR 0xe084
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_INCONSISTENCY_OFFSET 0x4
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_INCONSISTENCY_FIELD_MASK 0x4

// args: data (1-bit)
static __inline uint8_t acamera_isp_pc_fifo_counter_overflow_wdr_inconsistency_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe084 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Counter overflow wdr flicker
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Overflow flag for WDR flicker counter.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_FLICKER_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_FLICKER_DATASIZE 1
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_FLICKER_FIELD_OFFSET 3
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_FLICKER_REG_ADDR 0xe084
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_FLICKER_OFFSET 0x4
#define ACAMERA_ISP_PC_FIFO_COUNTER_OVERFLOW_WDR_FLICKER_FIELD_MASK 0x8

// args: data (1-bit)
static __inline uint8_t acamera_isp_pc_fifo_counter_overflow_wdr_flicker_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe084 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Counter dynamic defects
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Count of the dynamic defect pixels in the last frame.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_COUNTER_DYNAMIC_DEFECTS_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_DYNAMIC_DEFECTS_DATASIZE 32
#define ACAMERA_ISP_PC_FIFO_COUNTER_DYNAMIC_DEFECTS_FIELD_OFFSET 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_DYNAMIC_DEFECTS_REG_ADDR 0xe088
#define ACAMERA_ISP_PC_FIFO_COUNTER_DYNAMIC_DEFECTS_OFFSET 0x8
#define ACAMERA_ISP_PC_FIFO_COUNTER_DYNAMIC_DEFECTS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_pc_fifo_counter_dynamic_defects_read( uint32_t base )
{
    return system_isp_read_32( base + 0xe088 );
}
// ------------------------------------------------------------------------------ //
// Register: Counter static defects
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Count of the static defect pixels in the last frame.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_COUNTER_STATIC_DEFECTS_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_STATIC_DEFECTS_DATASIZE 32
#define ACAMERA_ISP_PC_FIFO_COUNTER_STATIC_DEFECTS_FIELD_OFFSET 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_STATIC_DEFECTS_REG_ADDR 0xe08c
#define ACAMERA_ISP_PC_FIFO_COUNTER_STATIC_DEFECTS_OFFSET 0xc
#define ACAMERA_ISP_PC_FIFO_COUNTER_STATIC_DEFECTS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_pc_fifo_counter_static_defects_read( uint32_t base )
{
    return system_isp_read_32( base + 0xe08c );
}
// ------------------------------------------------------------------------------ //
// Register: Counter wdr inconsistency
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Count of pixels with WDR inconsistency during frame stitch in the last frame.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_INCONSISTENCY_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_INCONSISTENCY_DATASIZE 32
#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_INCONSISTENCY_FIELD_OFFSET 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_INCONSISTENCY_REG_ADDR 0xe090
#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_INCONSISTENCY_OFFSET 0x10
#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_INCONSISTENCY_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_pc_fifo_counter_wdr_inconsistency_read( uint32_t base )
{
    return system_isp_read_32( base + 0xe090 );
}
// ------------------------------------------------------------------------------ //
// Register: Counter wdr flicker
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Count of the pixels with detected flicker in the last frame.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_FLICKER_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_FLICKER_DATASIZE 32
#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_FLICKER_FIELD_OFFSET 0
#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_FLICKER_REG_ADDR 0xe094
#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_FLICKER_OFFSET 0x14
#define ACAMERA_ISP_PC_FIFO_COUNTER_WDR_FLICKER_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_pc_fifo_counter_wdr_flicker_read( uint32_t base )
{
    return system_isp_read_32( base + 0xe094 );
}
// ------------------------------------------------------------------------------ //
// Register: Stat hold
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Freeze the registers for atomic reading of the counters.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PC_FIFO_STAT_HOLD_DEFAULT 0
#define ACAMERA_ISP_PC_FIFO_STAT_HOLD_DATASIZE 1
#define ACAMERA_ISP_PC_FIFO_STAT_HOLD_FIELD_OFFSET 8
#define ACAMERA_ISP_PC_FIFO_STAT_HOLD_REG_ADDR 0xe080
#define ACAMERA_ISP_PC_FIFO_STAT_HOLD_OFFSET 0x0
#define ACAMERA_ISP_PC_FIFO_STAT_HOLD_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_isp_pc_fifo_stat_hold_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe080 );
    system_isp_write_32( base + 0xe080, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_isp_pc_fifo_stat_hold_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe080 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Group: Input Formatter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Adapts received data format to ISP format see TRM for a table of setting to be used for various sensors/modes.
//
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: mode in
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Input mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_MODE_IN_DEFAULT 0
#define ACAMERA_ISP_INPUT_FORMATTER_MODE_IN_DATASIZE 3
#define ACAMERA_ISP_INPUT_FORMATTER_MODE_IN_FIELD_OFFSET 0
#define ACAMERA_ISP_INPUT_FORMATTER_MODE_IN_REG_ADDR 0xe140
#define ACAMERA_ISP_INPUT_FORMATTER_MODE_IN_OFFSET 0x0
#define ACAMERA_ISP_INPUT_FORMATTER_MODE_IN_FIELD_MASK 0x7
#define ACAMERA_ISP_INPUT_FORMATTER_MODE_IN_LINEAR_DATA_ACROSS_2_INPUTS ( 0 )
#define ACAMERA_ISP_INPUT_FORMATTER_MODE_IN_23_MULTIPLE_EXPOSURE_MULTIPLEXING ( 1 )
#define ACAMERA_ISP_INPUT_FORMATTER_MODE_IN_LOGARITHMIC_ENCODING ( 2 )
#define ACAMERA_ISP_INPUT_FORMATTER_MODE_IN_COMPANDING_CURVE_WITH_KNEE_POINTS ( 3 )

// args: data (3-bit)
static __inline void acamera_isp_input_formatter_mode_in_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe140 );
    system_isp_write_32( base + 0xe140, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_input_formatter_mode_in_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe140 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Input1 bitwidth select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Input 1 bitwidth select
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_DEFAULT 2
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_DATASIZE 3
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_FIELD_OFFSET 8
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_REG_ADDR 0xe140
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_OFFSET 0x0
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_FIELD_MASK 0x700
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_8_BITS ( 0 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_10_BITS ( 1 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_12_BITS ( 2 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_14_BITS ( 3 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_16_BITS ( 4 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_20_BITS_NO_18_BITS ( 5 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_22_BITS ( 6 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_BITWIDTH_SELECT_24_BITS ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_input_formatter_input1_bitwidth_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe140 );
    system_isp_write_32( base + 0xe140, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_isp_input_formatter_input1_bitwidth_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe140 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Input2 bitwidth select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Input 2 bitwidth select
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_DEFAULT 2
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_DATASIZE 3
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_FIELD_OFFSET 12
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_REG_ADDR 0xe140
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_OFFSET 0x0
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_FIELD_MASK 0x7000
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_8_BITS ( 0 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_10_BITS ( 1 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_12_BITS ( 2 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_14_BITS ( 3 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_16_BITS ( 4 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_20_BITS_NO_18_BITS ( 5 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_22_BITS ( 6 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_BITWIDTH_SELECT_24_BITS ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_input_formatter_input2_bitwidth_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe140 );
    system_isp_write_32( base + 0xe140, ( ( ( uint32_t )( data & 0x7 ) ) << 12 ) | ( curr & 0xffff8fff ) );
}
static __inline uint8_t acamera_isp_input_formatter_input2_bitwidth_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe140 ) & 0x7000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Input3 bitwidth select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Input 3 bitwidth select
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_DEFAULT 2
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_DATASIZE 3
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_FIELD_OFFSET 16
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_REG_ADDR 0xe140
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_OFFSET 0x0
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_FIELD_MASK 0x70000
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_8_BITS ( 0 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_10_BITS ( 1 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_12_BITS ( 2 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_14_BITS ( 3 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_16_BITS ( 4 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_20_BITS_NO_18_BITS ( 5 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_22_BITS ( 6 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_BITWIDTH_SELECT_24_BITS ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_input_formatter_input3_bitwidth_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe140 );
    system_isp_write_32( base + 0xe140, ( ( ( uint32_t )( data & 0x7 ) ) << 16 ) | ( curr & 0xfff8ffff ) );
}
static __inline uint8_t acamera_isp_input_formatter_input3_bitwidth_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe140 ) & 0x70000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Input4 bitwidth select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Input bitwidth select
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_DEFAULT 2
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_DATASIZE 3
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_FIELD_OFFSET 20
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_REG_ADDR 0xe140
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_OFFSET 0x0
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_FIELD_MASK 0x700000
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_8_BITS ( 0 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_10_BITS ( 1 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_12_BITS ( 2 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_14_BITS ( 3 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_16_BITS ( 4 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_20_BITS_NO_18_BITS ( 5 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_22_BITS ( 6 )
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_BITWIDTH_SELECT_24_BITS ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_input_formatter_input4_bitwidth_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe140 );
    system_isp_write_32( base + 0xe140, ( ( ( uint32_t )( data & 0x7 ) ) << 20 ) | ( curr & 0xff8fffff ) );
}
static __inline uint8_t acamera_isp_input_formatter_input4_bitwidth_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe140 ) & 0x700000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: Input1 alignment
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  0=LSB aligned 1=MSB aligned
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_ALIGNMENT_DEFAULT 1
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_ALIGNMENT_DATASIZE 1
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_ALIGNMENT_FIELD_OFFSET 24
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_ALIGNMENT_REG_ADDR 0xe140
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_ALIGNMENT_OFFSET 0x0
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT1_ALIGNMENT_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_isp_input_formatter_input1_alignment_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe140 );
    system_isp_write_32( base + 0xe140, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_isp_input_formatter_input1_alignment_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe140 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Input2 alignment
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  0=LSB aligned 1=MSB aligned
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_ALIGNMENT_DEFAULT 1
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_ALIGNMENT_DATASIZE 1
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_ALIGNMENT_FIELD_OFFSET 25
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_ALIGNMENT_REG_ADDR 0xe140
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_ALIGNMENT_OFFSET 0x0
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT2_ALIGNMENT_FIELD_MASK 0x2000000

// args: data (1-bit)
static __inline void acamera_isp_input_formatter_input2_alignment_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe140 );
    system_isp_write_32( base + 0xe140, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_isp_input_formatter_input2_alignment_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe140 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Input3 alignment
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  0=LSB aligned 1=MSB aligned
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_ALIGNMENT_DEFAULT 1
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_ALIGNMENT_DATASIZE 1
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_ALIGNMENT_FIELD_OFFSET 26
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_ALIGNMENT_REG_ADDR 0xe140
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_ALIGNMENT_OFFSET 0x0
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT3_ALIGNMENT_FIELD_MASK 0x4000000

// args: data (1-bit)
static __inline void acamera_isp_input_formatter_input3_alignment_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe140 );
    system_isp_write_32( base + 0xe140, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_isp_input_formatter_input3_alignment_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe140 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: Input4 alignment
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  0=LSB aligned 1=MSB aligned
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_ALIGNMENT_DEFAULT 1
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_ALIGNMENT_DATASIZE 1
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_ALIGNMENT_FIELD_OFFSET 27
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_ALIGNMENT_REG_ADDR 0xe140
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_ALIGNMENT_OFFSET 0x0
#define ACAMERA_ISP_INPUT_FORMATTER_INPUT4_ALIGNMENT_FIELD_MASK 0x8000000

// args: data (1-bit)
static __inline void acamera_isp_input_formatter_input4_alignment_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe140 );
    system_isp_write_32( base + 0xe140, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_isp_input_formatter_input4_alignment_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe140 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: factor ML
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  18 bit, 6.12 fix point - ratio between long and medium exposure for 2:3 multiplexed mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_ML_DEFAULT 4096
#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_ML_DATASIZE 18
#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_ML_FIELD_OFFSET 0
#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_ML_REG_ADDR 0xe144
#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_ML_OFFSET 0x4
#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_ML_FIELD_MASK 0x3ffff

// args: data (18-bit)
static __inline void acamera_isp_input_formatter_factor_ml_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe144 );
    system_isp_write_32( base + 0xe144, ( ( ( uint32_t )( data & 0x3ffff ) ) << 0 ) | ( curr & 0xfffc0000 ) );
}
static __inline uint32_t acamera_isp_input_formatter_factor_ml_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe144 ) & 0x3ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: factor MS
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  13 bit, 1.12 fix point - ratio between short and medium exposure for 2:3 multiplexed mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_MS_DEFAULT 4096
#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_MS_DATASIZE 13
#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_MS_FIELD_OFFSET 0
#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_MS_REG_ADDR 0xe148
#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_MS_OFFSET 0x8
#define ACAMERA_ISP_INPUT_FORMATTER_FACTOR_MS_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_input_formatter_factor_ms_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe148 );
    system_isp_write_32( base + 0xe148, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_input_formatter_factor_ms_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe148 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: black level
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Black level of sensor data for 2:3 multiplexed mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_BLACK_LEVEL_DEFAULT 0
#define ACAMERA_ISP_INPUT_FORMATTER_BLACK_LEVEL_DATASIZE 12
#define ACAMERA_ISP_INPUT_FORMATTER_BLACK_LEVEL_FIELD_OFFSET 0
#define ACAMERA_ISP_INPUT_FORMATTER_BLACK_LEVEL_REG_ADDR 0xe14c
#define ACAMERA_ISP_INPUT_FORMATTER_BLACK_LEVEL_OFFSET 0xc
#define ACAMERA_ISP_INPUT_FORMATTER_BLACK_LEVEL_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_input_formatter_black_level_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe14c );
    system_isp_write_32( base + 0xe14c, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_input_formatter_black_level_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe14c ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: knee point0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  First knee point
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT0_DEFAULT 1298
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT0_DATASIZE 16
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT0_FIELD_OFFSET 0
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT0_REG_ADDR 0xe150
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT0_OFFSET 0x10
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_input_formatter_knee_point0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe150 );
    system_isp_write_32( base + 0xe150, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_input_formatter_knee_point0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe150 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: knee point1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Second knee point
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT1_DEFAULT 5128
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT1_DATASIZE 16
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT1_FIELD_OFFSET 16
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT1_REG_ADDR 0xe150
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT1_OFFSET 0x10
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT1_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_input_formatter_knee_point1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe150 );
    system_isp_write_32( base + 0xe150, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_input_formatter_knee_point1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe150 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: knee point2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Third knee point
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT2_DEFAULT 8567
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT2_DATASIZE 16
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT2_FIELD_OFFSET 0
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT2_REG_ADDR 0xe154
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT2_OFFSET 0x14
#define ACAMERA_ISP_INPUT_FORMATTER_KNEE_POINT2_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_input_formatter_knee_point2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe154 );
    system_isp_write_32( base + 0xe154, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_input_formatter_knee_point2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe154 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: slope0 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  First slope for companding table segments
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_DEFAULT 2
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_DATASIZE 4
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_FIELD_OFFSET 0
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_REG_ADDR 0xe158
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_OFFSET 0x18
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_FIELD_MASK 0xf
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_1X ( 0 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_2X ( 1 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_4X ( 2 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_8X ( 3 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_16X ( 4 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_32X ( 5 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_64X ( 6 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_128X ( 7 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_256X ( 8 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_512X ( 9 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_1024X ( 10 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_2048X ( 11 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_4096X ( 12 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_8192X ( 13 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_16384X ( 14 )
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE0_SELECT_32768X ( 15 )

// args: data (4-bit)
static __inline void acamera_isp_input_formatter_slope0_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe158 );
    system_isp_write_32( base + 0xe158, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_input_formatter_slope0_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe158 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: slope1 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Second slope for companding table segments (encoding is the same as slope0 select)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE1_SELECT_DEFAULT 4
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE1_SELECT_DATASIZE 4
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE1_SELECT_FIELD_OFFSET 8
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE1_SELECT_REG_ADDR 0xe158
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE1_SELECT_OFFSET 0x18
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE1_SELECT_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_isp_input_formatter_slope1_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe158 );
    system_isp_write_32( base + 0xe158, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_isp_input_formatter_slope1_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe158 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: slope2 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Third slope for companding table segments (encoding is the same as slope0 select)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE2_SELECT_DEFAULT 6
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE2_SELECT_DATASIZE 4
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE2_SELECT_FIELD_OFFSET 16
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE2_SELECT_REG_ADDR 0xe158
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE2_SELECT_OFFSET 0x18
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE2_SELECT_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_isp_input_formatter_slope2_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe158 );
    system_isp_write_32( base + 0xe158, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_isp_input_formatter_slope2_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe158 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: slope3 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Last slope for companding table segments (encoding is the same as slope0 select)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE3_SELECT_DEFAULT 9
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE3_SELECT_DATASIZE 4
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE3_SELECT_FIELD_OFFSET 24
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE3_SELECT_REG_ADDR 0xe158
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE3_SELECT_OFFSET 0x18
#define ACAMERA_ISP_INPUT_FORMATTER_SLOPE3_SELECT_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_isp_input_formatter_slope3_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe158 );
    system_isp_write_32( base + 0xe158, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_isp_input_formatter_slope3_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe158 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Group: Video Test Gen
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Video test generator controls.  See TRM for further details
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: test_pattern_off on
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Test pattern off-on: 0=off, 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_TEST_PATTERN_OFF_ON_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_TEST_PATTERN_OFF_ON_DATASIZE 1
#define ACAMERA_ISP_VIDEO_TEST_GEN_TEST_PATTERN_OFF_ON_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_TEST_PATTERN_OFF_ON_REG_ADDR 0xe160
#define ACAMERA_ISP_VIDEO_TEST_GEN_TEST_PATTERN_OFF_ON_OFFSET 0x0
#define ACAMERA_ISP_VIDEO_TEST_GEN_TEST_PATTERN_OFF_ON_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_video_test_gen_test_pattern_off_on_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe160 );
    system_isp_write_32( base + 0xe160, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_video_test_gen_test_pattern_off_on_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe160 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: bayer_rgb_i sel
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bayer or rgb select for input video: 0=bayer, 1=rgb
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_I_SEL_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_I_SEL_DATASIZE 1
#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_I_SEL_FIELD_OFFSET 1
#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_I_SEL_REG_ADDR 0xe160
#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_I_SEL_OFFSET 0x0
#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_I_SEL_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_video_test_gen_bayer_rgb_i_sel_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe160 );
    system_isp_write_32( base + 0xe160, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_video_test_gen_bayer_rgb_i_sel_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe160 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: bayer_rgb_o sel
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bayer or rgb select for output video: 0=bayer, 1=rgb
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_O_SEL_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_O_SEL_DATASIZE 1
#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_O_SEL_FIELD_OFFSET 2
#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_O_SEL_REG_ADDR 0xe160
#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_O_SEL_OFFSET 0x0
#define ACAMERA_ISP_VIDEO_TEST_GEN_BAYER_RGB_O_SEL_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_isp_video_test_gen_bayer_rgb_o_sel_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe160 );
    system_isp_write_32( base + 0xe160, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_isp_video_test_gen_bayer_rgb_o_sel_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe160 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: pattern type
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pattern type select: 0=Flat field,1=Horizontal gradient,2=Vertical Gradient,3=Vertical Bars,4=Rectangle,5-random,6-255=Default white frame on black
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_PATTERN_TYPE_DEFAULT 3
#define ACAMERA_ISP_VIDEO_TEST_GEN_PATTERN_TYPE_DATASIZE 8
#define ACAMERA_ISP_VIDEO_TEST_GEN_PATTERN_TYPE_FIELD_OFFSET 8
#define ACAMERA_ISP_VIDEO_TEST_GEN_PATTERN_TYPE_REG_ADDR 0xe160
#define ACAMERA_ISP_VIDEO_TEST_GEN_PATTERN_TYPE_OFFSET 0x0
#define ACAMERA_ISP_VIDEO_TEST_GEN_PATTERN_TYPE_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_isp_video_test_gen_pattern_type_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe160 );
    system_isp_write_32( base + 0xe160, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_isp_video_test_gen_pattern_type_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe160 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: prbs rst on frame
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_RST_ON_FRAME_DEFAULT 1
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_RST_ON_FRAME_DATASIZE 1
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_RST_ON_FRAME_FIELD_OFFSET 3
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_RST_ON_FRAME_REG_ADDR 0xe160
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_RST_ON_FRAME_OFFSET 0x0
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_RST_ON_FRAME_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_video_test_gen_prbs_rst_on_frame_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe160 );
    system_isp_write_32( base + 0xe160, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_video_test_gen_prbs_rst_on_frame_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe160 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Generate mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_GENERATE_MODE_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_GENERATE_MODE_DATASIZE 1
#define ACAMERA_ISP_VIDEO_TEST_GEN_GENERATE_MODE_FIELD_OFFSET 4
#define ACAMERA_ISP_VIDEO_TEST_GEN_GENERATE_MODE_REG_ADDR 0xe160
#define ACAMERA_ISP_VIDEO_TEST_GEN_GENERATE_MODE_OFFSET 0x0
#define ACAMERA_ISP_VIDEO_TEST_GEN_GENERATE_MODE_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_isp_video_test_gen_generate_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe160 );
    system_isp_write_32( base + 0xe160, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_isp_video_test_gen_generate_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe160 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Video source
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_VIDEO_SOURCE_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_VIDEO_SOURCE_DATASIZE 1
#define ACAMERA_ISP_VIDEO_TEST_GEN_VIDEO_SOURCE_FIELD_OFFSET 5
#define ACAMERA_ISP_VIDEO_TEST_GEN_VIDEO_SOURCE_REG_ADDR 0xe160
#define ACAMERA_ISP_VIDEO_TEST_GEN_VIDEO_SOURCE_OFFSET 0x0
#define ACAMERA_ISP_VIDEO_TEST_GEN_VIDEO_SOURCE_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_isp_video_test_gen_video_source_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe160 );
    system_isp_write_32( base + 0xe160, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_isp_video_test_gen_video_source_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe160 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame request
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Request autogenerated frame
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_FRAME_REQUEST_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_FRAME_REQUEST_DATASIZE 1
#define ACAMERA_ISP_VIDEO_TEST_GEN_FRAME_REQUEST_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_FRAME_REQUEST_REG_ADDR 0xe164
#define ACAMERA_ISP_VIDEO_TEST_GEN_FRAME_REQUEST_OFFSET 0x4
#define ACAMERA_ISP_VIDEO_TEST_GEN_FRAME_REQUEST_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_video_test_gen_frame_request_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe164 );
    system_isp_write_32( base + 0xe164, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_video_test_gen_frame_request_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe164 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: r backgnd
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Red background  value 16-bit, MSB aligned to used width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_R_BACKGND_DEFAULT 1048575
#define ACAMERA_ISP_VIDEO_TEST_GEN_R_BACKGND_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_R_BACKGND_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_R_BACKGND_REG_ADDR 0xe168
#define ACAMERA_ISP_VIDEO_TEST_GEN_R_BACKGND_OFFSET 0x8
#define ACAMERA_ISP_VIDEO_TEST_GEN_R_BACKGND_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_r_backgnd_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe168 );
    system_isp_write_32( base + 0xe168, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_r_backgnd_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe168 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: g backgnd
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Green background value 16-bit, MSB aligned to used width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_G_BACKGND_DEFAULT 1048575
#define ACAMERA_ISP_VIDEO_TEST_GEN_G_BACKGND_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_G_BACKGND_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_G_BACKGND_REG_ADDR 0xe16c
#define ACAMERA_ISP_VIDEO_TEST_GEN_G_BACKGND_OFFSET 0xc
#define ACAMERA_ISP_VIDEO_TEST_GEN_G_BACKGND_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_g_backgnd_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe16c );
    system_isp_write_32( base + 0xe16c, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_g_backgnd_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe16c ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: b backgnd
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Blue background value 16-bit, MSB aligned to used width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_B_BACKGND_DEFAULT 1048575
#define ACAMERA_ISP_VIDEO_TEST_GEN_B_BACKGND_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_B_BACKGND_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_B_BACKGND_REG_ADDR 0xe170
#define ACAMERA_ISP_VIDEO_TEST_GEN_B_BACKGND_OFFSET 0x10
#define ACAMERA_ISP_VIDEO_TEST_GEN_B_BACKGND_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_b_backgnd_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe170 );
    system_isp_write_32( base + 0xe170, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_b_backgnd_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe170 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: ir backgnd
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// IR background value 16-bit, MSB aligned to used width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_BACKGND_DEFAULT 1048575
#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_BACKGND_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_BACKGND_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_BACKGND_REG_ADDR 0xe174
#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_BACKGND_OFFSET 0x14
#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_BACKGND_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_ir_backgnd_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe174 );
    system_isp_write_32( base + 0xe174, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_ir_backgnd_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe174 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: r foregnd
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Red foreground  value 16-bit, MSB aligned to used width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_R_FOREGND_DEFAULT 589823
#define ACAMERA_ISP_VIDEO_TEST_GEN_R_FOREGND_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_R_FOREGND_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_R_FOREGND_REG_ADDR 0xe178
#define ACAMERA_ISP_VIDEO_TEST_GEN_R_FOREGND_OFFSET 0x18
#define ACAMERA_ISP_VIDEO_TEST_GEN_R_FOREGND_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_r_foregnd_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe178 );
    system_isp_write_32( base + 0xe178, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_r_foregnd_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe178 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: g foregnd
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Green foreground value 16-bit, MSB aligned to used width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_G_FOREGND_DEFAULT 589823
#define ACAMERA_ISP_VIDEO_TEST_GEN_G_FOREGND_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_G_FOREGND_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_G_FOREGND_REG_ADDR 0xe17c
#define ACAMERA_ISP_VIDEO_TEST_GEN_G_FOREGND_OFFSET 0x1c
#define ACAMERA_ISP_VIDEO_TEST_GEN_G_FOREGND_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_g_foregnd_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe17c );
    system_isp_write_32( base + 0xe17c, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_g_foregnd_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe17c ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: b foregnd
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Blue foreground value 16-bit, MSB aligned to used width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_B_FOREGND_DEFAULT 589823
#define ACAMERA_ISP_VIDEO_TEST_GEN_B_FOREGND_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_B_FOREGND_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_B_FOREGND_REG_ADDR 0xe180
#define ACAMERA_ISP_VIDEO_TEST_GEN_B_FOREGND_OFFSET 0x20
#define ACAMERA_ISP_VIDEO_TEST_GEN_B_FOREGND_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_b_foregnd_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe180 );
    system_isp_write_32( base + 0xe180, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_b_foregnd_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe180 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: ir foregnd
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// IR foreground value 16-bit, MSB aligned to used width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_FOREGND_DEFAULT 589823
#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_FOREGND_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_FOREGND_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_FOREGND_REG_ADDR 0xe184
#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_FOREGND_OFFSET 0x24
#define ACAMERA_ISP_VIDEO_TEST_GEN_IR_FOREGND_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_ir_foregnd_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe184 );
    system_isp_write_32( base + 0xe184, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_ir_foregnd_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe184 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb gradient 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// RGB gradient increment per pixel (0-15) for first channel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_1_DEFAULT 15530
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_1_DATASIZE 24
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_1_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_1_REG_ADDR 0xe188
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_1_OFFSET 0x28
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_1_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_video_test_gen_rgb_gradient_1_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe188 );
    system_isp_write_32( base + 0xe188, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_rgb_gradient_1_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe188 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb gradient 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// RGB gradient increment for channel 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_2_DEFAULT 15530
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_2_DATASIZE 24
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_2_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_2_REG_ADDR 0xe18c
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_2_OFFSET 0x2c
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_2_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_video_test_gen_rgb_gradient_2_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe18c );
    system_isp_write_32( base + 0xe18c, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_rgb_gradient_2_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe18c ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb gradient 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// RGB gradient increment for channel 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_3_DEFAULT 15530
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_3_DATASIZE 24
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_3_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_3_REG_ADDR 0xe190
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_3_OFFSET 0x30
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_3_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_video_test_gen_rgb_gradient_3_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe190 );
    system_isp_write_32( base + 0xe190, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_rgb_gradient_3_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe190 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb gradient 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// RGB gradient increment for channel 4
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_4_DEFAULT 15530
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_4_DATASIZE 24
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_4_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_4_REG_ADDR 0xe194
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_4_OFFSET 0x34
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_4_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_video_test_gen_rgb_gradient_4_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe194 );
    system_isp_write_32( base + 0xe194, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_rgb_gradient_4_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe194 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb_gradient start 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// RGB gradient start value for first channel 16-bit, MSB aligned to used width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_1_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_1_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_1_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_1_REG_ADDR 0xe198
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_1_OFFSET 0x38
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_1_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_rgb_gradient_start_1_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe198 );
    system_isp_write_32( base + 0xe198, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_rgb_gradient_start_1_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe198 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb_gradient start 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// RGB gradient start value for first channel 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_2_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_2_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_2_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_2_REG_ADDR 0xe19c
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_2_OFFSET 0x3c
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_2_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_rgb_gradient_start_2_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe19c );
    system_isp_write_32( base + 0xe19c, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_rgb_gradient_start_2_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe19c ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb_gradient start 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// RGB gradient start value for first channel 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_3_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_3_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_3_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_3_REG_ADDR 0xe1a0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_3_OFFSET 0x40
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_3_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_rgb_gradient_start_3_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1a0 );
    system_isp_write_32( base + 0xe1a0, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_rgb_gradient_start_3_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe1a0 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb_gradient start 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// RGB gradient start value for first channel 4
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_4_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_4_DATASIZE 20
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_4_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_4_REG_ADDR 0xe1a4
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_4_OFFSET 0x44
#define ACAMERA_ISP_VIDEO_TEST_GEN_RGB_GRADIENT_START_4_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_video_test_gen_rgb_gradient_start_4_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1a4 );
    system_isp_write_32( base + 0xe1a4, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_rgb_gradient_start_4_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe1a4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rect top
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Rectangle top line number 1-n
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_TOP_DEFAULT 1
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_TOP_DATASIZE 14
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_TOP_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_TOP_REG_ADDR 0xe1a8
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_TOP_OFFSET 0x48
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_TOP_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_video_test_gen_rect_top_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1a8 );
    system_isp_write_32( base + 0xe1a8, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_video_test_gen_rect_top_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe1a8 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rect bot
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Rectangle bottom line number 1-n
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_BOT_DEFAULT 256
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_BOT_DATASIZE 14
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_BOT_FIELD_OFFSET 16
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_BOT_REG_ADDR 0xe1a8
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_BOT_OFFSET 0x48
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_BOT_FIELD_MASK 0x3fff0000

// args: data (14-bit)
static __inline void acamera_isp_video_test_gen_rect_bot_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1a8 );
    system_isp_write_32( base + 0xe1a8, ( ( ( uint32_t )( data & 0x3fff ) ) << 16 ) | ( curr & 0xc000ffff ) );
}
static __inline uint16_t acamera_isp_video_test_gen_rect_bot_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe1a8 ) & 0x3fff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: rect left
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Rectangle left pixel number 1-n
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_LEFT_DEFAULT 1
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_LEFT_DATASIZE 14
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_LEFT_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_LEFT_REG_ADDR 0xe1ac
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_LEFT_OFFSET 0x4c
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_LEFT_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_video_test_gen_rect_left_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1ac );
    system_isp_write_32( base + 0xe1ac, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_video_test_gen_rect_left_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe1ac ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rect right
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Rectangle right pixel number 1-n
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_RIGHT_DEFAULT 256
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_RIGHT_DATASIZE 14
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_RIGHT_FIELD_OFFSET 16
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_RIGHT_REG_ADDR 0xe1ac
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_RIGHT_OFFSET 0x4c
#define ACAMERA_ISP_VIDEO_TEST_GEN_RECT_RIGHT_FIELD_MASK 0x3fff0000

// args: data (14-bit)
static __inline void acamera_isp_video_test_gen_rect_right_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1ac );
    system_isp_write_32( base + 0xe1ac, ( ( ( uint32_t )( data & 0x3fff ) ) << 16 ) | ( curr & 0xc000ffff ) );
}
static __inline uint16_t acamera_isp_video_test_gen_rect_right_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe1ac ) & 0x3fff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: PRBS seed 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  PRBS seed. The PRBS LFSR is seeded with this value when reset on a frame boundary.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_1_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_1_DATASIZE 31
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_1_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_1_REG_ADDR 0xe1b0
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_1_OFFSET 0x50
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_1_FIELD_MASK 0x7fffffff

// args: data (31-bit)
static __inline void acamera_isp_video_test_gen_prbs_seed_1_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1b0 );
    system_isp_write_32( base + 0xe1b0, ( ( ( uint32_t )( data & 0x7fffffff ) ) << 0 ) | ( curr & 0x80000000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_prbs_seed_1_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe1b0 ) & 0x7fffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: PRBS seed 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  PRBS seed. The PRBS LFSR is seeded with this value when reset on a frame boundary.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_2_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_2_DATASIZE 31
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_2_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_2_REG_ADDR 0xe1b4
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_2_OFFSET 0x54
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_2_FIELD_MASK 0x7fffffff

// args: data (31-bit)
static __inline void acamera_isp_video_test_gen_prbs_seed_2_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1b4 );
    system_isp_write_32( base + 0xe1b4, ( ( ( uint32_t )( data & 0x7fffffff ) ) << 0 ) | ( curr & 0x80000000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_prbs_seed_2_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe1b4 ) & 0x7fffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: PRBS seed 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  PRBS seed. The PRBS LFSR is seeded with this value when reset on a frame boundary.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_3_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_3_DATASIZE 31
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_3_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_3_REG_ADDR 0xe1b8
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_3_OFFSET 0x58
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_3_FIELD_MASK 0x7fffffff

// args: data (31-bit)
static __inline void acamera_isp_video_test_gen_prbs_seed_3_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1b8 );
    system_isp_write_32( base + 0xe1b8, ( ( ( uint32_t )( data & 0x7fffffff ) ) << 0 ) | ( curr & 0x80000000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_prbs_seed_3_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe1b8 ) & 0x7fffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: PRBS seed 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  PRBS seed. The PRBS LFSR is seeded with this value when reset on a frame boundary.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_4_DEFAULT 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_4_DATASIZE 31
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_4_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_4_REG_ADDR 0xe1bc
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_4_OFFSET 0x5c
#define ACAMERA_ISP_VIDEO_TEST_GEN_PRBS_SEED_4_FIELD_MASK 0x7fffffff

// args: data (31-bit)
static __inline void acamera_isp_video_test_gen_prbs_seed_4_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1bc );
    system_isp_write_32( base + 0xe1bc, ( ( ( uint32_t )( data & 0x7fffffff ) ) << 0 ) | ( curr & 0x80000000 ) );
}
static __inline uint32_t acamera_isp_video_test_gen_prbs_seed_4_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe1bc ) & 0x7fffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Horizontal blanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Horizontal blank for autogenerated frame
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_HORIZONTAL_BLANKING_DEFAULT 32
#define ACAMERA_ISP_VIDEO_TEST_GEN_HORIZONTAL_BLANKING_DATASIZE 14
#define ACAMERA_ISP_VIDEO_TEST_GEN_HORIZONTAL_BLANKING_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_HORIZONTAL_BLANKING_REG_ADDR 0xe1c0
#define ACAMERA_ISP_VIDEO_TEST_GEN_HORIZONTAL_BLANKING_OFFSET 0x60
#define ACAMERA_ISP_VIDEO_TEST_GEN_HORIZONTAL_BLANKING_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_video_test_gen_horizontal_blanking_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1c0 );
    system_isp_write_32( base + 0xe1c0, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_video_test_gen_horizontal_blanking_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe1c0 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Vertical blanking
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Vertical blank for autogenerated frame
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_VIDEO_TEST_GEN_VERTICAL_BLANKING_DEFAULT 32
#define ACAMERA_ISP_VIDEO_TEST_GEN_VERTICAL_BLANKING_DATASIZE 14
#define ACAMERA_ISP_VIDEO_TEST_GEN_VERTICAL_BLANKING_FIELD_OFFSET 0
#define ACAMERA_ISP_VIDEO_TEST_GEN_VERTICAL_BLANKING_REG_ADDR 0xe1c4
#define ACAMERA_ISP_VIDEO_TEST_GEN_VERTICAL_BLANKING_OFFSET 0x64
#define ACAMERA_ISP_VIDEO_TEST_GEN_VERTICAL_BLANKING_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_video_test_gen_vertical_blanking_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1c4 );
    system_isp_write_32( base + 0xe1c4, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_video_test_gen_vertical_blanking_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe1c4 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Sensor Offset linear
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset subtraction for each color channel in linear domain
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_00_DATASIZE 24
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_00_REG_ADDR 0xe1f0
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_00_OFFSET 0x0
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_00_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_sensor_offset_linear_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1f0 );
    system_isp_write_32( base + 0xe1f0, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_linear_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe1f0 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_01_DATASIZE 24
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_01_REG_ADDR 0xe1f4
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_01_OFFSET 0x4
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_01_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_sensor_offset_linear_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1f4 );
    system_isp_write_32( base + 0xe1f4, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_linear_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe1f4 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_10_DATASIZE 24
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_10_REG_ADDR 0xe1f8
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_10_OFFSET 0x8
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_10_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_sensor_offset_linear_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1f8 );
    system_isp_write_32( base + 0xe1f8, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_linear_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe1f8 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_11_DATASIZE 24
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_11_REG_ADDR 0xe1fc
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_11_OFFSET 0xc
#define ACAMERA_ISP_SENSOR_OFFSET_LINEAR_BLACK_11_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_sensor_offset_linear_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe1fc );
    system_isp_write_32( base + 0xe1fc, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_linear_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe1fc ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Sensor Offset WDR 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset subtraction for each color channel and exposure
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_00_REG_ADDR 0xe0c0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_00_OFFSET 0x0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_1_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0c0 );
    system_isp_write_32( base + 0xe0c0, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_1_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0c0 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_01_REG_ADDR 0xe0c4
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_01_OFFSET 0x4
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_1_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0c4 );
    system_isp_write_32( base + 0xe0c4, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_1_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0c4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_10_REG_ADDR 0xe0c8
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_10_OFFSET 0x8
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_1_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0c8 );
    system_isp_write_32( base + 0xe0c8, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_1_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0c8 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_11_REG_ADDR 0xe0cc
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_11_OFFSET 0xc
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_1_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_1_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0cc );
    system_isp_write_32( base + 0xe0cc, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_1_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0cc ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Sensor Offset WDR 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset subtraction for each color channel and exposure
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_00_REG_ADDR 0xe0d0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_00_OFFSET 0x0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_2_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0d0 );
    system_isp_write_32( base + 0xe0d0, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_2_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0d0 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_01_REG_ADDR 0xe0d4
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_01_OFFSET 0x4
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_2_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0d4 );
    system_isp_write_32( base + 0xe0d4, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_2_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0d4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_10_REG_ADDR 0xe0d8
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_10_OFFSET 0x8
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_2_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0d8 );
    system_isp_write_32( base + 0xe0d8, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_2_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0d8 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_11_REG_ADDR 0xe0dc
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_11_OFFSET 0xc
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_2_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_2_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0dc );
    system_isp_write_32( base + 0xe0dc, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_2_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0dc ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Sensor Offset WDR 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset subtraction for each color channel and exposure
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_00_REG_ADDR 0xe0e0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_00_OFFSET 0x0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_3_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0e0 );
    system_isp_write_32( base + 0xe0e0, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_3_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0e0 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_01_REG_ADDR 0xe0e4
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_01_OFFSET 0x4
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_3_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0e4 );
    system_isp_write_32( base + 0xe0e4, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_3_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0e4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_10_REG_ADDR 0xe0e8
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_10_OFFSET 0x8
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_3_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0e8 );
    system_isp_write_32( base + 0xe0e8, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_3_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0e8 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_11_REG_ADDR 0xe0ec
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_11_OFFSET 0xc
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_3_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_3_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0ec );
    system_isp_write_32( base + 0xe0ec, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_3_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0ec ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Sensor Offset WDR 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset subtraction for each color channel and exposure
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_00_REG_ADDR 0xe0f0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_00_OFFSET 0x0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_4_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0f0 );
    system_isp_write_32( base + 0xe0f0, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_4_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0f0 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_01_REG_ADDR 0xe0f4
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_01_OFFSET 0x4
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_4_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0f4 );
    system_isp_write_32( base + 0xe0f4, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_4_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0f4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_10_REG_ADDR 0xe0f8
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_10_OFFSET 0x8
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_4_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0f8 );
    system_isp_write_32( base + 0xe0f8, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_4_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0f8 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_11_REG_ADDR 0xe0fc
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_11_OFFSET 0xc
#define ACAMERA_ISP_SENSOR_OFFSET_WDR_4_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_sensor_offset_wdr_4_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0fc );
    system_isp_write_32( base + 0xe0fc, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_sensor_offset_wdr_4_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0fc ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: WDR Gain
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gain adjustment for the WDR stitching
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Gain WDR1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gain applied to ch1 data in 7.8 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR1_DEFAULT 256
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR1_DATASIZE 15
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR1_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR1_REG_ADDR 0xe0a0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR1_OFFSET 0x0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR1_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_frame_stitch_gain_gain_wdr1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0a0 );
    system_isp_write_32( base + 0xe0a0, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_gain_gain_wdr1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe0a0 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain WDR2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gain applied to ch2 data in 7.8 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR2_DEFAULT 256
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR2_DATASIZE 15
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR2_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR2_REG_ADDR 0xe0a0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR2_OFFSET 0x0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR2_FIELD_MASK 0x7fff0000

// args: data (15-bit)
static __inline void acamera_isp_frame_stitch_gain_gain_wdr2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0a0 );
    system_isp_write_32( base + 0xe0a0, ( ( ( uint32_t )( data & 0x7fff ) ) << 16 ) | ( curr & 0x8000ffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_gain_gain_wdr2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe0a0 ) & 0x7fff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain WDR3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gain applied to ch3 data in 7.8 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR3_DEFAULT 256
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR3_DATASIZE 15
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR3_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR3_REG_ADDR 0xe0a4
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR3_OFFSET 0x4
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR3_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_frame_stitch_gain_gain_wdr3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0a4 );
    system_isp_write_32( base + 0xe0a4, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_gain_gain_wdr3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe0a4 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain WDR4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gain applied to ch4 data in 7.8 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR4_DEFAULT 256
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR4_DATASIZE 15
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR4_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR4_REG_ADDR 0xe0a4
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR4_OFFSET 0x4
#define ACAMERA_ISP_FRAME_STITCH_GAIN_GAIN_WDR4_FIELD_MASK 0x7fff0000

// args: data (15-bit)
static __inline void acamera_isp_frame_stitch_gain_gain_wdr4_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0a4 );
    system_isp_write_32( base + 0xe0a4, ( ( ( uint32_t )( data & 0x7fff ) ) << 16 ) | ( curr & 0x8000ffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_gain_gain_wdr4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe0a4 ) & 0x7fff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Offset WDR1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sensor offset applied to ch1 data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR1_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR1_DATASIZE 20
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR1_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR1_REG_ADDR 0xe0a8
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR1_OFFSET 0x8
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR1_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_frame_stitch_gain_offset_wdr1_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0a8 );
    system_isp_write_32( base + 0xe0a8, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_frame_stitch_gain_offset_wdr1_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0a8 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Offset WDR2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sensor offset applied to ch2 data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR2_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR2_DATASIZE 20
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR2_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR2_REG_ADDR 0xe0ac
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR2_OFFSET 0xc
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR2_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_frame_stitch_gain_offset_wdr2_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0ac );
    system_isp_write_32( base + 0xe0ac, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_frame_stitch_gain_offset_wdr2_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0ac ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Offset WDR3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sensor offset applied to ch3 data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR3_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR3_DATASIZE 20
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR3_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR3_REG_ADDR 0xe0b0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR3_OFFSET 0x10
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR3_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_frame_stitch_gain_offset_wdr3_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0b0 );
    system_isp_write_32( base + 0xe0b0, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_frame_stitch_gain_offset_wdr3_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0b0 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Offset WDR4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sensor offset applied to ch4 data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR4_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR4_DATASIZE 20
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR4_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR4_REG_ADDR 0xe0b4
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR4_OFFSET 0x14
#define ACAMERA_ISP_FRAME_STITCH_GAIN_OFFSET_WDR4_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_frame_stitch_gain_offset_wdr4_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe0b4 );
    system_isp_write_32( base + 0xe0b4, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_frame_stitch_gain_offset_wdr4_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe0b4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Noise Profile RAW frontend
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile controls for RAW frontend
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Exp Thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for determining long/short exposure data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_EXP_THRESH_DEFAULT 65535
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_EXP_THRESH_DATASIZE 16
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_EXP_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_EXP_THRESH_REG_ADDR 0xe200
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_EXP_THRESH_OFFSET 0x0
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_EXP_THRESH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_noise_profile_raw_frontend_exp_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe200 );
    system_isp_write_32( base + 0xe200, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_noise_profile_raw_frontend_exp_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe200 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Short Ratio
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier applied to short exposure data for noise profile calculation
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_SHORT_RATIO_DEFAULT 32
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_SHORT_RATIO_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_SHORT_RATIO_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_SHORT_RATIO_REG_ADDR 0xe204
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_SHORT_RATIO_OFFSET 0x4
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_SHORT_RATIO_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_noise_profile_raw_frontend_short_ratio_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe204 );
    system_isp_write_32( base + 0xe204, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_noise_profile_raw_frontend_short_ratio_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe204 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Long Ratio
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier applied to long exposure data for noise profile calculation
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LONG_RATIO_DEFAULT 4
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LONG_RATIO_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LONG_RATIO_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LONG_RATIO_REG_ADDR 0xe208
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LONG_RATIO_OFFSET 0x8
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LONG_RATIO_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_noise_profile_raw_frontend_long_ratio_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe208 );
    system_isp_write_32( base + 0xe208, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_noise_profile_raw_frontend_long_ratio_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe208 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: NP off
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile black level offset
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_DEFAULT 0
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_DATASIZE 7
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_REG_ADDR 0xe20c
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_OFFSET 0xc
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_FIELD_MASK 0x7f

// args: data (7-bit)
static __inline void acamera_isp_noise_profile_raw_frontend_np_off_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe20c );
    system_isp_write_32( base + 0xe20c, ( ( ( uint32_t )( data & 0x7f ) ) << 0 ) | ( curr & 0xffffff80 ) );
}
static __inline uint8_t acamera_isp_noise_profile_raw_frontend_np_off_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe20c ) & 0x7f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: NP off reflect
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//          Defines how values below black level are obtained.
//          0: Repeat the first table entry.
//          1: Reflect the noise profile curve below black level.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_REFLECT_DEFAULT 0
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_REFLECT_DATASIZE 1
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_REFLECT_FIELD_OFFSET 7
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_REFLECT_REG_ADDR 0xe20c
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_REFLECT_OFFSET 0xc
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_NP_OFF_REFLECT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_noise_profile_raw_frontend_np_off_reflect_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe20c );
    system_isp_write_32( base + 0xe20c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_noise_profile_raw_frontend_np_off_reflect_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe20c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Group: RAW Frontend
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// RAW frontend processing
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: ge enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Green equalization enable: 0=off, 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_GE_ENABLE_DEFAULT 0
#define ACAMERA_ISP_RAW_FRONTEND_GE_ENABLE_DATASIZE 1
#define ACAMERA_ISP_RAW_FRONTEND_GE_ENABLE_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_GE_ENABLE_REG_ADDR 0xe210
#define ACAMERA_ISP_RAW_FRONTEND_GE_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_RAW_FRONTEND_GE_ENABLE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_raw_frontend_ge_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe210 );
    system_isp_write_32( base + 0xe210, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_raw_frontend_ge_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe210 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: dp enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Dynamic Defect Pixel enable: 0=off, 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_DP_ENABLE_DEFAULT 0
#define ACAMERA_ISP_RAW_FRONTEND_DP_ENABLE_DATASIZE 1
#define ACAMERA_ISP_RAW_FRONTEND_DP_ENABLE_FIELD_OFFSET 2
#define ACAMERA_ISP_RAW_FRONTEND_DP_ENABLE_REG_ADDR 0xe210
#define ACAMERA_ISP_RAW_FRONTEND_DP_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_RAW_FRONTEND_DP_ENABLE_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_isp_raw_frontend_dp_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe210 );
    system_isp_write_32( base + 0xe210, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_isp_raw_frontend_dp_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe210 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: show dynamic defect pixel
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Show Defect Pixel: 0=off, 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_SHOW_DYNAMIC_DEFECT_PIXEL_DEFAULT 0
#define ACAMERA_ISP_RAW_FRONTEND_SHOW_DYNAMIC_DEFECT_PIXEL_DATASIZE 1
#define ACAMERA_ISP_RAW_FRONTEND_SHOW_DYNAMIC_DEFECT_PIXEL_FIELD_OFFSET 3
#define ACAMERA_ISP_RAW_FRONTEND_SHOW_DYNAMIC_DEFECT_PIXEL_REG_ADDR 0xe210
#define ACAMERA_ISP_RAW_FRONTEND_SHOW_DYNAMIC_DEFECT_PIXEL_OFFSET 0x0
#define ACAMERA_ISP_RAW_FRONTEND_SHOW_DYNAMIC_DEFECT_PIXEL_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_raw_frontend_show_dynamic_defect_pixel_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe210 );
    system_isp_write_32( base + 0xe210, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_raw_frontend_show_dynamic_defect_pixel_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe210 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: dark disable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Disable detection of dark pixels
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_DARK_DISABLE_DEFAULT 0
#define ACAMERA_ISP_RAW_FRONTEND_DARK_DISABLE_DATASIZE 1
#define ACAMERA_ISP_RAW_FRONTEND_DARK_DISABLE_FIELD_OFFSET 6
#define ACAMERA_ISP_RAW_FRONTEND_DARK_DISABLE_REG_ADDR 0xe210
#define ACAMERA_ISP_RAW_FRONTEND_DARK_DISABLE_OFFSET 0x0
#define ACAMERA_ISP_RAW_FRONTEND_DARK_DISABLE_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_raw_frontend_dark_disable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe210 );
    system_isp_write_32( base + 0xe210, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_raw_frontend_dark_disable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe210 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: bright disable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Disable detection of bright pixels
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_BRIGHT_DISABLE_DEFAULT 0
#define ACAMERA_ISP_RAW_FRONTEND_BRIGHT_DISABLE_DATASIZE 1
#define ACAMERA_ISP_RAW_FRONTEND_BRIGHT_DISABLE_FIELD_OFFSET 7
#define ACAMERA_ISP_RAW_FRONTEND_BRIGHT_DISABLE_REG_ADDR 0xe210
#define ACAMERA_ISP_RAW_FRONTEND_BRIGHT_DISABLE_OFFSET 0x0
#define ACAMERA_ISP_RAW_FRONTEND_BRIGHT_DISABLE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_raw_frontend_bright_disable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe210 );
    system_isp_write_32( base + 0xe210, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_raw_frontend_bright_disable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe210 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: RFE disable L2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Disable L2 function
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_RFE_DISABLE_L2_DEFAULT 0
#define ACAMERA_ISP_RAW_FRONTEND_RFE_DISABLE_L2_DATASIZE 1
#define ACAMERA_ISP_RAW_FRONTEND_RFE_DISABLE_L2_FIELD_OFFSET 5
#define ACAMERA_ISP_RAW_FRONTEND_RFE_DISABLE_L2_REG_ADDR 0xe210
#define ACAMERA_ISP_RAW_FRONTEND_RFE_DISABLE_L2_OFFSET 0x0
#define ACAMERA_ISP_RAW_FRONTEND_RFE_DISABLE_L2_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_isp_raw_frontend_rfe_disable_l2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe210 );
    system_isp_write_32( base + 0xe210, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_isp_raw_frontend_rfe_disable_l2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe210 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: ge strength
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Controls strength of Green equalization.  Set during calibration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_GE_STRENGTH_DEFAULT 0
#define ACAMERA_ISP_RAW_FRONTEND_GE_STRENGTH_DATASIZE 8
#define ACAMERA_ISP_RAW_FRONTEND_GE_STRENGTH_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_GE_STRENGTH_REG_ADDR 0xe214
#define ACAMERA_ISP_RAW_FRONTEND_GE_STRENGTH_OFFSET 0x4
#define ACAMERA_ISP_RAW_FRONTEND_GE_STRENGTH_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_raw_frontend_ge_strength_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe214 );
    system_isp_write_32( base + 0xe214, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_raw_frontend_ge_strength_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe214 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: debug sel
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Debug selection port
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_DEBUG_SEL_DEFAULT 0
#define ACAMERA_ISP_RAW_FRONTEND_DEBUG_SEL_DATASIZE 16
#define ACAMERA_ISP_RAW_FRONTEND_DEBUG_SEL_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_DEBUG_SEL_REG_ADDR 0xe218
#define ACAMERA_ISP_RAW_FRONTEND_DEBUG_SEL_OFFSET 0x8
#define ACAMERA_ISP_RAW_FRONTEND_DEBUG_SEL_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_raw_frontend_debug_sel_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe218 );
    system_isp_write_32( base + 0xe218, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_raw_frontend_debug_sel_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe218 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: dp threshold
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Defect pixel threshold.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_DP_THRESHOLD_DEFAULT 64
#define ACAMERA_ISP_RAW_FRONTEND_DP_THRESHOLD_DATASIZE 12
#define ACAMERA_ISP_RAW_FRONTEND_DP_THRESHOLD_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_DP_THRESHOLD_REG_ADDR 0xe21c
#define ACAMERA_ISP_RAW_FRONTEND_DP_THRESHOLD_OFFSET 0xc
#define ACAMERA_ISP_RAW_FRONTEND_DP_THRESHOLD_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_raw_frontend_dp_threshold_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe21c );
    system_isp_write_32( base + 0xe21c, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_raw_frontend_dp_threshold_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe21c ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: ge threshold
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Green equalization threshold
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_GE_THRESHOLD_DEFAULT 1024
#define ACAMERA_ISP_RAW_FRONTEND_GE_THRESHOLD_DATASIZE 16
#define ACAMERA_ISP_RAW_FRONTEND_GE_THRESHOLD_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_GE_THRESHOLD_REG_ADDR 0xe220
#define ACAMERA_ISP_RAW_FRONTEND_GE_THRESHOLD_OFFSET 0x10
#define ACAMERA_ISP_RAW_FRONTEND_GE_THRESHOLD_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_raw_frontend_ge_threshold_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe220 );
    system_isp_write_32( base + 0xe220, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_raw_frontend_ge_threshold_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe220 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: dp slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Slope for HP Mask function
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_DP_SLOPE_DEFAULT 512
#define ACAMERA_ISP_RAW_FRONTEND_DP_SLOPE_DATASIZE 12
#define ACAMERA_ISP_RAW_FRONTEND_DP_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_DP_SLOPE_REG_ADDR 0xe224
#define ACAMERA_ISP_RAW_FRONTEND_DP_SLOPE_OFFSET 0x14
#define ACAMERA_ISP_RAW_FRONTEND_DP_SLOPE_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_raw_frontend_dp_slope_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe224 );
    system_isp_write_32( base + 0xe224, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_raw_frontend_dp_slope_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe224 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: ge slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Slope for GE Mask function
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_GE_SLOPE_DEFAULT 170
#define ACAMERA_ISP_RAW_FRONTEND_GE_SLOPE_DATASIZE 12
#define ACAMERA_ISP_RAW_FRONTEND_GE_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_GE_SLOPE_REG_ADDR 0xe228
#define ACAMERA_ISP_RAW_FRONTEND_GE_SLOPE_OFFSET 0x18
#define ACAMERA_ISP_RAW_FRONTEND_GE_SLOPE_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_raw_frontend_ge_slope_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe228 );
    system_isp_write_32( base + 0xe228, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_raw_frontend_ge_slope_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe228 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: ge sens
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Controls the sensitivity of green equalization to edges.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_GE_SENS_DEFAULT 128
#define ACAMERA_ISP_RAW_FRONTEND_GE_SENS_DATASIZE 8
#define ACAMERA_ISP_RAW_FRONTEND_GE_SENS_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_GE_SENS_REG_ADDR 0xe22c
#define ACAMERA_ISP_RAW_FRONTEND_GE_SENS_OFFSET 0x1c
#define ACAMERA_ISP_RAW_FRONTEND_GE_SENS_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_raw_frontend_ge_sens_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe22c );
    system_isp_write_32( base + 0xe22c, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_raw_frontend_ge_sens_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe22c ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: dpdev threshold
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Controls the aggressiveness of the dynamic defect pixel correction near edges.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_HPDEV_THRESHOLD_DEFAULT 9824
#define ACAMERA_ISP_RAW_FRONTEND_HPDEV_THRESHOLD_DATASIZE 16
#define ACAMERA_ISP_RAW_FRONTEND_HPDEV_THRESHOLD_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_HPDEV_THRESHOLD_REG_ADDR 0xe230
#define ACAMERA_ISP_RAW_FRONTEND_HPDEV_THRESHOLD_OFFSET 0x20
#define ACAMERA_ISP_RAW_FRONTEND_HPDEV_THRESHOLD_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_raw_frontend_hpdev_threshold_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe230 );
    system_isp_write_32( base + 0xe230, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_raw_frontend_hpdev_threshold_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe230 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: line thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Controls the directional nature of the dynamic defect pixel correction near edges..
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_LINE_THRESH_DEFAULT 336
#define ACAMERA_ISP_RAW_FRONTEND_LINE_THRESH_DATASIZE 16
#define ACAMERA_ISP_RAW_FRONTEND_LINE_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_LINE_THRESH_REG_ADDR 0xe234
#define ACAMERA_ISP_RAW_FRONTEND_LINE_THRESH_OFFSET 0x24
#define ACAMERA_ISP_RAW_FRONTEND_LINE_THRESH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_raw_frontend_line_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe234 );
    system_isp_write_32( base + 0xe234, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_raw_frontend_line_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe234 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: dp blend
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Controls blending between non-directional and directional replacement values in dynamic defect pixel correction.
//        0x00 Replace detected defects with non-directional replacement value
//        0xFF Replace detected defects with directional replacement value
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_HP_BLEND_DEFAULT 0
#define ACAMERA_ISP_RAW_FRONTEND_HP_BLEND_DATASIZE 8
#define ACAMERA_ISP_RAW_FRONTEND_HP_BLEND_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_HP_BLEND_REG_ADDR 0xe238
#define ACAMERA_ISP_RAW_FRONTEND_HP_BLEND_OFFSET 0x28
#define ACAMERA_ISP_RAW_FRONTEND_HP_BLEND_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_raw_frontend_hp_blend_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe238 );
    system_isp_write_32( base + 0xe238, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_raw_frontend_hp_blend_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe238 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Sigma In
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Manual override of noise estimation
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_SIGMA_IN_DEFAULT 0
#define ACAMERA_ISP_RAW_FRONTEND_SIGMA_IN_DATASIZE 16
#define ACAMERA_ISP_RAW_FRONTEND_SIGMA_IN_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_SIGMA_IN_REG_ADDR 0xe23c
#define ACAMERA_ISP_RAW_FRONTEND_SIGMA_IN_OFFSET 0x2c
#define ACAMERA_ISP_RAW_FRONTEND_SIGMA_IN_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_raw_frontend_sigma_in_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe23c );
    system_isp_write_32( base + 0xe23c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_raw_frontend_sigma_in_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe23c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Thresh Short
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise threshold for short exposure data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_THRESH_SHORT_DEFAULT 0
#define ACAMERA_ISP_RAW_FRONTEND_THRESH_SHORT_DATASIZE 8
#define ACAMERA_ISP_RAW_FRONTEND_THRESH_SHORT_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_THRESH_SHORT_REG_ADDR 0xe240
#define ACAMERA_ISP_RAW_FRONTEND_THRESH_SHORT_OFFSET 0x30
#define ACAMERA_ISP_RAW_FRONTEND_THRESH_SHORT_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_raw_frontend_thresh_short_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe240 );
    system_isp_write_32( base + 0xe240, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_raw_frontend_thresh_short_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe240 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Thresh Long
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise threshold for long exposure data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RAW_FRONTEND_THRESH_LONG_DEFAULT 48
#define ACAMERA_ISP_RAW_FRONTEND_THRESH_LONG_DATASIZE 8
#define ACAMERA_ISP_RAW_FRONTEND_THRESH_LONG_FIELD_OFFSET 0
#define ACAMERA_ISP_RAW_FRONTEND_THRESH_LONG_REG_ADDR 0xe244
#define ACAMERA_ISP_RAW_FRONTEND_THRESH_LONG_OFFSET 0x34
#define ACAMERA_ISP_RAW_FRONTEND_THRESH_LONG_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_raw_frontend_thresh_long_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe244 );
    system_isp_write_32( base + 0xe244, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_raw_frontend_thresh_long_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe244 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Defect Pixel
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Detection and processing of static defect-pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Pointer Reset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Reset static defect-pixel table pointer each frame - set this when defect-pixel table has been written from mcu
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEFECT_PIXEL_POINTER_RESET_DEFAULT 0
#define ACAMERA_ISP_DEFECT_PIXEL_POINTER_RESET_DATASIZE 1
#define ACAMERA_ISP_DEFECT_PIXEL_POINTER_RESET_FIELD_OFFSET 0
#define ACAMERA_ISP_DEFECT_PIXEL_POINTER_RESET_REG_ADDR 0xe284
#define ACAMERA_ISP_DEFECT_PIXEL_POINTER_RESET_OFFSET 0x4
#define ACAMERA_ISP_DEFECT_PIXEL_POINTER_RESET_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_defect_pixel_pointer_reset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe284 );
    system_isp_write_32( base + 0xe284, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_defect_pixel_pointer_reset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe284 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Show Reference
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// For debug purposes.  Show reference values which are compared with actual values to detect bad pixels
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_REFERENCE_DEFAULT 0
#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_REFERENCE_DATASIZE 1
#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_REFERENCE_FIELD_OFFSET 1
#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_REFERENCE_REG_ADDR 0xe284
#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_REFERENCE_OFFSET 0x4
#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_REFERENCE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_defect_pixel_show_reference_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe284 );
    system_isp_write_32( base + 0xe284, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_defect_pixel_show_reference_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe284 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Correction enable: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEFECT_PIXEL_ENABLE_DEFAULT 0
#define ACAMERA_ISP_DEFECT_PIXEL_ENABLE_DATASIZE 1
#define ACAMERA_ISP_DEFECT_PIXEL_ENABLE_FIELD_OFFSET 2
#define ACAMERA_ISP_DEFECT_PIXEL_ENABLE_REG_ADDR 0xe284
#define ACAMERA_ISP_DEFECT_PIXEL_ENABLE_OFFSET 0x4
#define ACAMERA_ISP_DEFECT_PIXEL_ENABLE_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_isp_defect_pixel_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe284 );
    system_isp_write_32( base + 0xe284, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_isp_defect_pixel_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe284 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Show Static Defect Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Show which pixels have been detected as bad
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_STATIC_DEFECT_PIXELS_DEFAULT 0
#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_STATIC_DEFECT_PIXELS_DATASIZE 1
#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_STATIC_DEFECT_PIXELS_FIELD_OFFSET 3
#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_STATIC_DEFECT_PIXELS_REG_ADDR 0xe284
#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_STATIC_DEFECT_PIXELS_OFFSET 0x4
#define ACAMERA_ISP_DEFECT_PIXEL_SHOW_STATIC_DEFECT_PIXELS_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_defect_pixel_show_static_defect_pixels_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe284 );
    system_isp_write_32( base + 0xe284, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_defect_pixel_show_static_defect_pixels_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe284 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Detection Trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Starts detection on 0-1 transition
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEFECT_PIXEL_DETECTION_TRIGGER_DEFAULT 0
#define ACAMERA_ISP_DEFECT_PIXEL_DETECTION_TRIGGER_DATASIZE 1
#define ACAMERA_ISP_DEFECT_PIXEL_DETECTION_TRIGGER_FIELD_OFFSET 4
#define ACAMERA_ISP_DEFECT_PIXEL_DETECTION_TRIGGER_REG_ADDR 0xe284
#define ACAMERA_ISP_DEFECT_PIXEL_DETECTION_TRIGGER_OFFSET 0x4
#define ACAMERA_ISP_DEFECT_PIXEL_DETECTION_TRIGGER_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_isp_defect_pixel_detection_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe284 );
    system_isp_write_32( base + 0xe284, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_isp_defect_pixel_detection_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe284 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Table overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEFECT_PIXEL_OVERFLOW_DEFAULT 0
#define ACAMERA_ISP_DEFECT_PIXEL_OVERFLOW_DATASIZE 1
#define ACAMERA_ISP_DEFECT_PIXEL_OVERFLOW_FIELD_OFFSET 0
#define ACAMERA_ISP_DEFECT_PIXEL_OVERFLOW_REG_ADDR 0xe288
#define ACAMERA_ISP_DEFECT_PIXEL_OVERFLOW_OFFSET 0x8
#define ACAMERA_ISP_DEFECT_PIXEL_OVERFLOW_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_isp_defect_pixel_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe288 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Defect Pixel Count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of defect-pixels detected
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_DEFAULT 0
#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_DATASIZE 10
#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_FIELD_OFFSET 0
#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_REG_ADDR 0xe28c
#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_OFFSET 0xc
#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_FIELD_MASK 0x3ff

// args: data (10-bit)
static __inline uint16_t acamera_isp_defect_pixel_defect_pixel_count_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe28c ) & 0x3ff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Table Start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Address of first defect-pixel in defect-pixel store
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEFECT_PIXEL_TABLE_START_DEFAULT 0
#define ACAMERA_ISP_DEFECT_PIXEL_TABLE_START_DATASIZE 10
#define ACAMERA_ISP_DEFECT_PIXEL_TABLE_START_FIELD_OFFSET 0
#define ACAMERA_ISP_DEFECT_PIXEL_TABLE_START_REG_ADDR 0xe290
#define ACAMERA_ISP_DEFECT_PIXEL_TABLE_START_OFFSET 0x10
#define ACAMERA_ISP_DEFECT_PIXEL_TABLE_START_FIELD_MASK 0x3ff

// args: data (10-bit)
static __inline uint16_t acamera_isp_defect_pixel_table_start_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe290 ) & 0x3ff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Defect Pixel Count In
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of defect-pixels in the written table
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_IN_DEFAULT 0
#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_IN_DATASIZE 10
#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_IN_FIELD_OFFSET 0
#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_IN_REG_ADDR 0xe294
#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_IN_OFFSET 0x14
#define ACAMERA_ISP_DEFECT_PIXEL_DEFECT_PIXEL_COUNT_IN_FIELD_MASK 0x3ff

// args: data (10-bit)
static __inline void acamera_isp_defect_pixel_defect_pixel_count_in_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe294 );
    system_isp_write_32( base + 0xe294, ( ( ( uint32_t )( data & 0x3ff ) ) << 0 ) | ( curr & 0xfffffc00 ) );
}
static __inline uint16_t acamera_isp_defect_pixel_defect_pixel_count_in_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe294 ) & 0x3ff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Dynamic Defect Count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of dynamic defect pixels in the last frame
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEFECT_PIXEL_DYNAMIC_DEFECT_COUNT_DEFAULT 0
#define ACAMERA_ISP_DEFECT_PIXEL_DYNAMIC_DEFECT_COUNT_DATASIZE 32
#define ACAMERA_ISP_DEFECT_PIXEL_DYNAMIC_DEFECT_COUNT_FIELD_OFFSET 0
#define ACAMERA_ISP_DEFECT_PIXEL_DYNAMIC_DEFECT_COUNT_REG_ADDR 0xe298
#define ACAMERA_ISP_DEFECT_PIXEL_DYNAMIC_DEFECT_COUNT_OFFSET 0x18
#define ACAMERA_ISP_DEFECT_PIXEL_DYNAMIC_DEFECT_COUNT_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_defect_pixel_dynamic_defect_count_read( uint32_t base )
{
    return system_isp_read_32( base + 0xe298 );
}
// ------------------------------------------------------------------------------ //
// Register: Static Defect Count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of static defect pixels in the last frame
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEFECT_PIXEL_STATIC_DEFECT_COUNT_DEFAULT 0
#define ACAMERA_ISP_DEFECT_PIXEL_STATIC_DEFECT_COUNT_DATASIZE 32
#define ACAMERA_ISP_DEFECT_PIXEL_STATIC_DEFECT_COUNT_FIELD_OFFSET 0
#define ACAMERA_ISP_DEFECT_PIXEL_STATIC_DEFECT_COUNT_REG_ADDR 0xe29c
#define ACAMERA_ISP_DEFECT_PIXEL_STATIC_DEFECT_COUNT_OFFSET 0x1c
#define ACAMERA_ISP_DEFECT_PIXEL_STATIC_DEFECT_COUNT_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_defect_pixel_static_defect_count_read( uint32_t base )
{
    return system_isp_read_32( base + 0xe29c );
}
// ------------------------------------------------------------------------------ //
// Group: WDR stitching
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//                4-exposure wide-dynamic-range blending
//
//                NOTE:
//                    If the WDR is configured to stitch 2 exposures, then the configuration must be done through the LM_ pair
//                    the short exposures black level must be programmed through the med_black_level register so that the LM pair
//                    can be used.
//
//
//
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: mode in
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  0 : 4-exposure
//                          1 : 2-exposure
//                          2 : 3-exposure
//                          3 : 4-exposure
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MODE_IN_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_MODE_IN_DATASIZE 2
#define ACAMERA_ISP_FRAME_STITCH_MODE_IN_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_MODE_IN_REG_ADDR 0xe2a0
#define ACAMERA_ISP_FRAME_STITCH_MODE_IN_OFFSET 0x0
#define ACAMERA_ISP_FRAME_STITCH_MODE_IN_FIELD_MASK 0x3

// args: data (2-bit)
static __inline void acamera_isp_frame_stitch_mode_in_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2a0 );
    system_isp_write_32( base + 0xe2a0, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_frame_stitch_mode_in_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2a0 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: output select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            This register is only for debug purpose. For normal operation it must be kept in its default value (0)
//            0 : normal stitched output
//            1 : long data routed out
//            2 : medium data routed out
//            4 : short data routed out
//            8 : very short data routed out
//            16: L/M  stitched output taken out
//            32: M/S  stitched output taken out
//            64: S/VS stitched output taken out
//            others: reserved
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_OUTPUT_SELECT_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_OUTPUT_SELECT_DATASIZE 8
#define ACAMERA_ISP_FRAME_STITCH_OUTPUT_SELECT_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_OUTPUT_SELECT_REG_ADDR 0xe2a4
#define ACAMERA_ISP_FRAME_STITCH_OUTPUT_SELECT_OFFSET 0x4
#define ACAMERA_ISP_FRAME_STITCH_OUTPUT_SELECT_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_frame_stitch_output_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2a4 );
    system_isp_write_32( base + 0xe2a4, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_frame_stitch_output_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2a4 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: LM Exposure Ratio
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets ratio between long and medium exposures - this must match the actual exposure ratio on the sensor
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_EXPOSURE_RATIO_DEFAULT 256
#define ACAMERA_ISP_FRAME_STITCH_LM_EXPOSURE_RATIO_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_LM_EXPOSURE_RATIO_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_EXPOSURE_RATIO_REG_ADDR 0xe2a8
#define ACAMERA_ISP_FRAME_STITCH_LM_EXPOSURE_RATIO_OFFSET 0x8
#define ACAMERA_ISP_FRAME_STITCH_LM_EXPOSURE_RATIO_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_lm_exposure_ratio_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2a8 );
    system_isp_write_32( base + 0xe2a8, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_lm_exposure_ratio_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2a8 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MS Exposure Ratio
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets ratio between medium and short exposures - this must match the actual exposure ratio on the sensor
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MS_EXPOSURE_RATIO_DEFAULT 256
#define ACAMERA_ISP_FRAME_STITCH_MS_EXPOSURE_RATIO_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_MS_EXPOSURE_RATIO_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_MS_EXPOSURE_RATIO_REG_ADDR 0xe2a8
#define ACAMERA_ISP_FRAME_STITCH_MS_EXPOSURE_RATIO_OFFSET 0x8
#define ACAMERA_ISP_FRAME_STITCH_MS_EXPOSURE_RATIO_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_ms_exposure_ratio_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2a8 );
    system_isp_write_32( base + 0xe2a8, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_ms_exposure_ratio_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2a8 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: SVS Exposure Ratio
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets ratio between short and very short exposures - this must match the actual exposure ratio on the sensor
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_SVS_EXPOSURE_RATIO_DEFAULT 256
#define ACAMERA_ISP_FRAME_STITCH_SVS_EXPOSURE_RATIO_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_SVS_EXPOSURE_RATIO_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_SVS_EXPOSURE_RATIO_REG_ADDR 0xe2ac
#define ACAMERA_ISP_FRAME_STITCH_SVS_EXPOSURE_RATIO_OFFSET 0xc
#define ACAMERA_ISP_FRAME_STITCH_SVS_EXPOSURE_RATIO_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_svs_exposure_ratio_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2ac );
    system_isp_write_32( base + 0xe2ac, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_svs_exposure_ratio_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2ac ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: LM Thresh high
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            These two thresholds are for L/M pairs. Both are with respect to the longer stitches.
//            Data above this threshold will be taken from short exposure only
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_HIGH_DEFAULT 3840
#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_HIGH_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_HIGH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_HIGH_REG_ADDR 0xe2b0
#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_HIGH_OFFSET 0x10
#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_HIGH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_lm_thresh_high_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2b0 );
    system_isp_write_32( base + 0xe2b0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_lm_thresh_high_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2b0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: LM Thresh low
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Data below this threshold will be taken from long exposure only
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_LOW_DEFAULT 3072
#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_LOW_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_LOW_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_LOW_REG_ADDR 0xe2b0
#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_LOW_OFFSET 0x10
#define ACAMERA_ISP_FRAME_STITCH_LM_THRESH_LOW_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_lm_thresh_low_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2b0 );
    system_isp_write_32( base + 0xe2b0, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_lm_thresh_low_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2b0 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: MS Thresh high
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            These two thresholds are for M/S pairs. Both are with respect to the longer stitches.
//            Data above this threshold will be taken from short exposure only
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_HIGH_DEFAULT 3840
#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_HIGH_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_HIGH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_HIGH_REG_ADDR 0xe2b4
#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_HIGH_OFFSET 0x14
#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_HIGH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_ms_thresh_high_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2b4 );
    system_isp_write_32( base + 0xe2b4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_ms_thresh_high_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2b4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MS Thresh low
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Data below this threshold will be taken from long exposure only
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_LOW_DEFAULT 3072
#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_LOW_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_LOW_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_LOW_REG_ADDR 0xe2b4
#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_LOW_OFFSET 0x14
#define ACAMERA_ISP_FRAME_STITCH_MS_THRESH_LOW_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_ms_thresh_low_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2b4 );
    system_isp_write_32( base + 0xe2b4, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_ms_thresh_low_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2b4 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: SVS Thresh high
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            These two thresholds are for S/VS pairs. Both are with respect to the longer stitches.
//            Data above this threshold will be taken from short exposure only
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_HIGH_DEFAULT 3840
#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_HIGH_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_HIGH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_HIGH_REG_ADDR 0xe2b8
#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_HIGH_OFFSET 0x18
#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_HIGH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_svs_thresh_high_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2b8 );
    system_isp_write_32( base + 0xe2b8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_svs_thresh_high_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2b8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: SVS Thresh low
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Data below this threshold will be taken from long exposure only
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_LOW_DEFAULT 3072
#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_LOW_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_LOW_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_LOW_REG_ADDR 0xe2b8
#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_LOW_OFFSET 0x18
#define ACAMERA_ISP_FRAME_STITCH_SVS_THRESH_LOW_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_svs_thresh_low_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2b8 );
    system_isp_write_32( base + 0xe2b8, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_svs_thresh_low_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2b8 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Black level long
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Black level for long exposure input
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_LONG_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_LONG_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_LONG_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_LONG_REG_ADDR 0xe2c0
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_LONG_OFFSET 0x20
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_LONG_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_black_level_long_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2c0 );
    system_isp_write_32( base + 0xe2c0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_black_level_long_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2c0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black level Medium
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Black level for medium exposure input
//            *** NOTE ***:
//            If the wdr unit is configured to use as 2-exposure, THIS REGISTER POSITION must contain the black level of
//            short exposure as the LM pair is used for all other configurations
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_MEDIUM_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_MEDIUM_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_MEDIUM_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_MEDIUM_REG_ADDR 0xe2c0
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_MEDIUM_OFFSET 0x20
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_MEDIUM_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_black_level_medium_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2c0 );
    system_isp_write_32( base + 0xe2c0, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_black_level_medium_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2c0 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Black level Short
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Black level for short exposure input
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_SHORT_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_SHORT_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_SHORT_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_SHORT_REG_ADDR 0xe2c4
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_SHORT_OFFSET 0x24
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_SHORT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_black_level_short_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2c4 );
    system_isp_write_32( base + 0xe2c4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_black_level_short_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2c4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black level very Short
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Black level for very short exposure input
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_VERY_SHORT_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_VERY_SHORT_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_VERY_SHORT_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_VERY_SHORT_REG_ADDR 0xe2c4
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_VERY_SHORT_OFFSET 0x24
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_VERY_SHORT_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_black_level_very_short_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2c4 );
    system_isp_write_32( base + 0xe2c4, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_black_level_very_short_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2c4 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Black level Out
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Black level for module output
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_OUT_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_OUT_DATASIZE 24
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_OUT_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_OUT_REG_ADDR 0xe2c8
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_OUT_OFFSET 0x28
#define ACAMERA_ISP_FRAME_STITCH_BLACK_LEVEL_OUT_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_frame_stitch_black_level_out_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2c8 );
    system_isp_write_32( base + 0xe2c8, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_frame_stitch_black_level_out_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe2c8 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: LM NP mult
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            The noise profile weights are multiplied by this value to give expected noise amplitude.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_NP_MULT_DEFAULT 384
#define ACAMERA_ISP_FRAME_STITCH_LM_NP_MULT_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_LM_NP_MULT_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_NP_MULT_REG_ADDR 0xe2cc
#define ACAMERA_ISP_FRAME_STITCH_LM_NP_MULT_OFFSET 0x2c
#define ACAMERA_ISP_FRAME_STITCH_LM_NP_MULT_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_lm_np_mult_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2cc );
    system_isp_write_32( base + 0xe2cc, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_lm_np_mult_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2cc ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MS NP mult
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            The noise profile weights are multiplied by this value to give expected noise amplitude.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MS_NP_MULT_DEFAULT 1536
#define ACAMERA_ISP_FRAME_STITCH_MS_NP_MULT_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_MS_NP_MULT_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_MS_NP_MULT_REG_ADDR 0xe2cc
#define ACAMERA_ISP_FRAME_STITCH_MS_NP_MULT_OFFSET 0x2c
#define ACAMERA_ISP_FRAME_STITCH_MS_NP_MULT_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_ms_np_mult_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2cc );
    system_isp_write_32( base + 0xe2cc, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_ms_np_mult_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2cc ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: SVS NP mult
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            The noise profile weights are multiplied by this value to give expected noise amplitude.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_SVS_NP_MULT_DEFAULT 1536
#define ACAMERA_ISP_FRAME_STITCH_SVS_NP_MULT_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_SVS_NP_MULT_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_SVS_NP_MULT_REG_ADDR 0xe2d0
#define ACAMERA_ISP_FRAME_STITCH_SVS_NP_MULT_OFFSET 0x30
#define ACAMERA_ISP_FRAME_STITCH_SVS_NP_MULT_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_svs_np_mult_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2d0 );
    system_isp_write_32( base + 0xe2d0, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_svs_np_mult_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2d0 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: LM Alpha MOV slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            This defines the gradient of the motion alpha ramp. Higher values mean a steeper ramp and so a more rapid transition between
//            non-motion-corrected and motion-corrected regions.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_ALPHA_MOV_SLOPE_DEFAULT 3072
#define ACAMERA_ISP_FRAME_STITCH_LM_ALPHA_MOV_SLOPE_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_LM_ALPHA_MOV_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_ALPHA_MOV_SLOPE_REG_ADDR 0xe2d4
#define ACAMERA_ISP_FRAME_STITCH_LM_ALPHA_MOV_SLOPE_OFFSET 0x34
#define ACAMERA_ISP_FRAME_STITCH_LM_ALPHA_MOV_SLOPE_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_lm_alpha_mov_slope_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2d4 );
    system_isp_write_32( base + 0xe2d4, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_lm_alpha_mov_slope_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2d4 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MS Alpha MOV slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            This defines the gradient of the motion alpha ramp. Higher values mean a steeper ramp and so a more rapid transition between
//            non-motion-corrected and motion-corrected regions.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MS_ALPHA_MOV_SLOPE_DEFAULT 384
#define ACAMERA_ISP_FRAME_STITCH_MS_ALPHA_MOV_SLOPE_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_MS_ALPHA_MOV_SLOPE_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_MS_ALPHA_MOV_SLOPE_REG_ADDR 0xe2d4
#define ACAMERA_ISP_FRAME_STITCH_MS_ALPHA_MOV_SLOPE_OFFSET 0x34
#define ACAMERA_ISP_FRAME_STITCH_MS_ALPHA_MOV_SLOPE_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_ms_alpha_mov_slope_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2d4 );
    system_isp_write_32( base + 0xe2d4, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_ms_alpha_mov_slope_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2d4 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: SVS Alpha MOV slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            This defines the gradient of the motion alpha ramp. Higher values mean a steeper ramp and so a more rapid transition between
//            non-motion-corrected and motion-corrected regions.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_SVS_ALPHA_MOV_SLOPE_DEFAULT 384
#define ACAMERA_ISP_FRAME_STITCH_SVS_ALPHA_MOV_SLOPE_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_SVS_ALPHA_MOV_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_SVS_ALPHA_MOV_SLOPE_REG_ADDR 0xe2d8
#define ACAMERA_ISP_FRAME_STITCH_SVS_ALPHA_MOV_SLOPE_OFFSET 0x38
#define ACAMERA_ISP_FRAME_STITCH_SVS_ALPHA_MOV_SLOPE_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_svs_alpha_mov_slope_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2d8 );
    system_isp_write_32( base + 0xe2d8, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_svs_alpha_mov_slope_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2d8 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain R
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Multiplier for color channel R
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_GAIN_R_DEFAULT 256
#define ACAMERA_ISP_FRAME_STITCH_GAIN_R_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_GAIN_R_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_GAIN_R_REG_ADDR 0xe2dc
#define ACAMERA_ISP_FRAME_STITCH_GAIN_R_OFFSET 0x3c
#define ACAMERA_ISP_FRAME_STITCH_GAIN_R_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_gain_r_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2dc );
    system_isp_write_32( base + 0xe2dc, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_gain_r_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2dc ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain B
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Multiplier for color channel B
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_GAIN_B_DEFAULT 256
#define ACAMERA_ISP_FRAME_STITCH_GAIN_B_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_GAIN_B_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_GAIN_B_REG_ADDR 0xe2dc
#define ACAMERA_ISP_FRAME_STITCH_GAIN_B_OFFSET 0x3c
#define ACAMERA_ISP_FRAME_STITCH_GAIN_B_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_gain_b_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2dc );
    system_isp_write_32( base + 0xe2dc, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_gain_b_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2dc ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Exposure mask thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//              Threshold for selection of exposure mask in blending regions.
//              Where the alpha value is above this value the shorter exposure will be indicated.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_EXPOSURE_MASK_THRESH_DEFAULT 64
#define ACAMERA_ISP_FRAME_STITCH_EXPOSURE_MASK_THRESH_DATASIZE 8
#define ACAMERA_ISP_FRAME_STITCH_EXPOSURE_MASK_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_EXPOSURE_MASK_THRESH_REG_ADDR 0xe2e0
#define ACAMERA_ISP_FRAME_STITCH_EXPOSURE_MASK_THRESH_OFFSET 0x40
#define ACAMERA_ISP_FRAME_STITCH_EXPOSURE_MASK_THRESH_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_frame_stitch_exposure_mask_thresh_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2e0 );
    system_isp_write_32( base + 0xe2e0, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_frame_stitch_exposure_mask_thresh_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2e0 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: LM Alg Select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//              Select which L/M stitching algorithm to use.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_ALG_SELECT_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_ALG_SELECT_DATASIZE 1
#define ACAMERA_ISP_FRAME_STITCH_LM_ALG_SELECT_FIELD_OFFSET 24
#define ACAMERA_ISP_FRAME_STITCH_LM_ALG_SELECT_REG_ADDR 0xe2e0
#define ACAMERA_ISP_FRAME_STITCH_LM_ALG_SELECT_OFFSET 0x40
#define ACAMERA_ISP_FRAME_STITCH_LM_ALG_SELECT_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_isp_frame_stitch_lm_alg_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2e0 );
    system_isp_write_32( base + 0xe2e0, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_isp_frame_stitch_lm_alg_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2e0 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: LM Noise Thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//              Higher values make it more likely to interpret differences between the long and medium exposures as noise (and thus do no motion correction).
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_NOISE_THRESH_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_NOISE_THRESH_DATASIZE 6
#define ACAMERA_ISP_FRAME_STITCH_LM_NOISE_THRESH_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_LM_NOISE_THRESH_REG_ADDR 0xe2e0
#define ACAMERA_ISP_FRAME_STITCH_LM_NOISE_THRESH_OFFSET 0x40
#define ACAMERA_ISP_FRAME_STITCH_LM_NOISE_THRESH_FIELD_MASK 0x3f0000

// args: data (6-bit)
static __inline void acamera_isp_frame_stitch_lm_noise_thresh_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2e0 );
    system_isp_write_32( base + 0xe2e0, ( ( ( uint32_t )( data & 0x3f ) ) << 16 ) | ( curr & 0xffc0ffff ) );
}
static __inline uint8_t acamera_isp_frame_stitch_lm_noise_thresh_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2e0 ) & 0x3f0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: LM Pos Weight
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//              Lower values make it more likely to interpret  differences between the long and medium exposures as noise (and thus do no motion correction).
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_POS_WEIGHT_DEFAULT 20
#define ACAMERA_ISP_FRAME_STITCH_LM_POS_WEIGHT_DATASIZE 6
#define ACAMERA_ISP_FRAME_STITCH_LM_POS_WEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_POS_WEIGHT_REG_ADDR 0xe2e4
#define ACAMERA_ISP_FRAME_STITCH_LM_POS_WEIGHT_OFFSET 0x44
#define ACAMERA_ISP_FRAME_STITCH_LM_POS_WEIGHT_FIELD_MASK 0x3f

// args: data (6-bit)
static __inline void acamera_isp_frame_stitch_lm_pos_weight_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2e4 );
    system_isp_write_32( base + 0xe2e4, ( ( ( uint32_t )( data & 0x3f ) ) << 0 ) | ( curr & 0xffffffc0 ) );
}
static __inline uint8_t acamera_isp_frame_stitch_lm_pos_weight_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2e4 ) & 0x3f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: LM Neg Weight
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//              Higher values make it more likely to interpret differences between the long and medium exposures as noise (and thus do no motion correction).
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_NEG_WEIGHT_DEFAULT 2
#define ACAMERA_ISP_FRAME_STITCH_LM_NEG_WEIGHT_DATASIZE 6
#define ACAMERA_ISP_FRAME_STITCH_LM_NEG_WEIGHT_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_LM_NEG_WEIGHT_REG_ADDR 0xe2e4
#define ACAMERA_ISP_FRAME_STITCH_LM_NEG_WEIGHT_OFFSET 0x44
#define ACAMERA_ISP_FRAME_STITCH_LM_NEG_WEIGHT_FIELD_MASK 0x3f0000

// args: data (6-bit)
static __inline void acamera_isp_frame_stitch_lm_neg_weight_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2e4 );
    system_isp_write_32( base + 0xe2e4, ( ( ( uint32_t )( data & 0x3f ) ) << 16 ) | ( curr & 0xffc0ffff ) );
}
static __inline uint8_t acamera_isp_frame_stitch_lm_neg_weight_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2e4 ) & 0x3f0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: LM Med Noise Alpha Thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_ALPHA_THRESH_DEFAULT 64
#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_ALPHA_THRESH_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_ALPHA_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_ALPHA_THRESH_REG_ADDR 0xe2e8
#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_ALPHA_THRESH_OFFSET 0x48
#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_ALPHA_THRESH_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_lm_med_noise_alpha_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2e8 );
    system_isp_write_32( base + 0xe2e8, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_lm_med_noise_alpha_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2e8 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: LM Med Noise Intensity Thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_INTENSITY_THRESH_DEFAULT 512
#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_INTENSITY_THRESH_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_INTENSITY_THRESH_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_INTENSITY_THRESH_REG_ADDR 0xe2e8
#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_INTENSITY_THRESH_OFFSET 0x48
#define ACAMERA_ISP_FRAME_STITCH_LM_MED_NOISE_INTENSITY_THRESH_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_lm_med_noise_intensity_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2e8 );
    system_isp_write_32( base + 0xe2e8, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_lm_med_noise_intensity_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2e8 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: lm_mc_blend_slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_SLOPE_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_SLOPE_DATASIZE 22
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_SLOPE_REG_ADDR 0xe2ec
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_SLOPE_OFFSET 0x4c
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_SLOPE_FIELD_MASK 0x3fffff

// args: data (22-bit)
static __inline void acamera_isp_frame_stitch_lm_mc_blend_slope_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2ec );
    system_isp_write_32( base + 0xe2ec, ( ( ( uint32_t )( data & 0x3fffff ) ) << 0 ) | ( curr & 0xffc00000 ) );
}
static __inline uint32_t acamera_isp_frame_stitch_lm_mc_blend_slope_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe2ec ) & 0x3fffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lm_mc_blend_thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_THRESH_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_THRESH_DATASIZE 8
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_THRESH_REG_ADDR 0xe2f0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_THRESH_OFFSET 0x50
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_THRESH_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_frame_stitch_lm_mc_blend_thresh_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2f0 );
    system_isp_write_32( base + 0xe2f0, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_frame_stitch_lm_mc_blend_thresh_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2f0 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lm_mc_blend_offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_OFFSET_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_OFFSET_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_OFFSET_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_OFFSET_REG_ADDR 0xe2f0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_OFFSET_OFFSET 0x50
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_BLEND_OFFSET_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_lm_mc_blend_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2f0 );
    system_isp_write_32( base + 0xe2f0, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_lm_mc_blend_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2f0 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: lm_mc_thresh_slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_SLOPE_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_SLOPE_DATASIZE 22
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_SLOPE_REG_ADDR 0xe2f4
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_SLOPE_OFFSET 0x54
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_SLOPE_FIELD_MASK 0x3fffff

// args: data (22-bit)
static __inline void acamera_isp_frame_stitch_lm_mc_thresh_slope_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2f4 );
    system_isp_write_32( base + 0xe2f4, ( ( ( uint32_t )( data & 0x3fffff ) ) << 0 ) | ( curr & 0xffc00000 ) );
}
static __inline uint32_t acamera_isp_frame_stitch_lm_mc_thresh_slope_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe2f4 ) & 0x3fffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lm_mc_thresh_thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_THRESH_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_THRESH_DATASIZE 24
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_THRESH_REG_ADDR 0xe2f8
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_THRESH_OFFSET 0x58
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_THRESH_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_frame_stitch_lm_mc_thresh_thresh_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2f8 );
    system_isp_write_32( base + 0xe2f8, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_frame_stitch_lm_mc_thresh_thresh_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe2f8 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lm_mc_thresh_offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_OFFSET_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_OFFSET_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_OFFSET_REG_ADDR 0xe2fc
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_OFFSET_OFFSET 0x5c
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_THRESH_OFFSET_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_lm_mc_thresh_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2fc );
    system_isp_write_32( base + 0xe2fc, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_lm_mc_thresh_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2fc ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lm_mc_mag_thresh_slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_SLOPE_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_SLOPE_DATASIZE 22
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_SLOPE_REG_ADDR 0xe300
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_SLOPE_OFFSET 0x60
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_SLOPE_FIELD_MASK 0x3fffff

// args: data (22-bit)
static __inline void acamera_isp_frame_stitch_lm_mc_mag_thresh_slope_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe300 );
    system_isp_write_32( base + 0xe300, ( ( ( uint32_t )( data & 0x3fffff ) ) << 0 ) | ( curr & 0xffc00000 ) );
}
static __inline uint32_t acamera_isp_frame_stitch_lm_mc_mag_thresh_slope_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe300 ) & 0x3fffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lm_mc_mag_thresh_thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_THRESH_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_THRESH_DATASIZE 24
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_THRESH_REG_ADDR 0xe304
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_THRESH_OFFSET 0x64
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_THRESH_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_frame_stitch_lm_mc_mag_thresh_thresh_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe304 );
    system_isp_write_32( base + 0xe304, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_frame_stitch_lm_mc_mag_thresh_thresh_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe304 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lm_mc_mag_thresh_offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_OFFSET_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_OFFSET_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_OFFSET_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_OFFSET_REG_ADDR 0xe2fc
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_OFFSET_OFFSET 0x5c
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_THRESH_OFFSET_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_lm_mc_mag_thresh_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2fc );
    system_isp_write_32( base + 0xe2fc, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_lm_mc_mag_thresh_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe2fc ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: lm_mc_mag_lblend_thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_LBLEND_THRESH_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_LBLEND_THRESH_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_LBLEND_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_LBLEND_THRESH_REG_ADDR 0xe308
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_LBLEND_THRESH_OFFSET 0x68
#define ACAMERA_ISP_FRAME_STITCH_LM_MC_MAG_LBLEND_THRESH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_lm_mc_mag_lblend_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe308 );
    system_isp_write_32( base + 0xe308, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_lm_mc_mag_lblend_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe308 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff WB offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_WB_OFFSET_DEFAULT 256
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_WB_OFFSET_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_WB_OFFSET_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_WB_OFFSET_REG_ADDR 0xe308
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_WB_OFFSET_OFFSET 0x68
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_WB_OFFSET_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_mcoff_wb_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe308 );
    system_isp_write_32( base + 0xe308, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_mcoff_wb_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe308 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: BWb select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_BWB_SELECT_DEFAULT 1
#define ACAMERA_ISP_FRAME_STITCH_BWB_SELECT_DATASIZE 1
#define ACAMERA_ISP_FRAME_STITCH_BWB_SELECT_FIELD_OFFSET 28
#define ACAMERA_ISP_FRAME_STITCH_BWB_SELECT_REG_ADDR 0xe2e0
#define ACAMERA_ISP_FRAME_STITCH_BWB_SELECT_OFFSET 0x40
#define ACAMERA_ISP_FRAME_STITCH_BWB_SELECT_FIELD_MASK 0x10000000

// args: data (1-bit)
static __inline void acamera_isp_frame_stitch_bwb_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2e0 );
    system_isp_write_32( base + 0xe2e0, ( ( ( uint32_t )( data & 0x1 ) ) << 28 ) | ( curr & 0xefffffff ) );
}
static __inline uint8_t acamera_isp_frame_stitch_bwb_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2e0 ) & 0x10000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff L max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_MAX_DEFAULT 3500
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_MAX_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_MAX_REG_ADDR 0xe30c
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_MAX_OFFSET 0x6c
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_MAX_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_mcoff_l_max_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe30c );
    system_isp_write_32( base + 0xe30c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_mcoff_l_max_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe30c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff M max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_M_MAX_DEFAULT 3500
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_M_MAX_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_M_MAX_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_M_MAX_REG_ADDR 0xe30c
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_M_MAX_OFFSET 0x6c
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_M_MAX_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_mcoff_m_max_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe30c );
    system_isp_write_32( base + 0xe30c, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_mcoff_m_max_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe30c ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff S max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_S_MAX_DEFAULT 3500
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_S_MAX_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_S_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_S_MAX_REG_ADDR 0xe310
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_S_MAX_OFFSET 0x70
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_S_MAX_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_mcoff_s_max_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe310 );
    system_isp_write_32( base + 0xe310, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_mcoff_s_max_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe310 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff VS max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_VS_MAX_DEFAULT 3500
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_VS_MAX_DATASIZE 16
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_VS_MAX_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_VS_MAX_REG_ADDR 0xe310
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_VS_MAX_OFFSET 0x70
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_VS_MAX_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_frame_stitch_mcoff_vs_max_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe310 );
    system_isp_write_32( base + 0xe310, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_mcoff_vs_max_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe310 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff nc enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_ENABLE_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_ENABLE_DATASIZE 1
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_ENABLE_FIELD_OFFSET 29
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_ENABLE_REG_ADDR 0xe2e0
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_ENABLE_OFFSET 0x40
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_ENABLE_FIELD_MASK 0x20000000

// args: data (1-bit)
static __inline void acamera_isp_frame_stitch_mcoff_nc_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2e0 );
    system_isp_write_32( base + 0xe2e0, ( ( ( uint32_t )( data & 0x1 ) ) << 29 ) | ( curr & 0xdfffffff ) );
}
static __inline uint8_t acamera_isp_frame_stitch_mcoff_nc_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2e0 ) & 0x20000000 ) >> 29 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff L scaler
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_SCALER_DEFAULT 2048
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_SCALER_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_SCALER_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_SCALER_REG_ADDR 0xe314
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_SCALER_OFFSET 0x74
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_L_SCALER_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_mcoff_l_scaler_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe314 );
    system_isp_write_32( base + 0xe314, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_mcoff_l_scaler_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe314 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff LM scaler
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LM_SCALER_DEFAULT 2048
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LM_SCALER_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LM_SCALER_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LM_SCALER_REG_ADDR 0xe314
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LM_SCALER_OFFSET 0x74
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LM_SCALER_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_mcoff_lm_scaler_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe314 );
    system_isp_write_32( base + 0xe314, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_mcoff_lm_scaler_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe314 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff LMS scaler
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LMS_SCALER_DEFAULT 2048
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LMS_SCALER_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LMS_SCALER_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LMS_SCALER_REG_ADDR 0xe318
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LMS_SCALER_OFFSET 0x78
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_LMS_SCALER_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_mcoff_lms_scaler_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe318 );
    system_isp_write_32( base + 0xe318, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_mcoff_lms_scaler_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe318 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff nc thresh low
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_LOW_DEFAULT 32
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_LOW_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_LOW_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_LOW_REG_ADDR 0xe31c
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_LOW_OFFSET 0x7c
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_LOW_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_mcoff_nc_thresh_low_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe31c );
    system_isp_write_32( base + 0xe31c, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_mcoff_nc_thresh_low_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe31c ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff nc thresh high
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_HIGH_DEFAULT 64
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_HIGH_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_HIGH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_HIGH_REG_ADDR 0xe320
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_HIGH_OFFSET 0x80
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_THRESH_HIGH_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_mcoff_nc_thresh_high_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe320 );
    system_isp_write_32( base + 0xe320, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_mcoff_nc_thresh_high_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe320 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff nc scale
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_SCALE_DEFAULT 128
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_SCALE_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_SCALE_FIELD_OFFSET 16
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_SCALE_REG_ADDR 0xe320
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_SCALE_OFFSET 0x80
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_NC_SCALE_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_mcoff_nc_scale_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe320 );
    system_isp_write_32( base + 0xe320, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_frame_stitch_mcoff_nc_scale_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe320 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mcoff mode enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_MCOFF_MODE_ENABLE_DEFAULT 0
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_MODE_ENABLE_DATASIZE 1
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_MODE_ENABLE_FIELD_OFFSET 30
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_MODE_ENABLE_REG_ADDR 0xe2e0
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_MODE_ENABLE_OFFSET 0x40
#define ACAMERA_ISP_FRAME_STITCH_MCOFF_MODE_ENABLE_FIELD_MASK 0x40000000

// args: data (1-bit)
static __inline void acamera_isp_frame_stitch_mcoff_mode_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2e0 );
    system_isp_write_32( base + 0xe2e0, ( ( ( uint32_t )( data & 0x1 ) ) << 30 ) | ( curr & 0xbfffffff ) );
}
static __inline uint8_t acamera_isp_frame_stitch_mcoff_mode_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2e0 ) & 0x40000000 ) >> 30 );
}
// ------------------------------------------------------------------------------ //
// Register: Consistency thresh mov
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Pixel consistency reporting - motion threshold
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_MOV_DEFAULT 410
#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_MOV_DATASIZE 12
#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_MOV_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_MOV_REG_ADDR 0xe324
#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_MOV_OFFSET 0x84
#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_MOV_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_frame_stitch_consistency_thresh_mov_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe324 );
    system_isp_write_32( base + 0xe324, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_frame_stitch_consistency_thresh_mov_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe324 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Consistency thresh lvl
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Pixel consistency reporting - flicker threshold
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_LVL_DEFAULT 410
#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_LVL_DATASIZE 24
#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_LVL_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_LVL_REG_ADDR 0xe328
#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_LVL_OFFSET 0x88
#define ACAMERA_ISP_FRAME_STITCH_CONSISTENCY_THRESH_LVL_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_frame_stitch_consistency_thresh_lvl_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe328 );
    system_isp_write_32( base + 0xe328, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_frame_stitch_consistency_thresh_lvl_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe328 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Use 3x3 max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_STITCH_USE_3X3_MAX_DEFAULT 1
#define ACAMERA_ISP_FRAME_STITCH_USE_3X3_MAX_DATASIZE 1
#define ACAMERA_ISP_FRAME_STITCH_USE_3X3_MAX_FIELD_OFFSET 31
#define ACAMERA_ISP_FRAME_STITCH_USE_3X3_MAX_REG_ADDR 0xe2e0
#define ACAMERA_ISP_FRAME_STITCH_USE_3X3_MAX_OFFSET 0x40
#define ACAMERA_ISP_FRAME_STITCH_USE_3X3_MAX_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline void acamera_isp_frame_stitch_use_3x3_max_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe2e0 );
    system_isp_write_32( base + 0xe2e0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_isp_frame_stitch_use_3x3_max_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe2e0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Group: Frontend LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frontend lookup (for companded WDR sensor inputs)
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frontend lookup enable: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_GAMMA_FE_ENABLE_DEFAULT 0
#define ACAMERA_ISP_GAMMA_FE_ENABLE_DATASIZE 1
#define ACAMERA_ISP_GAMMA_FE_ENABLE_FIELD_OFFSET 0
#define ACAMERA_ISP_GAMMA_FE_ENABLE_REG_ADDR 0xe330
#define ACAMERA_ISP_GAMMA_FE_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_GAMMA_FE_ENABLE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_gamma_fe_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe330 );
    system_isp_write_32( base + 0xe330, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_gamma_fe_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe330 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data Last
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// LUT last node
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_GAMMA_FE_DATA_LAST_DEFAULT 0
#define ACAMERA_ISP_GAMMA_FE_DATA_LAST_DATASIZE 25
#define ACAMERA_ISP_GAMMA_FE_DATA_LAST_FIELD_OFFSET 0
#define ACAMERA_ISP_GAMMA_FE_DATA_LAST_REG_ADDR 0xe334
#define ACAMERA_ISP_GAMMA_FE_DATA_LAST_OFFSET 0x4
#define ACAMERA_ISP_GAMMA_FE_DATA_LAST_FIELD_MASK 0x1ffffff

// args: data (25-bit)
static __inline void acamera_isp_gamma_fe_data_last_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe334 );
    system_isp_write_32( base + 0xe334, ( ( ( uint32_t )( data & 0x1ffffff ) ) << 0 ) | ( curr & 0xfe000000 ) );
}
static __inline uint32_t acamera_isp_gamma_fe_data_last_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe334 ) & 0x1ffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black level in SQ
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frontend SQ table input black level
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_IN_SQ_DEFAULT 0
#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_IN_SQ_DATASIZE 24
#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_IN_SQ_FIELD_OFFSET 0
#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_IN_SQ_REG_ADDR 0xe33c
#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_IN_SQ_OFFSET 0xc
#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_IN_SQ_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_gamma_fe_black_level_in_sq_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe33c );
    system_isp_write_32( base + 0xe33c, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_gamma_fe_black_level_in_sq_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe33c ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black level out SQ
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frontend SQ table output black level
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_OUT_SQ_DEFAULT 0
#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_OUT_SQ_DATASIZE 16
#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_OUT_SQ_FIELD_OFFSET 0
#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_OUT_SQ_REG_ADDR 0xe340
#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_OUT_SQ_OFFSET 0x10
#define ACAMERA_ISP_GAMMA_FE_BLACK_LEVEL_OUT_SQ_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_gamma_fe_black_level_out_sq_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe340 );
    system_isp_write_32( base + 0xe340, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_gamma_fe_black_level_out_sq_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe340 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Digital Gain
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Digital gain for RAW sensor data
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Gain
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gain applied to data in 7.8 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DIGITAL_GAIN_GAIN_DEFAULT 256
#define ACAMERA_ISP_DIGITAL_GAIN_GAIN_DATASIZE 15
#define ACAMERA_ISP_DIGITAL_GAIN_GAIN_FIELD_OFFSET 0
#define ACAMERA_ISP_DIGITAL_GAIN_GAIN_REG_ADDR 0xe348
#define ACAMERA_ISP_DIGITAL_GAIN_GAIN_OFFSET 0x0
#define ACAMERA_ISP_DIGITAL_GAIN_GAIN_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_digital_gain_gain_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe348 );
    system_isp_write_32( base + 0xe348, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_digital_gain_gain_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe348 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Data black level
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DIGITAL_GAIN_OFFSET_DEFAULT 0
#define ACAMERA_ISP_DIGITAL_GAIN_OFFSET_DATASIZE 24
#define ACAMERA_ISP_DIGITAL_GAIN_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_DIGITAL_GAIN_OFFSET_REG_ADDR 0xe34c
#define ACAMERA_ISP_DIGITAL_GAIN_OFFSET_OFFSET 0x4
#define ACAMERA_ISP_DIGITAL_GAIN_OFFSET_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_digital_gain_offset_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe34c );
    system_isp_write_32( base + 0xe34c, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_digital_gain_offset_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe34c ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Sinter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Spatial noise reduction
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Config
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_CONFIG_DEFAULT 0
#define ACAMERA_ISP_SINTER_CONFIG_DATASIZE 8
#define ACAMERA_ISP_SINTER_CONFIG_FIELD_OFFSET 0
#define ACAMERA_ISP_SINTER_CONFIG_REG_ADDR 0xe350
#define ACAMERA_ISP_SINTER_CONFIG_OFFSET 0x0
#define ACAMERA_ISP_SINTER_CONFIG_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_sinter_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe350 );
    system_isp_write_32( base + 0xe350, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_sinter_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe350 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter enable: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_ENABLE_DEFAULT 1
#define ACAMERA_ISP_SINTER_ENABLE_DATASIZE 1
#define ACAMERA_ISP_SINTER_ENABLE_FIELD_OFFSET 4
#define ACAMERA_ISP_SINTER_ENABLE_REG_ADDR 0xe350
#define ACAMERA_ISP_SINTER_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_SINTER_ENABLE_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_isp_sinter_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe350 );
    system_isp_write_32( base + 0xe350, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_isp_sinter_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe350 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: View Filter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// For debug purposes only. Set to zero for normal operation
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_VIEW_FILTER_DEFAULT 0
#define ACAMERA_ISP_SINTER_VIEW_FILTER_DATASIZE 2
#define ACAMERA_ISP_SINTER_VIEW_FILTER_FIELD_OFFSET 0
#define ACAMERA_ISP_SINTER_VIEW_FILTER_REG_ADDR 0xe350
#define ACAMERA_ISP_SINTER_VIEW_FILTER_OFFSET 0x0
#define ACAMERA_ISP_SINTER_VIEW_FILTER_FIELD_MASK 0x3

// args: data (2-bit)
static __inline void acamera_isp_sinter_view_filter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe350 );
    system_isp_write_32( base + 0xe350, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_sinter_view_filter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe350 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Scale Mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// For debug purposes only. Set to 3 for normal operation
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_SCALE_MODE_DEFAULT 3
#define ACAMERA_ISP_SINTER_SCALE_MODE_DATASIZE 2
#define ACAMERA_ISP_SINTER_SCALE_MODE_FIELD_OFFSET 2
#define ACAMERA_ISP_SINTER_SCALE_MODE_REG_ADDR 0xe350
#define ACAMERA_ISP_SINTER_SCALE_MODE_OFFSET 0x0
#define ACAMERA_ISP_SINTER_SCALE_MODE_FIELD_MASK 0xc
#define ACAMERA_ISP_SINTER_SCALE_MODE_USE_FILTER_0_ONLY ( 0 )
#define ACAMERA_ISP_SINTER_SCALE_MODE_USE_FILTERS_0_AND_2_ONLY ( 1 )
#define ACAMERA_ISP_SINTER_SCALE_MODE_USE_FILTERS_0_2_AND_4_ONLY ( 2 )
#define ACAMERA_ISP_SINTER_SCALE_MODE_USE_ALL_FILTERS ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_sinter_scale_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe350 );
    system_isp_write_32( base + 0xe350, ( ( ( uint32_t )( data & 0x3 ) ) << 2 ) | ( curr & 0xfffffff3 ) );
}
static __inline uint8_t acamera_isp_sinter_scale_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe350 ) & 0xc ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Filter select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sinter filter fine tuning.  Should not be modified from suggested values.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_FILTER_SELECT_DEFAULT 0
#define ACAMERA_ISP_SINTER_FILTER_SELECT_DATASIZE 1
#define ACAMERA_ISP_SINTER_FILTER_SELECT_FIELD_OFFSET 5
#define ACAMERA_ISP_SINTER_FILTER_SELECT_REG_ADDR 0xe350
#define ACAMERA_ISP_SINTER_FILTER_SELECT_OFFSET 0x0
#define ACAMERA_ISP_SINTER_FILTER_SELECT_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_isp_sinter_filter_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe350 );
    system_isp_write_32( base + 0xe350, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_isp_sinter_filter_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe350 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Int select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Select intensity filter.  Should not be modified from suggested values.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_INT_SELECT_DEFAULT 0
#define ACAMERA_ISP_SINTER_INT_SELECT_DATASIZE 1
#define ACAMERA_ISP_SINTER_INT_SELECT_FIELD_OFFSET 6
#define ACAMERA_ISP_SINTER_INT_SELECT_REG_ADDR 0xe350
#define ACAMERA_ISP_SINTER_INT_SELECT_OFFSET 0x0
#define ACAMERA_ISP_SINTER_INT_SELECT_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_sinter_int_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe350 );
    system_isp_write_32( base + 0xe350, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_sinter_int_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe350 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: rm_enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//          Adjusts Sinter strength radially from center to compensate for Lens shading correction.
//          enable: 0=off, 1=on
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_RM_ENABLE_DEFAULT 0
#define ACAMERA_ISP_SINTER_RM_ENABLE_DATASIZE 1
#define ACAMERA_ISP_SINTER_RM_ENABLE_FIELD_OFFSET 7
#define ACAMERA_ISP_SINTER_RM_ENABLE_REG_ADDR 0xe350
#define ACAMERA_ISP_SINTER_RM_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_SINTER_RM_ENABLE_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_sinter_rm_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe350 );
    system_isp_write_32( base + 0xe350, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_sinter_rm_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe350 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: int config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Intensity blending with mosaic raw
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_INT_CONFIG_DEFAULT 4
#define ACAMERA_ISP_SINTER_INT_CONFIG_DATASIZE 4
#define ACAMERA_ISP_SINTER_INT_CONFIG_FIELD_OFFSET 8
#define ACAMERA_ISP_SINTER_INT_CONFIG_REG_ADDR 0xe350
#define ACAMERA_ISP_SINTER_INT_CONFIG_OFFSET 0x0
#define ACAMERA_ISP_SINTER_INT_CONFIG_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_isp_sinter_int_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe350 );
    system_isp_write_32( base + 0xe350, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_isp_sinter_int_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe350 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: rm_center_x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center x coordinate of shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_RM_CENTER_X_DEFAULT 640
#define ACAMERA_ISP_SINTER_RM_CENTER_X_DATASIZE 16
#define ACAMERA_ISP_SINTER_RM_CENTER_X_FIELD_OFFSET 0
#define ACAMERA_ISP_SINTER_RM_CENTER_X_REG_ADDR 0xe354
#define ACAMERA_ISP_SINTER_RM_CENTER_X_OFFSET 0x4
#define ACAMERA_ISP_SINTER_RM_CENTER_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_sinter_rm_center_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe354 );
    system_isp_write_32( base + 0xe354, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_sinter_rm_center_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe354 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rm_center_y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center y coordinate of shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_RM_CENTER_Y_DEFAULT 360
#define ACAMERA_ISP_SINTER_RM_CENTER_Y_DATASIZE 16
#define ACAMERA_ISP_SINTER_RM_CENTER_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_SINTER_RM_CENTER_Y_REG_ADDR 0xe358
#define ACAMERA_ISP_SINTER_RM_CENTER_Y_OFFSET 0x8
#define ACAMERA_ISP_SINTER_RM_CENTER_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_sinter_rm_center_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe358 );
    system_isp_write_32( base + 0xe358, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_sinter_rm_center_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe358 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rm_off_center_mult
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing factor which scales the radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_RM_OFF_CENTER_MULT_DEFAULT 256
#define ACAMERA_ISP_SINTER_RM_OFF_CENTER_MULT_DATASIZE 16
#define ACAMERA_ISP_SINTER_RM_OFF_CENTER_MULT_FIELD_OFFSET 0
#define ACAMERA_ISP_SINTER_RM_OFF_CENTER_MULT_REG_ADDR 0xe35c
#define ACAMERA_ISP_SINTER_RM_OFF_CENTER_MULT_OFFSET 0xc
#define ACAMERA_ISP_SINTER_RM_OFF_CENTER_MULT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_sinter_rm_off_center_mult_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe35c );
    system_isp_write_32( base + 0xe35c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_sinter_rm_off_center_mult_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe35c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Thresh 1h
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise threshold for high horizontal spatial frequencies
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_THRESH_1H_DEFAULT 0
#define ACAMERA_ISP_SINTER_THRESH_1H_DATASIZE 8
#define ACAMERA_ISP_SINTER_THRESH_1H_FIELD_OFFSET 0
#define ACAMERA_ISP_SINTER_THRESH_1H_REG_ADDR 0xe360
#define ACAMERA_ISP_SINTER_THRESH_1H_OFFSET 0x10
#define ACAMERA_ISP_SINTER_THRESH_1H_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_sinter_thresh_1h_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe360 );
    system_isp_write_32( base + 0xe360, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_sinter_thresh_1h_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe360 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Thresh 4h
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise threshold for low horizontal spatial frequencies
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_THRESH_4H_DEFAULT 0
#define ACAMERA_ISP_SINTER_THRESH_4H_DATASIZE 8
#define ACAMERA_ISP_SINTER_THRESH_4H_FIELD_OFFSET 0
#define ACAMERA_ISP_SINTER_THRESH_4H_REG_ADDR 0xe364
#define ACAMERA_ISP_SINTER_THRESH_4H_OFFSET 0x14
#define ACAMERA_ISP_SINTER_THRESH_4H_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_sinter_thresh_4h_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe364 );
    system_isp_write_32( base + 0xe364, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_sinter_thresh_4h_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe364 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Thresh 1v
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise threshold for high vertical spatial frequencies
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_THRESH_1V_DEFAULT 0
#define ACAMERA_ISP_SINTER_THRESH_1V_DATASIZE 8
#define ACAMERA_ISP_SINTER_THRESH_1V_FIELD_OFFSET 0
#define ACAMERA_ISP_SINTER_THRESH_1V_REG_ADDR 0xe368
#define ACAMERA_ISP_SINTER_THRESH_1V_OFFSET 0x18
#define ACAMERA_ISP_SINTER_THRESH_1V_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_sinter_thresh_1v_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe368 );
    system_isp_write_32( base + 0xe368, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_sinter_thresh_1v_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe368 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Thresh 4v
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise threshold for low vertical spatial frequencies
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_THRESH_4V_DEFAULT 0
#define ACAMERA_ISP_SINTER_THRESH_4V_DATASIZE 8
#define ACAMERA_ISP_SINTER_THRESH_4V_FIELD_OFFSET 0
#define ACAMERA_ISP_SINTER_THRESH_4V_REG_ADDR 0xe36c
#define ACAMERA_ISP_SINTER_THRESH_4V_OFFSET 0x1c
#define ACAMERA_ISP_SINTER_THRESH_4V_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_sinter_thresh_4v_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe36c );
    system_isp_write_32( base + 0xe36c, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_sinter_thresh_4v_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe36c ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Strength 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise reduction effect for high spatial frequencies
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_STRENGTH_1_DEFAULT 255
#define ACAMERA_ISP_SINTER_STRENGTH_1_DATASIZE 8
#define ACAMERA_ISP_SINTER_STRENGTH_1_FIELD_OFFSET 0
#define ACAMERA_ISP_SINTER_STRENGTH_1_REG_ADDR 0xe380
#define ACAMERA_ISP_SINTER_STRENGTH_1_OFFSET 0x30
#define ACAMERA_ISP_SINTER_STRENGTH_1_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_sinter_strength_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe380 );
    system_isp_write_32( base + 0xe380, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_sinter_strength_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe380 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Strength 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise reduction effect for low spatial frequencies
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_STRENGTH_4_DEFAULT 255
#define ACAMERA_ISP_SINTER_STRENGTH_4_DATASIZE 8
#define ACAMERA_ISP_SINTER_STRENGTH_4_FIELD_OFFSET 0
#define ACAMERA_ISP_SINTER_STRENGTH_4_REG_ADDR 0xe388
#define ACAMERA_ISP_SINTER_STRENGTH_4_OFFSET 0x38
#define ACAMERA_ISP_SINTER_STRENGTH_4_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_sinter_strength_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe388 );
    system_isp_write_32( base + 0xe388, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_sinter_strength_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe388 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Backend LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Backend gamma LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Enable 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Backend lookup0 enable: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_GAMMA_BE_ENABLE_0_DEFAULT 0
#define ACAMERA_ISP_GAMMA_BE_ENABLE_0_DATASIZE 1
#define ACAMERA_ISP_GAMMA_BE_ENABLE_0_FIELD_OFFSET 0
#define ACAMERA_ISP_GAMMA_BE_ENABLE_0_REG_ADDR 0xe390
#define ACAMERA_ISP_GAMMA_BE_ENABLE_0_OFFSET 0x0
#define ACAMERA_ISP_GAMMA_BE_ENABLE_0_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_gamma_be_enable_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe390 );
    system_isp_write_32( base + 0xe390, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_gamma_be_enable_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe390 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Backend lookup1 enable: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_GAMMA_BE_ENABLE_1_DEFAULT 0
#define ACAMERA_ISP_GAMMA_BE_ENABLE_1_DATASIZE 1
#define ACAMERA_ISP_GAMMA_BE_ENABLE_1_FIELD_OFFSET 1
#define ACAMERA_ISP_GAMMA_BE_ENABLE_1_REG_ADDR 0xe390
#define ACAMERA_ISP_GAMMA_BE_ENABLE_1_OFFSET 0x0
#define ACAMERA_ISP_GAMMA_BE_ENABLE_1_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_gamma_be_enable_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe390 );
    system_isp_write_32( base + 0xe390, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_gamma_be_enable_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe390 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Data Last 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// LUT0 last node
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_0_DEFAULT 0
#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_0_DATASIZE 25
#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_0_FIELD_OFFSET 0
#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_0_REG_ADDR 0xe394
#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_0_OFFSET 0x4
#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_0_FIELD_MASK 0x1ffffff

// args: data (25-bit)
static __inline void acamera_isp_gamma_be_data_last_0_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe394 );
    system_isp_write_32( base + 0xe394, ( ( ( uint32_t )( data & 0x1ffffff ) ) << 0 ) | ( curr & 0xfe000000 ) );
}
static __inline uint32_t acamera_isp_gamma_be_data_last_0_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe394 ) & 0x1ffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data Last 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// LUT0 last node
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_1_DEFAULT 0
#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_1_DATASIZE 25
#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_1_FIELD_OFFSET 0
#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_1_REG_ADDR 0xe398
#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_1_OFFSET 0x8
#define ACAMERA_ISP_GAMMA_BE_DATA_LAST_1_FIELD_MASK 0x1ffffff

// args: data (25-bit)
static __inline void acamera_isp_gamma_be_data_last_1_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe398 );
    system_isp_write_32( base + 0xe398, ( ( ( uint32_t )( data & 0x1ffffff ) ) << 0 ) | ( curr & 0xfe000000 ) );
}
static __inline uint32_t acamera_isp_gamma_be_data_last_1_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe398 ) & 0x1ffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black level in SQ
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Backend SQ table input black level
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_IN_SQ_DEFAULT 0
#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_IN_SQ_DATASIZE 16
#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_IN_SQ_FIELD_OFFSET 0
#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_IN_SQ_REG_ADDR 0xe3a0
#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_IN_SQ_OFFSET 0x10
#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_IN_SQ_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_gamma_be_black_level_in_sq_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3a0 );
    system_isp_write_32( base + 0xe3a0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_gamma_be_black_level_in_sq_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3a0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black level out SQ
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Backend SQ table output black level
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_OUT_SQ_DEFAULT 0
#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_OUT_SQ_DATASIZE 24
#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_OUT_SQ_FIELD_OFFSET 0
#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_OUT_SQ_REG_ADDR 0xe3a4
#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_OUT_SQ_OFFSET 0x14
#define ACAMERA_ISP_GAMMA_BE_BLACK_LEVEL_OUT_SQ_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_gamma_be_black_level_out_sq_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3a4 );
    system_isp_write_32( base + 0xe3a4, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_gamma_be_black_level_out_sq_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe3a4 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Noise Profile
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile controls for Sinter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Hlog exp rat max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for determining long/short exposure data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_MAX_DEFAULT 15
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_MAX_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_MAX_REG_ADDR 0xe3b0
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_MAX_OFFSET 0x0
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_MAX_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_noise_profile_hlog_exp_rat_max_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3b0 );
    system_isp_write_32( base + 0xe3b0, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_noise_profile_hlog_exp_rat_max_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3b0 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Hlog exp rat 0 1 max diff
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for determining long/short exposure data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_1_MAX_DIFF_DEFAULT 15
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_1_MAX_DIFF_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_1_MAX_DIFF_FIELD_OFFSET 8
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_1_MAX_DIFF_REG_ADDR 0xe3b0
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_1_MAX_DIFF_OFFSET 0x0
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_1_MAX_DIFF_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_isp_noise_profile_hlog_exp_rat_0_1_max_diff_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3b0 );
    system_isp_write_32( base + 0xe3b0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_isp_noise_profile_hlog_exp_rat_0_1_max_diff_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3b0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Hlog exp rat 0 2 max diff
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for determining long/short exposure data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_2_MAX_DIFF_DEFAULT 15
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_2_MAX_DIFF_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_2_MAX_DIFF_FIELD_OFFSET 16
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_2_MAX_DIFF_REG_ADDR 0xe3b0
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_2_MAX_DIFF_OFFSET 0x0
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_2_MAX_DIFF_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_noise_profile_hlog_exp_rat_0_2_max_diff_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3b0 );
    system_isp_write_32( base + 0xe3b0, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_noise_profile_hlog_exp_rat_0_2_max_diff_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3b0 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Hlog exp rat 0 3 max diff
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for determining long/short exposure data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_3_MAX_DIFF_DEFAULT 15
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_3_MAX_DIFF_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_3_MAX_DIFF_FIELD_OFFSET 24
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_3_MAX_DIFF_REG_ADDR 0xe3b0
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_3_MAX_DIFF_OFFSET 0x0
#define ACAMERA_ISP_NOISE_PROFILE_HLOG_EXP_RAT_0_3_MAX_DIFF_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_noise_profile_hlog_exp_rat_0_3_max_diff_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3b0 );
    system_isp_write_32( base + 0xe3b0, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_noise_profile_hlog_exp_rat_0_3_max_diff_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3b0 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Global offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for determining long/short exposure data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_GLOBAL_OFFSET_DEFAULT 15
#define ACAMERA_ISP_NOISE_PROFILE_GLOBAL_OFFSET_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_GLOBAL_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_GLOBAL_OFFSET_REG_ADDR 0xe3b4
#define ACAMERA_ISP_NOISE_PROFILE_GLOBAL_OFFSET_OFFSET 0x4
#define ACAMERA_ISP_NOISE_PROFILE_GLOBAL_OFFSET_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_noise_profile_global_offset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3b4 );
    system_isp_write_32( base + 0xe3b4, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_noise_profile_global_offset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3b4 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Use exp mask
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Enable using exposure mask from WDR stitch module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_USE_EXP_MASK_DEFAULT 1
#define ACAMERA_ISP_NOISE_PROFILE_USE_EXP_MASK_DATASIZE 1
#define ACAMERA_ISP_NOISE_PROFILE_USE_EXP_MASK_FIELD_OFFSET 8
#define ACAMERA_ISP_NOISE_PROFILE_USE_EXP_MASK_REG_ADDR 0xe3b4
#define ACAMERA_ISP_NOISE_PROFILE_USE_EXP_MASK_OFFSET 0x4
#define ACAMERA_ISP_NOISE_PROFILE_USE_EXP_MASK_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_isp_noise_profile_use_exp_mask_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3b4 );
    system_isp_write_32( base + 0xe3b4, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_isp_noise_profile_use_exp_mask_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3b4 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Thresh 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_THRESH_1_DEFAULT 0
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_1_DATASIZE 16
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_1_FIELD_OFFSET 16
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_1_REG_ADDR 0xe3b4
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_1_OFFSET 0x4
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_1_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_noise_profile_thresh_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3b4 );
    system_isp_write_32( base + 0xe3b4, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_noise_profile_thresh_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3b4 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Thresh 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_THRESH_2_DEFAULT 0
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_2_DATASIZE 16
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_2_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_2_REG_ADDR 0xe3b8
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_2_OFFSET 0x8
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_2_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_noise_profile_thresh_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3b8 );
    system_isp_write_32( base + 0xe3b8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_noise_profile_thresh_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3b8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Thresh 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_THRESH_3_DEFAULT 0
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_3_DATASIZE 16
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_3_FIELD_OFFSET 16
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_3_REG_ADDR 0xe3b8
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_3_OFFSET 0x8
#define ACAMERA_ISP_NOISE_PROFILE_THRESH_3_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_noise_profile_thresh_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3b8 );
    system_isp_write_32( base + 0xe3b8, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_noise_profile_thresh_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3b8 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Group: White Balance
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Static white balance - independent gain for each color channel
//
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Gain 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_WHITE_BALANCE_GAIN_00_DEFAULT 256
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_00_DATASIZE 12
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_00_FIELD_OFFSET 0
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_00_REG_ADDR 0xe3c0
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_00_OFFSET 0x0
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_00_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_white_balance_gain_00_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3c0 );
    system_isp_write_32( base + 0xe3c0, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_white_balance_gain_00_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3c0 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_WHITE_BALANCE_GAIN_01_DEFAULT 256
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_01_DATASIZE 12
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_01_FIELD_OFFSET 0
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_01_REG_ADDR 0xe3c4
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_01_OFFSET 0x4
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_01_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_white_balance_gain_01_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3c4 );
    system_isp_write_32( base + 0xe3c4, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_white_balance_gain_01_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3c4 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_WHITE_BALANCE_GAIN_10_DEFAULT 256
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_10_DATASIZE 12
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_10_FIELD_OFFSET 0
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_10_REG_ADDR 0xe3c8
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_10_OFFSET 0x8
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_10_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_white_balance_gain_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3c8 );
    system_isp_write_32( base + 0xe3c8, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_white_balance_gain_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3c8 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_WHITE_BALANCE_GAIN_11_DEFAULT 256
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_11_DATASIZE 12
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_11_FIELD_OFFSET 0
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_11_REG_ADDR 0xe3cc
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_11_OFFSET 0xc
#define ACAMERA_ISP_WHITE_BALANCE_GAIN_11_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_white_balance_gain_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3cc );
    system_isp_write_32( base + 0xe3cc, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_white_balance_gain_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3cc ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset subtraction for each color channel
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OFFSET_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_OFFSET_BLACK_00_DATASIZE 24
#define ACAMERA_ISP_OFFSET_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_OFFSET_BLACK_00_REG_ADDR 0xe3d0
#define ACAMERA_ISP_OFFSET_BLACK_00_OFFSET 0x0
#define ACAMERA_ISP_OFFSET_BLACK_00_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_offset_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3d0 );
    system_isp_write_32( base + 0xe3d0, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_offset_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe3d0 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OFFSET_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_OFFSET_BLACK_01_DATASIZE 24
#define ACAMERA_ISP_OFFSET_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_OFFSET_BLACK_01_REG_ADDR 0xe3d4
#define ACAMERA_ISP_OFFSET_BLACK_01_OFFSET 0x4
#define ACAMERA_ISP_OFFSET_BLACK_01_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_offset_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3d4 );
    system_isp_write_32( base + 0xe3d4, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_offset_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe3d4 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OFFSET_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_OFFSET_BLACK_10_DATASIZE 24
#define ACAMERA_ISP_OFFSET_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_OFFSET_BLACK_10_REG_ADDR 0xe3d8
#define ACAMERA_ISP_OFFSET_BLACK_10_OFFSET 0x8
#define ACAMERA_ISP_OFFSET_BLACK_10_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_offset_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3d8 );
    system_isp_write_32( base + 0xe3d8, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_offset_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe3d8 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OFFSET_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_OFFSET_BLACK_11_DATASIZE 24
#define ACAMERA_ISP_OFFSET_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_OFFSET_BLACK_11_REG_ADDR 0xe3dc
#define ACAMERA_ISP_OFFSET_BLACK_11_OFFSET 0xc
#define ACAMERA_ISP_OFFSET_BLACK_11_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_offset_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3dc );
    system_isp_write_32( base + 0xe3dc, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_offset_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe3dc ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: CA Correction
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Longitudal Chromatic Aberration correction
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CA correction enable: 0=off, 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_CA_CORRECTION_ENABLE_DEFAULT 0
#define ACAMERA_ISP_CA_CORRECTION_ENABLE_DATASIZE 1
#define ACAMERA_ISP_CA_CORRECTION_ENABLE_FIELD_OFFSET 0
#define ACAMERA_ISP_CA_CORRECTION_ENABLE_REG_ADDR 0xe3e0
#define ACAMERA_ISP_CA_CORRECTION_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_CA_CORRECTION_ENABLE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_ca_correction_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3e0 );
    system_isp_write_32( base + 0xe3e0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_ca_correction_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3e0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh Scale
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mesh scaling
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_CA_CORRECTION_MESH_SCALE_DEFAULT 0
#define ACAMERA_ISP_CA_CORRECTION_MESH_SCALE_DATASIZE 2
#define ACAMERA_ISP_CA_CORRECTION_MESH_SCALE_FIELD_OFFSET 14
#define ACAMERA_ISP_CA_CORRECTION_MESH_SCALE_REG_ADDR 0xe3e0
#define ACAMERA_ISP_CA_CORRECTION_MESH_SCALE_OFFSET 0x0
#define ACAMERA_ISP_CA_CORRECTION_MESH_SCALE_FIELD_MASK 0xc000

// args: data (2-bit)
static __inline void acamera_isp_ca_correction_mesh_scale_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3e0 );
    system_isp_write_32( base + 0xe3e0, ( ( ( uint32_t )( data & 0x3 ) ) << 14 ) | ( curr & 0xffff3fff ) );
}
static __inline uint8_t acamera_isp_ca_correction_mesh_scale_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3e0 ) & 0xc000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of horizontal nodes minus 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_CA_CORRECTION_MESH_WIDTH_DEFAULT 100
#define ACAMERA_ISP_CA_CORRECTION_MESH_WIDTH_DATASIZE 7
#define ACAMERA_ISP_CA_CORRECTION_MESH_WIDTH_FIELD_OFFSET 16
#define ACAMERA_ISP_CA_CORRECTION_MESH_WIDTH_REG_ADDR 0xe3e0
#define ACAMERA_ISP_CA_CORRECTION_MESH_WIDTH_OFFSET 0x0
#define ACAMERA_ISP_CA_CORRECTION_MESH_WIDTH_FIELD_MASK 0x7f0000

// args: data (7-bit)
static __inline void acamera_isp_ca_correction_mesh_width_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3e0 );
    system_isp_write_32( base + 0xe3e0, ( ( ( uint32_t )( data & 0x7f ) ) << 16 ) | ( curr & 0xff80ffff ) );
}
static __inline uint8_t acamera_isp_ca_correction_mesh_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3e0 ) & 0x7f0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of vertical nodes minus 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_CA_CORRECTION_MESH_HEIGHT_DEFAULT 100
#define ACAMERA_ISP_CA_CORRECTION_MESH_HEIGHT_DATASIZE 7
#define ACAMERA_ISP_CA_CORRECTION_MESH_HEIGHT_FIELD_OFFSET 24
#define ACAMERA_ISP_CA_CORRECTION_MESH_HEIGHT_REG_ADDR 0xe3e0
#define ACAMERA_ISP_CA_CORRECTION_MESH_HEIGHT_OFFSET 0x0
#define ACAMERA_ISP_CA_CORRECTION_MESH_HEIGHT_FIELD_MASK 0x7f000000

// args: data (7-bit)
static __inline void acamera_isp_ca_correction_mesh_height_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3e0 );
    system_isp_write_32( base + 0xe3e0, ( ( ( uint32_t )( data & 0x7f ) ) << 24 ) | ( curr & 0x80ffffff ) );
}
static __inline uint8_t acamera_isp_ca_correction_mesh_height_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3e0 ) & 0x7f000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset to next line of mesh data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_CA_CORRECTION_LINE_OFFSET_DEFAULT 100
#define ACAMERA_ISP_CA_CORRECTION_LINE_OFFSET_DATASIZE 13
#define ACAMERA_ISP_CA_CORRECTION_LINE_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_CA_CORRECTION_LINE_OFFSET_REG_ADDR 0xe3e4
#define ACAMERA_ISP_CA_CORRECTION_LINE_OFFSET_OFFSET 0x4
#define ACAMERA_ISP_CA_CORRECTION_LINE_OFFSET_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_ca_correction_line_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3e4 );
    system_isp_write_32( base + 0xe3e4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_ca_correction_line_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3e4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Plane offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset to next plane of mesh data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_CA_CORRECTION_PLANE_OFFSET_DEFAULT 100
#define ACAMERA_ISP_CA_CORRECTION_PLANE_OFFSET_DATASIZE 13
#define ACAMERA_ISP_CA_CORRECTION_PLANE_OFFSET_FIELD_OFFSET 16
#define ACAMERA_ISP_CA_CORRECTION_PLANE_OFFSET_REG_ADDR 0xe3e4
#define ACAMERA_ISP_CA_CORRECTION_PLANE_OFFSET_OFFSET 0x4
#define ACAMERA_ISP_CA_CORRECTION_PLANE_OFFSET_FIELD_MASK 0x1fff0000

// args: data (13-bit)
static __inline void acamera_isp_ca_correction_plane_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3e4 );
    system_isp_write_32( base + 0xe3e4, ( ( ( uint32_t )( data & 0x1fff ) ) << 16 ) | ( curr & 0xe000ffff ) );
}
static __inline uint16_t acamera_isp_ca_correction_plane_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3e4 ) & 0x1fff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh reload
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0-1 triggers cache reload
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_CA_CORRECTION_MESH_RELOAD_DEFAULT 0
#define ACAMERA_ISP_CA_CORRECTION_MESH_RELOAD_DATASIZE 1
#define ACAMERA_ISP_CA_CORRECTION_MESH_RELOAD_FIELD_OFFSET 0
#define ACAMERA_ISP_CA_CORRECTION_MESH_RELOAD_REG_ADDR 0xe3e8
#define ACAMERA_ISP_CA_CORRECTION_MESH_RELOAD_OFFSET 0x8
#define ACAMERA_ISP_CA_CORRECTION_MESH_RELOAD_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_ca_correction_mesh_reload_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3e8 );
    system_isp_write_32( base + 0xe3e8, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_ca_correction_mesh_reload_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3e8 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Radial Shading
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial Lens shading correction
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Lens shading correction enable: 0=off, 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_ENABLE_DEFAULT 0
#define ACAMERA_ISP_RADIAL_SHADING_ENABLE_DATASIZE 1
#define ACAMERA_ISP_RADIAL_SHADING_ENABLE_FIELD_OFFSET 0
#define ACAMERA_ISP_RADIAL_SHADING_ENABLE_REG_ADDR 0xe3f0
#define ACAMERA_ISP_RADIAL_SHADING_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_RADIAL_SHADING_ENABLE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_radial_shading_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3f0 );
    system_isp_write_32( base + 0xe3f0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_radial_shading_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe3f0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: centerR x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center x coordinate of the red shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_X_DEFAULT 960
#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_X_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_X_FIELD_OFFSET 0
#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_X_REG_ADDR 0xe3f8
#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_X_OFFSET 0x8
#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_centerr_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3f8 );
    system_isp_write_32( base + 0xe3f8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_radial_shading_centerr_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3f8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: centerR y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center y coordinate of the red shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_Y_DEFAULT 540
#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_Y_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_Y_FIELD_OFFSET 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_Y_REG_ADDR 0xe3f8
#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_Y_OFFSET 0x8
#define ACAMERA_ISP_RADIAL_SHADING_CENTERR_Y_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_centerr_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3f8 );
    system_isp_write_32( base + 0xe3f8, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_radial_shading_centerr_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3f8 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: centerG x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center x coordinate of the green shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_X_DEFAULT 960
#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_X_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_X_FIELD_OFFSET 0
#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_X_REG_ADDR 0xe3fc
#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_X_OFFSET 0xc
#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_centerg_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3fc );
    system_isp_write_32( base + 0xe3fc, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_radial_shading_centerg_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3fc ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: centerG y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center y coordinate of the green shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_Y_DEFAULT 540
#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_Y_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_Y_FIELD_OFFSET 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_Y_REG_ADDR 0xe3fc
#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_Y_OFFSET 0xc
#define ACAMERA_ISP_RADIAL_SHADING_CENTERG_Y_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_centerg_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3fc );
    system_isp_write_32( base + 0xe3fc, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_radial_shading_centerg_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3fc ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: centerB x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center x coordinate of the blue shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_X_DEFAULT 960
#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_X_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_X_FIELD_OFFSET 0
#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_X_REG_ADDR 0xe400
#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_X_OFFSET 0x10
#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_centerb_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe400 );
    system_isp_write_32( base + 0xe400, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_radial_shading_centerb_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe400 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: centerB y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center y coordinate of the blue shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_Y_DEFAULT 540
#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_Y_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_Y_FIELD_OFFSET 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_Y_REG_ADDR 0xe400
#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_Y_OFFSET 0x10
#define ACAMERA_ISP_RADIAL_SHADING_CENTERB_Y_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_centerb_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe400 );
    system_isp_write_32( base + 0xe400, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_radial_shading_centerb_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe400 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: centerIr x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center x coordinate of the IR shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_X_DEFAULT 960
#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_X_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_X_FIELD_OFFSET 0
#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_X_REG_ADDR 0xe404
#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_X_OFFSET 0x14
#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_centerir_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe404 );
    system_isp_write_32( base + 0xe404, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_radial_shading_centerir_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe404 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: centerIr y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center y coordinate of the IR shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_Y_DEFAULT 540
#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_Y_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_Y_FIELD_OFFSET 16
#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_Y_REG_ADDR 0xe404
#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_Y_OFFSET 0x14
#define ACAMERA_ISP_RADIAL_SHADING_CENTERIR_Y_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_centerir_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe404 );
    system_isp_write_32( base + 0xe404, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_radial_shading_centerir_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe404 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: off center multRx
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing X factor which scales the Red radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRX_DEFAULT 1770
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRX_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRX_FIELD_OFFSET 0
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRX_REG_ADDR 0xe408
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRX_OFFSET 0x18
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRX_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_off_center_multrx_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe408 );
    system_isp_write_32( base + 0xe408, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_radial_shading_off_center_multrx_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe408 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: off center multRy
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing Y factor which scales the Red radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRY_DEFAULT 1770
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRY_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRY_FIELD_OFFSET 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRY_REG_ADDR 0xe408
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRY_OFFSET 0x18
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTRY_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_off_center_multry_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe408 );
    system_isp_write_32( base + 0xe408, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_radial_shading_off_center_multry_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe408 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: off center multGx
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing X factor which scales the green radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGX_DEFAULT 1770
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGX_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGX_FIELD_OFFSET 0
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGX_REG_ADDR 0xe40c
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGX_OFFSET 0x1c
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGX_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_off_center_multgx_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe40c );
    system_isp_write_32( base + 0xe40c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_radial_shading_off_center_multgx_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe40c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: off center multGy
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing Y factor which scales the green radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGY_DEFAULT 1770
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGY_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGY_FIELD_OFFSET 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGY_REG_ADDR 0xe40c
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGY_OFFSET 0x1c
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTGY_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_off_center_multgy_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe40c );
    system_isp_write_32( base + 0xe40c, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_radial_shading_off_center_multgy_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe40c ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: off center multBx
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing X factor which scales the blue radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBX_DEFAULT 1770
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBX_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBX_FIELD_OFFSET 0
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBX_REG_ADDR 0xe410
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBX_OFFSET 0x20
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBX_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_off_center_multbx_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe410 );
    system_isp_write_32( base + 0xe410, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_radial_shading_off_center_multbx_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe410 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: off center multBy
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing Y factor which scales the blue radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBY_DEFAULT 1770
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBY_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBY_FIELD_OFFSET 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBY_REG_ADDR 0xe410
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBY_OFFSET 0x20
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTBY_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_off_center_multby_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe410 );
    system_isp_write_32( base + 0xe410, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_radial_shading_off_center_multby_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe410 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: off center multIRx
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing X factor which scales the Ir radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRX_DEFAULT 1770
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRX_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRX_FIELD_OFFSET 0
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRX_REG_ADDR 0xe414
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRX_OFFSET 0x24
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRX_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_off_center_multirx_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe414 );
    system_isp_write_32( base + 0xe414, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_radial_shading_off_center_multirx_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe414 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: off center multIRy
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing Y factor which scales the Ir radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRY_DEFAULT 1770
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRY_DATASIZE 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRY_FIELD_OFFSET 16
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRY_REG_ADDR 0xe414
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRY_OFFSET 0x24
#define ACAMERA_ISP_RADIAL_SHADING_OFF_CENTER_MULTIRY_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_radial_shading_off_center_multiry_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe414 );
    system_isp_write_32( base + 0xe414, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_radial_shading_off_center_multiry_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe414 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Group: Mesh Shading
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mesh Lens shading correction
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Lens shading correction enable: 0=off, 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_ENABLE_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_ENABLE_DATASIZE 1
#define ACAMERA_ISP_MESH_SHADING_ENABLE_FIELD_OFFSET 0
#define ACAMERA_ISP_MESH_SHADING_ENABLE_REG_ADDR 0xe420
#define ACAMERA_ISP_MESH_SHADING_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_MESH_SHADING_ENABLE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_mesh_shading_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe420 );
    system_isp_write_32( base + 0xe420, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_mesh_shading_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe420 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh show
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Lens shading correction debug: 0=off, 1=on (show mesh data)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_SHOW_DEFAULT 1
#define ACAMERA_ISP_MESH_SHADING_MESH_SHOW_DATASIZE 1
#define ACAMERA_ISP_MESH_SHADING_MESH_SHOW_FIELD_OFFSET 1
#define ACAMERA_ISP_MESH_SHADING_MESH_SHOW_REG_ADDR 0xe420
#define ACAMERA_ISP_MESH_SHADING_MESH_SHOW_OFFSET 0x0
#define ACAMERA_ISP_MESH_SHADING_MESH_SHOW_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_mesh_shading_mesh_show_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe420 );
    system_isp_write_32( base + 0xe420, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_show_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe420 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh scale
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Selects the precision and maximal gain range of mesh shading correction
//        Gain range:    00->0..2; 01->0..4; 02->0..8; 03->0..16; 04->1..2; 05->1..3; 06-> 1..5; 07->1..9(float)
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_SCALE_DEFAULT 1
#define ACAMERA_ISP_MESH_SHADING_MESH_SCALE_DATASIZE 3
#define ACAMERA_ISP_MESH_SHADING_MESH_SCALE_FIELD_OFFSET 2
#define ACAMERA_ISP_MESH_SHADING_MESH_SCALE_REG_ADDR 0xe420
#define ACAMERA_ISP_MESH_SHADING_MESH_SCALE_OFFSET 0x0
#define ACAMERA_ISP_MESH_SHADING_MESH_SCALE_FIELD_MASK 0x1c

// args: data (3-bit)
static __inline void acamera_isp_mesh_shading_mesh_scale_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe420 );
    system_isp_write_32( base + 0xe420, ( ( ( uint32_t )( data & 0x7 ) ) << 2 ) | ( curr & 0xffffffe3 ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_scale_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe420 ) & 0x1c ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh page R
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Selects memory page for red pixels correction.  See TRM for further details
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_R_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_R_DATASIZE 2
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_R_FIELD_OFFSET 8
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_R_REG_ADDR 0xe420
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_R_OFFSET 0x0
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_R_FIELD_MASK 0x300

// args: data (2-bit)
static __inline void acamera_isp_mesh_shading_mesh_page_r_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe420 );
    system_isp_write_32( base + 0xe420, ( ( ( uint32_t )( data & 0x3 ) ) << 8 ) | ( curr & 0xfffffcff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_page_r_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe420 ) & 0x300 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh page G
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Selects memory page for green pixels correction.  See TRM for further details
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_G_DEFAULT 1
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_G_DATASIZE 2
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_G_FIELD_OFFSET 10
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_G_REG_ADDR 0xe420
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_G_OFFSET 0x0
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_G_FIELD_MASK 0xc00

// args: data (2-bit)
static __inline void acamera_isp_mesh_shading_mesh_page_g_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe420 );
    system_isp_write_32( base + 0xe420, ( ( ( uint32_t )( data & 0x3 ) ) << 10 ) | ( curr & 0xfffff3ff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_page_g_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe420 ) & 0xc00 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh page B
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Selects memory page for blue pixels correction.  See TRM for further details
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_B_DEFAULT 2
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_B_DATASIZE 2
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_B_FIELD_OFFSET 12
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_B_REG_ADDR 0xe420
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_B_OFFSET 0x0
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_B_FIELD_MASK 0x3000

// args: data (2-bit)
static __inline void acamera_isp_mesh_shading_mesh_page_b_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe420 );
    system_isp_write_32( base + 0xe420, ( ( ( uint32_t )( data & 0x3 ) ) << 12 ) | ( curr & 0xffffcfff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_page_b_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe420 ) & 0x3000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh page Ir
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Selects memory page for IR pixels correction.  See TRM for further details
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_IR_DEFAULT 3
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_IR_DATASIZE 2
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_IR_FIELD_OFFSET 14
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_IR_REG_ADDR 0xe420
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_IR_OFFSET 0x0
#define ACAMERA_ISP_MESH_SHADING_MESH_PAGE_IR_FIELD_MASK 0xc000

// args: data (2-bit)
static __inline void acamera_isp_mesh_shading_mesh_page_ir_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe420 );
    system_isp_write_32( base + 0xe420, ( ( ( uint32_t )( data & 0x3 ) ) << 14 ) | ( curr & 0xffff3fff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_page_ir_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe420 ) & 0xc000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of horizontal nodes minus 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_WIDTH_DEFAULT 99
#define ACAMERA_ISP_MESH_SHADING_MESH_WIDTH_DATASIZE 6
#define ACAMERA_ISP_MESH_SHADING_MESH_WIDTH_FIELD_OFFSET 16
#define ACAMERA_ISP_MESH_SHADING_MESH_WIDTH_REG_ADDR 0xe420
#define ACAMERA_ISP_MESH_SHADING_MESH_WIDTH_OFFSET 0x0
#define ACAMERA_ISP_MESH_SHADING_MESH_WIDTH_FIELD_MASK 0x3f0000

// args: data (6-bit)
static __inline void acamera_isp_mesh_shading_mesh_width_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe420 );
    system_isp_write_32( base + 0xe420, ( ( ( uint32_t )( data & 0x3f ) ) << 16 ) | ( curr & 0xffc0ffff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe420 ) & 0x3f0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of vertical nodes minus 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_HEIGHT_DEFAULT 99
#define ACAMERA_ISP_MESH_SHADING_MESH_HEIGHT_DATASIZE 6
#define ACAMERA_ISP_MESH_SHADING_MESH_HEIGHT_FIELD_OFFSET 24
#define ACAMERA_ISP_MESH_SHADING_MESH_HEIGHT_REG_ADDR 0xe420
#define ACAMERA_ISP_MESH_SHADING_MESH_HEIGHT_OFFSET 0x0
#define ACAMERA_ISP_MESH_SHADING_MESH_HEIGHT_FIELD_MASK 0x3f000000

// args: data (6-bit)
static __inline void acamera_isp_mesh_shading_mesh_height_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe420 );
    system_isp_write_32( base + 0xe420, ( ( ( uint32_t )( data & 0x3f ) ) << 24 ) | ( curr & 0xc0ffffff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_height_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe420 ) & 0x3f000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh reload
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0-1 triggers cache reload
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_RELOAD_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_MESH_RELOAD_DATASIZE 1
#define ACAMERA_ISP_MESH_SHADING_MESH_RELOAD_FIELD_OFFSET 0
#define ACAMERA_ISP_MESH_SHADING_MESH_RELOAD_REG_ADDR 0xe424
#define ACAMERA_ISP_MESH_SHADING_MESH_RELOAD_OFFSET 0x4
#define ACAMERA_ISP_MESH_SHADING_MESH_RELOAD_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_mesh_shading_mesh_reload_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe424 );
    system_isp_write_32( base + 0xe424, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_reload_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe424 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh alpha mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Sets alpha blending between mesh shading tables.
//        0 = no alpha blending;
//        1 = two 32x64 banks (odd/even bytes)
//        2 = four 32x32 banks (one per 8-bit lane in each word)
//        3 = two 64x32 banks (odd/even bytes)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_MODE_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_MODE_DATASIZE 2
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_MODE_FIELD_OFFSET 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_MODE_REG_ADDR 0xe430
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_MODE_OFFSET 0x10
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_MODE_FIELD_MASK 0x3

// args: data (2-bit)
static __inline void acamera_isp_mesh_shading_mesh_alpha_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe430 );
    system_isp_write_32( base + 0xe430, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_alpha_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe430 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh alpha bank R
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bank selection for R blend: 0: 0+1; 1: 1+2; 2: 2:3; 3: 3+0; 4:0+2; 5: 1+3; 6,7: reserved
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_R_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_R_DATASIZE 3
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_R_FIELD_OFFSET 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_R_REG_ADDR 0xe434
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_R_OFFSET 0x14
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_R_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_mesh_shading_mesh_alpha_bank_r_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe434 );
    system_isp_write_32( base + 0xe434, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_alpha_bank_r_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe434 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh alpha bank G
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bank selection for G blend: 0: 0+1; 1: 1+2; 2: 2:3; 3: 3+0; 4:0+2; 5: 1+3; 6,7: reserved:
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_G_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_G_DATASIZE 3
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_G_FIELD_OFFSET 8
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_G_REG_ADDR 0xe434
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_G_OFFSET 0x14
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_G_FIELD_MASK 0x700

// args: data (3-bit)
static __inline void acamera_isp_mesh_shading_mesh_alpha_bank_g_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe434 );
    system_isp_write_32( base + 0xe434, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_alpha_bank_g_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe434 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh alpha bank B
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bank selection for B blend: 0: 0+1; 1: 1+2; 2: 2:3; 3: 3+0; 4:0+2; 5: 1+3; 6,7: reserved
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_B_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_B_DATASIZE 3
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_B_FIELD_OFFSET 16
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_B_REG_ADDR 0xe434
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_B_OFFSET 0x14
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_B_FIELD_MASK 0x70000

// args: data (3-bit)
static __inline void acamera_isp_mesh_shading_mesh_alpha_bank_b_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe434 );
    system_isp_write_32( base + 0xe434, ( ( ( uint32_t )( data & 0x7 ) ) << 16 ) | ( curr & 0xfff8ffff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_alpha_bank_b_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe434 ) & 0x70000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh alpha bank Ir
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bank selection for Ir blend: 0: 0+1; 1: 1+2; 2: 2:3; 3: 3+0; 4:0+2; 5: 1+3; 6,7: reserved
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_IR_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_IR_DATASIZE 3
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_IR_FIELD_OFFSET 24
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_IR_REG_ADDR 0xe434
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_IR_OFFSET 0x14
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_BANK_IR_FIELD_MASK 0x7000000

// args: data (3-bit)
static __inline void acamera_isp_mesh_shading_mesh_alpha_bank_ir_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe434 );
    system_isp_write_32( base + 0xe434, ( ( ( uint32_t )( data & 0x7 ) ) << 24 ) | ( curr & 0xf8ffffff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_alpha_bank_ir_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe434 ) & 0x7000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh alpha R
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Alpha blend coeff for R
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_R_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_R_DATASIZE 8
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_R_FIELD_OFFSET 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_R_REG_ADDR 0xe438
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_R_OFFSET 0x18
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_R_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_mesh_shading_mesh_alpha_r_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe438 );
    system_isp_write_32( base + 0xe438, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_alpha_r_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe438 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh alpha G
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Alpha blend coeff for G
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_G_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_G_DATASIZE 8
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_G_FIELD_OFFSET 8
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_G_REG_ADDR 0xe438
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_G_OFFSET 0x18
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_G_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_isp_mesh_shading_mesh_alpha_g_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe438 );
    system_isp_write_32( base + 0xe438, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_alpha_g_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe438 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh alpha B
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Alpha blend coeff for B
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_B_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_B_DATASIZE 8
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_B_FIELD_OFFSET 16
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_B_REG_ADDR 0xe438
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_B_OFFSET 0x18
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_B_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_mesh_shading_mesh_alpha_b_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe438 );
    system_isp_write_32( base + 0xe438, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_alpha_b_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe438 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh alpha Ir
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Alpha blend coeff for IR
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_IR_DEFAULT 0
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_IR_DATASIZE 8
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_IR_FIELD_OFFSET 24
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_IR_REG_ADDR 0xe438
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_IR_OFFSET 0x18
#define ACAMERA_ISP_MESH_SHADING_MESH_ALPHA_IR_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_mesh_shading_mesh_alpha_ir_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe438 );
    system_isp_write_32( base + 0xe438, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_mesh_shading_mesh_alpha_ir_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe438 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh strength
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Mesh strength in 4.12 format, e.g. 0 - no correction, 4096 - correction to match mesh data. Can be used to reduce shading correction based on AE.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MESH_SHADING_MESH_STRENGTH_DEFAULT 4096
#define ACAMERA_ISP_MESH_SHADING_MESH_STRENGTH_DATASIZE 16
#define ACAMERA_ISP_MESH_SHADING_MESH_STRENGTH_FIELD_OFFSET 0
#define ACAMERA_ISP_MESH_SHADING_MESH_STRENGTH_REG_ADDR 0xe43c
#define ACAMERA_ISP_MESH_SHADING_MESH_STRENGTH_OFFSET 0x1c
#define ACAMERA_ISP_MESH_SHADING_MESH_STRENGTH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_mesh_shading_mesh_strength_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe43c );
    system_isp_write_32( base + 0xe43c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_mesh_shading_mesh_strength_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe43c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Digital Gain Iridix
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Digital gain for Iridix
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Gain
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gain applied to data in 4.8 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_GAIN_DEFAULT 256
#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_GAIN_DATASIZE 15
#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_GAIN_FIELD_OFFSET 0
#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_GAIN_REG_ADDR 0xe3a8
#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_GAIN_OFFSET 0x0
#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_GAIN_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_digital_gain_iridix_gain_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3a8 );
    system_isp_write_32( base + 0xe3a8, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_digital_gain_iridix_gain_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe3a8 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Data black level
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_OFFSET_DEFAULT 0
#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_OFFSET_DATASIZE 24
#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_OFFSET_REG_ADDR 0xe3ac
#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_OFFSET_OFFSET 0x4
#define ACAMERA_ISP_DIGITAL_GAIN_IRIDIX_OFFSET_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_digital_gain_iridix_offset_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe3ac );
    system_isp_write_32( base + 0xe3ac, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_digital_gain_iridix_offset_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe3ac ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Iridix
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//          Iridix is an adaptive, space-variant tone mapping engine.
//          It is used to maintain or enhance shadow detail while preserving highlights.
//
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: iridix_on
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix enable: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_ENABLE_DEFAULT 1
#define ACAMERA_ISP_IRIDIX_ENABLE_DATASIZE 1
#define ACAMERA_ISP_IRIDIX_ENABLE_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_ENABLE_REG_ADDR 0xe440
#define ACAMERA_ISP_IRIDIX_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_IRIDIX_ENABLE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_iridix_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe440 );
    system_isp_write_32( base + 0xe440, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_iridix_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe440 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: max_alg_type
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Max Bayer Algorithm Type.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_MAX_ALG_TYPE_DEFAULT 1
#define ACAMERA_ISP_IRIDIX_MAX_ALG_TYPE_DATASIZE 1
#define ACAMERA_ISP_IRIDIX_MAX_ALG_TYPE_FIELD_OFFSET 3
#define ACAMERA_ISP_IRIDIX_MAX_ALG_TYPE_REG_ADDR 0xe440
#define ACAMERA_ISP_IRIDIX_MAX_ALG_TYPE_OFFSET 0x0
#define ACAMERA_ISP_IRIDIX_MAX_ALG_TYPE_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_iridix_max_alg_type_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe440 );
    system_isp_write_32( base + 0xe440, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_iridix_max_alg_type_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe440 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: black_level_amp0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 1=Ignore Black level (set to zero) in amplificator. 0=Use Black level value.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_AMP0_DEFAULT 1
#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_AMP0_DATASIZE 1
#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_AMP0_FIELD_OFFSET 5
#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_AMP0_REG_ADDR 0xe440
#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_AMP0_OFFSET 0x0
#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_AMP0_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_isp_iridix_black_level_amp0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe440 );
    system_isp_write_32( base + 0xe440, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_isp_iridix_black_level_amp0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe440 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: postgamma_pos
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// PosGamma application  0=gain 1=data
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_POSTGAMMA_POS_DEFAULT 0
#define ACAMERA_ISP_IRIDIX_POSTGAMMA_POS_DATASIZE 1
#define ACAMERA_ISP_IRIDIX_POSTGAMMA_POS_FIELD_OFFSET 6
#define ACAMERA_ISP_IRIDIX_POSTGAMMA_POS_REG_ADDR 0xe440
#define ACAMERA_ISP_IRIDIX_POSTGAMMA_POS_OFFSET 0x0
#define ACAMERA_ISP_IRIDIX_POSTGAMMA_POS_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_iridix_postgamma_pos_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe440 );
    system_isp_write_32( base + 0xe440, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_iridix_postgamma_pos_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe440 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: collect_ovl
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_COLLECT_OVL_DEFAULT 0
#define ACAMERA_ISP_IRIDIX_COLLECT_OVL_DATASIZE 1
#define ACAMERA_ISP_IRIDIX_COLLECT_OVL_FIELD_OFFSET 8
#define ACAMERA_ISP_IRIDIX_COLLECT_OVL_REG_ADDR 0xe440
#define ACAMERA_ISP_IRIDIX_COLLECT_OVL_OFFSET 0x0
#define ACAMERA_ISP_IRIDIX_COLLECT_OVL_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_isp_iridix_collect_ovl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe440 );
    system_isp_write_32( base + 0xe440, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_isp_iridix_collect_ovl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe440 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: collect_rnd
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_COLLECT_RND_DEFAULT 1
#define ACAMERA_ISP_IRIDIX_COLLECT_RND_DATASIZE 1
#define ACAMERA_ISP_IRIDIX_COLLECT_RND_FIELD_OFFSET 9
#define ACAMERA_ISP_IRIDIX_COLLECT_RND_REG_ADDR 0xe440
#define ACAMERA_ISP_IRIDIX_COLLECT_RND_OFFSET 0x0
#define ACAMERA_ISP_IRIDIX_COLLECT_RND_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_isp_iridix_collect_rnd_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe440 );
    system_isp_write_32( base + 0xe440, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_isp_iridix_collect_rnd_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe440 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: stat_norm
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_STAT_NORM_DEFAULT 1
#define ACAMERA_ISP_IRIDIX_STAT_NORM_DATASIZE 1
#define ACAMERA_ISP_IRIDIX_STAT_NORM_FIELD_OFFSET 10
#define ACAMERA_ISP_IRIDIX_STAT_NORM_REG_ADDR 0xe440
#define ACAMERA_ISP_IRIDIX_STAT_NORM_OFFSET 0x0
#define ACAMERA_ISP_IRIDIX_STAT_NORM_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_isp_iridix_stat_norm_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe440 );
    system_isp_write_32( base + 0xe440, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_isp_iridix_stat_norm_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe440 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: stat_mult
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_STAT_MULT_DEFAULT 1
#define ACAMERA_ISP_IRIDIX_STAT_MULT_DATASIZE 2
#define ACAMERA_ISP_IRIDIX_STAT_MULT_FIELD_OFFSET 14
#define ACAMERA_ISP_IRIDIX_STAT_MULT_REG_ADDR 0xe440
#define ACAMERA_ISP_IRIDIX_STAT_MULT_OFFSET 0x0
#define ACAMERA_ISP_IRIDIX_STAT_MULT_FIELD_MASK 0xc000

// args: data (2-bit)
static __inline void acamera_isp_iridix_stat_mult_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe440 );
    system_isp_write_32( base + 0xe440, ( ( ( uint32_t )( data & 0x3 ) ) << 14 ) | ( curr & 0xffff3fff ) );
}
static __inline uint8_t acamera_isp_iridix_stat_mult_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe440 ) & 0xc000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: gtm_enable
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_GTM_ENABLE_DEFAULT 0
#define ACAMERA_ISP_IRIDIX_GTM_ENABLE_DATASIZE 1
#define ACAMERA_ISP_IRIDIX_GTM_ENABLE_FIELD_OFFSET 16
#define ACAMERA_ISP_IRIDIX_GTM_ENABLE_REG_ADDR 0xe440
#define ACAMERA_ISP_IRIDIX_GTM_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_IRIDIX_GTM_ENABLE_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_isp_iridix_gtm_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe440 );
    system_isp_write_32( base + 0xe440, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_isp_iridix_gtm_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe440 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: ltm_enable
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_LTM_ENABLE_DEFAULT 1
#define ACAMERA_ISP_IRIDIX_LTM_ENABLE_DATASIZE 1
#define ACAMERA_ISP_IRIDIX_LTM_ENABLE_FIELD_OFFSET 17
#define ACAMERA_ISP_IRIDIX_LTM_ENABLE_REG_ADDR 0xe440
#define ACAMERA_ISP_IRIDIX_LTM_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_IRIDIX_LTM_ENABLE_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_isp_iridix_ltm_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe440 );
    system_isp_write_32( base + 0xe440, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_isp_iridix_ltm_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe440 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: variance_space
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets the degree of spatial sensitivity of the algorithm(Irdx7F)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_VARIANCE_SPACE_DEFAULT 2
#define ACAMERA_ISP_IRIDIX_VARIANCE_SPACE_DATASIZE 4
#define ACAMERA_ISP_IRIDIX_VARIANCE_SPACE_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_VARIANCE_SPACE_REG_ADDR 0xe448
#define ACAMERA_ISP_IRIDIX_VARIANCE_SPACE_OFFSET 0x8
#define ACAMERA_ISP_IRIDIX_VARIANCE_SPACE_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_isp_iridix_variance_space_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe448 );
    system_isp_write_32( base + 0xe448, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_iridix_variance_space_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe448 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: variance_intensity
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets the degree of luminance sensitivity of the algorithm(Irdx7F)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_VARIANCE_INTENSITY_DEFAULT 1
#define ACAMERA_ISP_IRIDIX_VARIANCE_INTENSITY_DATASIZE 4
#define ACAMERA_ISP_IRIDIX_VARIANCE_INTENSITY_FIELD_OFFSET 4
#define ACAMERA_ISP_IRIDIX_VARIANCE_INTENSITY_REG_ADDR 0xe448
#define ACAMERA_ISP_IRIDIX_VARIANCE_INTENSITY_OFFSET 0x8
#define ACAMERA_ISP_IRIDIX_VARIANCE_INTENSITY_FIELD_MASK 0xf0

// args: data (4-bit)
static __inline void acamera_isp_iridix_variance_intensity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe448 );
    system_isp_write_32( base + 0xe448, ( ( ( uint32_t )( data & 0xf ) ) << 4 ) | ( curr & 0xffffff0f ) );
}
static __inline uint8_t acamera_isp_iridix_variance_intensity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe448 ) & 0xf0 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: slope_max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Restricts the maximum slope (gain) which can be generated by the adaptive algorithm
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_SLOPE_MAX_DEFAULT 128
#define ACAMERA_ISP_IRIDIX_SLOPE_MAX_DATASIZE 8
#define ACAMERA_ISP_IRIDIX_SLOPE_MAX_FIELD_OFFSET 8
#define ACAMERA_ISP_IRIDIX_SLOPE_MAX_REG_ADDR 0xe448
#define ACAMERA_ISP_IRIDIX_SLOPE_MAX_OFFSET 0x8
#define ACAMERA_ISP_IRIDIX_SLOPE_MAX_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_isp_iridix_slope_max_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe448 );
    system_isp_write_32( base + 0xe448, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_isp_iridix_slope_max_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe448 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: slope_min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Restricts the minimum slope (gain) which can be generated by the adaptive algorithm
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_SLOPE_MIN_DEFAULT 64
#define ACAMERA_ISP_IRIDIX_SLOPE_MIN_DATASIZE 8
#define ACAMERA_ISP_IRIDIX_SLOPE_MIN_FIELD_OFFSET 16
#define ACAMERA_ISP_IRIDIX_SLOPE_MIN_REG_ADDR 0xe448
#define ACAMERA_ISP_IRIDIX_SLOPE_MIN_OFFSET 0x8
#define ACAMERA_ISP_IRIDIX_SLOPE_MIN_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_iridix_slope_min_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe448 );
    system_isp_write_32( base + 0xe448, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_iridix_slope_min_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe448 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: black_level
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix black level. Values below this will not be affected by Iridix.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_DEFAULT 0
#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_DATASIZE 24
#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_REG_ADDR 0xe450
#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_OFFSET 0x10
#define ACAMERA_ISP_IRIDIX_BLACK_LEVEL_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_iridix_black_level_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe450 );
    system_isp_write_32( base + 0xe450, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_iridix_black_level_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe450 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: white_level
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix white level. Values above this will not be affected by Iridix.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_WHITE_LEVEL_DEFAULT 16777215
#define ACAMERA_ISP_IRIDIX_WHITE_LEVEL_DATASIZE 24
#define ACAMERA_ISP_IRIDIX_WHITE_LEVEL_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_WHITE_LEVEL_REG_ADDR 0xe454
#define ACAMERA_ISP_IRIDIX_WHITE_LEVEL_OFFSET 0x14
#define ACAMERA_ISP_IRIDIX_WHITE_LEVEL_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_iridix_white_level_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe454 );
    system_isp_write_32( base + 0xe454, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_iridix_white_level_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe454 ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: collection_correction
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_COLLECTION_CORRECTION_DEFAULT 256
#define ACAMERA_ISP_IRIDIX_COLLECTION_CORRECTION_DATASIZE 12
#define ACAMERA_ISP_IRIDIX_COLLECTION_CORRECTION_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_COLLECTION_CORRECTION_REG_ADDR 0xe45c
#define ACAMERA_ISP_IRIDIX_COLLECTION_CORRECTION_OFFSET 0x1c
#define ACAMERA_ISP_IRIDIX_COLLECTION_CORRECTION_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_iridix_collection_correction_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe45c );
    system_isp_write_32( base + 0xe45c, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_iridix_collection_correction_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe45c ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: fwd_percept_control
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix gamma processing select: 0=pass through 1=gamma_dl 2=sqrt 3=gamma_lut.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_FWD_PERCEPT_CONTROL_DEFAULT 0
#define ACAMERA_ISP_IRIDIX_FWD_PERCEPT_CONTROL_DATASIZE 2
#define ACAMERA_ISP_IRIDIX_FWD_PERCEPT_CONTROL_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_FWD_PERCEPT_CONTROL_REG_ADDR 0xe460
#define ACAMERA_ISP_IRIDIX_FWD_PERCEPT_CONTROL_OFFSET 0x20
#define ACAMERA_ISP_IRIDIX_FWD_PERCEPT_CONTROL_FIELD_MASK 0x3

// args: data (2-bit)
static __inline void acamera_isp_iridix_fwd_percept_control_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe460 );
    system_isp_write_32( base + 0xe460, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_iridix_fwd_percept_control_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe460 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rev_percept_control
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix gamma processing select: 0=pass through 1=gamma_dl 2=sqrt 3=gamma_lut.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_REV_PERCEPT_CONTROL_DEFAULT 0
#define ACAMERA_ISP_IRIDIX_REV_PERCEPT_CONTROL_DATASIZE 2
#define ACAMERA_ISP_IRIDIX_REV_PERCEPT_CONTROL_FIELD_OFFSET 2
#define ACAMERA_ISP_IRIDIX_REV_PERCEPT_CONTROL_REG_ADDR 0xe460
#define ACAMERA_ISP_IRIDIX_REV_PERCEPT_CONTROL_OFFSET 0x20
#define ACAMERA_ISP_IRIDIX_REV_PERCEPT_CONTROL_FIELD_MASK 0xc

// args: data (2-bit)
static __inline void acamera_isp_iridix_rev_percept_control_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe460 );
    system_isp_write_32( base + 0xe460, ( ( ( uint32_t )( data & 0x3 ) ) << 2 ) | ( curr & 0xfffffff3 ) );
}
static __inline uint8_t acamera_isp_iridix_rev_percept_control_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe460 ) & 0xc ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: strength_inroi
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix strength inside ROI.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_STRENGTH_INROI_DEFAULT 512
#define ACAMERA_ISP_IRIDIX_STRENGTH_INROI_DATASIZE 10
#define ACAMERA_ISP_IRIDIX_STRENGTH_INROI_FIELD_OFFSET 16
#define ACAMERA_ISP_IRIDIX_STRENGTH_INROI_REG_ADDR 0xe460
#define ACAMERA_ISP_IRIDIX_STRENGTH_INROI_OFFSET 0x20
#define ACAMERA_ISP_IRIDIX_STRENGTH_INROI_FIELD_MASK 0x3ff0000

// args: data (10-bit)
static __inline void acamera_isp_iridix_strength_inroi_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe460 );
    system_isp_write_32( base + 0xe460, ( ( ( uint32_t )( data & 0x3ff ) ) << 16 ) | ( curr & 0xfc00ffff ) );
}
static __inline uint16_t acamera_isp_iridix_strength_inroi_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe460 ) & 0x3ff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: strength_outroi
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix strength outside ROI.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_STRENGTH_OUTROI_DEFAULT 512
#define ACAMERA_ISP_IRIDIX_STRENGTH_OUTROI_DATASIZE 10
#define ACAMERA_ISP_IRIDIX_STRENGTH_OUTROI_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_STRENGTH_OUTROI_REG_ADDR 0xe464
#define ACAMERA_ISP_IRIDIX_STRENGTH_OUTROI_OFFSET 0x24
#define ACAMERA_ISP_IRIDIX_STRENGTH_OUTROI_FIELD_MASK 0x3ff

// args: data (10-bit)
static __inline void acamera_isp_iridix_strength_outroi_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe464 );
    system_isp_write_32( base + 0xe464, ( ( ( uint32_t )( data & 0x3ff ) ) << 0 ) | ( curr & 0xfffffc00 ) );
}
static __inline uint16_t acamera_isp_iridix_strength_outroi_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe464 ) & 0x3ff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: roi_hor_start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Left edge of the ROI for strength modulation.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_ROI_HOR_START_DEFAULT 0
#define ACAMERA_ISP_IRIDIX_ROI_HOR_START_DATASIZE 16
#define ACAMERA_ISP_IRIDIX_ROI_HOR_START_FIELD_OFFSET 16
#define ACAMERA_ISP_IRIDIX_ROI_HOR_START_REG_ADDR 0xe464
#define ACAMERA_ISP_IRIDIX_ROI_HOR_START_OFFSET 0x24
#define ACAMERA_ISP_IRIDIX_ROI_HOR_START_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_iridix_roi_hor_start_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe464 );
    system_isp_write_32( base + 0xe464, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_iridix_roi_hor_start_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe464 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: roi_hor_end
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Right edge of the ROI for strength modulation.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_ROI_HOR_END_DEFAULT 65535
#define ACAMERA_ISP_IRIDIX_ROI_HOR_END_DATASIZE 16
#define ACAMERA_ISP_IRIDIX_ROI_HOR_END_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_ROI_HOR_END_REG_ADDR 0xe468
#define ACAMERA_ISP_IRIDIX_ROI_HOR_END_OFFSET 0x28
#define ACAMERA_ISP_IRIDIX_ROI_HOR_END_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_iridix_roi_hor_end_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe468 );
    system_isp_write_32( base + 0xe468, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_iridix_roi_hor_end_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe468 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: roi_ver_start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Top edge of the ROI for strength modulation.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_ROI_VER_START_DEFAULT 0
#define ACAMERA_ISP_IRIDIX_ROI_VER_START_DATASIZE 16
#define ACAMERA_ISP_IRIDIX_ROI_VER_START_FIELD_OFFSET 16
#define ACAMERA_ISP_IRIDIX_ROI_VER_START_REG_ADDR 0xe468
#define ACAMERA_ISP_IRIDIX_ROI_VER_START_OFFSET 0x28
#define ACAMERA_ISP_IRIDIX_ROI_VER_START_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_iridix_roi_ver_start_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe468 );
    system_isp_write_32( base + 0xe468, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_iridix_roi_ver_start_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe468 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: roi_ver_end
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bottom edge of the ROI for strength modulation.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_ROI_VER_END_DEFAULT 65535
#define ACAMERA_ISP_IRIDIX_ROI_VER_END_DATASIZE 16
#define ACAMERA_ISP_IRIDIX_ROI_VER_END_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_ROI_VER_END_REG_ADDR 0xe46c
#define ACAMERA_ISP_IRIDIX_ROI_VER_END_OFFSET 0x2c
#define ACAMERA_ISP_IRIDIX_ROI_VER_END_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_iridix_roi_ver_end_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe46c );
    system_isp_write_32( base + 0xe46c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_iridix_roi_ver_end_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe46c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: filter_mux
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0 = Iridix 7 algorithm, 1 = Iridix 8 algorithm
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_FILTER_MUX_DEFAULT 0
#define ACAMERA_ISP_IRIDIX_FILTER_MUX_DATASIZE 1
#define ACAMERA_ISP_IRIDIX_FILTER_MUX_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_FILTER_MUX_REG_ADDR 0xe470
#define ACAMERA_ISP_IRIDIX_FILTER_MUX_OFFSET 0x30
#define ACAMERA_ISP_IRIDIX_FILTER_MUX_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_iridix_filter_mux_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe470 );
    system_isp_write_32( base + 0xe470, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_iridix_filter_mux_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe470 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: svariance
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Spatial varience parameter for Iridix 8 algorithm.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_SVARIANCE_DEFAULT 0
#define ACAMERA_ISP_IRIDIX_SVARIANCE_DATASIZE 4
#define ACAMERA_ISP_IRIDIX_SVARIANCE_FIELD_OFFSET 8
#define ACAMERA_ISP_IRIDIX_SVARIANCE_REG_ADDR 0xe470
#define ACAMERA_ISP_IRIDIX_SVARIANCE_OFFSET 0x30
#define ACAMERA_ISP_IRIDIX_SVARIANCE_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_isp_iridix_svariance_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe470 );
    system_isp_write_32( base + 0xe470, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_isp_iridix_svariance_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe470 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: bright_pr
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bright area preservation parameter for Iridix 8 algorithm.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_BRIGHT_PR_DEFAULT 160
#define ACAMERA_ISP_IRIDIX_BRIGHT_PR_DATASIZE 8
#define ACAMERA_ISP_IRIDIX_BRIGHT_PR_FIELD_OFFSET 16
#define ACAMERA_ISP_IRIDIX_BRIGHT_PR_REG_ADDR 0xe470
#define ACAMERA_ISP_IRIDIX_BRIGHT_PR_OFFSET 0x30
#define ACAMERA_ISP_IRIDIX_BRIGHT_PR_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_iridix_bright_pr_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe470 );
    system_isp_write_32( base + 0xe470, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_iridix_bright_pr_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe470 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: contrast
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Contrast parameter for Iridix 8 algorithm.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_CONTRAST_DEFAULT 176
#define ACAMERA_ISP_IRIDIX_CONTRAST_DATASIZE 8
#define ACAMERA_ISP_IRIDIX_CONTRAST_FIELD_OFFSET 24
#define ACAMERA_ISP_IRIDIX_CONTRAST_REG_ADDR 0xe470
#define ACAMERA_ISP_IRIDIX_CONTRAST_OFFSET 0x30
#define ACAMERA_ISP_IRIDIX_CONTRAST_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_iridix_contrast_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe470 );
    system_isp_write_32( base + 0xe470, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_iridix_contrast_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe470 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: dark_enh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Dark enhancement parameter for Iridix 8 algorithm.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_DARK_ENH_DEFAULT 4096
#define ACAMERA_ISP_IRIDIX_DARK_ENH_DATASIZE 16
#define ACAMERA_ISP_IRIDIX_DARK_ENH_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_DARK_ENH_REG_ADDR 0xe474
#define ACAMERA_ISP_IRIDIX_DARK_ENH_OFFSET 0x34
#define ACAMERA_ISP_IRIDIX_DARK_ENH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_iridix_dark_enh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe474 );
    system_isp_write_32( base + 0xe474, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_iridix_dark_enh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe474 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: WB offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix Black level for white balance correction.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_WB_OFFSET_DEFAULT 0
#define ACAMERA_ISP_IRIDIX_WB_OFFSET_DATASIZE 24
#define ACAMERA_ISP_IRIDIX_WB_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_WB_OFFSET_REG_ADDR 0xe47c
#define ACAMERA_ISP_IRIDIX_WB_OFFSET_OFFSET 0x3c
#define ACAMERA_ISP_IRIDIX_WB_OFFSET_FIELD_MASK 0xffffff

// args: data (24-bit)
static __inline void acamera_isp_iridix_wb_offset_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe47c );
    system_isp_write_32( base + 0xe47c, ( ( ( uint32_t )( data & 0xffffff ) ) << 0 ) | ( curr & 0xff000000 ) );
}
static __inline uint32_t acamera_isp_iridix_wb_offset_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe47c ) & 0xffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain R
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix White balance gain for red channel.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_GAIN_R_DEFAULT 256
#define ACAMERA_ISP_IRIDIX_GAIN_R_DATASIZE 12
#define ACAMERA_ISP_IRIDIX_GAIN_R_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_GAIN_R_REG_ADDR 0xe480
#define ACAMERA_ISP_IRIDIX_GAIN_R_OFFSET 0x40
#define ACAMERA_ISP_IRIDIX_GAIN_R_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_iridix_gain_r_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe480 );
    system_isp_write_32( base + 0xe480, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_iridix_gain_r_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe480 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain Gr
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix White balance gain for green channel on red/green lins.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_GAIN_GR_DEFAULT 256
#define ACAMERA_ISP_IRIDIX_GAIN_GR_DATASIZE 12
#define ACAMERA_ISP_IRIDIX_GAIN_GR_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_GAIN_GR_REG_ADDR 0xe484
#define ACAMERA_ISP_IRIDIX_GAIN_GR_OFFSET 0x44
#define ACAMERA_ISP_IRIDIX_GAIN_GR_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_iridix_gain_gr_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe484 );
    system_isp_write_32( base + 0xe484, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_iridix_gain_gr_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe484 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain Gb
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix White balance gain for green channel on blue/green lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_GAIN_GB_DEFAULT 256
#define ACAMERA_ISP_IRIDIX_GAIN_GB_DATASIZE 12
#define ACAMERA_ISP_IRIDIX_GAIN_GB_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_GAIN_GB_REG_ADDR 0xe488
#define ACAMERA_ISP_IRIDIX_GAIN_GB_OFFSET 0x48
#define ACAMERA_ISP_IRIDIX_GAIN_GB_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_iridix_gain_gb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe488 );
    system_isp_write_32( base + 0xe488, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_iridix_gain_gb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe488 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain B
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix White balance gain for blue channel.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_GAIN_B_DEFAULT 256
#define ACAMERA_ISP_IRIDIX_GAIN_B_DATASIZE 12
#define ACAMERA_ISP_IRIDIX_GAIN_B_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_GAIN_B_REG_ADDR 0xe48c
#define ACAMERA_ISP_IRIDIX_GAIN_B_OFFSET 0x4c
#define ACAMERA_ISP_IRIDIX_GAIN_B_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_iridix_gain_b_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe48c );
    system_isp_write_32( base + 0xe48c, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_iridix_gain_b_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe48c ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Fwd Alpha
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Parameter for the Iridix forward perceptual transform curve.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_FWD_ALPHA_DEFAULT 4096
#define ACAMERA_ISP_IRIDIX_FWD_ALPHA_DATASIZE 18
#define ACAMERA_ISP_IRIDIX_FWD_ALPHA_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_FWD_ALPHA_REG_ADDR 0xe490
#define ACAMERA_ISP_IRIDIX_FWD_ALPHA_OFFSET 0x50
#define ACAMERA_ISP_IRIDIX_FWD_ALPHA_FIELD_MASK 0x3ffff

// args: data (18-bit)
static __inline void acamera_isp_iridix_fwd_alpha_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe490 );
    system_isp_write_32( base + 0xe490, ( ( ( uint32_t )( data & 0x3ffff ) ) << 0 ) | ( curr & 0xfffc0000 ) );
}
static __inline uint32_t acamera_isp_iridix_fwd_alpha_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe490 ) & 0x3ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Rev Alpha
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Parameter for the Iridix reverse perceptual transform curve.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_REV_ALPHA_DEFAULT 4096
#define ACAMERA_ISP_IRIDIX_REV_ALPHA_DATASIZE 18
#define ACAMERA_ISP_IRIDIX_REV_ALPHA_FIELD_OFFSET 0
#define ACAMERA_ISP_IRIDIX_REV_ALPHA_REG_ADDR 0xe494
#define ACAMERA_ISP_IRIDIX_REV_ALPHA_OFFSET 0x54
#define ACAMERA_ISP_IRIDIX_REV_ALPHA_FIELD_MASK 0x3ffff

// args: data (18-bit)
static __inline void acamera_isp_iridix_rev_alpha_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe494 );
    system_isp_write_32( base + 0xe494, ( ( ( uint32_t )( data & 0x3ffff ) ) << 0 ) | ( curr & 0xfffc0000 ) );
}
static __inline uint32_t acamera_isp_iridix_rev_alpha_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe494 ) & 0x3ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Demosaic
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bayer Demosaic
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: VH Slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Slope of vertical/horizontal blending threshold in 4.4 logarithmic format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_VH_SLOPE_DEFAULT 192
#define ACAMERA_ISP_DEMOSAIC_VH_SLOPE_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_VH_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_VH_SLOPE_REG_ADDR 0xe4c0
#define ACAMERA_ISP_DEMOSAIC_VH_SLOPE_OFFSET 0x0
#define ACAMERA_ISP_DEMOSAIC_VH_SLOPE_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_vh_slope_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4c0 );
    system_isp_write_32( base + 0xe4c0, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_vh_slope_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe4c0 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AA Slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Slope of angular blending threshold in 4.4 logarithmic format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_AA_SLOPE_DEFAULT 192
#define ACAMERA_ISP_DEMOSAIC_AA_SLOPE_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_AA_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_AA_SLOPE_REG_ADDR 0xe4c4
#define ACAMERA_ISP_DEMOSAIC_AA_SLOPE_OFFSET 0x4
#define ACAMERA_ISP_DEMOSAIC_AA_SLOPE_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_aa_slope_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4c4 );
    system_isp_write_32( base + 0xe4c4, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_aa_slope_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe4c4 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: VA Slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Slope of VH-AA (VA) blending threshold in 4.4 logarithmic format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_VA_SLOPE_DEFAULT 170
#define ACAMERA_ISP_DEMOSAIC_VA_SLOPE_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_VA_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_VA_SLOPE_REG_ADDR 0xe4c8
#define ACAMERA_ISP_DEMOSAIC_VA_SLOPE_OFFSET 0x8
#define ACAMERA_ISP_DEMOSAIC_VA_SLOPE_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_va_slope_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4c8 );
    system_isp_write_32( base + 0xe4c8, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_va_slope_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe4c8 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: UU Slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Slope of undefined blending threshold in 4.4 logarithmic format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_UU_SLOPE_DEFAULT 173
#define ACAMERA_ISP_DEMOSAIC_UU_SLOPE_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_UU_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_UU_SLOPE_REG_ADDR 0xe4cc
#define ACAMERA_ISP_DEMOSAIC_UU_SLOPE_OFFSET 0xc
#define ACAMERA_ISP_DEMOSAIC_UU_SLOPE_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_uu_slope_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4cc );
    system_isp_write_32( base + 0xe4cc, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_uu_slope_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe4cc ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Sat Slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Slope of saturation blending threshold in linear format 2.6
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_SAT_SLOPE_DEFAULT 93
#define ACAMERA_ISP_DEMOSAIC_SAT_SLOPE_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_SAT_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_SAT_SLOPE_REG_ADDR 0xe4d0
#define ACAMERA_ISP_DEMOSAIC_SAT_SLOPE_OFFSET 0x10
#define ACAMERA_ISP_DEMOSAIC_SAT_SLOPE_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_sat_slope_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4d0 );
    system_isp_write_32( base + 0xe4d0, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_sat_slope_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe4d0 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: VH Thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for the range of vertical/horizontal blending
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_VH_THRESH_DEFAULT 305
#define ACAMERA_ISP_DEMOSAIC_VH_THRESH_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_VH_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_VH_THRESH_REG_ADDR 0xe4d4
#define ACAMERA_ISP_DEMOSAIC_VH_THRESH_OFFSET 0x14
#define ACAMERA_ISP_DEMOSAIC_VH_THRESH_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_vh_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4d4 );
    system_isp_write_32( base + 0xe4d4, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_vh_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe4d4 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AA Thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for the range of angular blending
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_AA_THRESH_DEFAULT 160
#define ACAMERA_ISP_DEMOSAIC_AA_THRESH_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_AA_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_AA_THRESH_REG_ADDR 0xe4d8
#define ACAMERA_ISP_DEMOSAIC_AA_THRESH_OFFSET 0x18
#define ACAMERA_ISP_DEMOSAIC_AA_THRESH_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_aa_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4d8 );
    system_isp_write_32( base + 0xe4d8, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_aa_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe4d8 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: VA Thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for the range of VA blending
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_VA_THRESH_DEFAULT 112
#define ACAMERA_ISP_DEMOSAIC_VA_THRESH_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_VA_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_VA_THRESH_REG_ADDR 0xe4dc
#define ACAMERA_ISP_DEMOSAIC_VA_THRESH_OFFSET 0x1c
#define ACAMERA_ISP_DEMOSAIC_VA_THRESH_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_va_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4dc );
    system_isp_write_32( base + 0xe4dc, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_va_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe4dc ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: UU Thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for the range of undefined blending
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_UU_THRESH_DEFAULT 369
#define ACAMERA_ISP_DEMOSAIC_UU_THRESH_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_UU_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_UU_THRESH_REG_ADDR 0xe4e0
#define ACAMERA_ISP_DEMOSAIC_UU_THRESH_OFFSET 0x20
#define ACAMERA_ISP_DEMOSAIC_UU_THRESH_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_uu_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4e0 );
    system_isp_write_32( base + 0xe4e0, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_uu_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe4e0 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Sat Thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for the range of saturation blending  in signed 2.9 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_SAT_THRESH_DEFAULT 369
#define ACAMERA_ISP_DEMOSAIC_SAT_THRESH_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_SAT_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_SAT_THRESH_REG_ADDR 0xe4e4
#define ACAMERA_ISP_DEMOSAIC_SAT_THRESH_OFFSET 0x24
#define ACAMERA_ISP_DEMOSAIC_SAT_THRESH_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_sat_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4e4 );
    system_isp_write_32( base + 0xe4e4, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_sat_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe4e4 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: VH Offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for vertical/horizontal blending threshold
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_VH_OFFSET_DEFAULT 2048
#define ACAMERA_ISP_DEMOSAIC_VH_OFFSET_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_VH_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_VH_OFFSET_REG_ADDR 0xe4e8
#define ACAMERA_ISP_DEMOSAIC_VH_OFFSET_OFFSET 0x28
#define ACAMERA_ISP_DEMOSAIC_VH_OFFSET_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_vh_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4e8 );
    system_isp_write_32( base + 0xe4e8, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_vh_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe4e8 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AA Offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for angular blending threshold
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_AA_OFFSET_DEFAULT 2048
#define ACAMERA_ISP_DEMOSAIC_AA_OFFSET_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_AA_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_AA_OFFSET_REG_ADDR 0xe4ec
#define ACAMERA_ISP_DEMOSAIC_AA_OFFSET_OFFSET 0x2c
#define ACAMERA_ISP_DEMOSAIC_AA_OFFSET_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_aa_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4ec );
    system_isp_write_32( base + 0xe4ec, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_aa_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe4ec ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: VA Offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for VA blending threshold
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_VA_OFFSET_DEFAULT 2048
#define ACAMERA_ISP_DEMOSAIC_VA_OFFSET_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_VA_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_VA_OFFSET_REG_ADDR 0xe4f0
#define ACAMERA_ISP_DEMOSAIC_VA_OFFSET_OFFSET 0x30
#define ACAMERA_ISP_DEMOSAIC_VA_OFFSET_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_va_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4f0 );
    system_isp_write_32( base + 0xe4f0, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_va_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe4f0 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: UU Offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for undefined blending threshold
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_UU_OFFSET_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_UU_OFFSET_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_UU_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_UU_OFFSET_REG_ADDR 0xe4f4
#define ACAMERA_ISP_DEMOSAIC_UU_OFFSET_OFFSET 0x34
#define ACAMERA_ISP_DEMOSAIC_UU_OFFSET_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_uu_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4f4 );
    system_isp_write_32( base + 0xe4f4, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_uu_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe4f4 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Sat Offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for saturation blending threshold in signed 2.9 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_SAT_OFFSET_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_SAT_OFFSET_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_SAT_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_SAT_OFFSET_REG_ADDR 0xe4f8
#define ACAMERA_ISP_DEMOSAIC_SAT_OFFSET_OFFSET 0x38
#define ACAMERA_ISP_DEMOSAIC_SAT_OFFSET_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_sat_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4f8 );
    system_isp_write_32( base + 0xe4f8, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_sat_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe4f8 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: sharp_alt_d
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Directional sharp mask strength in signed 4.4 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_D_DEFAULT 48
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_D_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_D_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_D_REG_ADDR 0xe4fc
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_D_OFFSET 0x3c
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_D_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_sharp_alt_d_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe4fc );
    system_isp_write_32( base + 0xe4fc, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_sharp_alt_d_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe4fc ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: sharp_alt_ud
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Non-directional sharp mask strength in signed 4.4 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_UD_DEFAULT 32
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_UD_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_UD_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_UD_REG_ADDR 0xe500
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_UD_OFFSET 0x40
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_UD_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_sharp_alt_ud_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe500 );
    system_isp_write_32( base + 0xe500, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_sharp_alt_ud_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe500 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lum_thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Luminance threshold for directional sharpening
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_LUM_THRESH_DEFAULT 96
#define ACAMERA_ISP_DEMOSAIC_LUM_THRESH_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_LUM_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_LUM_THRESH_REG_ADDR 0xe504
#define ACAMERA_ISP_DEMOSAIC_LUM_THRESH_OFFSET 0x44
#define ACAMERA_ISP_DEMOSAIC_LUM_THRESH_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_lum_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe504 );
    system_isp_write_32( base + 0xe504, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_lum_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe504 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: np_offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile offset in logarithmic 4.4 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_NP_OFFSET_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_NP_OFFSET_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_NP_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_NP_OFFSET_REG_ADDR 0xe508
#define ACAMERA_ISP_DEMOSAIC_NP_OFFSET_OFFSET 0x48
#define ACAMERA_ISP_DEMOSAIC_NP_OFFSET_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_np_offset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe508 );
    system_isp_write_32( base + 0xe508, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_np_offset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe508 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Dmsc config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Debug output select. Set to 0x00 for normal operation.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_DMSC_CONFIG_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_DMSC_CONFIG_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_DMSC_CONFIG_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_DMSC_CONFIG_REG_ADDR 0xe50c
#define ACAMERA_ISP_DEMOSAIC_DMSC_CONFIG_OFFSET 0x4c
#define ACAMERA_ISP_DEMOSAIC_DMSC_CONFIG_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_dmsc_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe50c );
    system_isp_write_32( base + 0xe50c, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_dmsc_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe50c ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AC Thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold for the range of AC blending in signed 2.9 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_AC_THRESH_DEFAULT 435
#define ACAMERA_ISP_DEMOSAIC_AC_THRESH_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_AC_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_AC_THRESH_REG_ADDR 0xe510
#define ACAMERA_ISP_DEMOSAIC_AC_THRESH_OFFSET 0x50
#define ACAMERA_ISP_DEMOSAIC_AC_THRESH_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_ac_thresh_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe510 );
    system_isp_write_32( base + 0xe510, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_ac_thresh_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe510 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AC Slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Slope of AC blending threshold in linear format 2.6
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_AC_SLOPE_DEFAULT 207
#define ACAMERA_ISP_DEMOSAIC_AC_SLOPE_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_AC_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_AC_SLOPE_REG_ADDR 0xe514
#define ACAMERA_ISP_DEMOSAIC_AC_SLOPE_OFFSET 0x54
#define ACAMERA_ISP_DEMOSAIC_AC_SLOPE_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_ac_slope_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe514 );
    system_isp_write_32( base + 0xe514, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_ac_slope_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe514 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AC Offset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for AC blending threshold in signed 2.9 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_AC_OFFSET_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_AC_OFFSET_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_AC_OFFSET_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_AC_OFFSET_REG_ADDR 0xe518
#define ACAMERA_ISP_DEMOSAIC_AC_OFFSET_OFFSET 0x58
#define ACAMERA_ISP_DEMOSAIC_AC_OFFSET_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_ac_offset_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe518 );
    system_isp_write_32( base + 0xe518, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_ac_offset_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe518 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: FC Slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Slope (strength) of false color correction
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_FC_SLOPE_DEFAULT 128
#define ACAMERA_ISP_DEMOSAIC_FC_SLOPE_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_FC_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_FC_SLOPE_REG_ADDR 0xe51c
#define ACAMERA_ISP_DEMOSAIC_FC_SLOPE_OFFSET 0x5c
#define ACAMERA_ISP_DEMOSAIC_FC_SLOPE_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_fc_slope_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe51c );
    system_isp_write_32( base + 0xe51c, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_fc_slope_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe51c ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: FC Alias Slope
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Slope (strength) of false colour correction after blending with saturation value in 2.6 unsigned format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_SLOPE_DEFAULT 85
#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_SLOPE_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_SLOPE_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_SLOPE_REG_ADDR 0xe520
#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_SLOPE_OFFSET 0x60
#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_SLOPE_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_fc_alias_slope_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe520 );
    system_isp_write_32( base + 0xe520, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_fc_alias_slope_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe520 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: FC Alias Thresh
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Threshold of false colour correction after blending with saturation valuet in in 0.8 unsigned format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_THRESH_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_THRESH_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_THRESH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_THRESH_REG_ADDR 0xe524
#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_THRESH_OFFSET 0x64
#define ACAMERA_ISP_DEMOSAIC_FC_ALIAS_THRESH_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_fc_alias_thresh_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe524 );
    system_isp_write_32( base + 0xe524, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_fc_alias_thresh_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe524 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: NP off
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile black level offset
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_NP_OFF_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_NP_OFF_DATASIZE 7
#define ACAMERA_ISP_DEMOSAIC_NP_OFF_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_NP_OFF_REG_ADDR 0xe52c
#define ACAMERA_ISP_DEMOSAIC_NP_OFF_OFFSET 0x6c
#define ACAMERA_ISP_DEMOSAIC_NP_OFF_FIELD_MASK 0x7f

// args: data (7-bit)
static __inline void acamera_isp_demosaic_np_off_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe52c );
    system_isp_write_32( base + 0xe52c, ( ( ( uint32_t )( data & 0x7f ) ) << 0 ) | ( curr & 0xffffff80 ) );
}
static __inline uint8_t acamera_isp_demosaic_np_off_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe52c ) & 0x7f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: NP off reflect
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//          Defines how values below black level are obtained.
//          0: Repeat the first table entry.
//          1: Reflect the noise profile curve below black level.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_NP_OFF_REFLECT_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_NP_OFF_REFLECT_DATASIZE 1
#define ACAMERA_ISP_DEMOSAIC_NP_OFF_REFLECT_FIELD_OFFSET 7
#define ACAMERA_ISP_DEMOSAIC_NP_OFF_REFLECT_REG_ADDR 0xe52c
#define ACAMERA_ISP_DEMOSAIC_NP_OFF_REFLECT_OFFSET 0x6c
#define ACAMERA_ISP_DEMOSAIC_NP_OFF_REFLECT_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_demosaic_np_off_reflect_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe52c );
    system_isp_write_32( base + 0xe52c, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_demosaic_np_off_reflect_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe52c ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: sharp_alt_ld
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sharpen strength for L_Ld in unsigned 4.4 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LD_DEFAULT 16
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LD_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LD_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LD_REG_ADDR 0xe530
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LD_OFFSET 0x70
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LD_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_demosaic_sharp_alt_ld_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe530 );
    system_isp_write_32( base + 0xe530, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_demosaic_sharp_alt_ld_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe530 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: sharp_alt_ldu
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sharpen strength for L_Ldu in unsigned 4.4 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LDU_DEFAULT 16
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LDU_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LDU_FIELD_OFFSET 8
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LDU_REG_ADDR 0xe530
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LDU_OFFSET 0x70
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LDU_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_isp_demosaic_sharp_alt_ldu_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe530 );
    system_isp_write_32( base + 0xe530, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_isp_demosaic_sharp_alt_ldu_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe530 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: sharp_alt_lu
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sharpen strength for L_Lu in unsigned 4.4 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LU_DEFAULT 16
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LU_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LU_FIELD_OFFSET 16
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LU_REG_ADDR 0xe530
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LU_OFFSET 0x70
#define ACAMERA_ISP_DEMOSAIC_SHARP_ALT_LU_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_demosaic_sharp_alt_lu_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe530 );
    system_isp_write_32( base + 0xe530, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_demosaic_sharp_alt_lu_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe530 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: sad_amp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sad amplifier in unsigned 4.4 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_SAD_AMP_DEFAULT 16
#define ACAMERA_ISP_DEMOSAIC_SAD_AMP_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_SAD_AMP_FIELD_OFFSET 24
#define ACAMERA_ISP_DEMOSAIC_SAD_AMP_REG_ADDR 0xe530
#define ACAMERA_ISP_DEMOSAIC_SAD_AMP_OFFSET 0x70
#define ACAMERA_ISP_DEMOSAIC_SAD_AMP_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_demosaic_sad_amp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe530 );
    system_isp_write_32( base + 0xe530, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_demosaic_sad_amp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe530 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: min_d_strength
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Min threshold for the directional L_L in signed 2's complement s.12 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_MIN_D_STRENGTH_DEFAULT 7987
#define ACAMERA_ISP_DEMOSAIC_MIN_D_STRENGTH_DATASIZE 15
#define ACAMERA_ISP_DEMOSAIC_MIN_D_STRENGTH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_MIN_D_STRENGTH_REG_ADDR 0xe534
#define ACAMERA_ISP_DEMOSAIC_MIN_D_STRENGTH_OFFSET 0x74
#define ACAMERA_ISP_DEMOSAIC_MIN_D_STRENGTH_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_demosaic_min_d_strength_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe534 );
    system_isp_write_32( base + 0xe534, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_demosaic_min_d_strength_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe534 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: min_ud_strength
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Min threshold for the un-directional L_Lu in signed 2's complement s.12 format
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_MIN_UD_STRENGTH_DEFAULT 8008
#define ACAMERA_ISP_DEMOSAIC_MIN_UD_STRENGTH_DATASIZE 15
#define ACAMERA_ISP_DEMOSAIC_MIN_UD_STRENGTH_FIELD_OFFSET 16
#define ACAMERA_ISP_DEMOSAIC_MIN_UD_STRENGTH_REG_ADDR 0xe534
#define ACAMERA_ISP_DEMOSAIC_MIN_UD_STRENGTH_OFFSET 0x74
#define ACAMERA_ISP_DEMOSAIC_MIN_UD_STRENGTH_FIELD_MASK 0x7fff0000

// args: data (15-bit)
static __inline void acamera_isp_demosaic_min_ud_strength_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe534 );
    system_isp_write_32( base + 0xe534, ( ( ( uint32_t )( data & 0x7fff ) ) << 16 ) | ( curr & 0x8000ffff ) );
}
static __inline uint16_t acamera_isp_demosaic_min_ud_strength_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe534 ) & 0x7fff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: sharpen_alg_select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// To select new sharp algorithm or not
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_SHARPEN_ALG_SELECT_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_SHARPEN_ALG_SELECT_DATASIZE 1
#define ACAMERA_ISP_DEMOSAIC_SHARPEN_ALG_SELECT_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_SHARPEN_ALG_SELECT_REG_ADDR 0xe538
#define ACAMERA_ISP_DEMOSAIC_SHARPEN_ALG_SELECT_OFFSET 0x78
#define ACAMERA_ISP_DEMOSAIC_SHARPEN_ALG_SELECT_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_demosaic_sharpen_alg_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe538 );
    system_isp_write_32( base + 0xe538, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_demosaic_sharpen_alg_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe538 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Demosaic RGBIR
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// RGBIR Demosaic and Correction
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: RGBIr config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Debug modes of the block.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_RGBIR_CONFIG_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_RGBIR_CONFIG_DATASIZE 3
#define ACAMERA_ISP_DEMOSAIC_RGBIR_RGBIR_CONFIG_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_RGBIR_CONFIG_REG_ADDR 0xe540
#define ACAMERA_ISP_DEMOSAIC_RGBIR_RGBIR_CONFIG_OFFSET 0x0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_RGBIR_CONFIG_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_demosaic_rgbir_rgbir_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe540 );
    system_isp_write_32( base + 0xe540, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_demosaic_rgbir_rgbir_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe540 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Clip Level
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel values above this are deemed to be clipped
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_LEVEL_DEFAULT 3994
#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_LEVEL_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_LEVEL_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_LEVEL_REG_ADDR 0xe548
#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_LEVEL_OFFSET 0x8
#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_LEVEL_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_rgbir_clip_level_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe548 );
    system_isp_write_32( base + 0xe548, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_clip_level_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe548 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Clip Debloom
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Debloom level
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_DEBLOOM_DEFAULT 3994
#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_DEBLOOM_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_DEBLOOM_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_DEBLOOM_REG_ADDR 0xe54c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_DEBLOOM_OFFSET 0xc
#define ACAMERA_ISP_DEMOSAIC_RGBIR_CLIP_DEBLOOM_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_rgbir_clip_debloom_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe54c );
    system_isp_write_32( base + 0xe54c, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_clip_debloom_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe54c ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT00_DEFAULT 1024
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT00_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT00_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT00_REG_ADDR 0xe550
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT00_OFFSET 0x10
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT00_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat00_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe550 );
    system_isp_write_32( base + 0xe550, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat00_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe550 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT01_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT01_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT01_FIELD_OFFSET 16
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT01_REG_ADDR 0xe550
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT01_OFFSET 0x10
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT01_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat01_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe550 );
    system_isp_write_32( base + 0xe550, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat01_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe550 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat02
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT02_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT02_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT02_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT02_REG_ADDR 0xe554
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT02_OFFSET 0x14
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT02_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat02_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe554 );
    system_isp_write_32( base + 0xe554, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat02_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe554 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat03
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT03_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT03_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT03_FIELD_OFFSET 16
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT03_REG_ADDR 0xe554
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT03_OFFSET 0x14
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT03_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat03_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe554 );
    system_isp_write_32( base + 0xe554, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat03_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe554 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT10_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT10_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT10_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT10_REG_ADDR 0xe558
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT10_OFFSET 0x18
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT10_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe558 );
    system_isp_write_32( base + 0xe558, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe558 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT11_DEFAULT 1024
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT11_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT11_FIELD_OFFSET 16
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT11_REG_ADDR 0xe558
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT11_OFFSET 0x18
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT11_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe558 );
    system_isp_write_32( base + 0xe558, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe558 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT12_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT12_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT12_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT12_REG_ADDR 0xe55c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT12_OFFSET 0x1c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT12_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe55c );
    system_isp_write_32( base + 0xe55c, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe55c ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT13_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT13_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT13_FIELD_OFFSET 16
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT13_REG_ADDR 0xe55c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT13_OFFSET 0x1c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT13_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe55c );
    system_isp_write_32( base + 0xe55c, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe55c ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT20_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT20_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT20_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT20_REG_ADDR 0xe560
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT20_OFFSET 0x20
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT20_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat20_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe560 );
    system_isp_write_32( base + 0xe560, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat20_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe560 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT21_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT21_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT21_FIELD_OFFSET 16
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT21_REG_ADDR 0xe560
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT21_OFFSET 0x20
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT21_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat21_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe560 );
    system_isp_write_32( base + 0xe560, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat21_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe560 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT22_DEFAULT 1024
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT22_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT22_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT22_REG_ADDR 0xe564
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT22_OFFSET 0x24
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT22_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat22_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe564 );
    system_isp_write_32( base + 0xe564, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat22_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe564 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT23_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT23_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT23_FIELD_OFFSET 16
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT23_REG_ADDR 0xe564
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT23_OFFSET 0x24
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT23_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat23_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe564 );
    system_isp_write_32( base + 0xe564, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat23_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe564 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT30_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT30_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT30_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT30_REG_ADDR 0xe568
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT30_OFFSET 0x28
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT30_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat30_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe568 );
    system_isp_write_32( base + 0xe568, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat30_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe568 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT31_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT31_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT31_FIELD_OFFSET 16
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT31_REG_ADDR 0xe568
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT31_OFFSET 0x28
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT31_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat31_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe568 );
    system_isp_write_32( base + 0xe568, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat31_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe568 ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT32_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT32_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT32_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT32_REG_ADDR 0xe56c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT32_OFFSET 0x2c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT32_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat32_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe56c );
    system_isp_write_32( base + 0xe56c, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat32_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe56c ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: IR Correct Mat33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Coefficients for IR correction in format 2.10. Coefficients on main diagonal should be at least 256 (0.25).
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT33_DEFAULT 1024
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT33_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT33_FIELD_OFFSET 16
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT33_REG_ADDR 0xe56c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT33_OFFSET 0x2c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_IR_CORRECT_MAT33_FIELD_MASK 0xfff0000

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_ir_correct_mat33_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe56c );
    system_isp_write_32( base + 0xe56c, ( ( ( uint32_t )( data & 0xfff ) ) << 16 ) | ( curr & 0xf000ffff ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_ir_correct_mat33_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe56c ) & 0xfff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain R
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// White Balance gain for Red channel of output
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_R_DEFAULT 256
#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_R_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_R_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_R_REG_ADDR 0xe570
#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_R_OFFSET 0x30
#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_R_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_gain_r_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe570 );
    system_isp_write_32( base + 0xe570, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_gain_r_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe570 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain B
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// White Balance gain for Blue channel of output
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_B_DEFAULT 256
#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_B_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_B_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_B_REG_ADDR 0xe574
#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_B_OFFSET 0x34
#define ACAMERA_ISP_DEMOSAIC_RGBIR_GAIN_B_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_gain_b_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe574 );
    system_isp_write_32( base + 0xe574, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_gain_b_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe574 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Static Gain R
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Static White Balance gain for Red channel of input
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_R_DEFAULT 256
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_R_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_R_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_R_REG_ADDR 0xe578
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_R_OFFSET 0x38
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_R_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_static_gain_r_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe578 );
    system_isp_write_32( base + 0xe578, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_static_gain_r_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe578 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Static Gain B
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Static White Balance gain for Blue channel of input
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_B_DEFAULT 256
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_B_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_B_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_B_REG_ADDR 0xe57c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_B_OFFSET 0x3c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_B_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_static_gain_b_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe57c );
    system_isp_write_32( base + 0xe57c, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_static_gain_b_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe57c ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Static Gain I
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Static White Balance gain for IR channel of input
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_I_DEFAULT 256
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_I_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_I_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_I_REG_ADDR 0xe580
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_I_OFFSET 0x40
#define ACAMERA_ISP_DEMOSAIC_RGBIR_STATIC_GAIN_I_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_static_gain_i_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe580 );
    system_isp_write_32( base + 0xe580, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_static_gain_i_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe580 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Interpolation Directionality
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sensitivity of directional interpolation to local gradient. Lower value means more sensitive. Increasing value will eventually result in bilinear demosaic
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_INTERPOLATION_DIRECTIONALITY_DEFAULT 256
#define ACAMERA_ISP_DEMOSAIC_RGBIR_INTERPOLATION_DIRECTIONALITY_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_RGBIR_INTERPOLATION_DIRECTIONALITY_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_INTERPOLATION_DIRECTIONALITY_REG_ADDR 0xe584
#define ACAMERA_ISP_DEMOSAIC_RGBIR_INTERPOLATION_DIRECTIONALITY_OFFSET 0x44
#define ACAMERA_ISP_DEMOSAIC_RGBIR_INTERPOLATION_DIRECTIONALITY_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_rgbir_interpolation_directionality_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe584 );
    system_isp_write_32( base + 0xe584, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_interpolation_directionality_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe584 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: FC Low
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Value to start Colour Aliasing Alpha ramp
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_LOW_DEFAULT 573
#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_LOW_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_LOW_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_LOW_REG_ADDR 0xe588
#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_LOW_OFFSET 0x48
#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_LOW_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_rgbir_fc_low_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe588 );
    system_isp_write_32( base + 0xe588, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_fc_low_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe588 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: FC Grad
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gradient of Colour Aliasing Alpha ramp
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_GRAD_DEFAULT 229
#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_GRAD_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_GRAD_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_GRAD_REG_ADDR 0xe58c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_GRAD_OFFSET 0x4c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_FC_GRAD_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_fc_grad_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe58c );
    system_isp_write_32( base + 0xe58c, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_fc_grad_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe58c ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Sharp Low
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sharpening strength in flat regions
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LOW_DEFAULT 51
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LOW_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LOW_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LOW_REG_ADDR 0xe590
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LOW_OFFSET 0x50
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LOW_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_sharp_low_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe590 );
    system_isp_write_32( base + 0xe590, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_sharp_low_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe590 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Sharp High
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sharpening strength in edge and detail regions
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_HIGH_DEFAULT 1638
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_HIGH_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_HIGH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_HIGH_REG_ADDR 0xe594
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_HIGH_OFFSET 0x54
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_HIGH_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rgbir_sharp_high_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe594 );
    system_isp_write_32( base + 0xe594, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_sharp_high_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe594 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Sharp Limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Limit sharpening amount to prevent overshoot
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LIMIT_DEFAULT 369
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LIMIT_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LIMIT_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LIMIT_REG_ADDR 0xe598
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LIMIT_OFFSET 0x58
#define ACAMERA_ISP_DEMOSAIC_RGBIR_SHARP_LIMIT_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_rgbir_sharp_limit_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe598 );
    system_isp_write_32( base + 0xe598, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rgbir_sharp_limit_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe598 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Declip Mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Method of declipping in regions where R, G, and B are all clipped
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RGBIR_DECLIP_MODE_DEFAULT 1
#define ACAMERA_ISP_DEMOSAIC_RGBIR_DECLIP_MODE_DATASIZE 1
#define ACAMERA_ISP_DEMOSAIC_RGBIR_DECLIP_MODE_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RGBIR_DECLIP_MODE_REG_ADDR 0xe59c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_DECLIP_MODE_OFFSET 0x5c
#define ACAMERA_ISP_DEMOSAIC_RGBIR_DECLIP_MODE_FIELD_MASK 0x1
#define ACAMERA_ISP_DEMOSAIC_RGBIR_DECLIP_MODE_USE_LOCAL_INTENSITY_TO_ESTIMATE ( 0 )
#define ACAMERA_ISP_DEMOSAIC_RGBIR_DECLIP_MODE_USE_CONSTANT_VALUE_OF_1 ( 1 )

// args: data (1-bit)
static __inline void acamera_isp_demosaic_rgbir_declip_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe59c );
    system_isp_write_32( base + 0xe59c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_demosaic_rgbir_declip_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe59c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Demosaic RCCC
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Gain R
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Gain of Red channel (relative to the clear channel) - used for WDR feature.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RCCC_GAIN_R_DEFAULT 598
#define ACAMERA_ISP_DEMOSAIC_RCCC_GAIN_R_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RCCC_GAIN_R_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_GAIN_R_REG_ADDR 0xe5c4
#define ACAMERA_ISP_DEMOSAIC_RCCC_GAIN_R_OFFSET 0x4
#define ACAMERA_ISP_DEMOSAIC_RCCC_GAIN_R_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rccc_gain_r_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe5c4 );
    system_isp_write_32( base + 0xe5c4, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rccc_gain_r_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe5c4 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Interpolation directionality
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sensitivity of directional interpolation to local gradient. Lower value means more sensitive. Increasing value will eventually result in bilinear demosaic.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RCCC_INTERPOLATION_DIRECTIONALITY_DEFAULT 4132
#define ACAMERA_ISP_DEMOSAIC_RCCC_INTERPOLATION_DIRECTIONALITY_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_RCCC_INTERPOLATION_DIRECTIONALITY_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_INTERPOLATION_DIRECTIONALITY_REG_ADDR 0xe5c8
#define ACAMERA_ISP_DEMOSAIC_RCCC_INTERPOLATION_DIRECTIONALITY_OFFSET 0x8
#define ACAMERA_ISP_DEMOSAIC_RCCC_INTERPOLATION_DIRECTIONALITY_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_rccc_interpolation_directionality_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe5c8 );
    system_isp_write_32( base + 0xe5c8, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rccc_interpolation_directionality_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe5c8 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: C2 imbalance strength
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Strength of correction for clear channel directly above/below red pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RCCC_C2_IMBALANCE_STRENGTH_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_C2_IMBALANCE_STRENGTH_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RCCC_C2_IMBALANCE_STRENGTH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_C2_IMBALANCE_STRENGTH_REG_ADDR 0xe5cc
#define ACAMERA_ISP_DEMOSAIC_RCCC_C2_IMBALANCE_STRENGTH_OFFSET 0xc
#define ACAMERA_ISP_DEMOSAIC_RCCC_C2_IMBALANCE_STRENGTH_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rccc_c2_imbalance_strength_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe5cc );
    system_isp_write_32( base + 0xe5cc, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rccc_c2_imbalance_strength_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe5cc ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: C3 imbalance strength
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Strength of correction for clear channel diagonally between red pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RCCC_C3_IMBALANCE_STRENGTH_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_C3_IMBALANCE_STRENGTH_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RCCC_C3_IMBALANCE_STRENGTH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_C3_IMBALANCE_STRENGTH_REG_ADDR 0xe5d0
#define ACAMERA_ISP_DEMOSAIC_RCCC_C3_IMBALANCE_STRENGTH_OFFSET 0x10
#define ACAMERA_ISP_DEMOSAIC_RCCC_C3_IMBALANCE_STRENGTH_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rccc_c3_imbalance_strength_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe5d0 );
    system_isp_write_32( base + 0xe5d0, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rccc_c3_imbalance_strength_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe5d0 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Flatness value
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sensitivity of directional interpolation to local gradient, in interpolation of C values at R location. Lower value means more sensitive.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RCCC_FLATNESS_VALUE_DEFAULT 1024
#define ACAMERA_ISP_DEMOSAIC_RCCC_FLATNESS_VALUE_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RCCC_FLATNESS_VALUE_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_FLATNESS_VALUE_REG_ADDR 0xe5d4
#define ACAMERA_ISP_DEMOSAIC_RCCC_FLATNESS_VALUE_OFFSET 0x14
#define ACAMERA_ISP_DEMOSAIC_RCCC_FLATNESS_VALUE_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rccc_flatness_value_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe5d4 );
    system_isp_write_32( base + 0xe5d4, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rccc_flatness_value_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe5d4 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Sharp high
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sharpening strength in edge and detail regions.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_HIGH_DEFAULT 5688
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_HIGH_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_HIGH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_HIGH_REG_ADDR 0xe5d8
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_HIGH_OFFSET 0x18
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_HIGH_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rccc_sharp_high_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe5d8 );
    system_isp_write_32( base + 0xe5d8, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rccc_sharp_high_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe5d8 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Sharp low
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sharpening strength in flat regions.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LOW_DEFAULT 80
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LOW_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LOW_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LOW_REG_ADDR 0xe5dc
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LOW_OFFSET 0x1c
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LOW_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rccc_sharp_low_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe5dc );
    system_isp_write_32( base + 0xe5dc, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rccc_sharp_low_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe5dc ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Sharp limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Limit sharpening amount to prevent overshoot.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LIMIT_DEFAULT 5248
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LIMIT_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LIMIT_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LIMIT_REG_ADDR 0xe5e0
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LIMIT_OFFSET 0x20
#define ACAMERA_ISP_DEMOSAIC_RCCC_SHARP_LIMIT_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_rccc_sharp_limit_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe5e0 );
    system_isp_write_32( base + 0xe5e0, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rccc_sharp_limit_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe5e0 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Wdr thresh low
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Value at which to begin blending ramp for Red/Clear WDR.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_LOW_DEFAULT 86357
#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_LOW_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_LOW_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_LOW_REG_ADDR 0xe5e4
#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_LOW_OFFSET 0x24
#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_LOW_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_rccc_wdr_thresh_low_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe5e4 );
    system_isp_write_32( base + 0xe5e4, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rccc_wdr_thresh_low_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe5e4 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Wdr thresh high
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Value at which to end blending ramp for Red/Clear WDR. Clear values above this will not be used.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_HIGH_DEFAULT 88436
#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_HIGH_DATASIZE 14
#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_HIGH_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_HIGH_REG_ADDR 0xe5e8
#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_HIGH_OFFSET 0x28
#define ACAMERA_ISP_DEMOSAIC_RCCC_WDR_THRESH_HIGH_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_demosaic_rccc_wdr_thresh_high_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe5e8 );
    system_isp_write_32( base + 0xe5e8, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rccc_wdr_thresh_high_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe5e8 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Max wdr gain rec
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Reciprocal of maximal WDR gain in Clear channel from Red channel.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_RCCC_MAX_WDR_GAIN_REC_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_MAX_WDR_GAIN_REC_DATASIZE 12
#define ACAMERA_ISP_DEMOSAIC_RCCC_MAX_WDR_GAIN_REC_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_RCCC_MAX_WDR_GAIN_REC_REG_ADDR 0xe5ec
#define ACAMERA_ISP_DEMOSAIC_RCCC_MAX_WDR_GAIN_REC_OFFSET 0x2c
#define ACAMERA_ISP_DEMOSAIC_RCCC_MAX_WDR_GAIN_REC_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_demosaic_rccc_max_wdr_gain_rec_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe5ec );
    system_isp_write_32( base + 0xe5ec, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_demosaic_rccc_max_wdr_gain_rec_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe5ec ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Output formatter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: clip_rgb_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass clip_rgb module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_CLIP_RGB_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_CLIP_RGB_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_CLIP_RGB_BYPASS_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_CLIP_RGB_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_CLIP_RGB_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_CLIP_RGB_BYPASS_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_out_format_clip_rgb_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_out_format_clip_rgb_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: clip_luv_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass clip_luv module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_CLIP_LUV_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_CLIP_LUV_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_CLIP_LUV_BYPASS_FIELD_OFFSET 1
#define ACAMERA_ISP_OUT_FORMAT_CLIP_LUV_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_CLIP_LUV_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_CLIP_LUV_BYPASS_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_out_format_clip_luv_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_out_format_clip_luv_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: ir_ms_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass ir_ms module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_IR_MS_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_IR_MS_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_IR_MS_BYPASS_FIELD_OFFSET 2
#define ACAMERA_ISP_OUT_FORMAT_IR_MS_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_IR_MS_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_IR_MS_BYPASS_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_isp_out_format_ir_ms_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_isp_out_format_ir_ms_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_rgb_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass lut_rgb module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_BYPASS_FIELD_OFFSET 3
#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_BYPASS_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_out_format_lut_rgb_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_out_format_lut_rgb_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_ir_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass lut_ir module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_BYPASS_FIELD_OFFSET 4
#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_BYPASS_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_isp_out_format_lut_ir_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_isp_out_format_lut_ir_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_yuv_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass lut_yuv module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_BYPASS_FIELD_OFFSET 5
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_BYPASS_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_isp_out_format_lut_yuv_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_isp_out_format_lut_yuv_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_luv_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass lut_luv module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_BYPASS_FIELD_OFFSET 6
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_BYPASS_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_out_format_lut_luv_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_out_format_lut_luv_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass rgb2rgb module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_BYPASS_FIELD_OFFSET 7
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_BYPASS_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_out_format_rgb2rgb_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_out_format_rgb2rgb_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass rgb2xyz module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_BYPASS_FIELD_OFFSET 8
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_BYPASS_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_isp_out_format_rgb2xyz_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_isp_out_format_rgb2xyz_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass rgb2yuv module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_BYPASS_FIELD_OFFSET 9
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_BYPASS_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_isp_out_format_rgb2yuv_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_isp_out_format_rgb2yuv_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2s_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass rgb2s module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2S_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_BYPASS_FIELD_OFFSET 10
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_BYPASS_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_isp_out_format_rgb2s_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_isp_out_format_rgb2s_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2ab_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass rgb2ab module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2AB_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2AB_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2AB_BYPASS_FIELD_OFFSET 11
#define ACAMERA_ISP_OUT_FORMAT_RGB2AB_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_RGB2AB_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_RGB2AB_BYPASS_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_isp_out_format_rgb2ab_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_isp_out_format_rgb2ab_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: ab2hs_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass ab2hs module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_AB2HS_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_AB2HS_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_AB2HS_BYPASS_FIELD_OFFSET 12
#define ACAMERA_ISP_OUT_FORMAT_AB2HS_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_AB2HS_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_AB2HS_BYPASS_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_isp_out_format_ab2hs_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_isp_out_format_ab2hs_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: xyz2luv_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass xyz2luv module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_XYZ2LUV_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_XYZ2LUV_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_XYZ2LUV_BYPASS_FIELD_OFFSET 13
#define ACAMERA_ISP_OUT_FORMAT_XYZ2LUV_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_XYZ2LUV_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_XYZ2LUV_BYPASS_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_isp_out_format_xyz2luv_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_isp_out_format_xyz2luv_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_sp_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass rgb2yuv_sp module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_BYPASS_FIELD_OFFSET 14
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_BYPASS_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_isp_out_format_rgb2yuv_sp_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_isp_out_format_rgb2yuv_sp_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_ab_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass lpf_ab module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_BYPASS_FIELD_OFFSET 15
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_BYPASS_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_ab_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_ab_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_luv_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass lpf_luv module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_BYPASS_FIELD_OFFSET 16
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_BYPASS_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_luv_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_luv_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_yuv_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass lpf_yuv module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_BYPASS_FIELD_OFFSET 17
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_BYPASS_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_yuv_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_yuv_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_xyz2luv_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass xyz2luv LUT module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_BYPASS_FIELD_OFFSET 18
#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_BYPASS_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_isp_out_format_lut_xyz2luv_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_isp_out_format_lut_xyz2luv_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_yuv_y_bypass
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass Y LUT module
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_Y_BYPASS_DEFAULT 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_Y_BYPASS_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_Y_BYPASS_FIELD_OFFSET 19
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_Y_BYPASS_REG_ADDR 0xe600
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_Y_BYPASS_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_Y_BYPASS_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_isp_out_format_lut_yuv_y_bypass_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe600 );
    system_isp_write_32( base + 0xe600, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_isp_out_format_lut_yuv_y_bypass_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe600 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: sel_ir
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Select video plane
//      0    - first plane R/R/R
//      1    - second plane G/C/G
//      2    - third plane B/C/B
//      3    - fourth plane B/C/Ir
//      4..7 - RAW plane (RCCB)
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_SEL_IR_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_SEL_IR_DATASIZE 3
#define ACAMERA_ISP_OUT_FORMAT_SEL_IR_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_SEL_IR_REG_ADDR 0xe608
#define ACAMERA_ISP_OUT_FORMAT_SEL_IR_OFFSET 0x8
#define ACAMERA_ISP_OUT_FORMAT_SEL_IR_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_out_format_sel_ir_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe608 );
    system_isp_write_32( base + 0xe608, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_out_format_sel_ir_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe608 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: ss_ir
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// ss_ir[1:0] - starting color of the CFA pattern after cropping
//      0 - R  (R/C1/C2/B pattern)
//      1 - C1 (C1/R/B/C2 pattern)
//      2 - C2 (C2/B/R/C1 pattern)
//      3 - B  (B/C2/C1/R pattern)
//      ss_ir[3:2] - subsampling by pixel position in selected plane depending on Mode select[4:0] (see Out format MUX)
//      for Mode select = 13:
//      0 - select R and B pixels in R/C1/C2/B pattern
//      1 - select R pixels in R/C1/C2/B pattern
//      2 - select all pixels in R/C1/C2/B pattern
//      3 - reserved
//      for Mode select = 14:
//      0,1 - select C1 and C2 pixels in R/C1/C2/B pattern
//      2,3 - select B pixels in R/C1/C2/B pattern
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_SS_IR_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_SS_IR_DATASIZE 4
#define ACAMERA_ISP_OUT_FORMAT_SS_IR_FIELD_OFFSET 8
#define ACAMERA_ISP_OUT_FORMAT_SS_IR_REG_ADDR 0xe608
#define ACAMERA_ISP_OUT_FORMAT_SS_IR_OFFSET 0x8
#define ACAMERA_ISP_OUT_FORMAT_SS_IR_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_isp_out_format_ss_ir_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe608 );
    system_isp_write_32( base + 0xe608, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_isp_out_format_ss_ir_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe608 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: sel_yuv_sp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Select Standard or Special methods for rgb2yuv transformation.
//      0 - Standard mode, the rgb2yuv matrix is applied.
//      1 - Special mode, the other math formulas are supported. See rgb2yuv_sp_mode register description
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_SEL_YUV_SP_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_SEL_YUV_SP_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_SEL_YUV_SP_FIELD_OFFSET 16
#define ACAMERA_ISP_OUT_FORMAT_SEL_YUV_SP_REG_ADDR 0xe608
#define ACAMERA_ISP_OUT_FORMAT_SEL_YUV_SP_OFFSET 0x8
#define ACAMERA_ISP_OUT_FORMAT_SEL_YUV_SP_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_isp_out_format_sel_yuv_sp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe608 );
    system_isp_write_32( base + 0xe608, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_isp_out_format_sel_yuv_sp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe608 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2s_mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Selects the method of calculation of S output video data from RGB data
//      0 - S=(max(R,G,B)-min(R,G,B))/2
//      1 - S=max(0,max(R,G,B)-max(min(R,G,B),rgb2s_clip))
//      2 - S=max(R,G,B)/max(min(R,G,B),rgb2s_clip)
//      3 - reserved
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2S_MODE_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_MODE_DATASIZE 2
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_MODE_FIELD_OFFSET 24
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_MODE_REG_ADDR 0xe608
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_MODE_OFFSET 0x8
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_MODE_FIELD_MASK 0x3000000

// args: data (2-bit)
static __inline void acamera_isp_out_format_rgb2s_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe608 );
    system_isp_write_32( base + 0xe608, ( ( ( uint32_t )( data & 0x3 ) ) << 24 ) | ( curr & 0xfcffffff ) );
}
static __inline uint8_t acamera_isp_out_format_rgb2s_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe608 ) & 0x3000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2s_clip
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// This value is used to calculate S output video data. See the rgb2s_mode register description.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2S_CLIP_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_CLIP_DATASIZE 14
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_CLIP_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_CLIP_REG_ADDR 0xe610
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_CLIP_OFFSET 0x10
#define ACAMERA_ISP_OUT_FORMAT_RGB2S_CLIP_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_out_format_rgb2s_clip_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe610 );
    system_isp_write_32( base + 0xe610, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2s_clip_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe610 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_sp_mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Selects the method of calculation of YUV output video data from RGB for Special mode.
//     For rgb2yuv_sp_mode[1]
//      0 - Y=(R+2G+B)/4
//      1 - Y=(R+G+B)/3
//     For rgb2yuv_sp_mode[0]
//      0 - U=(8192+ 0.5*B-0.5*G), V=(8192+0.5*R-0.5*G)
//      1 - U=B/max(G,rgb2yuv_sp_clip), V=R/max(G,rgb2yuv_sp_clip)
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_MODE_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_MODE_DATASIZE 2
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_MODE_FIELD_OFFSET 28
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_MODE_REG_ADDR 0xe608
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_MODE_OFFSET 0x8
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_MODE_FIELD_MASK 0x30000000

// args: data (2-bit)
static __inline void acamera_isp_out_format_rgb2yuv_sp_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe608 );
    system_isp_write_32( base + 0xe608, ( ( ( uint32_t )( data & 0x3 ) ) << 28 ) | ( curr & 0xcfffffff ) );
}
static __inline uint8_t acamera_isp_out_format_rgb2yuv_sp_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe608 ) & 0x30000000 ) >> 28 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_sp_ratio_integer_bits
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Selects number of integer bits in the U, V outputs in YUV special mode 1.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_RATIO_INTEGER_BITS_DEFAULT 4
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_RATIO_INTEGER_BITS_DATASIZE 3
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_RATIO_INTEGER_BITS_FIELD_OFFSET 20
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_RATIO_INTEGER_BITS_REG_ADDR 0xe608
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_RATIO_INTEGER_BITS_OFFSET 0x8
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_RATIO_INTEGER_BITS_FIELD_MASK 0x700000

// args: data (3-bit)
static __inline void acamera_isp_out_format_rgb2yuv_sp_ratio_integer_bits_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe608 );
    system_isp_write_32( base + 0xe608, ( ( ( uint32_t )( data & 0x7 ) ) << 20 ) | ( curr & 0xff8fffff ) );
}
static __inline uint8_t acamera_isp_out_format_rgb2yuv_sp_ratio_integer_bits_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe608 ) & 0x700000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_sp_clip
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// This value is used to calculate UV output video data in the Special YUV mode. See the rgb2yuv_sp_mode register description.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_CLIP_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_CLIP_DATASIZE 14
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_CLIP_FIELD_OFFSET 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_CLIP_REG_ADDR 0xe610
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_CLIP_OFFSET 0x10
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_SP_CLIP_FIELD_MASK 0x3fff0000

// args: data (14-bit)
static __inline void acamera_isp_out_format_rgb2yuv_sp_clip_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe610 );
    system_isp_write_32( base + 0xe610, ( ( ( uint32_t )( data & 0x3fff ) ) << 16 ) | ( curr & 0xc000ffff ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_sp_clip_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe610 ) & 0x3fff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: clip1_rgb
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Maximum value for input video data of the first channel for RGB pipeline. Values above this are clipped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_CLIP1_RGB_DEFAULT 16383
#define ACAMERA_ISP_OUT_FORMAT_CLIP1_RGB_DATASIZE 14
#define ACAMERA_ISP_OUT_FORMAT_CLIP1_RGB_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_CLIP1_RGB_REG_ADDR 0xe614
#define ACAMERA_ISP_OUT_FORMAT_CLIP1_RGB_OFFSET 0x14
#define ACAMERA_ISP_OUT_FORMAT_CLIP1_RGB_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_out_format_clip1_rgb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe614 );
    system_isp_write_32( base + 0xe614, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_out_format_clip1_rgb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe614 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: clip2_rgb
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Maximum value for input video data of the second channel for RGB pipeline. Values above this are clipped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_CLIP2_RGB_DEFAULT 16383
#define ACAMERA_ISP_OUT_FORMAT_CLIP2_RGB_DATASIZE 14
#define ACAMERA_ISP_OUT_FORMAT_CLIP2_RGB_FIELD_OFFSET 16
#define ACAMERA_ISP_OUT_FORMAT_CLIP2_RGB_REG_ADDR 0xe614
#define ACAMERA_ISP_OUT_FORMAT_CLIP2_RGB_OFFSET 0x14
#define ACAMERA_ISP_OUT_FORMAT_CLIP2_RGB_FIELD_MASK 0x3fff0000

// args: data (14-bit)
static __inline void acamera_isp_out_format_clip2_rgb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe614 );
    system_isp_write_32( base + 0xe614, ( ( ( uint32_t )( data & 0x3fff ) ) << 16 ) | ( curr & 0xc000ffff ) );
}
static __inline uint16_t acamera_isp_out_format_clip2_rgb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe614 ) & 0x3fff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: clip3_rgb
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Maximum value for input video data of the third channel for RGB pipeline. Values above this are clipped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_CLIP3_RGB_DEFAULT 16383
#define ACAMERA_ISP_OUT_FORMAT_CLIP3_RGB_DATASIZE 14
#define ACAMERA_ISP_OUT_FORMAT_CLIP3_RGB_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_CLIP3_RGB_REG_ADDR 0xe618
#define ACAMERA_ISP_OUT_FORMAT_CLIP3_RGB_OFFSET 0x18
#define ACAMERA_ISP_OUT_FORMAT_CLIP3_RGB_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_out_format_clip3_rgb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe618 );
    system_isp_write_32( base + 0xe618, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_out_format_clip3_rgb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe618 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: clip4_rgb
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Maximum value for input video data of the fourth channel for RGB pipeline. Values above this are clipped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_CLIP4_RGB_DEFAULT 16383
#define ACAMERA_ISP_OUT_FORMAT_CLIP4_RGB_DATASIZE 14
#define ACAMERA_ISP_OUT_FORMAT_CLIP4_RGB_FIELD_OFFSET 16
#define ACAMERA_ISP_OUT_FORMAT_CLIP4_RGB_REG_ADDR 0xe618
#define ACAMERA_ISP_OUT_FORMAT_CLIP4_RGB_OFFSET 0x18
#define ACAMERA_ISP_OUT_FORMAT_CLIP4_RGB_FIELD_MASK 0x3fff0000

// args: data (14-bit)
static __inline void acamera_isp_out_format_clip4_rgb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe618 );
    system_isp_write_32( base + 0xe618, ( ( ( uint32_t )( data & 0x3fff ) ) << 16 ) | ( curr & 0xc000ffff ) );
}
static __inline uint16_t acamera_isp_out_format_clip4_rgb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe618 ) & 0x3fff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: clip1_luv
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Maximum value for input video data of the first channel for LUV pipeline. Values above this are clipped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_CLIP1_LUV_DEFAULT 16383
#define ACAMERA_ISP_OUT_FORMAT_CLIP1_LUV_DATASIZE 14
#define ACAMERA_ISP_OUT_FORMAT_CLIP1_LUV_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_CLIP1_LUV_REG_ADDR 0xe61c
#define ACAMERA_ISP_OUT_FORMAT_CLIP1_LUV_OFFSET 0x1c
#define ACAMERA_ISP_OUT_FORMAT_CLIP1_LUV_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_out_format_clip1_luv_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe61c );
    system_isp_write_32( base + 0xe61c, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_out_format_clip1_luv_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe61c ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: clip2_luv
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Maximum value for input video data of the second channel for LUV pipeline. Values above this are clipped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_CLIP2_LUV_DEFAULT 16383
#define ACAMERA_ISP_OUT_FORMAT_CLIP2_LUV_DATASIZE 14
#define ACAMERA_ISP_OUT_FORMAT_CLIP2_LUV_FIELD_OFFSET 16
#define ACAMERA_ISP_OUT_FORMAT_CLIP2_LUV_REG_ADDR 0xe61c
#define ACAMERA_ISP_OUT_FORMAT_CLIP2_LUV_OFFSET 0x1c
#define ACAMERA_ISP_OUT_FORMAT_CLIP2_LUV_FIELD_MASK 0x3fff0000

// args: data (14-bit)
static __inline void acamera_isp_out_format_clip2_luv_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe61c );
    system_isp_write_32( base + 0xe61c, ( ( ( uint32_t )( data & 0x3fff ) ) << 16 ) | ( curr & 0xc000ffff ) );
}
static __inline uint16_t acamera_isp_out_format_clip2_luv_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe61c ) & 0x3fff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: clip3_luv
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Maximum value for input video data of the third channel for LUV pipeline. Values above this are clipped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_CLIP3_LUV_DEFAULT 16383
#define ACAMERA_ISP_OUT_FORMAT_CLIP3_LUV_DATASIZE 14
#define ACAMERA_ISP_OUT_FORMAT_CLIP3_LUV_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_CLIP3_LUV_REG_ADDR 0xe620
#define ACAMERA_ISP_OUT_FORMAT_CLIP3_LUV_OFFSET 0x20
#define ACAMERA_ISP_OUT_FORMAT_CLIP3_LUV_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_out_format_clip3_luv_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe620 );
    system_isp_write_32( base + 0xe620, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_out_format_clip3_luv_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe620 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: clip4_luv
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Maximum value for input video data of the fourth channel for LUV pipeline. Values above this are clipped.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_CLIP4_LUV_DEFAULT 16383
#define ACAMERA_ISP_OUT_FORMAT_CLIP4_LUV_DATASIZE 14
#define ACAMERA_ISP_OUT_FORMAT_CLIP4_LUV_FIELD_OFFSET 16
#define ACAMERA_ISP_OUT_FORMAT_CLIP4_LUV_REG_ADDR 0xe620
#define ACAMERA_ISP_OUT_FORMAT_CLIP4_LUV_OFFSET 0x20
#define ACAMERA_ISP_OUT_FORMAT_CLIP4_LUV_FIELD_MASK 0x3fff0000

// args: data (14-bit)
static __inline void acamera_isp_out_format_clip4_luv_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe620 );
    system_isp_write_32( base + 0xe620, ( ( ( uint32_t )( data & 0x3fff ) ) << 16 ) | ( curr & 0xc000ffff ) );
}
static __inline uint16_t acamera_isp_out_format_clip4_luv_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe620 ) & 0x3fff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for R-R multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_11_DEFAULT 256
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_11_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_11_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_11_REG_ADDR 0xe624
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_11_OFFSET 0x24
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_11_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe624 );
    system_isp_write_32( base + 0xe624, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe624 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for G-R multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_12_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_12_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_12_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_12_REG_ADDR 0xe628
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_12_OFFSET 0x28
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_12_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe628 );
    system_isp_write_32( base + 0xe628, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe628 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for B-R multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_13_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_13_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_13_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_13_REG_ADDR 0xe62c
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_13_OFFSET 0x2c
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_13_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe62c );
    system_isp_write_32( base + 0xe62c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe62c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for IR-R multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_14_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_14_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_14_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_14_REG_ADDR 0xe630
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_14_OFFSET 0x30
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_14_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_14_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe630 );
    system_isp_write_32( base + 0xe630, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_14_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe630 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for R-G multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_21_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_21_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_21_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_21_REG_ADDR 0xe634
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_21_OFFSET 0x34
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_21_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_21_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe634 );
    system_isp_write_32( base + 0xe634, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_21_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe634 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for G-G multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_22_DEFAULT 256
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_22_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_22_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_22_REG_ADDR 0xe638
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_22_OFFSET 0x38
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_22_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_22_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe638 );
    system_isp_write_32( base + 0xe638, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_22_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe638 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for B-G multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_23_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_23_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_23_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_23_REG_ADDR 0xe63c
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_23_OFFSET 0x3c
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_23_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_23_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe63c );
    system_isp_write_32( base + 0xe63c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_23_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe63c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for IR-G multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_24_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_24_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_24_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_24_REG_ADDR 0xe640
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_24_OFFSET 0x40
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_24_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_24_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe640 );
    system_isp_write_32( base + 0xe640, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_24_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe640 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for R-B multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_31_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_31_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_31_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_31_REG_ADDR 0xe644
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_31_OFFSET 0x44
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_31_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_31_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe644 );
    system_isp_write_32( base + 0xe644, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_31_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe644 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for G-B multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_32_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_32_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_32_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_32_REG_ADDR 0xe648
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_32_OFFSET 0x48
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_32_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_32_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe648 );
    system_isp_write_32( base + 0xe648, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_32_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe648 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for B-B multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_33_DEFAULT 256
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_33_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_33_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_33_REG_ADDR 0xe64c
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_33_OFFSET 0x4c
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_33_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_33_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe64c );
    system_isp_write_32( base + 0xe64c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_33_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe64c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_a_34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for IR-B multiplier for RGB pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_34_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_34_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_34_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_34_REG_ADDR 0xe650
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_34_OFFSET 0x50
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_A_34_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_a_34_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe650 );
    system_isp_write_32( base + 0xe650, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_a_34_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe650 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_b_1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for R for RGB pipeline.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_1_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_1_DATASIZE 15
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_1_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_1_REG_ADDR 0xe654
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_1_OFFSET 0x54
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_1_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_b_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe654 );
    system_isp_write_32( base + 0xe654, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_b_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe654 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_b_2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for G for RGB pipeline.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_2_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_2_DATASIZE 15
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_2_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_2_REG_ADDR 0xe658
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_2_OFFSET 0x58
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_2_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_b_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe658 );
    system_isp_write_32( base + 0xe658, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_b_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe658 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2rgb_coef_b_3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for B for RGB pipeline.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_3_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_3_DATASIZE 15
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_3_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_3_REG_ADDR 0xe65c
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_3_OFFSET 0x5c
#define ACAMERA_ISP_OUT_FORMAT_RGB2RGB_COEF_B_3_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_out_format_rgb2rgb_coef_b_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe65c );
    system_isp_write_32( base + 0xe65c, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2rgb_coef_b_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe65c ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for R-X multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_11_DEFAULT 256
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_11_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_11_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_11_REG_ADDR 0xe660
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_11_OFFSET 0x60
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_11_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe660 );
    system_isp_write_32( base + 0xe660, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe660 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for G-X multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_12_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_12_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_12_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_12_REG_ADDR 0xe664
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_12_OFFSET 0x64
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_12_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe664 );
    system_isp_write_32( base + 0xe664, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe664 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for B-X multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_13_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_13_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_13_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_13_REG_ADDR 0xe668
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_13_OFFSET 0x68
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_13_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe668 );
    system_isp_write_32( base + 0xe668, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe668 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for IR-X multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_14_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_14_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_14_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_14_REG_ADDR 0xe66c
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_14_OFFSET 0x6c
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_14_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_14_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe66c );
    system_isp_write_32( base + 0xe66c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_14_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe66c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for R-Y multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_21_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_21_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_21_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_21_REG_ADDR 0xe670
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_21_OFFSET 0x70
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_21_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_21_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe670 );
    system_isp_write_32( base + 0xe670, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_21_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe670 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for G-Y multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_22_DEFAULT 256
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_22_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_22_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_22_REG_ADDR 0xe674
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_22_OFFSET 0x74
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_22_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_22_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe674 );
    system_isp_write_32( base + 0xe674, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_22_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe674 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for B-Y multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_23_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_23_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_23_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_23_REG_ADDR 0xe678
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_23_OFFSET 0x78
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_23_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_23_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe678 );
    system_isp_write_32( base + 0xe678, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_23_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe678 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for IR-Y multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_24_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_24_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_24_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_24_REG_ADDR 0xe67c
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_24_OFFSET 0x7c
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_24_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_24_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe67c );
    system_isp_write_32( base + 0xe67c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_24_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe67c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for R-Z multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_31_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_31_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_31_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_31_REG_ADDR 0xe680
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_31_OFFSET 0x80
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_31_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_31_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe680 );
    system_isp_write_32( base + 0xe680, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_31_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe680 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for G-Z multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_32_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_32_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_32_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_32_REG_ADDR 0xe684
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_32_OFFSET 0x84
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_32_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_32_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe684 );
    system_isp_write_32( base + 0xe684, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_32_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe684 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for B-Z multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_33_DEFAULT 256
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_33_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_33_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_33_REG_ADDR 0xe688
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_33_OFFSET 0x88
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_33_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_33_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe688 );
    system_isp_write_32( base + 0xe688, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_33_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe688 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_a_34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for IR-Z multiplier for LUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_34_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_34_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_34_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_34_REG_ADDR 0xe68c
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_34_OFFSET 0x8c
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_A_34_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_a_34_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe68c );
    system_isp_write_32( base + 0xe68c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_a_34_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe68c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_b_1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for X for LUV pipeline.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_1_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_1_DATASIZE 15
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_1_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_1_REG_ADDR 0xe690
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_1_OFFSET 0x90
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_1_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_b_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe690 );
    system_isp_write_32( base + 0xe690, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_b_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe690 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_b_2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for Y for LUV pipeline.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_2_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_2_DATASIZE 15
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_2_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_2_REG_ADDR 0xe694
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_2_OFFSET 0x94
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_2_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_b_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe694 );
    system_isp_write_32( base + 0xe694, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_b_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe694 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2xyz_coef_b_3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for Z for LUV pipeline.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_3_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_3_DATASIZE 15
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_3_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_3_REG_ADDR 0xe698
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_3_OFFSET 0x98
#define ACAMERA_ISP_OUT_FORMAT_RGB2XYZ_COEF_B_3_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_out_format_rgb2xyz_coef_b_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe698 );
    system_isp_write_32( base + 0xe698, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2xyz_coef_b_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe698 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_a_11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for R-Y multiplier for YUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_11_DEFAULT 256
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_11_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_11_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_11_REG_ADDR 0xe69c
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_11_OFFSET 0x9c
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_11_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_a_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe69c );
    system_isp_write_32( base + 0xe69c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_a_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe69c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_a_12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for G-Y multiplier for YUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_12_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_12_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_12_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_12_REG_ADDR 0xe6a0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_12_OFFSET 0xa0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_12_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_a_12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6a0 );
    system_isp_write_32( base + 0xe6a0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_a_12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe6a0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_a_13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for B-Y multiplier for YUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_13_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_13_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_13_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_13_REG_ADDR 0xe6a4
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_13_OFFSET 0xa4
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_13_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_a_13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6a4 );
    system_isp_write_32( base + 0xe6a4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_a_13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe6a4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_a_21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for R-U multiplier for YUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_21_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_21_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_21_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_21_REG_ADDR 0xe6a8
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_21_OFFSET 0xa8
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_21_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_a_21_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6a8 );
    system_isp_write_32( base + 0xe6a8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_a_21_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe6a8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_a_22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for G-U multiplier for YUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_22_DEFAULT 256
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_22_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_22_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_22_REG_ADDR 0xe6ac
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_22_OFFSET 0xac
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_22_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_a_22_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6ac );
    system_isp_write_32( base + 0xe6ac, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_a_22_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe6ac ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_a_23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for B-U multiplier for YUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_23_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_23_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_23_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_23_REG_ADDR 0xe6b0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_23_OFFSET 0xb0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_23_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_a_23_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6b0 );
    system_isp_write_32( base + 0xe6b0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_a_23_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe6b0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_a_31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for R-V multiplier for YUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_31_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_31_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_31_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_31_REG_ADDR 0xe6b4
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_31_OFFSET 0xb4
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_31_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_a_31_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6b4 );
    system_isp_write_32( base + 0xe6b4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_a_31_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe6b4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_a_32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for G-V multiplier for YUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_32_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_32_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_32_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_32_REG_ADDR 0xe6b8
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_32_OFFSET 0xb8
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_32_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_a_32_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6b8 );
    system_isp_write_32( base + 0xe6b8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_a_32_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe6b8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_a_33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Matrix coefficient for B-V multiplier for YUV pipeline.
//     Valid range (decimal): +/- 15.996
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_33_DEFAULT 256
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_33_DATASIZE 16
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_33_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_33_REG_ADDR 0xe6bc
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_33_OFFSET 0xbc
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_A_33_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_a_33_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6bc );
    system_isp_write_32( base + 0xe6bc, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_a_33_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe6bc ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_b_1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for Y for YUV pipeline.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_1_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_1_DATASIZE 15
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_1_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_1_REG_ADDR 0xe6c0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_1_OFFSET 0xc0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_1_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_b_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6c0 );
    system_isp_write_32( base + 0xe6c0, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_b_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe6c0 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_b_2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for U for YUV pipeline.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_2_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_2_DATASIZE 15
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_2_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_2_REG_ADDR 0xe6c4
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_2_OFFSET 0xc4
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_2_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_b_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6c4 );
    system_isp_write_32( base + 0xe6c4, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_b_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe6c4 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: rgb2yuv_coef_b_3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset for V for YUV pipeline.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_3_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_3_DATASIZE 15
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_3_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_3_REG_ADDR 0xe6c8
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_3_OFFSET 0xc8
#define ACAMERA_ISP_OUT_FORMAT_RGB2YUV_COEF_B_3_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_out_format_rgb2yuv_coef_b_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6c8 );
    system_isp_write_32( base + 0xe6c8, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_out_format_rgb2yuv_coef_b_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe6c8 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_ab_enable_horiz_downsample
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Horizontal Downsampling Enable for HS pipeline: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_DOWNSAMPLE_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_DOWNSAMPLE_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_DOWNSAMPLE_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_DOWNSAMPLE_REG_ADDR 0xe6cc
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_DOWNSAMPLE_OFFSET 0xcc
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_DOWNSAMPLE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_ab_enable_horiz_downsample_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6cc );
    system_isp_write_32( base + 0xe6cc, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_ab_enable_horiz_downsample_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe6cc ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_ab_enable_vert_downsample
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Vertical Downsampling Enable for HS pipeline: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_VERT_DOWNSAMPLE_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_VERT_DOWNSAMPLE_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_VERT_DOWNSAMPLE_FIELD_OFFSET 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_VERT_DOWNSAMPLE_REG_ADDR 0xe6cc
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_VERT_DOWNSAMPLE_OFFSET 0xcc
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_VERT_DOWNSAMPLE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_ab_enable_vert_downsample_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6cc );
    system_isp_write_32( base + 0xe6cc, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_ab_enable_vert_downsample_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe6cc ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_ab_enable_horiz_filter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Filter Enable for HS pipeline: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_FILTER_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_FILTER_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_FILTER_FIELD_OFFSET 2
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_FILTER_REG_ADDR 0xe6cc
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_FILTER_OFFSET 0xcc
#define ACAMERA_ISP_OUT_FORMAT_LPF_AB_ENABLE_HORIZ_FILTER_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_ab_enable_horiz_filter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6cc );
    system_isp_write_32( base + 0xe6cc, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_ab_enable_horiz_filter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe6cc ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_luv_enable_horiz_downsample
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Horizontal Downsampling Enable for LUV pipeline: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_DOWNSAMPLE_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_DOWNSAMPLE_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_DOWNSAMPLE_FIELD_OFFSET 4
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_DOWNSAMPLE_REG_ADDR 0xe6cc
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_DOWNSAMPLE_OFFSET 0xcc
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_DOWNSAMPLE_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_luv_enable_horiz_downsample_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6cc );
    system_isp_write_32( base + 0xe6cc, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_luv_enable_horiz_downsample_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe6cc ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_luv_enable_vert_downsample
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Vertical Downsampling Enable for LUV pipeline: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_VERT_DOWNSAMPLE_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_VERT_DOWNSAMPLE_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_VERT_DOWNSAMPLE_FIELD_OFFSET 5
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_VERT_DOWNSAMPLE_REG_ADDR 0xe6cc
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_VERT_DOWNSAMPLE_OFFSET 0xcc
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_VERT_DOWNSAMPLE_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_luv_enable_vert_downsample_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6cc );
    system_isp_write_32( base + 0xe6cc, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_luv_enable_vert_downsample_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe6cc ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_luv_enable_horiz_filter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Filter Enable for LUV pipeline: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_FILTER_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_FILTER_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_FILTER_FIELD_OFFSET 6
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_FILTER_REG_ADDR 0xe6cc
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_FILTER_OFFSET 0xcc
#define ACAMERA_ISP_OUT_FORMAT_LPF_LUV_ENABLE_HORIZ_FILTER_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_luv_enable_horiz_filter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6cc );
    system_isp_write_32( base + 0xe6cc, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_luv_enable_horiz_filter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe6cc ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_yuv_enable_horiz_downsample
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Horizontal Downsampling Enable for YUV pipeline: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_DOWNSAMPLE_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_DOWNSAMPLE_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_DOWNSAMPLE_FIELD_OFFSET 8
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_DOWNSAMPLE_REG_ADDR 0xe6cc
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_DOWNSAMPLE_OFFSET 0xcc
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_DOWNSAMPLE_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_yuv_enable_horiz_downsample_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6cc );
    system_isp_write_32( base + 0xe6cc, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_yuv_enable_horiz_downsample_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe6cc ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_yuv_enable_vert_downsample
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Vertical Downsampling Enable for LUV pipeline: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_VERT_DOWNSAMPLE_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_VERT_DOWNSAMPLE_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_VERT_DOWNSAMPLE_FIELD_OFFSET 9
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_VERT_DOWNSAMPLE_REG_ADDR 0xe6cc
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_VERT_DOWNSAMPLE_OFFSET 0xcc
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_VERT_DOWNSAMPLE_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_yuv_enable_vert_downsample_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6cc );
    system_isp_write_32( base + 0xe6cc, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_yuv_enable_vert_downsample_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe6cc ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: lpf_yuv_enable_horiz_filter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Filter Enable for LUV pipeline: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_FILTER_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_FILTER_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_FILTER_FIELD_OFFSET 10
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_FILTER_REG_ADDR 0xe6cc
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_FILTER_OFFSET 0xcc
#define ACAMERA_ISP_OUT_FORMAT_LPF_YUV_ENABLE_HORIZ_FILTER_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_isp_out_format_lpf_yuv_enable_horiz_filter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6cc );
    system_isp_write_32( base + 0xe6cc, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_isp_out_format_lpf_yuv_enable_horiz_filter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe6cc ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_rgb_mem_data_r_last
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// The last node value for RGB pipeline LUT.
//     Format for all nodes of this LUT:
//     if lut_rgb_mem_data_r_last[17:16] = 3 then
//     format is: signed (2's complement) 15.3-bit fixed-point
//     else format is: unsigned 15.3-bit fixed-point
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_MEM_DATA_R_LAST_DEFAULT 131072
#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_MEM_DATA_R_LAST_DATASIZE 18
#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_MEM_DATA_R_LAST_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_MEM_DATA_R_LAST_REG_ADDR 0xe6d0
#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_MEM_DATA_R_LAST_OFFSET 0xd0
#define ACAMERA_ISP_OUT_FORMAT_LUT_RGB_MEM_DATA_R_LAST_FIELD_MASK 0x3ffff

// args: data (18-bit)
static __inline void acamera_isp_out_format_lut_rgb_mem_data_r_last_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6d0 );
    system_isp_write_32( base + 0xe6d0, ( ( ( uint32_t )( data & 0x3ffff ) ) << 0 ) | ( curr & 0xfffc0000 ) );
}
static __inline uint32_t acamera_isp_out_format_lut_rgb_mem_data_r_last_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe6d0 ) & 0x3ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_ir_mem_data_r_last
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// The last node value for IR pipeline LUT.
//     Format for all nodes of this LUT:
//     if lut_ir_mem_data_r_last[17:16] = 3 then
//     format is: signed (2's complement) 15.3-bit fixed-point
//     else format is: unsigned 15.3-bit fixed-point
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_MEM_DATA_R_LAST_DEFAULT 131072
#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_MEM_DATA_R_LAST_DATASIZE 18
#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_MEM_DATA_R_LAST_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_MEM_DATA_R_LAST_REG_ADDR 0xe6d4
#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_MEM_DATA_R_LAST_OFFSET 0xd4
#define ACAMERA_ISP_OUT_FORMAT_LUT_IR_MEM_DATA_R_LAST_FIELD_MASK 0x3ffff

// args: data (18-bit)
static __inline void acamera_isp_out_format_lut_ir_mem_data_r_last_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6d4 );
    system_isp_write_32( base + 0xe6d4, ( ( ( uint32_t )( data & 0x3ffff ) ) << 0 ) | ( curr & 0xfffc0000 ) );
}
static __inline uint32_t acamera_isp_out_format_lut_ir_mem_data_r_last_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe6d4 ) & 0x3ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_yuv_mem_data_r_last_u
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// The last node value for U channel of YUV pipeline LUT.
//    Format for all nodes of this LUT:
//    if lut_yuv_mem_data_r_last_u[17:16] = 3 then
//    format is: signed (2's complement) 15.3-bit fixed-point
//    else format is: unsigned 15.3-bit fixed-point
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_U_DEFAULT 131072
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_U_DATASIZE 18
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_U_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_U_REG_ADDR 0xe6d8
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_U_OFFSET 0xd8
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_U_FIELD_MASK 0x3ffff

// args: data (18-bit)
static __inline void acamera_isp_out_format_lut_yuv_mem_data_r_last_u_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6d8 );
    system_isp_write_32( base + 0xe6d8, ( ( ( uint32_t )( data & 0x3ffff ) ) << 0 ) | ( curr & 0xfffc0000 ) );
}
static __inline uint32_t acamera_isp_out_format_lut_yuv_mem_data_r_last_u_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe6d8 ) & 0x3ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_yuv_mem_data_r_last_v
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// The last node value for V channel of YUV pipeline LUT.
//     Format for all nodes of this LUT:
//     if lut_yuv_mem_data_r_last_v[17:16] = 3 then
//     format is: signed (2's complement) 15.3-bit fixed-point
//     else format is: unsigned 15.3-bit fixed-point
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_V_DEFAULT 131072
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_V_DATASIZE 18
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_V_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_V_REG_ADDR 0xe6dc
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_V_OFFSET 0xdc
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_V_FIELD_MASK 0x3ffff

// args: data (18-bit)
static __inline void acamera_isp_out_format_lut_yuv_mem_data_r_last_v_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6dc );
    system_isp_write_32( base + 0xe6dc, ( ( ( uint32_t )( data & 0x3ffff ) ) << 0 ) | ( curr & 0xfffc0000 ) );
}
static __inline uint32_t acamera_isp_out_format_lut_yuv_mem_data_r_last_v_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe6dc ) & 0x3ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_luv_mem_data_r_last_u
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// The last node value for U channel of LUV pipeline LUT.
//    Format for all nodes of this LUT:
//    if lut_luv_mem_data_r_last_u[17:16] = 3 then
//    format is: signed (2's complement) 15.3-bit fixed-point
//    else format is: unsigned 15.3-bit fixed-point
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_U_DEFAULT 131072
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_U_DATASIZE 18
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_U_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_U_REG_ADDR 0xe6e0
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_U_OFFSET 0xe0
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_U_FIELD_MASK 0x3ffff

// args: data (18-bit)
static __inline void acamera_isp_out_format_lut_luv_mem_data_r_last_u_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6e0 );
    system_isp_write_32( base + 0xe6e0, ( ( ( uint32_t )( data & 0x3ffff ) ) << 0 ) | ( curr & 0xfffc0000 ) );
}
static __inline uint32_t acamera_isp_out_format_lut_luv_mem_data_r_last_u_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe6e0 ) & 0x3ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_luv_mem_data_r_last_v
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// The last node value for V channel of LUV pipeline LUT.
//    Format for all nodes of this LUT:
//    if lut_luv_mem_data_r_last_v[17:16] = 3 then
//    format is: signed (2's complement) 15.3-bit fixed-point
//    else format is: unsigned 15.3-bit fixed-point
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_V_DEFAULT 131072
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_V_DATASIZE 18
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_V_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_V_REG_ADDR 0xe6e4
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_V_OFFSET 0xe4
#define ACAMERA_ISP_OUT_FORMAT_LUT_LUV_MEM_DATA_R_LAST_V_FIELD_MASK 0x3ffff

// args: data (18-bit)
static __inline void acamera_isp_out_format_lut_luv_mem_data_r_last_v_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6e4 );
    system_isp_write_32( base + 0xe6e4, ( ( ( uint32_t )( data & 0x3ffff ) ) << 0 ) | ( curr & 0xfffc0000 ) );
}
static __inline uint32_t acamera_isp_out_format_lut_luv_mem_data_r_last_v_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe6e4 ) & 0x3ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_yuv_mem_data_r_last_y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// The last node value for Y channel of YUV pipeline LUT.
//    Format for all nodes of this LUT:
//    if lut_luv_y_mem_data_r_last_v[17:16] = 3 then
//    format is: signed (2's complement) 15.3-bit fixed-point
//    else format is: unsigned 15.3-bit fixed-point
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_Y_DEFAULT 131072
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_Y_DATASIZE 18
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_Y_REG_ADDR 0xe6e8
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_Y_OFFSET 0xe8
#define ACAMERA_ISP_OUT_FORMAT_LUT_YUV_MEM_DATA_R_LAST_Y_FIELD_MASK 0x3ffff

// args: data (18-bit)
static __inline void acamera_isp_out_format_lut_yuv_mem_data_r_last_y_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6e8 );
    system_isp_write_32( base + 0xe6e8, ( ( ( uint32_t )( data & 0x3ffff ) ) << 0 ) | ( curr & 0xfffc0000 ) );
}
static __inline uint32_t acamera_isp_out_format_lut_yuv_mem_data_r_last_y_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe6e8 ) & 0x3ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: lut_xyz2luv_mem_data_r_last
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// The last node value for L channel of LUV pipeline LUT.
//    Format for all nodes of this LUT:
//    if lut_xyz2luv_mem_data_r_last_v[17:16] = 3 then
//    format is: signed (2's complement) 15.3-bit fixed-point
//    else format is: unsigned 15.3-bit fixed-point
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_MEM_DATA_R_LAST_DEFAULT 131072
#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_MEM_DATA_R_LAST_DATASIZE 18
#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_MEM_DATA_R_LAST_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_MEM_DATA_R_LAST_REG_ADDR 0xe6ec
#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_MEM_DATA_R_LAST_OFFSET 0xec
#define ACAMERA_ISP_OUT_FORMAT_LUT_XYZ2LUV_MEM_DATA_R_LAST_FIELD_MASK 0x3ffff

// args: data (18-bit)
static __inline void acamera_isp_out_format_lut_xyz2luv_mem_data_r_last_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe6ec );
    system_isp_write_32( base + 0xe6ec, ( ( ( uint32_t )( data & 0x3ffff ) ) << 0 ) | ( curr & 0xfffc0000 ) );
}
static __inline uint32_t acamera_isp_out_format_lut_xyz2luv_mem_data_r_last_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xe6ec ) & 0x3ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Crop
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Crop
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Enable crop
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Crop enable: 0=off 1=on
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FR_CROP_ENABLE_CROP_DEFAULT 0
#define ACAMERA_ISP_FR_CROP_ENABLE_CROP_DATASIZE 1
#define ACAMERA_ISP_FR_CROP_ENABLE_CROP_FIELD_OFFSET 0
#define ACAMERA_ISP_FR_CROP_ENABLE_CROP_REG_ADDR 0xe700
#define ACAMERA_ISP_FR_CROP_ENABLE_CROP_OFFSET 0x0
#define ACAMERA_ISP_FR_CROP_ENABLE_CROP_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_fr_crop_enable_crop_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe700 );
    system_isp_write_32( base + 0xe700, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_fr_crop_enable_crop_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe700 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: start x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Horizontal offset from left side of image in pixels for output crop window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FR_CROP_START_X_DEFAULT 0
#define ACAMERA_ISP_FR_CROP_START_X_DATASIZE 16
#define ACAMERA_ISP_FR_CROP_START_X_FIELD_OFFSET 0
#define ACAMERA_ISP_FR_CROP_START_X_REG_ADDR 0xe704
#define ACAMERA_ISP_FR_CROP_START_X_OFFSET 0x4
#define ACAMERA_ISP_FR_CROP_START_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_fr_crop_start_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe704 );
    system_isp_write_32( base + 0xe704, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_fr_crop_start_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe704 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: start y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Vertical offset from top of image in lines for output crop window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FR_CROP_START_Y_DEFAULT 0
#define ACAMERA_ISP_FR_CROP_START_Y_DATASIZE 16
#define ACAMERA_ISP_FR_CROP_START_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_FR_CROP_START_Y_REG_ADDR 0xe708
#define ACAMERA_ISP_FR_CROP_START_Y_OFFSET 0x8
#define ACAMERA_ISP_FR_CROP_START_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_fr_crop_start_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe708 );
    system_isp_write_32( base + 0xe708, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_fr_crop_start_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe708 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: size x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// width of output crop window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FR_CROP_SIZE_X_DEFAULT 65535
#define ACAMERA_ISP_FR_CROP_SIZE_X_DATASIZE 16
#define ACAMERA_ISP_FR_CROP_SIZE_X_FIELD_OFFSET 0
#define ACAMERA_ISP_FR_CROP_SIZE_X_REG_ADDR 0xe70c
#define ACAMERA_ISP_FR_CROP_SIZE_X_OFFSET 0xc
#define ACAMERA_ISP_FR_CROP_SIZE_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_fr_crop_size_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe70c );
    system_isp_write_32( base + 0xe70c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_fr_crop_size_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe70c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: size y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// height of output crop window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FR_CROP_SIZE_Y_DEFAULT 65535
#define ACAMERA_ISP_FR_CROP_SIZE_Y_DATASIZE 16
#define ACAMERA_ISP_FR_CROP_SIZE_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_FR_CROP_SIZE_Y_REG_ADDR 0xe710
#define ACAMERA_ISP_FR_CROP_SIZE_Y_OFFSET 0x10
#define ACAMERA_ISP_FR_CROP_SIZE_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_fr_crop_size_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe710 );
    system_isp_write_32( base + 0xe710, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_fr_crop_size_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xe710 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Out format MUX for AXI 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Mode select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Select the output colourspace.
//                      x denotes component width configured by Mode width[3:0].
//                      Specific number like 8,10,12,etc. indicates unconfigurable component width.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_DATASIZE 5
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_REG_ADDR 0xe720
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_FIELD_MASK 0x1f
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_NO_OUTPUT ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_RGBRX ( 1 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_RGBGX ( 2 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_RGBBX ( 3 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_YUVYX ( 4 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_YUVUX ( 5 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_YUVVX ( 6 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_YUVUV88 ( 7 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_YUVVU88 ( 8 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_S8 ( 9 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_HS88 ( 10 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_LUVLX ( 11 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_LUVUV88 ( 12 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_SUBSAMPLED_PLANE_MODE_1__X_LIKE_IRX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 13 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_SUBSAMPLED_PLANE_MODE_2__X_LIKE_RCCBX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 14 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_RGBRGB888_OR_RGBBGR888 ( 15 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_LUVUX ( 16 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_LUVVX ( 17 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_SX ( 18 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_HSHX ( 19 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_HSSX ( 20 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_SH88 ( 21 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_LUVVU88 ( 22 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_RAW8 ( 24 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_RAW10 ( 25 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_RAW12 ( 26 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_RAW16 ( 27 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_SELECT_RAW24 ( 30 )

// args: data (5-bit)
static __inline void acamera_isp_out_format_mux_a1_mode_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe720 );
    system_isp_write_32( base + 0xe720, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_out_format_mux_a1_mode_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe720 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output data alignment for Mode select != 15 (or RGB component order for Mode select = 15)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MSB_ALIGN_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MSB_ALIGN_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MSB_ALIGN_FIELD_OFFSET 7
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MSB_ALIGN_REG_ADDR 0xe720
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MSB_ALIGN_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MSB_ALIGN_FIELD_MASK 0x80
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MSB_ALIGN_ALIGN_TO_LSB_OR_ORDER_AS_BGR_FOR_MODE_SELECT__15 ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MSB_ALIGN_ALIGN_TO_MSB_OR_ORDER_AS_RGB_FOR_MODE_SELECT__15 ( 1 )

// args: data (1-bit)
static __inline void acamera_isp_out_format_mux_a1_msb_align_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe720 );
    system_isp_write_32( base + 0xe720, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_out_format_mux_a1_msb_align_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe720 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mode width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Select data width (x) of colour components for configurable modes.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_WIDTH_DEFAULT 20
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_WIDTH_DATASIZE 4
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_WIDTH_FIELD_OFFSET 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_WIDTH_REG_ADDR 0xe720
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_WIDTH_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_MODE_WIDTH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_isp_out_format_mux_a1_mode_width_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe720 );
    system_isp_write_32( base + 0xe720, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_isp_out_format_mux_a1_mode_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe720 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Output container data width (informative)
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_DATA_WIDTH_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_DATA_WIDTH_DATASIZE 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_DATA_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_DATA_WIDTH_REG_ADDR 0xe724
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_DATA_WIDTH_OFFSET 0x4
#define ACAMERA_ISP_OUT_FORMAT_MUX_A1_DATA_WIDTH_FIELD_MASK 0xff

// args: data (8-bit)
static __inline uint8_t acamera_isp_out_format_mux_a1_data_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe724 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Out format MUX for AXI 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Mode select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Select the output colourspace.
//                      x denotes component width configured by Mode width[3:0].
//                      Specific number like 8,10,12,etc. indicates unconfigurable component width.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_DATASIZE 5
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_REG_ADDR 0xe728
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_FIELD_MASK 0x1f
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_NO_OUTPUT ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_RGBRX ( 1 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_RGBGX ( 2 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_RGBBX ( 3 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_YUVYX ( 4 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_YUVUX ( 5 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_YUVVX ( 6 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_YUVUV88 ( 7 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_YUVVU88 ( 8 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_S8 ( 9 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_HS88 ( 10 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_LUVLX ( 11 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_LUVUV88 ( 12 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_SUBSAMPLED_PLANE_MODE_1__X_LIKE_IRX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 13 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_SUBSAMPLED_PLANE_MODE_2__X_LIKE_RCCBX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 14 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_RGBRGB888_OR_RGBBGR888 ( 15 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_LUVUX ( 16 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_LUVVX ( 17 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_SX ( 18 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_HSHX ( 19 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_HSSX ( 20 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_SH88 ( 21 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_LUVVU88 ( 22 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_RAW8 ( 24 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_RAW10 ( 25 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_RAW12 ( 26 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_RAW16 ( 27 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_SELECT_RAW24 ( 30 )

// args: data (5-bit)
static __inline void acamera_isp_out_format_mux_a2_mode_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe728 );
    system_isp_write_32( base + 0xe728, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_out_format_mux_a2_mode_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe728 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output data alignment for Mode select != 15 (or RGB component order for Mode select = 15)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MSB_ALIGN_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MSB_ALIGN_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MSB_ALIGN_FIELD_OFFSET 7
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MSB_ALIGN_REG_ADDR 0xe728
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MSB_ALIGN_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MSB_ALIGN_FIELD_MASK 0x80
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MSB_ALIGN_ALIGN_TO_LSB_OR_ORDER_AS_BGR_FOR_MODE_SELECT__15 ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MSB_ALIGN_ALIGN_TO_MSB_OR_ORDER_AS_RGB_FOR_MODE_SELECT__15 ( 1 )

// args: data (1-bit)
static __inline void acamera_isp_out_format_mux_a2_msb_align_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe728 );
    system_isp_write_32( base + 0xe728, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_out_format_mux_a2_msb_align_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe728 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mode width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Select data width (x) of colour components for configurable modes.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_WIDTH_DEFAULT 20
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_WIDTH_DATASIZE 4
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_WIDTH_FIELD_OFFSET 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_WIDTH_REG_ADDR 0xe728
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_WIDTH_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_MODE_WIDTH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_isp_out_format_mux_a2_mode_width_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe728 );
    system_isp_write_32( base + 0xe728, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_isp_out_format_mux_a2_mode_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe728 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Output container data width (informative)
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_DATA_WIDTH_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_DATA_WIDTH_DATASIZE 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_DATA_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_DATA_WIDTH_REG_ADDR 0xe72c
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_DATA_WIDTH_OFFSET 0x4
#define ACAMERA_ISP_OUT_FORMAT_MUX_A2_DATA_WIDTH_FIELD_MASK 0xff

// args: data (8-bit)
static __inline uint8_t acamera_isp_out_format_mux_a2_data_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe72c ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Out format MUX for AXI 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Mode select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Select the output colourspace.
//                      x denotes component width configured by Mode width[3:0].
//                      Specific number like 8,10,12,etc. indicates unconfigurable component width.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_DATASIZE 5
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_REG_ADDR 0xe730
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_FIELD_MASK 0x1f
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_NO_OUTPUT ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_RGBRX ( 1 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_RGBGX ( 2 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_RGBBX ( 3 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_YUVYX ( 4 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_YUVUX ( 5 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_YUVVX ( 6 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_YUVUV88 ( 7 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_YUVVU88 ( 8 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_S8 ( 9 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_HS88 ( 10 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_LUVLX ( 11 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_LUVUV88 ( 12 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_SUBSAMPLED_PLANE_MODE_1__X_LIKE_IRX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 13 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_SUBSAMPLED_PLANE_MODE_2__X_LIKE_RCCBX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 14 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_RGBRGB888_OR_RGBBGR888 ( 15 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_LUVUX ( 16 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_LUVVX ( 17 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_SX ( 18 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_HSHX ( 19 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_HSSX ( 20 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_SH88 ( 21 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_LUVVU88 ( 22 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_RAW8 ( 24 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_RAW10 ( 25 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_RAW12 ( 26 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_RAW16 ( 27 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_SELECT_RAW24 ( 30 )

// args: data (5-bit)
static __inline void acamera_isp_out_format_mux_a3_mode_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe730 );
    system_isp_write_32( base + 0xe730, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_out_format_mux_a3_mode_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe730 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output data alignment for Mode select != 15 (or RGB component order for Mode select = 15)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MSB_ALIGN_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MSB_ALIGN_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MSB_ALIGN_FIELD_OFFSET 7
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MSB_ALIGN_REG_ADDR 0xe730
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MSB_ALIGN_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MSB_ALIGN_FIELD_MASK 0x80
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MSB_ALIGN_ALIGN_TO_LSB_OR_ORDER_AS_BGR_FOR_MODE_SELECT__15 ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MSB_ALIGN_ALIGN_TO_MSB_OR_ORDER_AS_RGB_FOR_MODE_SELECT__15 ( 1 )

// args: data (1-bit)
static __inline void acamera_isp_out_format_mux_a3_msb_align_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe730 );
    system_isp_write_32( base + 0xe730, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_out_format_mux_a3_msb_align_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe730 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mode width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Select data width (x) of colour components for configurable modes.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_WIDTH_DEFAULT 20
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_WIDTH_DATASIZE 4
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_WIDTH_FIELD_OFFSET 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_WIDTH_REG_ADDR 0xe730
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_WIDTH_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_MODE_WIDTH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_isp_out_format_mux_a3_mode_width_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe730 );
    system_isp_write_32( base + 0xe730, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_isp_out_format_mux_a3_mode_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe730 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Output container data width (informative)
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_DATA_WIDTH_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_DATA_WIDTH_DATASIZE 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_DATA_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_DATA_WIDTH_REG_ADDR 0xe734
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_DATA_WIDTH_OFFSET 0x4
#define ACAMERA_ISP_OUT_FORMAT_MUX_A3_DATA_WIDTH_FIELD_MASK 0xff

// args: data (8-bit)
static __inline uint8_t acamera_isp_out_format_mux_a3_data_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe734 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Out format MUX for Output 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Mode select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Select the output colourspace.
//                      x denotes component width configured by Mode width[3:0].
//                      Specific number like 8,10,12,etc. indicates unconfigurable component width.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_DATASIZE 5
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_REG_ADDR 0xe738
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_FIELD_MASK 0x1f
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_NO_OUTPUT ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_RGBRX ( 1 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_RGBGX ( 2 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_RGBBX ( 3 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_YUVYX ( 4 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_YUVUX ( 5 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_YUVVX ( 6 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_YUVUV88 ( 7 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_YUVVU88 ( 8 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_S8 ( 9 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_HS88 ( 10 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_LUVLX ( 11 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_LUVUV88 ( 12 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_SUBSAMPLED_PLANE_MODE_1__X_LIKE_IRX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 13 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_SUBSAMPLED_PLANE_MODE_2__X_LIKE_RCCBX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 14 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_RGBGB88_OR_RGBGR88 ( 15 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_LUVUX ( 16 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_LUVVX ( 17 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_SX ( 18 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_HSHX ( 19 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_HSSX ( 20 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_SH88 ( 21 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_LUVVU88 ( 22 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_RAW8 ( 24 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_RAW10 ( 25 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_RAW12 ( 26 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_RAW16_DATA_WIDTH7016 ( 27 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_SELECT_RAW16_DATA_WIDTH7024 ( 30 )

// args: data (5-bit)
static __inline void acamera_isp_out_format_mux_1_mode_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe738 );
    system_isp_write_32( base + 0xe738, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_out_format_mux_1_mode_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe738 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output data alignment for Mode select != 15 (or RGB component order for Mode select = 15)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MSB_ALIGN_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MSB_ALIGN_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MSB_ALIGN_FIELD_OFFSET 7
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MSB_ALIGN_REG_ADDR 0xe738
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MSB_ALIGN_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MSB_ALIGN_FIELD_MASK 0x80
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MSB_ALIGN_ALIGN_TO_LSB_OR_ORDER_AS_GR_FOR_MODE_SELECT__15 ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MSB_ALIGN_ALIGN_TO_MSB_OR_ORDER_AS_GB_FOR_MODE_SELECT__15 ( 1 )

// args: data (1-bit)
static __inline void acamera_isp_out_format_mux_1_msb_align_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe738 );
    system_isp_write_32( base + 0xe738, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_out_format_mux_1_msb_align_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe738 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mode width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Select data width (x) of colour components for configurable modes.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_WIDTH_DEFAULT 20
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_WIDTH_DATASIZE 4
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_WIDTH_FIELD_OFFSET 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_WIDTH_REG_ADDR 0xe738
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_WIDTH_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_MODE_WIDTH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_isp_out_format_mux_1_mode_width_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe738 );
    system_isp_write_32( base + 0xe738, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_isp_out_format_mux_1_mode_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe738 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Output container data width (informative)
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_1_DATA_WIDTH_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_DATA_WIDTH_DATASIZE 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_DATA_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_DATA_WIDTH_REG_ADDR 0xe73c
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_DATA_WIDTH_OFFSET 0x4
#define ACAMERA_ISP_OUT_FORMAT_MUX_1_DATA_WIDTH_FIELD_MASK 0xff

// args: data (8-bit)
static __inline uint8_t acamera_isp_out_format_mux_1_data_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe73c ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Out format MUX for Output 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Mode select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Select the output colourspace.
//                      x denotes component width configured by Mode width[3:0].
//                      Specific number like 8,10,12,etc. indicates unconfigurable component width.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_DATASIZE 5
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_REG_ADDR 0xe740
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_FIELD_MASK 0x1f
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_NO_OUTPUT ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_RGBRX ( 1 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_RGBGX ( 2 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_RGBBX ( 3 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_YUVYX ( 4 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_YUVUX ( 5 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_YUVVX ( 6 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_YUVUV88 ( 7 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_YUVVU88 ( 8 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_S8 ( 9 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_HS88 ( 10 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_LUVLX ( 11 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_LUVUV88 ( 12 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_SUBSAMPLED_PLANE_MODE_1__X_LIKE_IRX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 13 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_SUBSAMPLED_PLANE_MODE_2__X_LIKE_RCCBX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 14 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_RGBGB88_OR_RGBGR88 ( 15 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_LUVUX ( 16 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_LUVVX ( 17 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_SX ( 18 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_HSHX ( 19 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_HSSX ( 20 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_SH88 ( 21 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_LUVVU88 ( 22 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_RAW8 ( 24 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_RAW10 ( 25 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_RAW12 ( 26 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_RAW16_DATA_WIDTH7016 ( 27 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_SELECT_RAW16_DATA_WIDTH7024 ( 30 )

// args: data (5-bit)
static __inline void acamera_isp_out_format_mux_2_mode_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe740 );
    system_isp_write_32( base + 0xe740, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_out_format_mux_2_mode_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe740 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output data alignment for Mode select != 15 (or RGB component order for Mode select = 15)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MSB_ALIGN_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MSB_ALIGN_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MSB_ALIGN_FIELD_OFFSET 7
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MSB_ALIGN_REG_ADDR 0xe740
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MSB_ALIGN_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MSB_ALIGN_FIELD_MASK 0x80
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MSB_ALIGN_ALIGN_TO_LSB_OR_ORDER_AS_GR_FOR_MODE_SELECT__15 ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MSB_ALIGN_ALIGN_TO_MSB_OR_ORDER_AS_GB_FOR_MODE_SELECT__15 ( 1 )

// args: data (1-bit)
static __inline void acamera_isp_out_format_mux_2_msb_align_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe740 );
    system_isp_write_32( base + 0xe740, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_out_format_mux_2_msb_align_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe740 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mode width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Select data width (x) of colour components for configurable modes.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_WIDTH_DEFAULT 20
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_WIDTH_DATASIZE 4
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_WIDTH_FIELD_OFFSET 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_WIDTH_REG_ADDR 0xe740
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_WIDTH_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_MODE_WIDTH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_isp_out_format_mux_2_mode_width_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe740 );
    system_isp_write_32( base + 0xe740, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_isp_out_format_mux_2_mode_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe740 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Output container data width (informative)
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_2_DATA_WIDTH_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_DATA_WIDTH_DATASIZE 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_DATA_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_DATA_WIDTH_REG_ADDR 0xe744
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_DATA_WIDTH_OFFSET 0x4
#define ACAMERA_ISP_OUT_FORMAT_MUX_2_DATA_WIDTH_FIELD_MASK 0xff

// args: data (8-bit)
static __inline uint8_t acamera_isp_out_format_mux_2_data_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe744 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Out format MUX for Output 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Mode select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Select the output colourspace.
//                      x denotes component width configured by Mode width[3:0].
//                      Specific number like 8,10,12,etc. indicates unconfigurable component width.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_DATASIZE 5
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_REG_ADDR 0xe748
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_FIELD_MASK 0x1f
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_NO_OUTPUT ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_RGBRX ( 1 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_RGBGX ( 2 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_RGBBX ( 3 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_YUVYX ( 4 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_YUVUX ( 5 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_YUVVX ( 6 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_YUVUV88 ( 7 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_YUVVU88 ( 8 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_S8 ( 9 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_HS88 ( 10 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_LUVLX ( 11 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_LUVUV88 ( 12 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_SUBSAMPLED_PLANE_MODE_1__X_LIKE_IRX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 13 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_SUBSAMPLED_PLANE_MODE_2__X_LIKE_RCCBX_SEE_SEL_IR_AND_SS_IR_IN_OUTPUT_FORMATTER ( 14 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_RGBGB88_OR_RGBGR88 ( 15 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_LUVUX ( 16 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_LUVVX ( 17 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_SX ( 18 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_HSHX ( 19 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_HSSX ( 20 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_SH88 ( 21 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_LUVVU88 ( 22 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_RAW8 ( 24 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_RAW10 ( 25 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_RAW12 ( 26 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_RAW16_DATA_WIDTH7016 ( 27 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_SELECT_RAW16_DATA_WIDTH7024 ( 30 )

// args: data (5-bit)
static __inline void acamera_isp_out_format_mux_3_mode_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe748 );
    system_isp_write_32( base + 0xe748, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_out_format_mux_3_mode_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe748 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output data alignment for Mode select != 15 (or RGB component order for Mode select = 15)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MSB_ALIGN_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MSB_ALIGN_DATASIZE 1
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MSB_ALIGN_FIELD_OFFSET 7
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MSB_ALIGN_REG_ADDR 0xe748
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MSB_ALIGN_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MSB_ALIGN_FIELD_MASK 0x80
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MSB_ALIGN_ALIGN_TO_LSB_OR_ORDER_AS_GR_FOR_MODE_SELECT__15 ( 0 )
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MSB_ALIGN_ALIGN_TO_MSB_OR_ORDER_AS_GB_FOR_MODE_SELECT__15 ( 1 )

// args: data (1-bit)
static __inline void acamera_isp_out_format_mux_3_msb_align_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe748 );
    system_isp_write_32( base + 0xe748, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_out_format_mux_3_msb_align_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe748 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mode width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Select data width (x) of colour components for configurable modes.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_WIDTH_DEFAULT 20
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_WIDTH_DATASIZE 4
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_WIDTH_FIELD_OFFSET 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_WIDTH_REG_ADDR 0xe748
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_WIDTH_OFFSET 0x0
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_MODE_WIDTH_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_isp_out_format_mux_3_mode_width_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xe748 );
    system_isp_write_32( base + 0xe748, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_isp_out_format_mux_3_mode_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe748 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//             Output container data width (informative)
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_OUT_FORMAT_MUX_3_DATA_WIDTH_DEFAULT 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_DATA_WIDTH_DATASIZE 8
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_DATA_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_DATA_WIDTH_REG_ADDR 0xe74c
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_DATA_WIDTH_OFFSET 0x4
#define ACAMERA_ISP_OUT_FORMAT_MUX_3_DATA_WIDTH_FIELD_MASK 0xff

// args: data (8-bit)
static __inline uint8_t acamera_isp_out_format_mux_3_data_width_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xe74c ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Check isp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Manual triggering of the fault
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_MANUAL_TRIGGER_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_MANUAL_TRIGGER_REG_ADDR 0xeb00
#define ACAMERA_ISP_FRAME_CHECK_ISP_MANUAL_TRIGGER_OFFSET 0x0
#define ACAMERA_ISP_FRAME_CHECK_ISP_MANUAL_TRIGGER_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_frame_check_isp_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeb00 );
    system_isp_write_32( base + 0xeb00, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_frame_check_isp_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeb00 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Field mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0=pulse; 1=edge
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_FIELD_MODE_DEFAULT 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_FIELD_MODE_DATASIZE 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_FIELD_MODE_FIELD_OFFSET 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_FIELD_MODE_REG_ADDR 0xeb00
#define ACAMERA_ISP_FRAME_CHECK_ISP_FIELD_MODE_OFFSET 0x0
#define ACAMERA_ISP_FRAME_CHECK_ISP_FIELD_MODE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_frame_check_isp_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeb00 );
    system_isp_write_32( base + 0xeb00, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_frame_check_isp_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeb00 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MIN_DEFAULT 50
#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MIN_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MIN_REG_ADDR 0xeb0c
#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MIN_OFFSET 0xc
#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_hblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb0c, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb0c );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MAX_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MAX_REG_ADDR 0xeb10
#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MAX_OFFSET 0x10
#define ACAMERA_ISP_FRAME_CHECK_ISP_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_hblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb10, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb10 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MIN_DEFAULT 4132
#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MIN_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MIN_REG_ADDR 0xeb14
#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MIN_OFFSET 0x14
#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_vblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb14, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb14 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MAX_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MAX_REG_ADDR 0xeb18
#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MAX_OFFSET 0x18
#define ACAMERA_ISP_FRAME_CHECK_ISP_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_vblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb18, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb18 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Check isp crop
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Manual triggering of the fault
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_MANUAL_TRIGGER_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_MANUAL_TRIGGER_REG_ADDR 0xeb20
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_MANUAL_TRIGGER_OFFSET 0x0
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_MANUAL_TRIGGER_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_frame_check_isp_crop_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeb20 );
    system_isp_write_32( base + 0xeb20, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_frame_check_isp_crop_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeb20 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Field mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0=pulse; 1=edge
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_FIELD_MODE_DEFAULT 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_FIELD_MODE_DATASIZE 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_FIELD_MODE_FIELD_OFFSET 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_FIELD_MODE_REG_ADDR 0xeb20
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_FIELD_MODE_OFFSET 0x0
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_FIELD_MODE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_frame_check_isp_crop_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeb20 );
    system_isp_write_32( base + 0xeb20, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_frame_check_isp_crop_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeb20 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_WIDTH_DEFAULT 6432
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_WIDTH_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_WIDTH_REG_ADDR 0xeb24
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_WIDTH_OFFSET 0x4
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_WIDTH_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_crop_active_width_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb24, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_crop_active_width_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb24 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active height
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_HEIGHT_DEFAULT 4224
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_HEIGHT_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_HEIGHT_REG_ADDR 0xeb28
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_HEIGHT_OFFSET 0x8
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_ACTIVE_HEIGHT_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_crop_active_height_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb28, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_crop_active_height_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb28 );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MIN_DEFAULT 50
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MIN_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MIN_REG_ADDR 0xeb2c
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MIN_OFFSET 0xc
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_crop_hblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb2c, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_crop_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb2c );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MAX_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MAX_REG_ADDR 0xeb30
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MAX_OFFSET 0x10
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_crop_hblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb30, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_crop_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb30 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MIN_DEFAULT 4132
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MIN_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MIN_REG_ADDR 0xeb34
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MIN_OFFSET 0x14
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_crop_vblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb34, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_crop_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb34 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MAX_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MAX_REG_ADDR 0xeb38
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MAX_OFFSET 0x18
#define ACAMERA_ISP_FRAME_CHECK_ISP_CROP_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_crop_vblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb38, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_crop_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb38 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Check isp out 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Manual triggering of the fault
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_MANUAL_TRIGGER_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_MANUAL_TRIGGER_REG_ADDR 0xeb40
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_MANUAL_TRIGGER_OFFSET 0x0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_MANUAL_TRIGGER_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_frame_check_isp_out_1_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeb40 );
    system_isp_write_32( base + 0xeb40, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_frame_check_isp_out_1_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeb40 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Field mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0=pulse; 1=edge
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_FIELD_MODE_DEFAULT 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_FIELD_MODE_DATASIZE 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_FIELD_MODE_FIELD_OFFSET 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_FIELD_MODE_REG_ADDR 0xeb40
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_FIELD_MODE_OFFSET 0x0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_FIELD_MODE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_frame_check_isp_out_1_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeb40 );
    system_isp_write_32( base + 0xeb40, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_frame_check_isp_out_1_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeb40 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_WIDTH_DEFAULT 6432
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_WIDTH_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_WIDTH_REG_ADDR 0xeb44
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_WIDTH_OFFSET 0x4
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_WIDTH_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_1_active_width_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb44, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_1_active_width_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb44 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active height
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_HEIGHT_DEFAULT 4224
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_HEIGHT_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_HEIGHT_REG_ADDR 0xeb48
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_HEIGHT_OFFSET 0x8
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_ACTIVE_HEIGHT_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_1_active_height_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb48, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_1_active_height_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb48 );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MIN_DEFAULT 50
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MIN_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MIN_REG_ADDR 0xeb4c
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MIN_OFFSET 0xc
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_1_hblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb4c, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_1_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb4c );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MAX_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MAX_REG_ADDR 0xeb50
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MAX_OFFSET 0x10
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_1_hblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb50, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_1_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb50 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MIN_DEFAULT 4132
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MIN_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MIN_REG_ADDR 0xeb54
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MIN_OFFSET 0x14
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_1_vblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb54, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_1_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb54 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MAX_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MAX_REG_ADDR 0xeb58
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MAX_OFFSET 0x18
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_1_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_1_vblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb58, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_1_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb58 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Check isp out 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Manual triggering of the fault
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_MANUAL_TRIGGER_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_MANUAL_TRIGGER_REG_ADDR 0xeb60
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_MANUAL_TRIGGER_OFFSET 0x0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_MANUAL_TRIGGER_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_frame_check_isp_out_2_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeb60 );
    system_isp_write_32( base + 0xeb60, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_frame_check_isp_out_2_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeb60 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Field mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0=pulse; 1=edge
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_FIELD_MODE_DEFAULT 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_FIELD_MODE_DATASIZE 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_FIELD_MODE_FIELD_OFFSET 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_FIELD_MODE_REG_ADDR 0xeb60
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_FIELD_MODE_OFFSET 0x0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_FIELD_MODE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_frame_check_isp_out_2_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeb60 );
    system_isp_write_32( base + 0xeb60, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_frame_check_isp_out_2_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeb60 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_WIDTH_DEFAULT 6432
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_WIDTH_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_WIDTH_REG_ADDR 0xeb64
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_WIDTH_OFFSET 0x4
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_WIDTH_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_2_active_width_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb64, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_2_active_width_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb64 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active height
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_HEIGHT_DEFAULT 4224
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_HEIGHT_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_HEIGHT_REG_ADDR 0xeb68
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_HEIGHT_OFFSET 0x8
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_ACTIVE_HEIGHT_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_2_active_height_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb68, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_2_active_height_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb68 );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MIN_DEFAULT 50
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MIN_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MIN_REG_ADDR 0xeb6c
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MIN_OFFSET 0xc
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_2_hblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb6c, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_2_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb6c );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MAX_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MAX_REG_ADDR 0xeb70
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MAX_OFFSET 0x10
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_2_hblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb70, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_2_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb70 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MIN_DEFAULT 4132
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MIN_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MIN_REG_ADDR 0xeb74
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MIN_OFFSET 0x14
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_2_vblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb74, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_2_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb74 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MAX_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MAX_REG_ADDR 0xeb78
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MAX_OFFSET 0x18
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_2_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_2_vblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb78, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_2_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb78 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Check isp out 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Manual triggering of the fault
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_MANUAL_TRIGGER_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_MANUAL_TRIGGER_REG_ADDR 0xeb80
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_MANUAL_TRIGGER_OFFSET 0x0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_MANUAL_TRIGGER_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_isp_frame_check_isp_out_3_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeb80 );
    system_isp_write_32( base + 0xeb80, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_isp_frame_check_isp_out_3_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeb80 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Field mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0=pulse; 1=edge
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_FIELD_MODE_DEFAULT 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_FIELD_MODE_DATASIZE 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_FIELD_MODE_FIELD_OFFSET 1
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_FIELD_MODE_REG_ADDR 0xeb80
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_FIELD_MODE_OFFSET 0x0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_FIELD_MODE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_isp_frame_check_isp_out_3_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeb80 );
    system_isp_write_32( base + 0xeb80, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_isp_frame_check_isp_out_3_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeb80 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active width
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_WIDTH_DEFAULT 6432
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_WIDTH_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_WIDTH_REG_ADDR 0xeb84
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_WIDTH_OFFSET 0x4
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_WIDTH_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_3_active_width_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb84, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_3_active_width_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb84 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active height
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_HEIGHT_DEFAULT 4224
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_HEIGHT_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_HEIGHT_REG_ADDR 0xeb88
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_HEIGHT_OFFSET 0x8
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_ACTIVE_HEIGHT_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_3_active_height_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb88, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_3_active_height_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb88 );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MIN_DEFAULT 50
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MIN_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MIN_REG_ADDR 0xeb8c
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MIN_OFFSET 0xc
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_3_hblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb8c, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_3_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb8c );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MAX_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MAX_REG_ADDR 0xeb90
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MAX_OFFSET 0x10
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_3_hblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb90, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_3_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb90 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MIN_DEFAULT 4132
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MIN_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MIN_REG_ADDR 0xeb94
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MIN_OFFSET 0x14
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_3_vblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb94, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_3_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb94 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MAX_DATASIZE 32
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MAX_REG_ADDR 0xeb98
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MAX_OFFSET 0x18
#define ACAMERA_ISP_FRAME_CHECK_ISP_OUT_3_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_isp_frame_check_isp_out_3_vblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0xeb98, data );
}
static __inline uint32_t acamera_isp_frame_check_isp_out_3_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0xeb98 );
}
// ------------------------------------------------------------------------------ //
// Group: Module config CRC
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Raw frontend
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Raw Frontend module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_RAW_FRONTEND_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_RAW_FRONTEND_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_RAW_FRONTEND_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_RAW_FRONTEND_REG_ADDR 0xeba0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_RAW_FRONTEND_OFFSET 0x0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_RAW_FRONTEND_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_raw_frontend_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeba0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Defect pixel
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Defect Pixel module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEFECT_PIXEL_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEFECT_PIXEL_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEFECT_PIXEL_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEFECT_PIXEL_REG_ADDR 0xeba0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEFECT_PIXEL_OFFSET 0x0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEFECT_PIXEL_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_defect_pixel_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeba0 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame stitch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Frame Stitch module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_FRAME_STITCH_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_FRAME_STITCH_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_FRAME_STITCH_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_FRAME_STITCH_REG_ADDR 0xeba4
#define ACAMERA_ISP_MODULE_CONFIG_CRC_FRAME_STITCH_OFFSET 0x4
#define ACAMERA_ISP_MODULE_CONFIG_CRC_FRAME_STITCH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_frame_stitch_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeba4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Sinter
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Sinter module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_SINTER_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_SINTER_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_SINTER_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_SINTER_REG_ADDR 0xeba4
#define ACAMERA_ISP_MODULE_CONFIG_CRC_SINTER_OFFSET 0x4
#define ACAMERA_ISP_MODULE_CONFIG_CRC_SINTER_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_sinter_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeba4 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Ca correction
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Chromatic Aberration Correction module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_CA_CORRECTION_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_CA_CORRECTION_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_CA_CORRECTION_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_CA_CORRECTION_REG_ADDR 0xeba8
#define ACAMERA_ISP_MODULE_CONFIG_CRC_CA_CORRECTION_OFFSET 0x8
#define ACAMERA_ISP_MODULE_CONFIG_CRC_CA_CORRECTION_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_ca_correction_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeba8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gamma fesq
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Frontend Gamma module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_FESQ_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_FESQ_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_FESQ_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_FESQ_REG_ADDR 0xeba8
#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_FESQ_OFFSET 0x8
#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_FESQ_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_gamma_fesq_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeba8 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Gamma besq
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Backend Gamma module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_BESQ_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_BESQ_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_BESQ_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_BESQ_REG_ADDR 0xebac
#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_BESQ_OFFSET 0xc
#define ACAMERA_ISP_MODULE_CONFIG_CRC_GAMMA_BESQ_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_gamma_besq_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebac ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Radial shading
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Radial Shading module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_RADIAL_SHADING_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_RADIAL_SHADING_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_RADIAL_SHADING_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_RADIAL_SHADING_REG_ADDR 0xebac
#define ACAMERA_ISP_MODULE_CONFIG_CRC_RADIAL_SHADING_OFFSET 0xc
#define ACAMERA_ISP_MODULE_CONFIG_CRC_RADIAL_SHADING_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_radial_shading_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebac ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Mesh shading
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Mesh Shading module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_MESH_SHADING_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_MESH_SHADING_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_MESH_SHADING_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_MESH_SHADING_REG_ADDR 0xebb0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_MESH_SHADING_OFFSET 0x10
#define ACAMERA_ISP_MODULE_CONFIG_CRC_MESH_SHADING_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_mesh_shading_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebb0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Iridix
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Iridix module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_IRIDIX_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_IRIDIX_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_IRIDIX_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_IRIDIX_REG_ADDR 0xebb0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_IRIDIX_OFFSET 0x10
#define ACAMERA_ISP_MODULE_CONFIG_CRC_IRIDIX_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_iridix_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebb0 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Demosaic
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the RGB Demosaic module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_REG_ADDR 0xebb4
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_OFFSET 0x14
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_demosaic_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebb4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Demosaic rgbir
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the RGBIr Demosaic module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RGBIR_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RGBIR_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RGBIR_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RGBIR_REG_ADDR 0xebb4
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RGBIR_OFFSET 0x14
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RGBIR_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_demosaic_rgbir_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebb4 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Demosaic rccc
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the RCCC Demosaic module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RCCC_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RCCC_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RCCC_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RCCC_REG_ADDR 0xebb8
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RCCC_OFFSET 0x18
#define ACAMERA_ISP_MODULE_CONFIG_CRC_DEMOSAIC_RCCC_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_demosaic_rccc_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebb8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Out format
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Output Formater module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_OUT_FORMAT_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_OUT_FORMAT_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_OUT_FORMAT_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_OUT_FORMAT_REG_ADDR 0xebb8
#define ACAMERA_ISP_MODULE_CONFIG_CRC_OUT_FORMAT_OFFSET 0x18
#define ACAMERA_ISP_MODULE_CONFIG_CRC_OUT_FORMAT_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_out_format_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebb8 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: metering_aexp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Auto Exposure Metering module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AEXP_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AEXP_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AEXP_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AEXP_REG_ADDR 0xebbc
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AEXP_OFFSET 0x1c
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AEXP_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_metering_aexp_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebbc ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: metering_awb
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Auto White Balance Metering module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AWB_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AWB_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AWB_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AWB_REG_ADDR 0xebbc
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AWB_OFFSET 0x1c
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_AWB_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_metering_awb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebbc ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: metering_hist_1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Global Histogram module for input channel n.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_1_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_1_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_1_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_1_REG_ADDR 0xebc0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_1_OFFSET 0x20
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_metering_hist_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebc0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: metering_hist_2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_2_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_2_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_2_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_2_REG_ADDR 0xebc0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_2_OFFSET 0x20
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_2_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_metering_hist_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebc0 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: metering_hist_3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_3_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_3_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_3_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_3_REG_ADDR 0xebc4
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_3_OFFSET 0x24
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_3_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_metering_hist_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebc4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: metering_hist_4
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_4_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_4_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_4_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_4_REG_ADDR 0xebc4
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_4_OFFSET 0x24
#define ACAMERA_ISP_MODULE_CONFIG_CRC_METERING_HIST_4_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_metering_hist_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebc4 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: roi_hist_1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the ROI Histogram module for input channel n.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_1_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_1_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_1_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_1_REG_ADDR 0xebc8
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_1_OFFSET 0x28
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_roi_hist_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebc8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: roi_hist_2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_2_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_2_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_2_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_2_REG_ADDR 0xebc8
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_2_OFFSET 0x28
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_2_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_roi_hist_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebc8 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: roi_hist_3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_3_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_3_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_3_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_3_REG_ADDR 0xebcc
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_3_OFFSET 0x2c
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_3_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_roi_hist_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebcc ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: roi_hist_4
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_4_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_4_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_4_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_4_REG_ADDR 0xebcc
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_4_OFFSET 0x2c
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ROI_HIST_4_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_roi_hist_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebcc ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: uroi
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Micro ROI module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_UROI_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_UROI_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_UROI_FIELD_OFFSET 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_UROI_REG_ADDR 0xebd0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_UROI_OFFSET 0x30
#define ACAMERA_ISP_MODULE_CONFIG_CRC_UROI_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_uroi_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebd0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: antifog_hist
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of configuration applied to the Antifog histogram module.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_MODULE_CONFIG_CRC_ANTIFOG_HIST_DEFAULT 0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ANTIFOG_HIST_DATASIZE 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ANTIFOG_HIST_FIELD_OFFSET 16
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ANTIFOG_HIST_REG_ADDR 0xebd0
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ANTIFOG_HIST_OFFSET 0x30
#define ACAMERA_ISP_MODULE_CONFIG_CRC_ANTIFOG_HIST_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_module_config_crc_antifog_hist_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebd0 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Repeat
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: crc result sensor 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of the last frame at input n of MCFE
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_1_DEFAULT 0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_1_DATASIZE 32
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_1_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_1_REG_ADDR 0xebd4
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_1_OFFSET 0x0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_1_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_frame_repeat_crc_result_sensor_1_read( uint32_t base )
{
    return system_isp_read_32( base + 0xebd4 );
}
// ------------------------------------------------------------------------------ //
// Register: crc result sensor 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_2_DEFAULT 0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_2_DATASIZE 32
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_2_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_2_REG_ADDR 0xebd8
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_2_OFFSET 0x4
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_2_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_frame_repeat_crc_result_sensor_2_read( uint32_t base )
{
    return system_isp_read_32( base + 0xebd8 );
}
// ------------------------------------------------------------------------------ //
// Register: crc result sensor 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_3_DEFAULT 0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_3_DATASIZE 32
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_3_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_3_REG_ADDR 0xebdc
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_3_OFFSET 0x8
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_3_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_frame_repeat_crc_result_sensor_3_read( uint32_t base )
{
    return system_isp_read_32( base + 0xebdc );
}
// ------------------------------------------------------------------------------ //
// Register: crc result sensor 4
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_4_DEFAULT 0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_4_DATASIZE 32
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_4_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_4_REG_ADDR 0xebe0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_4_OFFSET 0xc
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_SENSOR_4_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_frame_repeat_crc_result_sensor_4_read( uint32_t base )
{
    return system_isp_read_32( base + 0xebe0 );
}
// ------------------------------------------------------------------------------ //
// Register: crc result isp
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of the last frame at the linear data multiplexor
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_ISP_DEFAULT 0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_ISP_DATASIZE 32
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_ISP_FIELD_OFFSET 0
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_ISP_REG_ADDR 0xebe4
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_ISP_OFFSET 0x10
#define ACAMERA_ISP_FRAME_REPEAT_CRC_RESULT_ISP_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_frame_repeat_crc_result_isp_read( uint32_t base )
{
    return system_isp_read_32( base + 0xebe4 );
}
// ------------------------------------------------------------------------------ //
// Group: BIST CRC check
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Checksum out 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of the data at streaming output n
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_1_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_1_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_1_FIELD_OFFSET 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_1_REG_ADDR 0xebe8
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_1_OFFSET 0x0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_bist_crc_check_checksum_out_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebe8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Checksum out 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_2_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_2_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_2_FIELD_OFFSET 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_2_REG_ADDR 0xebe8
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_2_OFFSET 0x0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_2_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_bist_crc_check_checksum_out_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebe8 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Checksum out 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_3_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_3_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_3_FIELD_OFFSET 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_3_REG_ADDR 0xebec
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_3_OFFSET 0x4
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_3_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_bist_crc_check_checksum_out_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebec ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Checksum out a1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of the data at input n of MCBE
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A1_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A1_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A1_FIELD_OFFSET 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A1_REG_ADDR 0xebec
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A1_OFFSET 0x4
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A1_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_bist_crc_check_checksum_out_a1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebec ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Checksum out a2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A2_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A2_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A2_FIELD_OFFSET 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A2_REG_ADDR 0xebf0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A2_OFFSET 0x8
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A2_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_bist_crc_check_checksum_out_a2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebf0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Checksum out a3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A3_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A3_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A3_FIELD_OFFSET 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A3_REG_ADDR 0xebf0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A3_OFFSET 0x8
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_OUT_A3_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_bist_crc_check_checksum_out_a3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebf0 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Checksum 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected CRC of the data at streaming output n
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_1_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_1_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_1_FIELD_OFFSET 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_1_REG_ADDR 0xebf4
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_1_OFFSET 0xc
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_bist_crc_check_checksum_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xebf4 );
    system_isp_write_32( base + 0xebf4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_bist_crc_check_checksum_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebf4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Checksum 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_2_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_2_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_2_FIELD_OFFSET 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_2_REG_ADDR 0xebf4
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_2_OFFSET 0xc
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_2_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_bist_crc_check_checksum_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xebf4 );
    system_isp_write_32( base + 0xebf4, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_bist_crc_check_checksum_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebf4 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Checksum 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_3_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_3_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_3_FIELD_OFFSET 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_3_REG_ADDR 0xebf8
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_3_OFFSET 0x10
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_3_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_bist_crc_check_checksum_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xebf8 );
    system_isp_write_32( base + 0xebf8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_bist_crc_check_checksum_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebf8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Checksum a1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected CRC of the data at input n of MCBE
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A1_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A1_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A1_FIELD_OFFSET 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A1_REG_ADDR 0xebf8
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A1_OFFSET 0x10
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A1_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_bist_crc_check_checksum_a1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xebf8 );
    system_isp_write_32( base + 0xebf8, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_bist_crc_check_checksum_a1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebf8 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Checksum a2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A2_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A2_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A2_FIELD_OFFSET 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A2_REG_ADDR 0xebfc
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A2_OFFSET 0x14
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A2_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_bist_crc_check_checksum_a2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xebfc );
    system_isp_write_32( base + 0xebfc, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_bist_crc_check_checksum_a2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebfc ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Checksum a3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A3_DEFAULT 0
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A3_DATASIZE 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A3_FIELD_OFFSET 16
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A3_REG_ADDR 0xebfc
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A3_OFFSET 0x14
#define ACAMERA_ISP_BIST_CRC_CHECK_CHECKSUM_A3_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_bist_crc_check_checksum_a3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xebfc );
    system_isp_write_32( base + 0xebfc, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_bist_crc_check_checksum_a3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xebfc ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Group: Pipeline CRC check
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Channel switch crc out 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of the data at output n of Channel Switch
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_1_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_1_DATASIZE 32
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_1_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_1_REG_ADDR 0xec00
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_1_OFFSET 0x0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_1_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_pipeline_crc_check_channel_switch_crc_out_1_read( uint32_t base )
{
    return system_isp_read_32( base + 0xec00 );
}
// ------------------------------------------------------------------------------ //
// Register: Channel switch crc out 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_2_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_2_DATASIZE 32
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_2_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_2_REG_ADDR 0xec04
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_2_OFFSET 0x4
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_2_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_pipeline_crc_check_channel_switch_crc_out_2_read( uint32_t base )
{
    return system_isp_read_32( base + 0xec04 );
}
// ------------------------------------------------------------------------------ //
// Register: Channel switch crc out 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_3_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_3_DATASIZE 32
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_3_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_3_REG_ADDR 0xec08
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_3_OFFSET 0x8
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_3_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_pipeline_crc_check_channel_switch_crc_out_3_read( uint32_t base )
{
    return system_isp_read_32( base + 0xec08 );
}
// ------------------------------------------------------------------------------ //
// Register: Channel switch crc out 4
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_4_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_4_DATASIZE 32
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_4_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_4_REG_ADDR 0xec0c
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_4_OFFSET 0xc
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_CHANNEL_SWITCH_CRC_OUT_4_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_pipeline_crc_check_channel_switch_crc_out_4_read( uint32_t base )
{
    return system_isp_read_32( base + 0xec0c );
}
// ------------------------------------------------------------------------------ //
// Register: Frame switch crc out 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of the data at output n of Frame switch
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_1_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_1_DATASIZE 16
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_1_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_1_REG_ADDR 0xec10
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_1_OFFSET 0x10
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_pipeline_crc_check_frame_switch_crc_out_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xec10 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame switch crc out 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_2_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_2_DATASIZE 16
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_2_FIELD_OFFSET 16
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_2_REG_ADDR 0xec10
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_2_OFFSET 0x10
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_2_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_pipeline_crc_check_frame_switch_crc_out_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xec10 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame switch crc out 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_3_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_3_DATASIZE 16
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_3_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_3_REG_ADDR 0xec14
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_3_OFFSET 0x14
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_3_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_pipeline_crc_check_frame_switch_crc_out_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xec14 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame switch crc out 4
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_4_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_4_DATASIZE 16
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_4_FIELD_OFFSET 16
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_4_REG_ADDR 0xec14
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_4_OFFSET 0x14
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_FRAME_SWITCH_CRC_OUT_4_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_pipeline_crc_check_frame_switch_crc_out_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xec14 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Sinter crc out
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of the data at output of Sinter
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SINTER_CRC_OUT_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SINTER_CRC_OUT_DATASIZE 16
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SINTER_CRC_OUT_FIELD_OFFSET 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SINTER_CRC_OUT_REG_ADDR 0xec18
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SINTER_CRC_OUT_OFFSET 0x18
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SINTER_CRC_OUT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_pipeline_crc_check_sinter_crc_out_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xec18 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Shading crc out
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// CRC of the data at output of Mesh Shading
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SHADING_CRC_OUT_DEFAULT 0
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SHADING_CRC_OUT_DATASIZE 16
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SHADING_CRC_OUT_FIELD_OFFSET 16
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SHADING_CRC_OUT_REG_ADDR 0xec18
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SHADING_CRC_OUT_OFFSET 0x18
#define ACAMERA_ISP_PIPELINE_CRC_CHECK_SHADING_CRC_OUT_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline uint16_t acamera_isp_pipeline_crc_check_shading_crc_out_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xec18 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Group: Statistics
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Derives information for use by the AE and AWB modules
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Hist Thresh 0 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram threshold for bin 0/1 boundary
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_THRESH_0_1_DEFAULT 16
#define ACAMERA_ISP_METERING_HIST_THRESH_0_1_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_THRESH_0_1_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_THRESH_0_1_REG_ADDR 0xec80
#define ACAMERA_ISP_METERING_HIST_THRESH_0_1_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_THRESH_0_1_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_thresh_0_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xec80 );
    system_isp_write_32( base + 0xec80, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_metering_hist_thresh_0_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xec80 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Hist Thresh 1 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram threshold for bin 1/2 boundary
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_THRESH_1_2_DEFAULT 32
#define ACAMERA_ISP_METERING_HIST_THRESH_1_2_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_THRESH_1_2_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_THRESH_1_2_REG_ADDR 0xec84
#define ACAMERA_ISP_METERING_HIST_THRESH_1_2_OFFSET 0x4
#define ACAMERA_ISP_METERING_HIST_THRESH_1_2_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_thresh_1_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xec84 );
    system_isp_write_32( base + 0xec84, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_metering_hist_thresh_1_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xec84 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Hist Thresh 3 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram threshold for bin 2/3 boundary
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_THRESH_3_4_DEFAULT 208
#define ACAMERA_ISP_METERING_HIST_THRESH_3_4_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_THRESH_3_4_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_THRESH_3_4_REG_ADDR 0xec88
#define ACAMERA_ISP_METERING_HIST_THRESH_3_4_OFFSET 0x8
#define ACAMERA_ISP_METERING_HIST_THRESH_3_4_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_thresh_3_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xec88 );
    system_isp_write_32( base + 0xec88, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_metering_hist_thresh_3_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xec88 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Hist Thresh 4 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram threshold for bin 3/4 boundary
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_THRESH_4_5_DEFAULT 224
#define ACAMERA_ISP_METERING_HIST_THRESH_4_5_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_THRESH_4_5_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_THRESH_4_5_REG_ADDR 0xec8c
#define ACAMERA_ISP_METERING_HIST_THRESH_4_5_OFFSET 0xc
#define ACAMERA_ISP_METERING_HIST_THRESH_4_5_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_thresh_4_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xec8c );
    system_isp_write_32( base + 0xec8c, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_metering_hist_thresh_4_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xec8c ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AEXP Nodes Used Horiz
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones horizontally for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_AEXP_NODES_USED_HORIZ_DEFAULT 21
#define ACAMERA_ISP_METERING_AEXP_NODES_USED_HORIZ_DATASIZE 8
#define ACAMERA_ISP_METERING_AEXP_NODES_USED_HORIZ_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_AEXP_NODES_USED_HORIZ_REG_ADDR 0xec90
#define ACAMERA_ISP_METERING_AEXP_NODES_USED_HORIZ_OFFSET 0x10
#define ACAMERA_ISP_METERING_AEXP_NODES_USED_HORIZ_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_metering_aexp_nodes_used_horiz_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xec90 );
    system_isp_write_32( base + 0xec90, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_metering_aexp_nodes_used_horiz_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xec90 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AEXP Nodes Used Vert
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones vertically for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_AEXP_NODES_USED_VERT_DEFAULT 21
#define ACAMERA_ISP_METERING_AEXP_NODES_USED_VERT_DATASIZE 8
#define ACAMERA_ISP_METERING_AEXP_NODES_USED_VERT_FIELD_OFFSET 8
#define ACAMERA_ISP_METERING_AEXP_NODES_USED_VERT_REG_ADDR 0xec90
#define ACAMERA_ISP_METERING_AEXP_NODES_USED_VERT_OFFSET 0x10
#define ACAMERA_ISP_METERING_AEXP_NODES_USED_VERT_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_isp_metering_aexp_nodes_used_vert_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xec90 );
    system_isp_write_32( base + 0xec90, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_isp_metering_aexp_nodes_used_vert_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xec90 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Hist 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Normalized histogram results for bin 0
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_0_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_0_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_0_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_0_REG_ADDR 0xeca0
#define ACAMERA_ISP_METERING_HIST_0_OFFSET 0x20
#define ACAMERA_ISP_METERING_HIST_0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_metering_hist_0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeca0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Hist 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Normalized histogram results for bin 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_1_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_REG_ADDR 0xeca4
#define ACAMERA_ISP_METERING_HIST_1_OFFSET 0x24
#define ACAMERA_ISP_METERING_HIST_1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_metering_hist_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeca4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Hist 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Normalized histogram results for bin 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_3_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_REG_ADDR 0xeca8
#define ACAMERA_ISP_METERING_HIST_3_OFFSET 0x28
#define ACAMERA_ISP_METERING_HIST_3_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_metering_hist_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeca8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Hist 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Normalized histogram results for bin 4
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_4_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_REG_ADDR 0xecac
#define ACAMERA_ISP_METERING_HIST_4_OFFSET 0x2c
#define ACAMERA_ISP_METERING_HIST_4_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_isp_metering_hist_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xecac ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AWB Nodes Used Horiz
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones horizontally for AWB stats
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_AWB_NODES_USED_HORIZ_DEFAULT 21
#define ACAMERA_ISP_METERING_AWB_NODES_USED_HORIZ_DATASIZE 8
#define ACAMERA_ISP_METERING_AWB_NODES_USED_HORIZ_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_AWB_NODES_USED_HORIZ_REG_ADDR 0xecc0
#define ACAMERA_ISP_METERING_AWB_NODES_USED_HORIZ_OFFSET 0x40
#define ACAMERA_ISP_METERING_AWB_NODES_USED_HORIZ_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_isp_metering_awb_nodes_used_horiz_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xecc0 );
    system_isp_write_32( base + 0xecc0, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_isp_metering_awb_nodes_used_horiz_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xecc0 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AWB Nodes Used Vert
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones vertically for AWB stats
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_AWB_NODES_USED_VERT_DEFAULT 21
#define ACAMERA_ISP_METERING_AWB_NODES_USED_VERT_DATASIZE 8
#define ACAMERA_ISP_METERING_AWB_NODES_USED_VERT_FIELD_OFFSET 8
#define ACAMERA_ISP_METERING_AWB_NODES_USED_VERT_REG_ADDR 0xecc0
#define ACAMERA_ISP_METERING_AWB_NODES_USED_VERT_OFFSET 0x40
#define ACAMERA_ISP_METERING_AWB_NODES_USED_VERT_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_isp_metering_awb_nodes_used_vert_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xecc0 );
    system_isp_write_32( base + 0xecc0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_isp_metering_awb_nodes_used_vert_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xecc0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: AWB stats mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Statistics mode: 0 - legacy(G/R,G/B), 1 - current (R/G, B/G)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_AWB_STATS_MODE_DEFAULT 0
#define ACAMERA_ISP_METERING_AWB_STATS_MODE_DATASIZE 1
#define ACAMERA_ISP_METERING_AWB_STATS_MODE_FIELD_OFFSET 16
#define ACAMERA_ISP_METERING_AWB_STATS_MODE_REG_ADDR 0xecc0
#define ACAMERA_ISP_METERING_AWB_STATS_MODE_OFFSET 0x40
#define ACAMERA_ISP_METERING_AWB_STATS_MODE_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_isp_metering_awb_stats_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xecc0 );
    system_isp_write_32( base + 0xecc0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_isp_metering_awb_stats_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xecc0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: White Level AWB
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Upper limit of valid data for AWB
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_WHITE_LEVEL_AWB_DEFAULT 16383
#define ACAMERA_ISP_METERING_WHITE_LEVEL_AWB_DATASIZE 14
#define ACAMERA_ISP_METERING_WHITE_LEVEL_AWB_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_WHITE_LEVEL_AWB_REG_ADDR 0xecc4
#define ACAMERA_ISP_METERING_WHITE_LEVEL_AWB_OFFSET 0x44
#define ACAMERA_ISP_METERING_WHITE_LEVEL_AWB_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_metering_white_level_awb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xecc4 );
    system_isp_write_32( base + 0xecc4, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_metering_white_level_awb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xecc4 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black Level AWB
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Lower limit of valid data for AWB
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_BLACK_LEVEL_AWB_DEFAULT 0
#define ACAMERA_ISP_METERING_BLACK_LEVEL_AWB_DATASIZE 14
#define ACAMERA_ISP_METERING_BLACK_LEVEL_AWB_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_BLACK_LEVEL_AWB_REG_ADDR 0xecc8
#define ACAMERA_ISP_METERING_BLACK_LEVEL_AWB_OFFSET 0x48
#define ACAMERA_ISP_METERING_BLACK_LEVEL_AWB_FIELD_MASK 0x3fff

// args: data (14-bit)
static __inline void acamera_isp_metering_black_level_awb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xecc8 );
    system_isp_write_32( base + 0xecc8, ( ( ( uint32_t )( data & 0x3fff ) ) << 0 ) | ( curr & 0xffffc000 ) );
}
static __inline uint16_t acamera_isp_metering_black_level_awb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xecc8 ) & 0x3fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Cr Ref Max AWB
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Maximum value of R/G for white region
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_CR_REF_MAX_AWB_DEFAULT 511
#define ACAMERA_ISP_METERING_CR_REF_MAX_AWB_DATASIZE 12
#define ACAMERA_ISP_METERING_CR_REF_MAX_AWB_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_CR_REF_MAX_AWB_REG_ADDR 0xeccc
#define ACAMERA_ISP_METERING_CR_REF_MAX_AWB_OFFSET 0x4c
#define ACAMERA_ISP_METERING_CR_REF_MAX_AWB_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_metering_cr_ref_max_awb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeccc );
    system_isp_write_32( base + 0xeccc, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_metering_cr_ref_max_awb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeccc ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Cr Ref Min AWB
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Minimum value of R/G for white region
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_CR_REF_MIN_AWB_DEFAULT 64
#define ACAMERA_ISP_METERING_CR_REF_MIN_AWB_DATASIZE 12
#define ACAMERA_ISP_METERING_CR_REF_MIN_AWB_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_CR_REF_MIN_AWB_REG_ADDR 0xecd0
#define ACAMERA_ISP_METERING_CR_REF_MIN_AWB_OFFSET 0x50
#define ACAMERA_ISP_METERING_CR_REF_MIN_AWB_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_metering_cr_ref_min_awb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xecd0 );
    system_isp_write_32( base + 0xecd0, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_metering_cr_ref_min_awb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xecd0 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Cb Ref Max AWB
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Maximum value of B/G for white region
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_CB_REF_MAX_AWB_DEFAULT 511
#define ACAMERA_ISP_METERING_CB_REF_MAX_AWB_DATASIZE 12
#define ACAMERA_ISP_METERING_CB_REF_MAX_AWB_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_CB_REF_MAX_AWB_REG_ADDR 0xecd4
#define ACAMERA_ISP_METERING_CB_REF_MAX_AWB_OFFSET 0x54
#define ACAMERA_ISP_METERING_CB_REF_MAX_AWB_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_metering_cb_ref_max_awb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xecd4 );
    system_isp_write_32( base + 0xecd4, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_metering_cb_ref_max_awb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xecd4 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Cb Ref Min AWB
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Minimum value of B/G for white region
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_CB_REF_MIN_AWB_DEFAULT 64
#define ACAMERA_ISP_METERING_CB_REF_MIN_AWB_DATASIZE 12
#define ACAMERA_ISP_METERING_CB_REF_MIN_AWB_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_CB_REF_MIN_AWB_REG_ADDR 0xecd8
#define ACAMERA_ISP_METERING_CB_REF_MIN_AWB_OFFSET 0x58
#define ACAMERA_ISP_METERING_CB_REF_MIN_AWB_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_metering_cb_ref_min_awb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xecd8 );
    system_isp_write_32( base + 0xecd8, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_metering_cb_ref_min_awb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xecd8 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Cr Ref High AWB
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// High value of R/G for white region
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_CR_REF_HIGH_AWB_DEFAULT 4095
#define ACAMERA_ISP_METERING_CR_REF_HIGH_AWB_DATASIZE 12
#define ACAMERA_ISP_METERING_CR_REF_HIGH_AWB_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_CR_REF_HIGH_AWB_REG_ADDR 0xecdc
#define ACAMERA_ISP_METERING_CR_REF_HIGH_AWB_OFFSET 0x5c
#define ACAMERA_ISP_METERING_CR_REF_HIGH_AWB_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_metering_cr_ref_high_awb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xecdc );
    system_isp_write_32( base + 0xecdc, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_metering_cr_ref_high_awb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xecdc ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Cr Ref Low AWB
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Low value of R/G for white region
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_CR_REF_LOW_AWB_DEFAULT 0
#define ACAMERA_ISP_METERING_CR_REF_LOW_AWB_DATASIZE 12
#define ACAMERA_ISP_METERING_CR_REF_LOW_AWB_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_CR_REF_LOW_AWB_REG_ADDR 0xece0
#define ACAMERA_ISP_METERING_CR_REF_LOW_AWB_OFFSET 0x60
#define ACAMERA_ISP_METERING_CR_REF_LOW_AWB_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_metering_cr_ref_low_awb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xece0 );
    system_isp_write_32( base + 0xece0, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_metering_cr_ref_low_awb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xece0 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Cb Ref High AWB
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// High value of B/G for white region
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_CB_REF_HIGH_AWB_DEFAULT 4095
#define ACAMERA_ISP_METERING_CB_REF_HIGH_AWB_DATASIZE 12
#define ACAMERA_ISP_METERING_CB_REF_HIGH_AWB_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_CB_REF_HIGH_AWB_REG_ADDR 0xece4
#define ACAMERA_ISP_METERING_CB_REF_HIGH_AWB_OFFSET 0x64
#define ACAMERA_ISP_METERING_CB_REF_HIGH_AWB_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_metering_cb_ref_high_awb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xece4 );
    system_isp_write_32( base + 0xece4, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_metering_cb_ref_high_awb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xece4 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Cb Ref Low AWB
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Low value of B/G for white region
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_CB_REF_LOW_AWB_DEFAULT 0
#define ACAMERA_ISP_METERING_CB_REF_LOW_AWB_DATASIZE 12
#define ACAMERA_ISP_METERING_CB_REF_LOW_AWB_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_CB_REF_LOW_AWB_REG_ADDR 0xece8
#define ACAMERA_ISP_METERING_CB_REF_LOW_AWB_OFFSET 0x68
#define ACAMERA_ISP_METERING_CB_REF_LOW_AWB_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_metering_cb_ref_low_awb_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xece8 );
    system_isp_write_32( base + 0xece8, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_metering_cb_ref_low_awb_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xece8 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AWB Active Width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video width in pixels for AWB. 0=same as TOP.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_AWB_ACTIVE_WIDTH_DEFAULT 0
#define ACAMERA_ISP_METERING_AWB_ACTIVE_WIDTH_DATASIZE 16
#define ACAMERA_ISP_METERING_AWB_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_AWB_ACTIVE_WIDTH_REG_ADDR 0xecec
#define ACAMERA_ISP_METERING_AWB_ACTIVE_WIDTH_OFFSET 0x6c
#define ACAMERA_ISP_METERING_AWB_ACTIVE_WIDTH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_awb_active_width_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xecec );
    system_isp_write_32( base + 0xecec, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_awb_active_width_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xecec ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AWB Active Height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video height in lines for AWB. 0=same as TOP
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_AWB_ACTIVE_HEIGHT_DEFAULT 0
#define ACAMERA_ISP_METERING_AWB_ACTIVE_HEIGHT_DATASIZE 16
#define ACAMERA_ISP_METERING_AWB_ACTIVE_HEIGHT_FIELD_OFFSET 16
#define ACAMERA_ISP_METERING_AWB_ACTIVE_HEIGHT_REG_ADDR 0xecec
#define ACAMERA_ISP_METERING_AWB_ACTIVE_HEIGHT_OFFSET 0x6c
#define ACAMERA_ISP_METERING_AWB_ACTIVE_HEIGHT_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_metering_awb_active_height_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xecec );
    system_isp_write_32( base + 0xecec, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_metering_awb_active_height_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xecec ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: AWB RG
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// AWB statistics R/G color ratio output
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_AWB_RG_DEFAULT 0
#define ACAMERA_ISP_METERING_AWB_RG_DATASIZE 12
#define ACAMERA_ISP_METERING_AWB_RG_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_AWB_RG_REG_ADDR 0xecf0
#define ACAMERA_ISP_METERING_AWB_RG_OFFSET 0x70
#define ACAMERA_ISP_METERING_AWB_RG_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline uint16_t acamera_isp_metering_awb_rg_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xecf0 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AWB BG
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// AWB statistics B/G color ratio output
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_AWB_BG_DEFAULT 0
#define ACAMERA_ISP_METERING_AWB_BG_DATASIZE 12
#define ACAMERA_ISP_METERING_AWB_BG_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_AWB_BG_REG_ADDR 0xecf4
#define ACAMERA_ISP_METERING_AWB_BG_OFFSET 0x74
#define ACAMERA_ISP_METERING_AWB_BG_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline uint16_t acamera_isp_metering_awb_bg_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xecf4 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: AWB SUM
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// AWB output population.  Number of pixels used for AWB statistics
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_AWB_SUM_DEFAULT 0
#define ACAMERA_ISP_METERING_AWB_SUM_DATASIZE 32
#define ACAMERA_ISP_METERING_AWB_SUM_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_AWB_SUM_REG_ADDR 0xecf8
#define ACAMERA_ISP_METERING_AWB_SUM_OFFSET 0x78
#define ACAMERA_ISP_METERING_AWB_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_metering_awb_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0xecf8 );
}
// ------------------------------------------------------------------------------ //
// Group: Micro ROI
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Select1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Select tap point to collect the data for ROI 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT1_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT1_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT1_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT1_REG_ADDR 0xed00
#define ACAMERA_ISP_UROI_SELECT1_OFFSET 0x0
#define ACAMERA_ISP_UROI_SELECT1_FIELD_MASK 0x1f
#define ACAMERA_ISP_UROI_SELECT1_MCFE_OUTPUTCHANNEL_1 ( 0 )
#define ACAMERA_ISP_UROI_SELECT1_MCFE_OUTPUT_CHANNEL_2 ( 1 )
#define ACAMERA_ISP_UROI_SELECT1_MCFE_OUTPUT_CHANNEL_3 ( 2 )
#define ACAMERA_ISP_UROI_SELECT1_MCFE_OUTPUT_CHANNEL_4 ( 3 )
#define ACAMERA_ISP_UROI_SELECT1_WDR_STITCHED_FRAME_MSB ( 4 )
#define ACAMERA_ISP_UROI_SELECT1_WDR_STITCHED_FRAME_LSB ( 5 )
#define ACAMERA_ISP_UROI_SELECT1_AFTER_LENS_SHADING_MSB ( 6 )
#define ACAMERA_ISP_UROI_SELECT1_AFTER_LENS_SHADING_LSB ( 7 )
#define ACAMERA_ISP_UROI_SELECT1_AFTER_TONE_MAPPING_MSB ( 8 )
#define ACAMERA_ISP_UROI_SELECT1_AFTER_TONE_MAPPING_LSB ( 9 )
#define ACAMERA_ISP_UROI_SELECT1_AFTER_DEMOSAIC_CHANNEL_1 ( 10 )
#define ACAMERA_ISP_UROI_SELECT1_AFTER_DEMOSAIC_CHANNEL_2 ( 11 )
#define ACAMERA_ISP_UROI_SELECT1_AFTER_DEMOSAIC_CHANNEL_3 ( 12 )
#define ACAMERA_ISP_UROI_SELECT1_AFTER_DEMOSAIC_CHANNEL_4 ( 13 )
#define ACAMERA_ISP_UROI_SELECT1_YCBCR_OUTPUT_Y ( 14 )
#define ACAMERA_ISP_UROI_SELECT1_LUV_OUTPUT_L ( 15 )
#define ACAMERA_ISP_UROI_SELECT1_YCBCR_OUTPUT_CB_CR ( 16 )
#define ACAMERA_ISP_UROI_SELECT1_LUV_OUTPUT_U_V ( 17 )
#define ACAMERA_ISP_UROI_SELECT1_HS_OUTPUT ( 18 )

// args: data (5-bit)
static __inline void acamera_isp_uroi_select1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed00 );
    system_isp_write_32( base + 0xed00, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed00 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Enable statistics collection for ROI 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_1_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_1_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_1_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_1_REG_ADDR 0xed00
#define ACAMERA_ISP_UROI_ENABLE_1_OFFSET 0x0
#define ACAMERA_ISP_UROI_ENABLE_1_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed00 );
    system_isp_write_32( base + 0xed00, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed00 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Horizontal position of top left corner of ROI 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_1_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_1_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_1_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_1_REG_ADDR 0xed04
#define ACAMERA_ISP_UROI_POS_X_1_OFFSET 0x4
#define ACAMERA_ISP_UROI_POS_X_1_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed04 );
    system_isp_write_32( base + 0xed04, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed04 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Vertical position of the top lef corner of ROI 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_1_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_1_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_1_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_1_REG_ADDR 0xed08
#define ACAMERA_ISP_UROI_POS_Y_1_OFFSET 0x8
#define ACAMERA_ISP_UROI_POS_Y_1_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed08 );
    system_isp_write_32( base + 0xed08, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed08 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT2_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT2_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT2_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT2_REG_ADDR 0xed0c
#define ACAMERA_ISP_UROI_SELECT2_OFFSET 0xc
#define ACAMERA_ISP_UROI_SELECT2_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed0c );
    system_isp_write_32( base + 0xed0c, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed0c ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_2_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_2_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_2_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_2_REG_ADDR 0xed0c
#define ACAMERA_ISP_UROI_ENABLE_2_OFFSET 0xc
#define ACAMERA_ISP_UROI_ENABLE_2_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed0c );
    system_isp_write_32( base + 0xed0c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed0c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_2_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_2_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_2_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_2_REG_ADDR 0xed10
#define ACAMERA_ISP_UROI_POS_X_2_OFFSET 0x10
#define ACAMERA_ISP_UROI_POS_X_2_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed10 );
    system_isp_write_32( base + 0xed10, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed10 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_2_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_2_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_2_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_2_REG_ADDR 0xed14
#define ACAMERA_ISP_UROI_POS_Y_2_OFFSET 0x14
#define ACAMERA_ISP_UROI_POS_Y_2_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed14 );
    system_isp_write_32( base + 0xed14, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed14 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT3_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT3_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT3_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT3_REG_ADDR 0xed18
#define ACAMERA_ISP_UROI_SELECT3_OFFSET 0x18
#define ACAMERA_ISP_UROI_SELECT3_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed18 );
    system_isp_write_32( base + 0xed18, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed18 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_3_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_3_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_3_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_3_REG_ADDR 0xed18
#define ACAMERA_ISP_UROI_ENABLE_3_OFFSET 0x18
#define ACAMERA_ISP_UROI_ENABLE_3_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed18 );
    system_isp_write_32( base + 0xed18, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed18 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_3_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_3_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_3_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_3_REG_ADDR 0xed1c
#define ACAMERA_ISP_UROI_POS_X_3_OFFSET 0x1c
#define ACAMERA_ISP_UROI_POS_X_3_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed1c );
    system_isp_write_32( base + 0xed1c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed1c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_3_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_3_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_3_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_3_REG_ADDR 0xed20
#define ACAMERA_ISP_UROI_POS_Y_3_OFFSET 0x20
#define ACAMERA_ISP_UROI_POS_Y_3_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed20 );
    system_isp_write_32( base + 0xed20, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed20 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT4_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT4_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT4_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT4_REG_ADDR 0xed24
#define ACAMERA_ISP_UROI_SELECT4_OFFSET 0x24
#define ACAMERA_ISP_UROI_SELECT4_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed24 );
    system_isp_write_32( base + 0xed24, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed24 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_4_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_4_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_4_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_4_REG_ADDR 0xed24
#define ACAMERA_ISP_UROI_ENABLE_4_OFFSET 0x24
#define ACAMERA_ISP_UROI_ENABLE_4_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed24 );
    system_isp_write_32( base + 0xed24, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed24 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_4_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_4_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_4_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_4_REG_ADDR 0xed28
#define ACAMERA_ISP_UROI_POS_X_4_OFFSET 0x28
#define ACAMERA_ISP_UROI_POS_X_4_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_4_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed28 );
    system_isp_write_32( base + 0xed28, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed28 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_4_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_4_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_4_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_4_REG_ADDR 0xed2c
#define ACAMERA_ISP_UROI_POS_Y_4_OFFSET 0x2c
#define ACAMERA_ISP_UROI_POS_Y_4_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_4_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed2c );
    system_isp_write_32( base + 0xed2c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed2c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT5_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT5_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT5_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT5_REG_ADDR 0xed30
#define ACAMERA_ISP_UROI_SELECT5_OFFSET 0x30
#define ACAMERA_ISP_UROI_SELECT5_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed30 );
    system_isp_write_32( base + 0xed30, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed30 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_5_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_5_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_5_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_5_REG_ADDR 0xed30
#define ACAMERA_ISP_UROI_ENABLE_5_OFFSET 0x30
#define ACAMERA_ISP_UROI_ENABLE_5_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed30 );
    system_isp_write_32( base + 0xed30, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed30 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_5_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_5_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_5_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_5_REG_ADDR 0xed34
#define ACAMERA_ISP_UROI_POS_X_5_OFFSET 0x34
#define ACAMERA_ISP_UROI_POS_X_5_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_5_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed34 );
    system_isp_write_32( base + 0xed34, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_5_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed34 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_5_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_5_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_5_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_5_REG_ADDR 0xed38
#define ACAMERA_ISP_UROI_POS_Y_5_OFFSET 0x38
#define ACAMERA_ISP_UROI_POS_Y_5_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_5_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed38 );
    system_isp_write_32( base + 0xed38, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_5_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed38 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT6_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT6_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT6_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT6_REG_ADDR 0xed3c
#define ACAMERA_ISP_UROI_SELECT6_OFFSET 0x3c
#define ACAMERA_ISP_UROI_SELECT6_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed3c );
    system_isp_write_32( base + 0xed3c, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed3c ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_6_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_6_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_6_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_6_REG_ADDR 0xed3c
#define ACAMERA_ISP_UROI_ENABLE_6_OFFSET 0x3c
#define ACAMERA_ISP_UROI_ENABLE_6_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed3c );
    system_isp_write_32( base + 0xed3c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed3c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_6_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_6_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_6_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_6_REG_ADDR 0xed40
#define ACAMERA_ISP_UROI_POS_X_6_OFFSET 0x40
#define ACAMERA_ISP_UROI_POS_X_6_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_6_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed40 );
    system_isp_write_32( base + 0xed40, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_6_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed40 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_6_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_6_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_6_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_6_REG_ADDR 0xed44
#define ACAMERA_ISP_UROI_POS_Y_6_OFFSET 0x44
#define ACAMERA_ISP_UROI_POS_Y_6_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_6_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed44 );
    system_isp_write_32( base + 0xed44, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_6_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed44 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT7_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT7_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT7_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT7_REG_ADDR 0xed48
#define ACAMERA_ISP_UROI_SELECT7_OFFSET 0x48
#define ACAMERA_ISP_UROI_SELECT7_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed48 );
    system_isp_write_32( base + 0xed48, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed48 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_7_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_7_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_7_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_7_REG_ADDR 0xed48
#define ACAMERA_ISP_UROI_ENABLE_7_OFFSET 0x48
#define ACAMERA_ISP_UROI_ENABLE_7_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed48 );
    system_isp_write_32( base + 0xed48, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed48 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_7_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_7_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_7_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_7_REG_ADDR 0xed4c
#define ACAMERA_ISP_UROI_POS_X_7_OFFSET 0x4c
#define ACAMERA_ISP_UROI_POS_X_7_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_7_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed4c );
    system_isp_write_32( base + 0xed4c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_7_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed4c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_7_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_7_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_7_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_7_REG_ADDR 0xed50
#define ACAMERA_ISP_UROI_POS_Y_7_OFFSET 0x50
#define ACAMERA_ISP_UROI_POS_Y_7_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_7_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed50 );
    system_isp_write_32( base + 0xed50, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_7_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed50 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT8_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT8_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT8_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT8_REG_ADDR 0xed54
#define ACAMERA_ISP_UROI_SELECT8_OFFSET 0x54
#define ACAMERA_ISP_UROI_SELECT8_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed54 );
    system_isp_write_32( base + 0xed54, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed54 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_8_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_8_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_8_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_8_REG_ADDR 0xed54
#define ACAMERA_ISP_UROI_ENABLE_8_OFFSET 0x54
#define ACAMERA_ISP_UROI_ENABLE_8_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed54 );
    system_isp_write_32( base + 0xed54, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed54 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_8_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_8_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_8_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_8_REG_ADDR 0xed58
#define ACAMERA_ISP_UROI_POS_X_8_OFFSET 0x58
#define ACAMERA_ISP_UROI_POS_X_8_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_8_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed58 );
    system_isp_write_32( base + 0xed58, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_8_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed58 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_8_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_8_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_8_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_8_REG_ADDR 0xed5c
#define ACAMERA_ISP_UROI_POS_Y_8_OFFSET 0x5c
#define ACAMERA_ISP_UROI_POS_Y_8_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_8_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed5c );
    system_isp_write_32( base + 0xed5c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_8_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed5c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT9_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT9_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT9_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT9_REG_ADDR 0xed60
#define ACAMERA_ISP_UROI_SELECT9_OFFSET 0x60
#define ACAMERA_ISP_UROI_SELECT9_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed60 );
    system_isp_write_32( base + 0xed60, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed60 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_9_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_9_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_9_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_9_REG_ADDR 0xed60
#define ACAMERA_ISP_UROI_ENABLE_9_OFFSET 0x60
#define ACAMERA_ISP_UROI_ENABLE_9_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed60 );
    system_isp_write_32( base + 0xed60, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed60 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_9_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_9_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_9_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_9_REG_ADDR 0xed64
#define ACAMERA_ISP_UROI_POS_X_9_OFFSET 0x64
#define ACAMERA_ISP_UROI_POS_X_9_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_9_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed64 );
    system_isp_write_32( base + 0xed64, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_9_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed64 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_9_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_9_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_9_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_9_REG_ADDR 0xed68
#define ACAMERA_ISP_UROI_POS_Y_9_OFFSET 0x68
#define ACAMERA_ISP_UROI_POS_Y_9_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_9_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed68 );
    system_isp_write_32( base + 0xed68, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_9_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed68 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT10_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT10_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT10_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT10_REG_ADDR 0xed6c
#define ACAMERA_ISP_UROI_SELECT10_OFFSET 0x6c
#define ACAMERA_ISP_UROI_SELECT10_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed6c );
    system_isp_write_32( base + 0xed6c, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed6c ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_10_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_10_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_10_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_10_REG_ADDR 0xed6c
#define ACAMERA_ISP_UROI_ENABLE_10_OFFSET 0x6c
#define ACAMERA_ISP_UROI_ENABLE_10_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed6c );
    system_isp_write_32( base + 0xed6c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed6c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_10_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_10_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_10_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_10_REG_ADDR 0xed70
#define ACAMERA_ISP_UROI_POS_X_10_OFFSET 0x70
#define ACAMERA_ISP_UROI_POS_X_10_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed70 );
    system_isp_write_32( base + 0xed70, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed70 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_10_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_10_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_10_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_10_REG_ADDR 0xed74
#define ACAMERA_ISP_UROI_POS_Y_10_OFFSET 0x74
#define ACAMERA_ISP_UROI_POS_Y_10_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed74 );
    system_isp_write_32( base + 0xed74, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed74 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT11_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT11_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT11_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT11_REG_ADDR 0xed78
#define ACAMERA_ISP_UROI_SELECT11_OFFSET 0x78
#define ACAMERA_ISP_UROI_SELECT11_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed78 );
    system_isp_write_32( base + 0xed78, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed78 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_11_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_11_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_11_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_11_REG_ADDR 0xed78
#define ACAMERA_ISP_UROI_ENABLE_11_OFFSET 0x78
#define ACAMERA_ISP_UROI_ENABLE_11_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed78 );
    system_isp_write_32( base + 0xed78, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed78 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_11_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_11_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_11_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_11_REG_ADDR 0xed7c
#define ACAMERA_ISP_UROI_POS_X_11_OFFSET 0x7c
#define ACAMERA_ISP_UROI_POS_X_11_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed7c );
    system_isp_write_32( base + 0xed7c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed7c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_11_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_11_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_11_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_11_REG_ADDR 0xed80
#define ACAMERA_ISP_UROI_POS_Y_11_OFFSET 0x80
#define ACAMERA_ISP_UROI_POS_Y_11_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed80 );
    system_isp_write_32( base + 0xed80, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed80 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT12_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT12_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT12_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT12_REG_ADDR 0xed84
#define ACAMERA_ISP_UROI_SELECT12_OFFSET 0x84
#define ACAMERA_ISP_UROI_SELECT12_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed84 );
    system_isp_write_32( base + 0xed84, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed84 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_12_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_12_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_12_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_12_REG_ADDR 0xed84
#define ACAMERA_ISP_UROI_ENABLE_12_OFFSET 0x84
#define ACAMERA_ISP_UROI_ENABLE_12_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed84 );
    system_isp_write_32( base + 0xed84, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed84 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_12_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_12_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_12_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_12_REG_ADDR 0xed88
#define ACAMERA_ISP_UROI_POS_X_12_OFFSET 0x88
#define ACAMERA_ISP_UROI_POS_X_12_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed88 );
    system_isp_write_32( base + 0xed88, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed88 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_12_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_12_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_12_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_12_REG_ADDR 0xed8c
#define ACAMERA_ISP_UROI_POS_Y_12_OFFSET 0x8c
#define ACAMERA_ISP_UROI_POS_Y_12_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed8c );
    system_isp_write_32( base + 0xed8c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed8c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT13_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT13_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT13_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT13_REG_ADDR 0xed90
#define ACAMERA_ISP_UROI_SELECT13_OFFSET 0x90
#define ACAMERA_ISP_UROI_SELECT13_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed90 );
    system_isp_write_32( base + 0xed90, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed90 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_13_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_13_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_13_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_13_REG_ADDR 0xed90
#define ACAMERA_ISP_UROI_ENABLE_13_OFFSET 0x90
#define ACAMERA_ISP_UROI_ENABLE_13_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed90 );
    system_isp_write_32( base + 0xed90, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed90 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_13_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_13_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_13_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_13_REG_ADDR 0xed94
#define ACAMERA_ISP_UROI_POS_X_13_OFFSET 0x94
#define ACAMERA_ISP_UROI_POS_X_13_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed94 );
    system_isp_write_32( base + 0xed94, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed94 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_13_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_13_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_13_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_13_REG_ADDR 0xed98
#define ACAMERA_ISP_UROI_POS_Y_13_OFFSET 0x98
#define ACAMERA_ISP_UROI_POS_Y_13_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed98 );
    system_isp_write_32( base + 0xed98, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xed98 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT14_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT14_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT14_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT14_REG_ADDR 0xed9c
#define ACAMERA_ISP_UROI_SELECT14_OFFSET 0x9c
#define ACAMERA_ISP_UROI_SELECT14_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed9c );
    system_isp_write_32( base + 0xed9c, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed9c ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_14_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_14_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_14_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_14_REG_ADDR 0xed9c
#define ACAMERA_ISP_UROI_ENABLE_14_OFFSET 0x9c
#define ACAMERA_ISP_UROI_ENABLE_14_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xed9c );
    system_isp_write_32( base + 0xed9c, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xed9c ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_14_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_14_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_14_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_14_REG_ADDR 0xeda0
#define ACAMERA_ISP_UROI_POS_X_14_OFFSET 0xa0
#define ACAMERA_ISP_UROI_POS_X_14_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_14_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeda0 );
    system_isp_write_32( base + 0xeda0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_14_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeda0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_14_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_14_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_14_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_14_REG_ADDR 0xeda4
#define ACAMERA_ISP_UROI_POS_Y_14_OFFSET 0xa4
#define ACAMERA_ISP_UROI_POS_Y_14_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_14_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeda4 );
    system_isp_write_32( base + 0xeda4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_14_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeda4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT15_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT15_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT15_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT15_REG_ADDR 0xeda8
#define ACAMERA_ISP_UROI_SELECT15_OFFSET 0xa8
#define ACAMERA_ISP_UROI_SELECT15_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeda8 );
    system_isp_write_32( base + 0xeda8, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeda8 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_15_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_15_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_15_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_15_REG_ADDR 0xeda8
#define ACAMERA_ISP_UROI_ENABLE_15_OFFSET 0xa8
#define ACAMERA_ISP_UROI_ENABLE_15_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeda8 );
    system_isp_write_32( base + 0xeda8, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xeda8 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_15_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_15_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_15_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_15_REG_ADDR 0xedac
#define ACAMERA_ISP_UROI_POS_X_15_OFFSET 0xac
#define ACAMERA_ISP_UROI_POS_X_15_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_15_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xedac );
    system_isp_write_32( base + 0xedac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_15_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xedac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_15_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_15_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_15_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_15_REG_ADDR 0xedb0
#define ACAMERA_ISP_UROI_POS_Y_15_OFFSET 0xb0
#define ACAMERA_ISP_UROI_POS_Y_15_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_15_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xedb0 );
    system_isp_write_32( base + 0xedb0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_15_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xedb0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Select16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as select 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_SELECT16_DEFAULT 0
#define ACAMERA_ISP_UROI_SELECT16_DATASIZE 5
#define ACAMERA_ISP_UROI_SELECT16_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_SELECT16_REG_ADDR 0xedb4
#define ACAMERA_ISP_UROI_SELECT16_OFFSET 0xb4
#define ACAMERA_ISP_UROI_SELECT16_FIELD_MASK 0x1f

// args: data (5-bit)
static __inline void acamera_isp_uroi_select16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xedb4 );
    system_isp_write_32( base + 0xedb4, ( ( ( uint32_t )( data & 0x1f ) ) << 0 ) | ( curr & 0xffffffe0 ) );
}
static __inline uint8_t acamera_isp_uroi_select16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xedb4 ) & 0x1f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Enable 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_ENABLE_16_DEFAULT 0
#define ACAMERA_ISP_UROI_ENABLE_16_DATASIZE 1
#define ACAMERA_ISP_UROI_ENABLE_16_FIELD_OFFSET 6
#define ACAMERA_ISP_UROI_ENABLE_16_REG_ADDR 0xedb4
#define ACAMERA_ISP_UROI_ENABLE_16_OFFSET 0xb4
#define ACAMERA_ISP_UROI_ENABLE_16_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_isp_uroi_enable_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xedb4 );
    system_isp_write_32( base + 0xedb4, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_isp_uroi_enable_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xedb4 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos x 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos x 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_X_16_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_X_16_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_X_16_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_X_16_REG_ADDR 0xedb8
#define ACAMERA_ISP_UROI_POS_X_16_OFFSET 0xb8
#define ACAMERA_ISP_UROI_POS_X_16_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_x_16_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xedb8 );
    system_isp_write_32( base + 0xedb8, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_x_16_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xedb8 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Pos y 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Same as Pos y 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_UROI_POS_Y_16_DEFAULT 0
#define ACAMERA_ISP_UROI_POS_Y_16_DATASIZE 13
#define ACAMERA_ISP_UROI_POS_Y_16_FIELD_OFFSET 0
#define ACAMERA_ISP_UROI_POS_Y_16_REG_ADDR 0xedbc
#define ACAMERA_ISP_UROI_POS_Y_16_OFFSET 0xbc
#define ACAMERA_ISP_UROI_POS_Y_16_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_isp_uroi_pos_y_16_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xedbc );
    system_isp_write_32( base + 0xedbc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_isp_uroi_pos_y_16_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xedbc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Antifog Hist
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: skip x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in horizontal direction: 0=every 2nd pixel; 1=every 3rd pixel; 2=every 4th pixel; 3=every 5th pixel; 4=every 8th pixel ; 5+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_X_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_X_DATASIZE 3
#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_X_REG_ADDR 0xee00
#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_X_OFFSET 0x0
#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_X_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_antifog_hist_skip_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee00 );
    system_isp_write_32( base + 0xee00, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_antifog_hist_skip_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee00 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: skip y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in vertical direction: 0=every pixel; 1=every 2nd pixel; 2=every 3rd pixel; 3=every 4th pixel; 4=every 5th pixel; 5=every 8th pixel ; 6+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_Y_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_Y_DATASIZE 3
#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_Y_FIELD_OFFSET 4
#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_Y_REG_ADDR 0xee00
#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_Y_OFFSET 0x0
#define ACAMERA_ISP_ANTIFOG_HIST_SKIP_Y_FIELD_MASK 0x70

// args: data (3-bit)
static __inline void acamera_isp_antifog_hist_skip_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee00 );
    system_isp_write_32( base + 0xee00, ( ( ( uint32_t )( data & 0x7 ) ) << 4 ) | ( curr & 0xffffff8f ) );
}
static __inline uint8_t acamera_isp_antifog_hist_skip_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee00 ) & 0x70 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: offset x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first column;  1=start from second column
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_X_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_X_DATASIZE 1
#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_X_FIELD_OFFSET 3
#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_X_REG_ADDR 0xee00
#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_X_OFFSET 0x0
#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_X_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_antifog_hist_offset_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee00 );
    system_isp_write_32( base + 0xee00, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_antifog_hist_offset_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee00 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: offset y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first row; 1= start from second row
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_Y_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_Y_DATASIZE 1
#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_Y_FIELD_OFFSET 7
#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_Y_REG_ADDR 0xee00
#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_Y_OFFSET 0x0
#define ACAMERA_ISP_ANTIFOG_HIST_OFFSET_Y_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_antifog_hist_offset_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee00 );
    system_isp_write_32( base + 0xee00, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_antifog_hist_offset_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee00 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Plane mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Plane separation mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_DATASIZE 3
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_FIELD_OFFSET 8
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_REG_ADDR 0xee00
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_OFFSET 0x0
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_FIELD_MASK 0x700
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_COLLECT_ALL_THE_PLANES_IN_ONE_HISTOGRAM ( 0 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_COLLECT_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 1 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_COLLECT_EVERY_PIXEL_OF_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 2 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_RESERVED_3 ( 3 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_COLLECT_ODD__X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 4 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_COLLECT_EVEN_X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 5 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_COLLECT_ODD__X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 6 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_MODE_COLLECT_EVEN_X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_antifog_hist_plane_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee00 );
    system_isp_write_32( base + 0xee00, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_isp_antifog_hist_plane_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee00 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Radial shading enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Enable radial shading correction.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_RADIAL_SHADING_ENABLE_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_RADIAL_SHADING_ENABLE_DATASIZE 1
#define ACAMERA_ISP_ANTIFOG_HIST_RADIAL_SHADING_ENABLE_FIELD_OFFSET 12
#define ACAMERA_ISP_ANTIFOG_HIST_RADIAL_SHADING_ENABLE_REG_ADDR 0xee00
#define ACAMERA_ISP_ANTIFOG_HIST_RADIAL_SHADING_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_ANTIFOG_HIST_RADIAL_SHADING_ENABLE_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_isp_antifog_hist_radial_shading_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee00 );
    system_isp_write_32( base + 0xee00, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_isp_antifog_hist_radial_shading_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee00 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: NEQ LUT enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Enable non-equidistant lookup table.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_ENABLE_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_ENABLE_DATASIZE 1
#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_ENABLE_FIELD_OFFSET 14
#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_ENABLE_REG_ADDR 0xee00
#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_ENABLE_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_isp_antifog_hist_neq_lut_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee00 );
    system_isp_write_32( base + 0xee00, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_isp_antifog_hist_neq_lut_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee00 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: NEQ LUT position
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Position of NEQ lookup table: 0=before histogram, 1=before white balance
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_POSITION_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_POSITION_DATASIZE 1
#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_POSITION_FIELD_OFFSET 15
#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_POSITION_REG_ADDR 0xee00
#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_POSITION_OFFSET 0x0
#define ACAMERA_ISP_ANTIFOG_HIST_NEQ_LUT_POSITION_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_isp_antifog_hist_neq_lut_position_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee00 );
    system_isp_write_32( base + 0xee00, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_isp_antifog_hist_neq_lut_position_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee00 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Nodes Used Horiz
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones horizontally for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_HORIZ_DEFAULT 21
#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_HORIZ_DATASIZE 8
#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_HORIZ_FIELD_OFFSET 16
#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_HORIZ_REG_ADDR 0xee00
#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_HORIZ_OFFSET 0x0
#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_HORIZ_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_antifog_hist_nodes_used_horiz_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee00 );
    system_isp_write_32( base + 0xee00, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_antifog_hist_nodes_used_horiz_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee00 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Nodes Used Vert
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones vertically for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_VERT_DEFAULT 21
#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_VERT_DATASIZE 8
#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_VERT_FIELD_OFFSET 24
#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_VERT_REG_ADDR 0xee00
#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_VERT_OFFSET 0x0
#define ACAMERA_ISP_ANTIFOG_HIST_NODES_USED_VERT_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_antifog_hist_nodes_used_vert_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee00 );
    system_isp_write_32( base + 0xee00, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_antifog_hist_nodes_used_vert_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee00 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: scale bottom
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of bottom half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_BOTTOM_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_BOTTOM_DATASIZE 4
#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_BOTTOM_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_BOTTOM_REG_ADDR 0xee04
#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_BOTTOM_OFFSET 0x4
#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_BOTTOM_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_isp_antifog_hist_scale_bottom_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee04 );
    system_isp_write_32( base + 0xee04, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_antifog_hist_scale_bottom_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee04 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: scale top
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of top half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_TOP_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_TOP_DATASIZE 4
#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_TOP_FIELD_OFFSET 4
#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_TOP_REG_ADDR 0xee04
#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_TOP_OFFSET 0x4
#define ACAMERA_ISP_ANTIFOG_HIST_SCALE_TOP_FIELD_MASK 0xf0

// args: data (4-bit)
static __inline void acamera_isp_antifog_hist_scale_top_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee04 );
    system_isp_write_32( base + 0xee04, ( ( ( uint32_t )( data & 0xf ) ) << 4 ) | ( curr & 0xffffff0f ) );
}
static __inline uint8_t acamera_isp_antifog_hist_scale_top_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xee04 ) & 0xf0 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Total Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total number of pixels processed (skip x and skip y are taken into account)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_TOTAL_PIXELS_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_TOTAL_PIXELS_DATASIZE 32
#define ACAMERA_ISP_ANTIFOG_HIST_TOTAL_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_TOTAL_PIXELS_REG_ADDR 0xee08
#define ACAMERA_ISP_ANTIFOG_HIST_TOTAL_PIXELS_OFFSET 0x8
#define ACAMERA_ISP_ANTIFOG_HIST_TOTAL_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_antifog_hist_total_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xee08 );
}
// ------------------------------------------------------------------------------ //
// Register: Counted Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of pixels accumulated (with nonzero weight)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_COUNTED_PIXELS_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_COUNTED_PIXELS_DATASIZE 32
#define ACAMERA_ISP_ANTIFOG_HIST_COUNTED_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_COUNTED_PIXELS_REG_ADDR 0xee0c
#define ACAMERA_ISP_ANTIFOG_HIST_COUNTED_PIXELS_OFFSET 0xc
#define ACAMERA_ISP_ANTIFOG_HIST_COUNTED_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_antifog_hist_counted_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xee0c );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Total
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels processed for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_TOTAL_LUT_NODES ( 4 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_TOTAL_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_TOTAL_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_TOTAL_LUT_OFFSET ( 0xee10 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_antifog_hist_plane_total_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xee10 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Counted
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels accumulated for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_COUNTED_LUT_NODES ( 4 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_COUNTED_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_COUNTED_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_ANTIFOG_HIST_PLANE_COUNTED_LUT_OFFSET ( 0xee20 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_antifog_hist_plane_counted_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xee20 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_00_DEFAULT 256
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_00_DATASIZE 15
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_00_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_00_REG_ADDR 0xee30
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_00_OFFSET 0x30
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_00_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_antifog_hist_gain_00_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee30 );
    system_isp_write_32( base + 0xee30, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_antifog_hist_gain_00_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xee30 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_01_DEFAULT 256
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_01_DATASIZE 15
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_01_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_01_REG_ADDR 0xee34
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_01_OFFSET 0x34
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_01_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_antifog_hist_gain_01_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee34 );
    system_isp_write_32( base + 0xee34, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_antifog_hist_gain_01_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xee34 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_10_DEFAULT 256
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_10_DATASIZE 15
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_10_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_10_REG_ADDR 0xee38
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_10_OFFSET 0x38
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_10_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_antifog_hist_gain_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee38 );
    system_isp_write_32( base + 0xee38, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_antifog_hist_gain_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xee38 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_11_DEFAULT 256
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_11_DATASIZE 15
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_11_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_11_REG_ADDR 0xee3c
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_11_OFFSET 0x3c
#define ACAMERA_ISP_ANTIFOG_HIST_GAIN_11_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_antifog_hist_gain_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee3c );
    system_isp_write_32( base + 0xee3c, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_antifog_hist_gain_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xee3c ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_00_REG_ADDR 0xee40
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_00_OFFSET 0x40
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_antifog_hist_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee40 );
    system_isp_write_32( base + 0xee40, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_antifog_hist_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xee40 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_01_REG_ADDR 0xee44
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_01_OFFSET 0x44
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_antifog_hist_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee44 );
    system_isp_write_32( base + 0xee44, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_antifog_hist_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xee44 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_10_REG_ADDR 0xee48
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_10_OFFSET 0x48
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_antifog_hist_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee48 );
    system_isp_write_32( base + 0xee48, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_antifog_hist_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xee48 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_11_REG_ADDR 0xee4c
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_11_OFFSET 0x4c
#define ACAMERA_ISP_ANTIFOG_HIST_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_antifog_hist_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee4c );
    system_isp_write_32( base + 0xee4c, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_antifog_hist_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xee4c ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Center X
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center x coordinate of the shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_X_DEFAULT 960
#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_X_DATASIZE 16
#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_X_REG_ADDR 0xee50
#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_X_OFFSET 0x50
#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_antifog_hist_center_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee50 );
    system_isp_write_32( base + 0xee50, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_antifog_hist_center_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xee50 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Center Y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center y coordinate of the shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_Y_DEFAULT 540
#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_Y_DATASIZE 16
#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_Y_REG_ADDR 0xee54
#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_Y_OFFSET 0x54
#define ACAMERA_ISP_ANTIFOG_HIST_CENTER_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_antifog_hist_center_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee54 );
    system_isp_write_32( base + 0xee54, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_antifog_hist_center_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xee54 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Off Center multx
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing X factor which scales the radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTX_DEFAULT 1770
#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTX_DATASIZE 16
#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTX_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTX_REG_ADDR 0xee58
#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTX_OFFSET 0x58
#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTX_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_antifog_hist_off_center_multx_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee58 );
    system_isp_write_32( base + 0xee58, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_antifog_hist_off_center_multx_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xee58 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Off Center multy
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing Y factor which scales the radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTY_DEFAULT 1770
#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTY_DATASIZE 16
#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTY_FIELD_OFFSET 16
#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTY_REG_ADDR 0xee58
#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTY_OFFSET 0x58
#define ACAMERA_ISP_ANTIFOG_HIST_OFF_CENTER_MULTY_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_isp_antifog_hist_off_center_multy_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xee58 );
    system_isp_write_32( base + 0xee58, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_isp_antifog_hist_off_center_multy_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xee58 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Shading LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading profile
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_SHADING_LUT_DEFAULT 4096
#define ACAMERA_ISP_ANTIFOG_HIST_SHADING_LUT_DATASIZE 16
#define ACAMERA_ISP_ANTIFOG_HIST_SHADING_LUT_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_SHADING_LUT_REG_ADDR 0xee5c
#define ACAMERA_ISP_ANTIFOG_HIST_SHADING_LUT_OFFSET 0x5c
#define ACAMERA_ISP_ANTIFOG_HIST_SHADING_LUT_FIELD_MASK 0xffff

// index (0-16), args: data (16-bit)
static __inline void acamera_isp_antifog_hist_shading_lut_write( uint32_t base, uint32_t index, uint16_t data )
{
    uint32_t addr = base + 0xee5c + ( ( index * sizeof( uint16_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint16_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint16_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint16_t acamera_isp_antifog_hist_shading_lut_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xee5c + ( ( index * sizeof( uint16_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint16_t ) ) & 0x3 ) << 3;
    return ( uint16_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Weight Table
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets zone weighting for the histogram. Index is (col,row) where (0,0) is top-left zone
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_WEIGHT_TABLE_DEFAULT 15
#define ACAMERA_ISP_ANTIFOG_HIST_WEIGHT_TABLE_DATASIZE 4
#define ACAMERA_ISP_ANTIFOG_HIST_WEIGHT_TABLE_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_WEIGHT_TABLE_REG_ADDR 0xee80
#define ACAMERA_ISP_ANTIFOG_HIST_WEIGHT_TABLE_OFFSET 0x80
#define ACAMERA_ISP_ANTIFOG_HIST_WEIGHT_TABLE_FIELD_MASK 0xf

// index1 (0-14), index2 (0-14), args: data (4-bit)
static __inline void acamera_isp_antifog_hist_weight_table_write( uint32_t base, uint32_t index1, uint32_t index2, uint8_t data )
{
    uint32_t addr;
    uint8_t offset;
    uint32_t curr;
    addr = base + 0xee80 + ( index1 * 15 + index2 );
    offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    curr = system_isp_read_32( addr );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( 0xFF << offset ) ) );
}
static __inline uint8_t acamera_isp_antifog_hist_weight_table_read( uint32_t base, uint32_t index1, uint32_t index2 )
{
    uint32_t addr = base + 0xee80 + ( ( index1 * 15 + index2 ) );
    uint8_t offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: lut X
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// X cooerdinates of NEQ LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_LUT_X_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_LUT_X_DATASIZE 20
#define ACAMERA_ISP_ANTIFOG_HIST_LUT_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_LUT_X_REG_ADDR 0xef70
#define ACAMERA_ISP_ANTIFOG_HIST_LUT_X_OFFSET 0x170
#define ACAMERA_ISP_ANTIFOG_HIST_LUT_X_FIELD_MASK 0xfffff

// index (0-8), args: data (20-bit)
static __inline void acamera_isp_antifog_hist_lut_x_write( uint32_t base, uint32_t index, uint32_t data )
{
    uint32_t addr = base + 0xef70 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint32_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint32_t acamera_isp_antifog_hist_lut_x_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xef70 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    return ( uint32_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: lut Y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// X cooerdinates of NEQ LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ANTIFOG_HIST_LUT_Y_DEFAULT 0
#define ACAMERA_ISP_ANTIFOG_HIST_LUT_Y_DATASIZE 21
#define ACAMERA_ISP_ANTIFOG_HIST_LUT_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_ANTIFOG_HIST_LUT_Y_REG_ADDR 0xef94
#define ACAMERA_ISP_ANTIFOG_HIST_LUT_Y_OFFSET 0x194
#define ACAMERA_ISP_ANTIFOG_HIST_LUT_Y_FIELD_MASK 0x1fffff

// index (0-8), args: data (21-bit)
static __inline void acamera_isp_antifog_hist_lut_y_write( uint32_t base, uint32_t index, uint32_t data )
{
    uint32_t addr = base + 0xef94 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint32_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint32_t acamera_isp_antifog_hist_lut_y_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xef94 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    return ( uint32_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: Metering Hist 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: skip x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in horizontal direction: 0=every 2nd pixel; 1=every 3rd pixel; 2=every 4th pixel; 3=every 5th pixel; 4=every 8th pixel ; 5+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_SKIP_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_SKIP_X_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_1_SKIP_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_SKIP_X_REG_ADDR 0xefc0
#define ACAMERA_ISP_METERING_HIST_1_SKIP_X_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_1_SKIP_X_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_1_skip_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc0 );
    system_isp_write_32( base + 0xefc0, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_skip_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc0 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: skip y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in vertical direction: 0=every pixel; 1=every 2nd pixel; 2=every 3rd pixel; 3=every 4th pixel; 4=every 5th pixel; 5=every 8th pixel ; 6+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_SKIP_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_SKIP_Y_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_1_SKIP_Y_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_1_SKIP_Y_REG_ADDR 0xefc0
#define ACAMERA_ISP_METERING_HIST_1_SKIP_Y_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_1_SKIP_Y_FIELD_MASK 0x70

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_1_skip_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc0 );
    system_isp_write_32( base + 0xefc0, ( ( ( uint32_t )( data & 0x7 ) ) << 4 ) | ( curr & 0xffffff8f ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_skip_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc0 ) & 0x70 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: offset x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first column;  1=start from second column
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_OFFSET_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_OFFSET_X_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_1_OFFSET_X_FIELD_OFFSET 3
#define ACAMERA_ISP_METERING_HIST_1_OFFSET_X_REG_ADDR 0xefc0
#define ACAMERA_ISP_METERING_HIST_1_OFFSET_X_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_1_OFFSET_X_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_1_offset_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc0 );
    system_isp_write_32( base + 0xefc0, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_offset_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc0 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: offset y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first row; 1= start from second row
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_OFFSET_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_OFFSET_Y_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_1_OFFSET_Y_FIELD_OFFSET 7
#define ACAMERA_ISP_METERING_HIST_1_OFFSET_Y_REG_ADDR 0xefc0
#define ACAMERA_ISP_METERING_HIST_1_OFFSET_Y_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_1_OFFSET_Y_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_1_offset_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc0 );
    system_isp_write_32( base + 0xefc0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_offset_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Plane mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Plane separation mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_FIELD_OFFSET 8
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_REG_ADDR 0xefc0
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_FIELD_MASK 0x700
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_COLLECT_ALL_THE_PLANES_IN_ONE_HISTOGRAM ( 0 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_COLLECT_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 1 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_COLLECT_EVERY_PIXEL_OF_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 2 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_RESERVED_3 ( 3 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_COLLECT_ODD__X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 4 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_COLLECT_EVEN_X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 5 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_COLLECT_ODD__X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 6 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_MODE_COLLECT_EVEN_X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_1_plane_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc0 );
    system_isp_write_32( base + 0xefc0, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_plane_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc0 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Radial shading enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Enable radial shading correction.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_RADIAL_SHADING_ENABLE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_RADIAL_SHADING_ENABLE_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_1_RADIAL_SHADING_ENABLE_FIELD_OFFSET 12
#define ACAMERA_ISP_METERING_HIST_1_RADIAL_SHADING_ENABLE_REG_ADDR 0xefc0
#define ACAMERA_ISP_METERING_HIST_1_RADIAL_SHADING_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_1_RADIAL_SHADING_ENABLE_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_1_radial_shading_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc0 );
    system_isp_write_32( base + 0xefc0, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_radial_shading_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc0 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: NEQ LUT enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Enable non-equidistant lookup table.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_ENABLE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_ENABLE_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_ENABLE_FIELD_OFFSET 14
#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_ENABLE_REG_ADDR 0xefc0
#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_ENABLE_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_1_neq_lut_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc0 );
    system_isp_write_32( base + 0xefc0, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_neq_lut_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc0 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: NEQ LUT position
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Position of NEQ lookup table: 0=before histogram, 1=before white balance
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_POSITION_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_POSITION_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_POSITION_FIELD_OFFSET 15
#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_POSITION_REG_ADDR 0xefc0
#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_POSITION_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_1_NEQ_LUT_POSITION_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_1_neq_lut_position_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc0 );
    system_isp_write_32( base + 0xefc0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_neq_lut_position_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Nodes Used Horiz
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones horizontally for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_HORIZ_DEFAULT 21
#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_HORIZ_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_HORIZ_FIELD_OFFSET 16
#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_HORIZ_REG_ADDR 0xefc0
#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_HORIZ_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_HORIZ_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_1_nodes_used_horiz_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc0 );
    system_isp_write_32( base + 0xefc0, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_nodes_used_horiz_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc0 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Nodes Used Vert
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones vertically for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_VERT_DEFAULT 21
#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_VERT_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_VERT_FIELD_OFFSET 24
#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_VERT_REG_ADDR 0xefc0
#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_VERT_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_1_NODES_USED_VERT_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_1_nodes_used_vert_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc0 );
    system_isp_write_32( base + 0xefc0, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_nodes_used_vert_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc0 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: scale bottom
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of bottom half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_SCALE_BOTTOM_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_SCALE_BOTTOM_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_1_SCALE_BOTTOM_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_SCALE_BOTTOM_REG_ADDR 0xefc4
#define ACAMERA_ISP_METERING_HIST_1_SCALE_BOTTOM_OFFSET 0x4
#define ACAMERA_ISP_METERING_HIST_1_SCALE_BOTTOM_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_isp_metering_hist_1_scale_bottom_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc4 );
    system_isp_write_32( base + 0xefc4, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_scale_bottom_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc4 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: scale top
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of top half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_SCALE_TOP_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_SCALE_TOP_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_1_SCALE_TOP_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_1_SCALE_TOP_REG_ADDR 0xefc4
#define ACAMERA_ISP_METERING_HIST_1_SCALE_TOP_OFFSET 0x4
#define ACAMERA_ISP_METERING_HIST_1_SCALE_TOP_FIELD_MASK 0xf0

// args: data (4-bit)
static __inline void acamera_isp_metering_hist_1_scale_top_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xefc4 );
    system_isp_write_32( base + 0xefc4, ( ( ( uint32_t )( data & 0xf ) ) << 4 ) | ( curr & 0xffffff0f ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_scale_top_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xefc4 ) & 0xf0 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Total Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total number of pixels processed (skip x and skip y are taken into account)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_TOTAL_PIXELS_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_TOTAL_PIXELS_DATASIZE 32
#define ACAMERA_ISP_METERING_HIST_1_TOTAL_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_TOTAL_PIXELS_REG_ADDR 0xefc8
#define ACAMERA_ISP_METERING_HIST_1_TOTAL_PIXELS_OFFSET 0x8
#define ACAMERA_ISP_METERING_HIST_1_TOTAL_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_metering_hist_1_total_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xefc8 );
}
// ------------------------------------------------------------------------------ //
// Register: Counted Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of pixels accumulated (with nonzero weight)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_COUNTED_PIXELS_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_COUNTED_PIXELS_DATASIZE 32
#define ACAMERA_ISP_METERING_HIST_1_COUNTED_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_COUNTED_PIXELS_REG_ADDR 0xefcc
#define ACAMERA_ISP_METERING_HIST_1_COUNTED_PIXELS_OFFSET 0xc
#define ACAMERA_ISP_METERING_HIST_1_COUNTED_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_metering_hist_1_counted_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xefcc );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Total
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels processed for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_PLANE_TOTAL_LUT_NODES ( 4 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_TOTAL_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_TOTAL_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_TOTAL_LUT_OFFSET ( 0xefd0 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_metering_hist_1_plane_total_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xefd0 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Counted
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels accumulated for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_PLANE_COUNTED_LUT_NODES ( 4 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_COUNTED_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_COUNTED_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_METERING_HIST_1_PLANE_COUNTED_LUT_OFFSET ( 0xefe0 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_metering_hist_1_plane_counted_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xefe0 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_GAIN_00_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_1_GAIN_00_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_1_GAIN_00_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_GAIN_00_REG_ADDR 0xeff0
#define ACAMERA_ISP_METERING_HIST_1_GAIN_00_OFFSET 0x30
#define ACAMERA_ISP_METERING_HIST_1_GAIN_00_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_1_gain_00_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeff0 );
    system_isp_write_32( base + 0xeff0, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_1_gain_00_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeff0 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_GAIN_01_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_1_GAIN_01_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_1_GAIN_01_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_GAIN_01_REG_ADDR 0xeff4
#define ACAMERA_ISP_METERING_HIST_1_GAIN_01_OFFSET 0x34
#define ACAMERA_ISP_METERING_HIST_1_GAIN_01_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_1_gain_01_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeff4 );
    system_isp_write_32( base + 0xeff4, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_1_gain_01_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeff4 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_GAIN_10_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_1_GAIN_10_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_1_GAIN_10_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_GAIN_10_REG_ADDR 0xeff8
#define ACAMERA_ISP_METERING_HIST_1_GAIN_10_OFFSET 0x38
#define ACAMERA_ISP_METERING_HIST_1_GAIN_10_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_1_gain_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeff8 );
    system_isp_write_32( base + 0xeff8, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_1_gain_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeff8 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_GAIN_11_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_1_GAIN_11_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_1_GAIN_11_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_GAIN_11_REG_ADDR 0xeffc
#define ACAMERA_ISP_METERING_HIST_1_GAIN_11_OFFSET 0x3c
#define ACAMERA_ISP_METERING_HIST_1_GAIN_11_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_1_gain_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xeffc );
    system_isp_write_32( base + 0xeffc, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_1_gain_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xeffc ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_1_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_BLACK_00_REG_ADDR 0xf000
#define ACAMERA_ISP_METERING_HIST_1_BLACK_00_OFFSET 0x40
#define ACAMERA_ISP_METERING_HIST_1_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_1_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf000 );
    system_isp_write_32( base + 0xf000, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_1_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf000 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_1_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_BLACK_01_REG_ADDR 0xf004
#define ACAMERA_ISP_METERING_HIST_1_BLACK_01_OFFSET 0x44
#define ACAMERA_ISP_METERING_HIST_1_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_1_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf004 );
    system_isp_write_32( base + 0xf004, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_1_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf004 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_1_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_BLACK_10_REG_ADDR 0xf008
#define ACAMERA_ISP_METERING_HIST_1_BLACK_10_OFFSET 0x48
#define ACAMERA_ISP_METERING_HIST_1_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_1_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf008 );
    system_isp_write_32( base + 0xf008, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_1_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf008 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_1_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_BLACK_11_REG_ADDR 0xf00c
#define ACAMERA_ISP_METERING_HIST_1_BLACK_11_OFFSET 0x4c
#define ACAMERA_ISP_METERING_HIST_1_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_1_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf00c );
    system_isp_write_32( base + 0xf00c, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_1_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf00c ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Center X
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center x coordinate of the shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_CENTER_X_DEFAULT 960
#define ACAMERA_ISP_METERING_HIST_1_CENTER_X_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_1_CENTER_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_CENTER_X_REG_ADDR 0xf010
#define ACAMERA_ISP_METERING_HIST_1_CENTER_X_OFFSET 0x50
#define ACAMERA_ISP_METERING_HIST_1_CENTER_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_1_center_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf010 );
    system_isp_write_32( base + 0xf010, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_1_center_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf010 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Center Y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center y coordinate of the shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_CENTER_Y_DEFAULT 540
#define ACAMERA_ISP_METERING_HIST_1_CENTER_Y_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_1_CENTER_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_CENTER_Y_REG_ADDR 0xf014
#define ACAMERA_ISP_METERING_HIST_1_CENTER_Y_OFFSET 0x54
#define ACAMERA_ISP_METERING_HIST_1_CENTER_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_1_center_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf014 );
    system_isp_write_32( base + 0xf014, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_1_center_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf014 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Off Center multx
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing X factor which scales the radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTX_DEFAULT 1770
#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTX_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTX_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTX_REG_ADDR 0xf018
#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTX_OFFSET 0x58
#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTX_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_1_off_center_multx_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf018 );
    system_isp_write_32( base + 0xf018, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_1_off_center_multx_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf018 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Off Center multy
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing Y factor which scales the radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTY_DEFAULT 1770
#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTY_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTY_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTY_REG_ADDR 0xf01c
#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTY_OFFSET 0x5c
#define ACAMERA_ISP_METERING_HIST_1_OFF_CENTER_MULTY_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_1_off_center_multy_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf01c );
    system_isp_write_32( base + 0xf01c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_1_off_center_multy_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf01c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active Width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video width in pixels
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_WIDTH_DEFAULT 1920
#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_WIDTH_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_WIDTH_REG_ADDR 0xf020
#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_WIDTH_OFFSET 0x60
#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_WIDTH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_1_active_width_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf020 );
    system_isp_write_32( base + 0xf020, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_1_active_width_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf020 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active Height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video height in lines
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_HEIGHT_DEFAULT 1080
#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_HEIGHT_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_HEIGHT_REG_ADDR 0xf024
#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_HEIGHT_OFFSET 0x64
#define ACAMERA_ISP_METERING_HIST_1_ACTIVE_HEIGHT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_1_active_height_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf024 );
    system_isp_write_32( base + 0xf024, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_1_active_height_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf024 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: RGGB start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Starting color of the rggb pattern
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_RGGB_START_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_RGGB_START_DATASIZE 2
#define ACAMERA_ISP_METERING_HIST_1_RGGB_START_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_RGGB_START_REG_ADDR 0xf028
#define ACAMERA_ISP_METERING_HIST_1_RGGB_START_OFFSET 0x68
#define ACAMERA_ISP_METERING_HIST_1_RGGB_START_FIELD_MASK 0x3
#define ACAMERA_ISP_METERING_HIST_1_RGGB_START_R_GR_GB_B ( 0 )
#define ACAMERA_ISP_METERING_HIST_1_RGGB_START_GR_R_B_GB ( 1 )
#define ACAMERA_ISP_METERING_HIST_1_RGGB_START_GB_B_R_GR ( 2 )
#define ACAMERA_ISP_METERING_HIST_1_RGGB_START_B_GB_GR_R ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_metering_hist_1_rggb_start_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf028 );
    system_isp_write_32( base + 0xf028, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_rggb_start_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf028 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: CFA pattern
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pattern select:
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_CFA_PATTERN_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_CFA_PATTERN_DATASIZE 2
#define ACAMERA_ISP_METERING_HIST_1_CFA_PATTERN_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_1_CFA_PATTERN_REG_ADDR 0xf028
#define ACAMERA_ISP_METERING_HIST_1_CFA_PATTERN_OFFSET 0x68
#define ACAMERA_ISP_METERING_HIST_1_CFA_PATTERN_FIELD_MASK 0x30
#define ACAMERA_ISP_METERING_HIST_1_CFA_PATTERN_RGGB ( 0 )
#define ACAMERA_ISP_METERING_HIST_1_CFA_PATTERN_RCCC ( 1 )
#define ACAMERA_ISP_METERING_HIST_1_CFA_PATTERN_RIRGB ( 2 )
#define ACAMERA_ISP_METERING_HIST_1_CFA_PATTERN_RGIRB ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_metering_hist_1_cfa_pattern_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf028 );
    system_isp_write_32( base + 0xf028, ( ( ( uint32_t )( data & 0x3 ) ) << 4 ) | ( curr & 0xffffffcf ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_cfa_pattern_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf028 ) & 0x30 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Shading LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading profile
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_SHADING_LUT_DEFAULT 4096
#define ACAMERA_ISP_METERING_HIST_1_SHADING_LUT_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_1_SHADING_LUT_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_SHADING_LUT_REG_ADDR 0xf02c
#define ACAMERA_ISP_METERING_HIST_1_SHADING_LUT_OFFSET 0x6c
#define ACAMERA_ISP_METERING_HIST_1_SHADING_LUT_FIELD_MASK 0xffff

// index (0-16), args: data (16-bit)
static __inline void acamera_isp_metering_hist_1_shading_lut_write( uint32_t base, uint32_t index, uint16_t data )
{
    uint32_t addr = base + 0xf02c + ( ( index * sizeof( uint16_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint16_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint16_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint16_t acamera_isp_metering_hist_1_shading_lut_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf02c + ( ( index * sizeof( uint16_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint16_t ) ) & 0x3 ) << 3;
    return ( uint16_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Weight Table
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets zone weighting for the histogram. Index is (col,row) where (0,0) is top-left zone
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_WEIGHT_TABLE_DEFAULT 15
#define ACAMERA_ISP_METERING_HIST_1_WEIGHT_TABLE_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_1_WEIGHT_TABLE_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_WEIGHT_TABLE_REG_ADDR 0xf050
#define ACAMERA_ISP_METERING_HIST_1_WEIGHT_TABLE_OFFSET 0x90
#define ACAMERA_ISP_METERING_HIST_1_WEIGHT_TABLE_FIELD_MASK 0xf

// index1 (0-14), index2 (0-14), args: data (4-bit)
static __inline void acamera_isp_metering_hist_1_weight_table_write( uint32_t base, uint32_t index1, uint32_t index2, uint8_t data )
{
    uint32_t addr;
    uint8_t offset;
    uint32_t curr;
    addr = base + 0xf050 + ( index1 * 15 + index2 );
    offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    curr = system_isp_read_32( addr );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( 0xFF << offset ) ) );
}
static __inline uint8_t acamera_isp_metering_hist_1_weight_table_read( uint32_t base, uint32_t index1, uint32_t index2 )
{
    uint32_t addr = base + 0xf050 + ( ( index1 * 15 + index2 ) );
    uint8_t offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: lut X
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// X cooerdinates of NEQ LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_LUT_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_LUT_X_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_1_LUT_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_LUT_X_REG_ADDR 0xf140
#define ACAMERA_ISP_METERING_HIST_1_LUT_X_OFFSET 0x180
#define ACAMERA_ISP_METERING_HIST_1_LUT_X_FIELD_MASK 0xfffff

// index (0-8), args: data (20-bit)
static __inline void acamera_isp_metering_hist_1_lut_x_write( uint32_t base, uint32_t index, uint32_t data )
{
    uint32_t addr = base + 0xf140 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint32_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint32_t acamera_isp_metering_hist_1_lut_x_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf140 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    return ( uint32_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: lut Y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// X cooerdinates of NEQ LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_1_LUT_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_1_LUT_Y_DATASIZE 21
#define ACAMERA_ISP_METERING_HIST_1_LUT_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_1_LUT_Y_REG_ADDR 0xf164
#define ACAMERA_ISP_METERING_HIST_1_LUT_Y_OFFSET 0x1a4
#define ACAMERA_ISP_METERING_HIST_1_LUT_Y_FIELD_MASK 0x1fffff

// index (0-8), args: data (21-bit)
static __inline void acamera_isp_metering_hist_1_lut_y_write( uint32_t base, uint32_t index, uint32_t data )
{
    uint32_t addr = base + 0xf164 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint32_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint32_t acamera_isp_metering_hist_1_lut_y_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf164 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    return ( uint32_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: Metering Hist 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: skip x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in horizontal direction: 0=every 2nd pixel; 1=every 3rd pixel; 2=every 4th pixel; 3=every 5th pixel; 4=every 8th pixel ; 5+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_SKIP_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_SKIP_X_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_2_SKIP_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_SKIP_X_REG_ADDR 0xf190
#define ACAMERA_ISP_METERING_HIST_2_SKIP_X_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_2_SKIP_X_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_2_skip_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf190 );
    system_isp_write_32( base + 0xf190, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_skip_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf190 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: skip y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in vertical direction: 0=every pixel; 1=every 2nd pixel; 2=every 3rd pixel; 3=every 4th pixel; 4=every 5th pixel; 5=every 8th pixel ; 6+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_SKIP_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_SKIP_Y_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_2_SKIP_Y_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_2_SKIP_Y_REG_ADDR 0xf190
#define ACAMERA_ISP_METERING_HIST_2_SKIP_Y_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_2_SKIP_Y_FIELD_MASK 0x70

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_2_skip_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf190 );
    system_isp_write_32( base + 0xf190, ( ( ( uint32_t )( data & 0x7 ) ) << 4 ) | ( curr & 0xffffff8f ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_skip_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf190 ) & 0x70 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: offset x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first column;  1=start from second column
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_OFFSET_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_OFFSET_X_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_2_OFFSET_X_FIELD_OFFSET 3
#define ACAMERA_ISP_METERING_HIST_2_OFFSET_X_REG_ADDR 0xf190
#define ACAMERA_ISP_METERING_HIST_2_OFFSET_X_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_2_OFFSET_X_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_2_offset_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf190 );
    system_isp_write_32( base + 0xf190, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_offset_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf190 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: offset y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first row; 1= start from second row
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_OFFSET_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_OFFSET_Y_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_2_OFFSET_Y_FIELD_OFFSET 7
#define ACAMERA_ISP_METERING_HIST_2_OFFSET_Y_REG_ADDR 0xf190
#define ACAMERA_ISP_METERING_HIST_2_OFFSET_Y_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_2_OFFSET_Y_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_2_offset_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf190 );
    system_isp_write_32( base + 0xf190, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_offset_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf190 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Plane mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Plane separation mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_FIELD_OFFSET 8
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_REG_ADDR 0xf190
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_FIELD_MASK 0x700
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_COLLECT_ALL_THE_PLANES_IN_ONE_HISTOGRAM ( 0 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_COLLECT_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 1 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_COLLECT_EVERY_PIXEL_OF_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 2 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_RESERVED_3 ( 3 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_COLLECT_ODD__X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 4 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_COLLECT_EVEN_X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 5 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_COLLECT_ODD__X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 6 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_MODE_COLLECT_EVEN_X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_2_plane_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf190 );
    system_isp_write_32( base + 0xf190, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_plane_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf190 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Radial shading enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Enable radial shading correction.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_RADIAL_SHADING_ENABLE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_RADIAL_SHADING_ENABLE_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_2_RADIAL_SHADING_ENABLE_FIELD_OFFSET 12
#define ACAMERA_ISP_METERING_HIST_2_RADIAL_SHADING_ENABLE_REG_ADDR 0xf190
#define ACAMERA_ISP_METERING_HIST_2_RADIAL_SHADING_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_2_RADIAL_SHADING_ENABLE_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_2_radial_shading_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf190 );
    system_isp_write_32( base + 0xf190, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_radial_shading_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf190 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: NEQ LUT enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Enable non-equidistant lookup table.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_ENABLE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_ENABLE_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_ENABLE_FIELD_OFFSET 14
#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_ENABLE_REG_ADDR 0xf190
#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_ENABLE_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_2_neq_lut_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf190 );
    system_isp_write_32( base + 0xf190, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_neq_lut_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf190 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: NEQ LUT position
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Position of NEQ lookup table: 0=before histogram, 1=before white balance
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_POSITION_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_POSITION_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_POSITION_FIELD_OFFSET 15
#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_POSITION_REG_ADDR 0xf190
#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_POSITION_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_2_NEQ_LUT_POSITION_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_2_neq_lut_position_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf190 );
    system_isp_write_32( base + 0xf190, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_neq_lut_position_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf190 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Nodes Used Horiz
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones horizontally for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_HORIZ_DEFAULT 21
#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_HORIZ_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_HORIZ_FIELD_OFFSET 16
#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_HORIZ_REG_ADDR 0xf190
#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_HORIZ_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_HORIZ_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_2_nodes_used_horiz_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf190 );
    system_isp_write_32( base + 0xf190, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_nodes_used_horiz_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf190 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Nodes Used Vert
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones vertically for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_VERT_DEFAULT 21
#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_VERT_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_VERT_FIELD_OFFSET 24
#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_VERT_REG_ADDR 0xf190
#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_VERT_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_2_NODES_USED_VERT_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_2_nodes_used_vert_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf190 );
    system_isp_write_32( base + 0xf190, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_nodes_used_vert_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf190 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: scale bottom
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of bottom half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_SCALE_BOTTOM_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_SCALE_BOTTOM_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_2_SCALE_BOTTOM_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_SCALE_BOTTOM_REG_ADDR 0xf194
#define ACAMERA_ISP_METERING_HIST_2_SCALE_BOTTOM_OFFSET 0x4
#define ACAMERA_ISP_METERING_HIST_2_SCALE_BOTTOM_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_isp_metering_hist_2_scale_bottom_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf194 );
    system_isp_write_32( base + 0xf194, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_scale_bottom_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf194 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: scale top
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of top half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_SCALE_TOP_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_SCALE_TOP_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_2_SCALE_TOP_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_2_SCALE_TOP_REG_ADDR 0xf194
#define ACAMERA_ISP_METERING_HIST_2_SCALE_TOP_OFFSET 0x4
#define ACAMERA_ISP_METERING_HIST_2_SCALE_TOP_FIELD_MASK 0xf0

// args: data (4-bit)
static __inline void acamera_isp_metering_hist_2_scale_top_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf194 );
    system_isp_write_32( base + 0xf194, ( ( ( uint32_t )( data & 0xf ) ) << 4 ) | ( curr & 0xffffff0f ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_scale_top_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf194 ) & 0xf0 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Total Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total number of pixels processed (skip x and skip y are taken into account)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_TOTAL_PIXELS_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_TOTAL_PIXELS_DATASIZE 32
#define ACAMERA_ISP_METERING_HIST_2_TOTAL_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_TOTAL_PIXELS_REG_ADDR 0xf198
#define ACAMERA_ISP_METERING_HIST_2_TOTAL_PIXELS_OFFSET 0x8
#define ACAMERA_ISP_METERING_HIST_2_TOTAL_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_metering_hist_2_total_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf198 );
}
// ------------------------------------------------------------------------------ //
// Register: Counted Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of pixels accumulated (with nonzero weight)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_COUNTED_PIXELS_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_COUNTED_PIXELS_DATASIZE 32
#define ACAMERA_ISP_METERING_HIST_2_COUNTED_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_COUNTED_PIXELS_REG_ADDR 0xf19c
#define ACAMERA_ISP_METERING_HIST_2_COUNTED_PIXELS_OFFSET 0xc
#define ACAMERA_ISP_METERING_HIST_2_COUNTED_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_metering_hist_2_counted_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf19c );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Total
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels processed for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_PLANE_TOTAL_LUT_NODES ( 4 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_TOTAL_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_TOTAL_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_TOTAL_LUT_OFFSET ( 0xf1a0 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_metering_hist_2_plane_total_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf1a0 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Counted
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels accumulated for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_PLANE_COUNTED_LUT_NODES ( 4 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_COUNTED_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_COUNTED_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_METERING_HIST_2_PLANE_COUNTED_LUT_OFFSET ( 0xf1b0 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_metering_hist_2_plane_counted_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf1b0 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_GAIN_00_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_2_GAIN_00_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_2_GAIN_00_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_GAIN_00_REG_ADDR 0xf1c0
#define ACAMERA_ISP_METERING_HIST_2_GAIN_00_OFFSET 0x30
#define ACAMERA_ISP_METERING_HIST_2_GAIN_00_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_2_gain_00_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1c0 );
    system_isp_write_32( base + 0xf1c0, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_2_gain_00_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf1c0 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_GAIN_01_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_2_GAIN_01_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_2_GAIN_01_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_GAIN_01_REG_ADDR 0xf1c4
#define ACAMERA_ISP_METERING_HIST_2_GAIN_01_OFFSET 0x34
#define ACAMERA_ISP_METERING_HIST_2_GAIN_01_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_2_gain_01_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1c4 );
    system_isp_write_32( base + 0xf1c4, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_2_gain_01_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf1c4 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_GAIN_10_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_2_GAIN_10_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_2_GAIN_10_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_GAIN_10_REG_ADDR 0xf1c8
#define ACAMERA_ISP_METERING_HIST_2_GAIN_10_OFFSET 0x38
#define ACAMERA_ISP_METERING_HIST_2_GAIN_10_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_2_gain_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1c8 );
    system_isp_write_32( base + 0xf1c8, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_2_gain_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf1c8 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_GAIN_11_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_2_GAIN_11_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_2_GAIN_11_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_GAIN_11_REG_ADDR 0xf1cc
#define ACAMERA_ISP_METERING_HIST_2_GAIN_11_OFFSET 0x3c
#define ACAMERA_ISP_METERING_HIST_2_GAIN_11_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_2_gain_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1cc );
    system_isp_write_32( base + 0xf1cc, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_2_gain_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf1cc ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_2_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_BLACK_00_REG_ADDR 0xf1d0
#define ACAMERA_ISP_METERING_HIST_2_BLACK_00_OFFSET 0x40
#define ACAMERA_ISP_METERING_HIST_2_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_2_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1d0 );
    system_isp_write_32( base + 0xf1d0, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_2_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf1d0 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_2_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_BLACK_01_REG_ADDR 0xf1d4
#define ACAMERA_ISP_METERING_HIST_2_BLACK_01_OFFSET 0x44
#define ACAMERA_ISP_METERING_HIST_2_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_2_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1d4 );
    system_isp_write_32( base + 0xf1d4, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_2_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf1d4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_2_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_BLACK_10_REG_ADDR 0xf1d8
#define ACAMERA_ISP_METERING_HIST_2_BLACK_10_OFFSET 0x48
#define ACAMERA_ISP_METERING_HIST_2_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_2_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1d8 );
    system_isp_write_32( base + 0xf1d8, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_2_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf1d8 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_2_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_BLACK_11_REG_ADDR 0xf1dc
#define ACAMERA_ISP_METERING_HIST_2_BLACK_11_OFFSET 0x4c
#define ACAMERA_ISP_METERING_HIST_2_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_2_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1dc );
    system_isp_write_32( base + 0xf1dc, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_2_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf1dc ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Center X
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center x coordinate of the shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_CENTER_X_DEFAULT 960
#define ACAMERA_ISP_METERING_HIST_2_CENTER_X_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_2_CENTER_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_CENTER_X_REG_ADDR 0xf1e0
#define ACAMERA_ISP_METERING_HIST_2_CENTER_X_OFFSET 0x50
#define ACAMERA_ISP_METERING_HIST_2_CENTER_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_2_center_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1e0 );
    system_isp_write_32( base + 0xf1e0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_2_center_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf1e0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Center Y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center y coordinate of the shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_CENTER_Y_DEFAULT 540
#define ACAMERA_ISP_METERING_HIST_2_CENTER_Y_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_2_CENTER_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_CENTER_Y_REG_ADDR 0xf1e4
#define ACAMERA_ISP_METERING_HIST_2_CENTER_Y_OFFSET 0x54
#define ACAMERA_ISP_METERING_HIST_2_CENTER_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_2_center_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1e4 );
    system_isp_write_32( base + 0xf1e4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_2_center_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf1e4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Off Center multx
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing X factor which scales the radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTX_DEFAULT 1770
#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTX_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTX_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTX_REG_ADDR 0xf1e8
#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTX_OFFSET 0x58
#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTX_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_2_off_center_multx_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1e8 );
    system_isp_write_32( base + 0xf1e8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_2_off_center_multx_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf1e8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Off Center multy
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing Y factor which scales the radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTY_DEFAULT 1770
#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTY_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTY_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTY_REG_ADDR 0xf1ec
#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTY_OFFSET 0x5c
#define ACAMERA_ISP_METERING_HIST_2_OFF_CENTER_MULTY_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_2_off_center_multy_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1ec );
    system_isp_write_32( base + 0xf1ec, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_2_off_center_multy_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf1ec ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active Width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video width in pixels
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_WIDTH_DEFAULT 1920
#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_WIDTH_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_WIDTH_REG_ADDR 0xf1f0
#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_WIDTH_OFFSET 0x60
#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_WIDTH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_2_active_width_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1f0 );
    system_isp_write_32( base + 0xf1f0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_2_active_width_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf1f0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active Height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video height in lines
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_HEIGHT_DEFAULT 1080
#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_HEIGHT_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_HEIGHT_REG_ADDR 0xf1f4
#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_HEIGHT_OFFSET 0x64
#define ACAMERA_ISP_METERING_HIST_2_ACTIVE_HEIGHT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_2_active_height_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1f4 );
    system_isp_write_32( base + 0xf1f4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_2_active_height_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf1f4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: RGGB start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Starting color of the rggb pattern
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_RGGB_START_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_RGGB_START_DATASIZE 2
#define ACAMERA_ISP_METERING_HIST_2_RGGB_START_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_RGGB_START_REG_ADDR 0xf1f8
#define ACAMERA_ISP_METERING_HIST_2_RGGB_START_OFFSET 0x68
#define ACAMERA_ISP_METERING_HIST_2_RGGB_START_FIELD_MASK 0x3
#define ACAMERA_ISP_METERING_HIST_2_RGGB_START_R_GR_GB_B ( 0 )
#define ACAMERA_ISP_METERING_HIST_2_RGGB_START_GR_R_B_GB ( 1 )
#define ACAMERA_ISP_METERING_HIST_2_RGGB_START_GB_B_R_GR ( 2 )
#define ACAMERA_ISP_METERING_HIST_2_RGGB_START_B_GB_GR_R ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_metering_hist_2_rggb_start_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1f8 );
    system_isp_write_32( base + 0xf1f8, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_rggb_start_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf1f8 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: CFA pattern
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pattern select:
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_CFA_PATTERN_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_CFA_PATTERN_DATASIZE 2
#define ACAMERA_ISP_METERING_HIST_2_CFA_PATTERN_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_2_CFA_PATTERN_REG_ADDR 0xf1f8
#define ACAMERA_ISP_METERING_HIST_2_CFA_PATTERN_OFFSET 0x68
#define ACAMERA_ISP_METERING_HIST_2_CFA_PATTERN_FIELD_MASK 0x30
#define ACAMERA_ISP_METERING_HIST_2_CFA_PATTERN_RGGB ( 0 )
#define ACAMERA_ISP_METERING_HIST_2_CFA_PATTERN_RCCC ( 1 )
#define ACAMERA_ISP_METERING_HIST_2_CFA_PATTERN_RIRGB ( 2 )
#define ACAMERA_ISP_METERING_HIST_2_CFA_PATTERN_RGIRB ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_metering_hist_2_cfa_pattern_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf1f8 );
    system_isp_write_32( base + 0xf1f8, ( ( ( uint32_t )( data & 0x3 ) ) << 4 ) | ( curr & 0xffffffcf ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_cfa_pattern_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf1f8 ) & 0x30 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Shading LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading profile
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_SHADING_LUT_DEFAULT 4096
#define ACAMERA_ISP_METERING_HIST_2_SHADING_LUT_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_2_SHADING_LUT_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_SHADING_LUT_REG_ADDR 0xf1fc
#define ACAMERA_ISP_METERING_HIST_2_SHADING_LUT_OFFSET 0x6c
#define ACAMERA_ISP_METERING_HIST_2_SHADING_LUT_FIELD_MASK 0xffff

// index (0-16), args: data (16-bit)
static __inline void acamera_isp_metering_hist_2_shading_lut_write( uint32_t base, uint32_t index, uint16_t data )
{
    uint32_t addr = base + 0xf1fc + ( ( index * sizeof( uint16_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint16_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint16_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint16_t acamera_isp_metering_hist_2_shading_lut_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf1fc + ( ( index * sizeof( uint16_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint16_t ) ) & 0x3 ) << 3;
    return ( uint16_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Weight Table
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets zone weighting for the histogram. Index is (col,row) where (0,0) is top-left zone
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_WEIGHT_TABLE_DEFAULT 15
#define ACAMERA_ISP_METERING_HIST_2_WEIGHT_TABLE_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_2_WEIGHT_TABLE_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_WEIGHT_TABLE_REG_ADDR 0xf220
#define ACAMERA_ISP_METERING_HIST_2_WEIGHT_TABLE_OFFSET 0x90
#define ACAMERA_ISP_METERING_HIST_2_WEIGHT_TABLE_FIELD_MASK 0xf

// index1 (0-14), index2 (0-14), args: data (4-bit)
static __inline void acamera_isp_metering_hist_2_weight_table_write( uint32_t base, uint32_t index1, uint32_t index2, uint8_t data )
{
    uint32_t addr;
    uint8_t offset;
    uint32_t curr;
    addr = base + 0xf220 + ( index1 * 15 + index2 );
    offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    curr = system_isp_read_32( addr );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( 0xFF << offset ) ) );
}
static __inline uint8_t acamera_isp_metering_hist_2_weight_table_read( uint32_t base, uint32_t index1, uint32_t index2 )
{
    uint32_t addr = base + 0xf220 + ( ( index1 * 15 + index2 ) );
    uint8_t offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: lut X
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// X cooerdinates of NEQ LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_LUT_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_LUT_X_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_2_LUT_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_LUT_X_REG_ADDR 0xf310
#define ACAMERA_ISP_METERING_HIST_2_LUT_X_OFFSET 0x180
#define ACAMERA_ISP_METERING_HIST_2_LUT_X_FIELD_MASK 0xfffff

// index (0-8), args: data (20-bit)
static __inline void acamera_isp_metering_hist_2_lut_x_write( uint32_t base, uint32_t index, uint32_t data )
{
    uint32_t addr = base + 0xf310 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint32_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint32_t acamera_isp_metering_hist_2_lut_x_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf310 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    return ( uint32_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: lut Y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// X cooerdinates of NEQ LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_2_LUT_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_2_LUT_Y_DATASIZE 21
#define ACAMERA_ISP_METERING_HIST_2_LUT_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_2_LUT_Y_REG_ADDR 0xf334
#define ACAMERA_ISP_METERING_HIST_2_LUT_Y_OFFSET 0x1a4
#define ACAMERA_ISP_METERING_HIST_2_LUT_Y_FIELD_MASK 0x1fffff

// index (0-8), args: data (21-bit)
static __inline void acamera_isp_metering_hist_2_lut_y_write( uint32_t base, uint32_t index, uint32_t data )
{
    uint32_t addr = base + 0xf334 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint32_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint32_t acamera_isp_metering_hist_2_lut_y_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf334 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    return ( uint32_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: Metering Hist 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: skip x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in horizontal direction: 0=every 2nd pixel; 1=every 3rd pixel; 2=every 4th pixel; 3=every 5th pixel; 4=every 8th pixel ; 5+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_SKIP_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_SKIP_X_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_3_SKIP_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_SKIP_X_REG_ADDR 0xf360
#define ACAMERA_ISP_METERING_HIST_3_SKIP_X_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_3_SKIP_X_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_3_skip_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf360 );
    system_isp_write_32( base + 0xf360, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_skip_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf360 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: skip y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in vertical direction: 0=every pixel; 1=every 2nd pixel; 2=every 3rd pixel; 3=every 4th pixel; 4=every 5th pixel; 5=every 8th pixel ; 6+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_SKIP_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_SKIP_Y_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_3_SKIP_Y_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_3_SKIP_Y_REG_ADDR 0xf360
#define ACAMERA_ISP_METERING_HIST_3_SKIP_Y_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_3_SKIP_Y_FIELD_MASK 0x70

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_3_skip_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf360 );
    system_isp_write_32( base + 0xf360, ( ( ( uint32_t )( data & 0x7 ) ) << 4 ) | ( curr & 0xffffff8f ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_skip_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf360 ) & 0x70 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: offset x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first column;  1=start from second column
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_OFFSET_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_OFFSET_X_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_3_OFFSET_X_FIELD_OFFSET 3
#define ACAMERA_ISP_METERING_HIST_3_OFFSET_X_REG_ADDR 0xf360
#define ACAMERA_ISP_METERING_HIST_3_OFFSET_X_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_3_OFFSET_X_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_3_offset_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf360 );
    system_isp_write_32( base + 0xf360, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_offset_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf360 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: offset y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first row; 1= start from second row
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_OFFSET_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_OFFSET_Y_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_3_OFFSET_Y_FIELD_OFFSET 7
#define ACAMERA_ISP_METERING_HIST_3_OFFSET_Y_REG_ADDR 0xf360
#define ACAMERA_ISP_METERING_HIST_3_OFFSET_Y_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_3_OFFSET_Y_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_3_offset_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf360 );
    system_isp_write_32( base + 0xf360, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_offset_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf360 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Plane mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Plane separation mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_FIELD_OFFSET 8
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_REG_ADDR 0xf360
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_FIELD_MASK 0x700
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_COLLECT_ALL_THE_PLANES_IN_ONE_HISTOGRAM ( 0 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_COLLECT_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 1 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_COLLECT_EVERY_PIXEL_OF_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 2 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_RESERVED_3 ( 3 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_COLLECT_ODD__X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 4 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_COLLECT_EVEN_X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 5 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_COLLECT_ODD__X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 6 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_MODE_COLLECT_EVEN_X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_3_plane_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf360 );
    system_isp_write_32( base + 0xf360, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_plane_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf360 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Radial shading enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Enable radial shading correction.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_RADIAL_SHADING_ENABLE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_RADIAL_SHADING_ENABLE_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_3_RADIAL_SHADING_ENABLE_FIELD_OFFSET 12
#define ACAMERA_ISP_METERING_HIST_3_RADIAL_SHADING_ENABLE_REG_ADDR 0xf360
#define ACAMERA_ISP_METERING_HIST_3_RADIAL_SHADING_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_3_RADIAL_SHADING_ENABLE_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_3_radial_shading_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf360 );
    system_isp_write_32( base + 0xf360, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_radial_shading_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf360 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: NEQ LUT enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Enable non-equidistant lookup table.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_ENABLE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_ENABLE_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_ENABLE_FIELD_OFFSET 14
#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_ENABLE_REG_ADDR 0xf360
#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_ENABLE_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_3_neq_lut_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf360 );
    system_isp_write_32( base + 0xf360, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_neq_lut_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf360 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: NEQ LUT position
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Position of NEQ lookup table: 0=before histogram, 1=before white balance
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_POSITION_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_POSITION_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_POSITION_FIELD_OFFSET 15
#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_POSITION_REG_ADDR 0xf360
#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_POSITION_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_3_NEQ_LUT_POSITION_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_3_neq_lut_position_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf360 );
    system_isp_write_32( base + 0xf360, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_neq_lut_position_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf360 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Nodes Used Horiz
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones horizontally for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_HORIZ_DEFAULT 21
#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_HORIZ_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_HORIZ_FIELD_OFFSET 16
#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_HORIZ_REG_ADDR 0xf360
#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_HORIZ_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_HORIZ_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_3_nodes_used_horiz_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf360 );
    system_isp_write_32( base + 0xf360, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_nodes_used_horiz_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf360 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Nodes Used Vert
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones vertically for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_VERT_DEFAULT 21
#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_VERT_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_VERT_FIELD_OFFSET 24
#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_VERT_REG_ADDR 0xf360
#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_VERT_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_3_NODES_USED_VERT_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_3_nodes_used_vert_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf360 );
    system_isp_write_32( base + 0xf360, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_nodes_used_vert_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf360 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: scale bottom
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of bottom half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_SCALE_BOTTOM_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_SCALE_BOTTOM_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_3_SCALE_BOTTOM_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_SCALE_BOTTOM_REG_ADDR 0xf364
#define ACAMERA_ISP_METERING_HIST_3_SCALE_BOTTOM_OFFSET 0x4
#define ACAMERA_ISP_METERING_HIST_3_SCALE_BOTTOM_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_isp_metering_hist_3_scale_bottom_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf364 );
    system_isp_write_32( base + 0xf364, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_scale_bottom_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf364 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: scale top
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of top half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_SCALE_TOP_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_SCALE_TOP_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_3_SCALE_TOP_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_3_SCALE_TOP_REG_ADDR 0xf364
#define ACAMERA_ISP_METERING_HIST_3_SCALE_TOP_OFFSET 0x4
#define ACAMERA_ISP_METERING_HIST_3_SCALE_TOP_FIELD_MASK 0xf0

// args: data (4-bit)
static __inline void acamera_isp_metering_hist_3_scale_top_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf364 );
    system_isp_write_32( base + 0xf364, ( ( ( uint32_t )( data & 0xf ) ) << 4 ) | ( curr & 0xffffff0f ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_scale_top_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf364 ) & 0xf0 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Total Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total number of pixels processed (skip x and skip y are taken into account)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_TOTAL_PIXELS_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_TOTAL_PIXELS_DATASIZE 32
#define ACAMERA_ISP_METERING_HIST_3_TOTAL_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_TOTAL_PIXELS_REG_ADDR 0xf368
#define ACAMERA_ISP_METERING_HIST_3_TOTAL_PIXELS_OFFSET 0x8
#define ACAMERA_ISP_METERING_HIST_3_TOTAL_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_metering_hist_3_total_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf368 );
}
// ------------------------------------------------------------------------------ //
// Register: Counted Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of pixels accumulated (with nonzero weight)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_COUNTED_PIXELS_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_COUNTED_PIXELS_DATASIZE 32
#define ACAMERA_ISP_METERING_HIST_3_COUNTED_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_COUNTED_PIXELS_REG_ADDR 0xf36c
#define ACAMERA_ISP_METERING_HIST_3_COUNTED_PIXELS_OFFSET 0xc
#define ACAMERA_ISP_METERING_HIST_3_COUNTED_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_metering_hist_3_counted_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf36c );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Total
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels processed for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_PLANE_TOTAL_LUT_NODES ( 4 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_TOTAL_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_TOTAL_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_TOTAL_LUT_OFFSET ( 0xf370 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_metering_hist_3_plane_total_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf370 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Counted
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels accumulated for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_PLANE_COUNTED_LUT_NODES ( 4 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_COUNTED_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_COUNTED_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_METERING_HIST_3_PLANE_COUNTED_LUT_OFFSET ( 0xf380 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_metering_hist_3_plane_counted_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf380 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_GAIN_00_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_3_GAIN_00_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_3_GAIN_00_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_GAIN_00_REG_ADDR 0xf390
#define ACAMERA_ISP_METERING_HIST_3_GAIN_00_OFFSET 0x30
#define ACAMERA_ISP_METERING_HIST_3_GAIN_00_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_3_gain_00_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf390 );
    system_isp_write_32( base + 0xf390, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_3_gain_00_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf390 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_GAIN_01_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_3_GAIN_01_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_3_GAIN_01_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_GAIN_01_REG_ADDR 0xf394
#define ACAMERA_ISP_METERING_HIST_3_GAIN_01_OFFSET 0x34
#define ACAMERA_ISP_METERING_HIST_3_GAIN_01_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_3_gain_01_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf394 );
    system_isp_write_32( base + 0xf394, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_3_gain_01_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf394 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_GAIN_10_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_3_GAIN_10_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_3_GAIN_10_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_GAIN_10_REG_ADDR 0xf398
#define ACAMERA_ISP_METERING_HIST_3_GAIN_10_OFFSET 0x38
#define ACAMERA_ISP_METERING_HIST_3_GAIN_10_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_3_gain_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf398 );
    system_isp_write_32( base + 0xf398, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_3_gain_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf398 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_GAIN_11_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_3_GAIN_11_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_3_GAIN_11_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_GAIN_11_REG_ADDR 0xf39c
#define ACAMERA_ISP_METERING_HIST_3_GAIN_11_OFFSET 0x3c
#define ACAMERA_ISP_METERING_HIST_3_GAIN_11_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_3_gain_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf39c );
    system_isp_write_32( base + 0xf39c, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_3_gain_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf39c ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_3_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_BLACK_00_REG_ADDR 0xf3a0
#define ACAMERA_ISP_METERING_HIST_3_BLACK_00_OFFSET 0x40
#define ACAMERA_ISP_METERING_HIST_3_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_3_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3a0 );
    system_isp_write_32( base + 0xf3a0, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_3_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf3a0 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_3_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_BLACK_01_REG_ADDR 0xf3a4
#define ACAMERA_ISP_METERING_HIST_3_BLACK_01_OFFSET 0x44
#define ACAMERA_ISP_METERING_HIST_3_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_3_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3a4 );
    system_isp_write_32( base + 0xf3a4, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_3_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf3a4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_3_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_BLACK_10_REG_ADDR 0xf3a8
#define ACAMERA_ISP_METERING_HIST_3_BLACK_10_OFFSET 0x48
#define ACAMERA_ISP_METERING_HIST_3_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_3_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3a8 );
    system_isp_write_32( base + 0xf3a8, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_3_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf3a8 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_3_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_BLACK_11_REG_ADDR 0xf3ac
#define ACAMERA_ISP_METERING_HIST_3_BLACK_11_OFFSET 0x4c
#define ACAMERA_ISP_METERING_HIST_3_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_3_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3ac );
    system_isp_write_32( base + 0xf3ac, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_3_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf3ac ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Center X
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center x coordinate of the shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_CENTER_X_DEFAULT 960
#define ACAMERA_ISP_METERING_HIST_3_CENTER_X_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_3_CENTER_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_CENTER_X_REG_ADDR 0xf3b0
#define ACAMERA_ISP_METERING_HIST_3_CENTER_X_OFFSET 0x50
#define ACAMERA_ISP_METERING_HIST_3_CENTER_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_3_center_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3b0 );
    system_isp_write_32( base + 0xf3b0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_3_center_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf3b0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Center Y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center y coordinate of the shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_CENTER_Y_DEFAULT 540
#define ACAMERA_ISP_METERING_HIST_3_CENTER_Y_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_3_CENTER_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_CENTER_Y_REG_ADDR 0xf3b4
#define ACAMERA_ISP_METERING_HIST_3_CENTER_Y_OFFSET 0x54
#define ACAMERA_ISP_METERING_HIST_3_CENTER_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_3_center_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3b4 );
    system_isp_write_32( base + 0xf3b4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_3_center_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf3b4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Off Center multx
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing X factor which scales the radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTX_DEFAULT 1770
#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTX_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTX_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTX_REG_ADDR 0xf3b8
#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTX_OFFSET 0x58
#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTX_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_3_off_center_multx_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3b8 );
    system_isp_write_32( base + 0xf3b8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_3_off_center_multx_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf3b8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Off Center multy
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing Y factor which scales the radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTY_DEFAULT 1770
#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTY_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTY_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTY_REG_ADDR 0xf3bc
#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTY_OFFSET 0x5c
#define ACAMERA_ISP_METERING_HIST_3_OFF_CENTER_MULTY_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_3_off_center_multy_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3bc );
    system_isp_write_32( base + 0xf3bc, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_3_off_center_multy_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf3bc ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active Width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video width in pixels
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_WIDTH_DEFAULT 1920
#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_WIDTH_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_WIDTH_REG_ADDR 0xf3c0
#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_WIDTH_OFFSET 0x60
#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_WIDTH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_3_active_width_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3c0 );
    system_isp_write_32( base + 0xf3c0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_3_active_width_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf3c0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active Height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video height in lines
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_HEIGHT_DEFAULT 1080
#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_HEIGHT_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_HEIGHT_REG_ADDR 0xf3c4
#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_HEIGHT_OFFSET 0x64
#define ACAMERA_ISP_METERING_HIST_3_ACTIVE_HEIGHT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_3_active_height_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3c4 );
    system_isp_write_32( base + 0xf3c4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_3_active_height_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf3c4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: RGGB start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Starting color of the rggb pattern
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_RGGB_START_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_RGGB_START_DATASIZE 2
#define ACAMERA_ISP_METERING_HIST_3_RGGB_START_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_RGGB_START_REG_ADDR 0xf3c8
#define ACAMERA_ISP_METERING_HIST_3_RGGB_START_OFFSET 0x68
#define ACAMERA_ISP_METERING_HIST_3_RGGB_START_FIELD_MASK 0x3
#define ACAMERA_ISP_METERING_HIST_3_RGGB_START_R_GR_GB_B ( 0 )
#define ACAMERA_ISP_METERING_HIST_3_RGGB_START_GR_R_B_GB ( 1 )
#define ACAMERA_ISP_METERING_HIST_3_RGGB_START_GB_B_R_GR ( 2 )
#define ACAMERA_ISP_METERING_HIST_3_RGGB_START_B_GB_GR_R ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_metering_hist_3_rggb_start_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3c8 );
    system_isp_write_32( base + 0xf3c8, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_rggb_start_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf3c8 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: CFA pattern
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pattern select:
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_CFA_PATTERN_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_CFA_PATTERN_DATASIZE 2
#define ACAMERA_ISP_METERING_HIST_3_CFA_PATTERN_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_3_CFA_PATTERN_REG_ADDR 0xf3c8
#define ACAMERA_ISP_METERING_HIST_3_CFA_PATTERN_OFFSET 0x68
#define ACAMERA_ISP_METERING_HIST_3_CFA_PATTERN_FIELD_MASK 0x30
#define ACAMERA_ISP_METERING_HIST_3_CFA_PATTERN_RGGB ( 0 )
#define ACAMERA_ISP_METERING_HIST_3_CFA_PATTERN_RCCC ( 1 )
#define ACAMERA_ISP_METERING_HIST_3_CFA_PATTERN_RIRGB ( 2 )
#define ACAMERA_ISP_METERING_HIST_3_CFA_PATTERN_RGIRB ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_metering_hist_3_cfa_pattern_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf3c8 );
    system_isp_write_32( base + 0xf3c8, ( ( ( uint32_t )( data & 0x3 ) ) << 4 ) | ( curr & 0xffffffcf ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_cfa_pattern_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf3c8 ) & 0x30 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Shading LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading profile
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_SHADING_LUT_DEFAULT 4096
#define ACAMERA_ISP_METERING_HIST_3_SHADING_LUT_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_3_SHADING_LUT_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_SHADING_LUT_REG_ADDR 0xf3cc
#define ACAMERA_ISP_METERING_HIST_3_SHADING_LUT_OFFSET 0x6c
#define ACAMERA_ISP_METERING_HIST_3_SHADING_LUT_FIELD_MASK 0xffff

// index (0-16), args: data (16-bit)
static __inline void acamera_isp_metering_hist_3_shading_lut_write( uint32_t base, uint32_t index, uint16_t data )
{
    uint32_t addr = base + 0xf3cc + ( ( index * sizeof( uint16_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint16_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint16_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint16_t acamera_isp_metering_hist_3_shading_lut_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf3cc + ( ( index * sizeof( uint16_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint16_t ) ) & 0x3 ) << 3;
    return ( uint16_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Weight Table
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets zone weighting for the histogram. Index is (col,row) where (0,0) is top-left zone
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_WEIGHT_TABLE_DEFAULT 15
#define ACAMERA_ISP_METERING_HIST_3_WEIGHT_TABLE_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_3_WEIGHT_TABLE_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_WEIGHT_TABLE_REG_ADDR 0xf3f0
#define ACAMERA_ISP_METERING_HIST_3_WEIGHT_TABLE_OFFSET 0x90
#define ACAMERA_ISP_METERING_HIST_3_WEIGHT_TABLE_FIELD_MASK 0xf

// index1 (0-14), index2 (0-14), args: data (4-bit)
static __inline void acamera_isp_metering_hist_3_weight_table_write( uint32_t base, uint32_t index1, uint32_t index2, uint8_t data )
{
    uint32_t addr;
    uint8_t offset;
    uint32_t curr;
    addr = base + 0xf3f0 + ( index1 * 15 + index2 );
    offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    curr = system_isp_read_32( addr );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( 0xFF << offset ) ) );
}
static __inline uint8_t acamera_isp_metering_hist_3_weight_table_read( uint32_t base, uint32_t index1, uint32_t index2 )
{
    uint32_t addr = base + 0xf3f0 + ( ( index1 * 15 + index2 ) );
    uint8_t offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: lut X
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// X cooerdinates of NEQ LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_LUT_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_LUT_X_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_3_LUT_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_LUT_X_REG_ADDR 0xf4e0
#define ACAMERA_ISP_METERING_HIST_3_LUT_X_OFFSET 0x180
#define ACAMERA_ISP_METERING_HIST_3_LUT_X_FIELD_MASK 0xfffff

// index (0-8), args: data (20-bit)
static __inline void acamera_isp_metering_hist_3_lut_x_write( uint32_t base, uint32_t index, uint32_t data )
{
    uint32_t addr = base + 0xf4e0 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint32_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint32_t acamera_isp_metering_hist_3_lut_x_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf4e0 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    return ( uint32_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: lut Y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// X cooerdinates of NEQ LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_3_LUT_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_3_LUT_Y_DATASIZE 21
#define ACAMERA_ISP_METERING_HIST_3_LUT_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_3_LUT_Y_REG_ADDR 0xf504
#define ACAMERA_ISP_METERING_HIST_3_LUT_Y_OFFSET 0x1a4
#define ACAMERA_ISP_METERING_HIST_3_LUT_Y_FIELD_MASK 0x1fffff

// index (0-8), args: data (21-bit)
static __inline void acamera_isp_metering_hist_3_lut_y_write( uint32_t base, uint32_t index, uint32_t data )
{
    uint32_t addr = base + 0xf504 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint32_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint32_t acamera_isp_metering_hist_3_lut_y_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf504 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    return ( uint32_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: Metering Hist 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: skip x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in horizontal direction: 0=every 2nd pixel; 1=every 3rd pixel; 2=every 4th pixel; 3=every 5th pixel; 4=every 8th pixel ; 5+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_SKIP_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_SKIP_X_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_4_SKIP_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_SKIP_X_REG_ADDR 0xf530
#define ACAMERA_ISP_METERING_HIST_4_SKIP_X_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_4_SKIP_X_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_4_skip_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf530 );
    system_isp_write_32( base + 0xf530, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_skip_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf530 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: skip y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in vertical direction: 0=every pixel; 1=every 2nd pixel; 2=every 3rd pixel; 3=every 4th pixel; 4=every 5th pixel; 5=every 8th pixel ; 6+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_SKIP_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_SKIP_Y_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_4_SKIP_Y_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_4_SKIP_Y_REG_ADDR 0xf530
#define ACAMERA_ISP_METERING_HIST_4_SKIP_Y_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_4_SKIP_Y_FIELD_MASK 0x70

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_4_skip_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf530 );
    system_isp_write_32( base + 0xf530, ( ( ( uint32_t )( data & 0x7 ) ) << 4 ) | ( curr & 0xffffff8f ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_skip_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf530 ) & 0x70 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: offset x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first column;  1=start from second column
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_OFFSET_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_OFFSET_X_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_4_OFFSET_X_FIELD_OFFSET 3
#define ACAMERA_ISP_METERING_HIST_4_OFFSET_X_REG_ADDR 0xf530
#define ACAMERA_ISP_METERING_HIST_4_OFFSET_X_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_4_OFFSET_X_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_4_offset_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf530 );
    system_isp_write_32( base + 0xf530, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_offset_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf530 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: offset y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first row; 1= start from second row
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_OFFSET_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_OFFSET_Y_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_4_OFFSET_Y_FIELD_OFFSET 7
#define ACAMERA_ISP_METERING_HIST_4_OFFSET_Y_REG_ADDR 0xf530
#define ACAMERA_ISP_METERING_HIST_4_OFFSET_Y_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_4_OFFSET_Y_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_4_offset_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf530 );
    system_isp_write_32( base + 0xf530, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_offset_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf530 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Plane mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Plane separation mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_DATASIZE 3
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_FIELD_OFFSET 8
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_REG_ADDR 0xf530
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_FIELD_MASK 0x700
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_COLLECT_ALL_THE_PLANES_IN_ONE_HISTOGRAM ( 0 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_COLLECT_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 1 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_COLLECT_EVERY_PIXEL_OF_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 2 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_RESERVED_3 ( 3 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_COLLECT_ODD__X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 4 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_COLLECT_EVEN_X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 5 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_COLLECT_ODD__X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 6 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_MODE_COLLECT_EVEN_X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_metering_hist_4_plane_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf530 );
    system_isp_write_32( base + 0xf530, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_plane_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf530 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Radial shading enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Enable radial shading correction.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_RADIAL_SHADING_ENABLE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_RADIAL_SHADING_ENABLE_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_4_RADIAL_SHADING_ENABLE_FIELD_OFFSET 12
#define ACAMERA_ISP_METERING_HIST_4_RADIAL_SHADING_ENABLE_REG_ADDR 0xf530
#define ACAMERA_ISP_METERING_HIST_4_RADIAL_SHADING_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_4_RADIAL_SHADING_ENABLE_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_4_radial_shading_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf530 );
    system_isp_write_32( base + 0xf530, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_radial_shading_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf530 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: NEQ LUT enable
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Enable non-equidistant lookup table.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_ENABLE_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_ENABLE_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_ENABLE_FIELD_OFFSET 14
#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_ENABLE_REG_ADDR 0xf530
#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_ENABLE_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_ENABLE_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_4_neq_lut_enable_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf530 );
    system_isp_write_32( base + 0xf530, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_neq_lut_enable_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf530 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: NEQ LUT position
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Position of NEQ lookup table: 0=before histogram, 1=before white balance
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_POSITION_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_POSITION_DATASIZE 1
#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_POSITION_FIELD_OFFSET 15
#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_POSITION_REG_ADDR 0xf530
#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_POSITION_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_4_NEQ_LUT_POSITION_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_isp_metering_hist_4_neq_lut_position_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf530 );
    system_isp_write_32( base + 0xf530, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_neq_lut_position_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf530 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Nodes Used Horiz
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones horizontally for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_HORIZ_DEFAULT 21
#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_HORIZ_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_HORIZ_FIELD_OFFSET 16
#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_HORIZ_REG_ADDR 0xf530
#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_HORIZ_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_HORIZ_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_4_nodes_used_horiz_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf530 );
    system_isp_write_32( base + 0xf530, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_nodes_used_horiz_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf530 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Nodes Used Vert
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of active zones vertically for AE stats collection
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_VERT_DEFAULT 21
#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_VERT_DATASIZE 8
#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_VERT_FIELD_OFFSET 24
#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_VERT_REG_ADDR 0xf530
#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_VERT_OFFSET 0x0
#define ACAMERA_ISP_METERING_HIST_4_NODES_USED_VERT_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_isp_metering_hist_4_nodes_used_vert_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf530 );
    system_isp_write_32( base + 0xf530, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_nodes_used_vert_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf530 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: scale bottom
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of bottom half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_SCALE_BOTTOM_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_SCALE_BOTTOM_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_4_SCALE_BOTTOM_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_SCALE_BOTTOM_REG_ADDR 0xf534
#define ACAMERA_ISP_METERING_HIST_4_SCALE_BOTTOM_OFFSET 0x4
#define ACAMERA_ISP_METERING_HIST_4_SCALE_BOTTOM_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_isp_metering_hist_4_scale_bottom_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf534 );
    system_isp_write_32( base + 0xf534, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_scale_bottom_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf534 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: scale top
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of top half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_SCALE_TOP_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_SCALE_TOP_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_4_SCALE_TOP_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_4_SCALE_TOP_REG_ADDR 0xf534
#define ACAMERA_ISP_METERING_HIST_4_SCALE_TOP_OFFSET 0x4
#define ACAMERA_ISP_METERING_HIST_4_SCALE_TOP_FIELD_MASK 0xf0

// args: data (4-bit)
static __inline void acamera_isp_metering_hist_4_scale_top_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf534 );
    system_isp_write_32( base + 0xf534, ( ( ( uint32_t )( data & 0xf ) ) << 4 ) | ( curr & 0xffffff0f ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_scale_top_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf534 ) & 0xf0 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Total Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total number of pixels processed (skip x and skip y are taken into account)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_TOTAL_PIXELS_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_TOTAL_PIXELS_DATASIZE 32
#define ACAMERA_ISP_METERING_HIST_4_TOTAL_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_TOTAL_PIXELS_REG_ADDR 0xf538
#define ACAMERA_ISP_METERING_HIST_4_TOTAL_PIXELS_OFFSET 0x8
#define ACAMERA_ISP_METERING_HIST_4_TOTAL_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_metering_hist_4_total_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf538 );
}
// ------------------------------------------------------------------------------ //
// Register: Counted Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of pixels accumulated (with nonzero weight)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_COUNTED_PIXELS_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_COUNTED_PIXELS_DATASIZE 32
#define ACAMERA_ISP_METERING_HIST_4_COUNTED_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_COUNTED_PIXELS_REG_ADDR 0xf53c
#define ACAMERA_ISP_METERING_HIST_4_COUNTED_PIXELS_OFFSET 0xc
#define ACAMERA_ISP_METERING_HIST_4_COUNTED_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_metering_hist_4_counted_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf53c );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Total
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels processed for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_PLANE_TOTAL_LUT_NODES ( 4 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_TOTAL_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_TOTAL_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_TOTAL_LUT_OFFSET ( 0xf540 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_metering_hist_4_plane_total_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf540 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Counted
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels accumulated for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_PLANE_COUNTED_LUT_NODES ( 4 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_COUNTED_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_COUNTED_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_METERING_HIST_4_PLANE_COUNTED_LUT_OFFSET ( 0xf550 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_metering_hist_4_plane_counted_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf550 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_GAIN_00_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_4_GAIN_00_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_4_GAIN_00_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_GAIN_00_REG_ADDR 0xf560
#define ACAMERA_ISP_METERING_HIST_4_GAIN_00_OFFSET 0x30
#define ACAMERA_ISP_METERING_HIST_4_GAIN_00_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_4_gain_00_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf560 );
    system_isp_write_32( base + 0xf560, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_4_gain_00_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf560 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_GAIN_01_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_4_GAIN_01_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_4_GAIN_01_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_GAIN_01_REG_ADDR 0xf564
#define ACAMERA_ISP_METERING_HIST_4_GAIN_01_OFFSET 0x34
#define ACAMERA_ISP_METERING_HIST_4_GAIN_01_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_4_gain_01_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf564 );
    system_isp_write_32( base + 0xf564, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_4_gain_01_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf564 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_GAIN_10_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_4_GAIN_10_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_4_GAIN_10_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_GAIN_10_REG_ADDR 0xf568
#define ACAMERA_ISP_METERING_HIST_4_GAIN_10_OFFSET 0x38
#define ACAMERA_ISP_METERING_HIST_4_GAIN_10_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_4_gain_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf568 );
    system_isp_write_32( base + 0xf568, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_4_gain_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf568 ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_GAIN_11_DEFAULT 256
#define ACAMERA_ISP_METERING_HIST_4_GAIN_11_DATASIZE 15
#define ACAMERA_ISP_METERING_HIST_4_GAIN_11_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_GAIN_11_REG_ADDR 0xf56c
#define ACAMERA_ISP_METERING_HIST_4_GAIN_11_OFFSET 0x3c
#define ACAMERA_ISP_METERING_HIST_4_GAIN_11_FIELD_MASK 0x7fff

// args: data (15-bit)
static __inline void acamera_isp_metering_hist_4_gain_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf56c );
    system_isp_write_32( base + 0xf56c, ( ( ( uint32_t )( data & 0x7fff ) ) << 0 ) | ( curr & 0xffff8000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_4_gain_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf56c ) & 0x7fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_4_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_BLACK_00_REG_ADDR 0xf570
#define ACAMERA_ISP_METERING_HIST_4_BLACK_00_OFFSET 0x40
#define ACAMERA_ISP_METERING_HIST_4_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_4_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf570 );
    system_isp_write_32( base + 0xf570, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_4_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf570 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_4_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_BLACK_01_REG_ADDR 0xf574
#define ACAMERA_ISP_METERING_HIST_4_BLACK_01_OFFSET 0x44
#define ACAMERA_ISP_METERING_HIST_4_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_4_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf574 );
    system_isp_write_32( base + 0xf574, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_4_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf574 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_4_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_BLACK_10_REG_ADDR 0xf578
#define ACAMERA_ISP_METERING_HIST_4_BLACK_10_OFFSET 0x48
#define ACAMERA_ISP_METERING_HIST_4_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_4_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf578 );
    system_isp_write_32( base + 0xf578, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_4_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf578 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_4_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_BLACK_11_REG_ADDR 0xf57c
#define ACAMERA_ISP_METERING_HIST_4_BLACK_11_OFFSET 0x4c
#define ACAMERA_ISP_METERING_HIST_4_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_metering_hist_4_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf57c );
    system_isp_write_32( base + 0xf57c, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_metering_hist_4_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf57c ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Center X
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center x coordinate of the shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_CENTER_X_DEFAULT 960
#define ACAMERA_ISP_METERING_HIST_4_CENTER_X_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_4_CENTER_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_CENTER_X_REG_ADDR 0xf580
#define ACAMERA_ISP_METERING_HIST_4_CENTER_X_OFFSET 0x50
#define ACAMERA_ISP_METERING_HIST_4_CENTER_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_4_center_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf580 );
    system_isp_write_32( base + 0xf580, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_4_center_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf580 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Center Y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Center y coordinate of the shading map
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_CENTER_Y_DEFAULT 540
#define ACAMERA_ISP_METERING_HIST_4_CENTER_Y_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_4_CENTER_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_CENTER_Y_REG_ADDR 0xf584
#define ACAMERA_ISP_METERING_HIST_4_CENTER_Y_OFFSET 0x54
#define ACAMERA_ISP_METERING_HIST_4_CENTER_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_4_center_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf584 );
    system_isp_write_32( base + 0xf584, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_4_center_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf584 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Off Center multx
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing X factor which scales the radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTX_DEFAULT 1770
#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTX_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTX_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTX_REG_ADDR 0xf588
#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTX_OFFSET 0x58
#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTX_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_4_off_center_multx_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf588 );
    system_isp_write_32( base + 0xf588, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_4_off_center_multx_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf588 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Off Center multy
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Normalizing Y factor which scales the radial table to the edge of the image.
//        Calculated as 2^31/R^2 where R is the furthest distance from the center coordinate to the edge of the image in pixels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTY_DEFAULT 1770
#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTY_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTY_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTY_REG_ADDR 0xf58c
#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTY_OFFSET 0x5c
#define ACAMERA_ISP_METERING_HIST_4_OFF_CENTER_MULTY_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_4_off_center_multy_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf58c );
    system_isp_write_32( base + 0xf58c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_4_off_center_multy_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf58c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active Width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video width in pixels
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_WIDTH_DEFAULT 1920
#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_WIDTH_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_WIDTH_REG_ADDR 0xf590
#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_WIDTH_OFFSET 0x60
#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_WIDTH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_4_active_width_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf590 );
    system_isp_write_32( base + 0xf590, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_4_active_width_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf590 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active Height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video height in lines
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_HEIGHT_DEFAULT 1080
#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_HEIGHT_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_HEIGHT_REG_ADDR 0xf594
#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_HEIGHT_OFFSET 0x64
#define ACAMERA_ISP_METERING_HIST_4_ACTIVE_HEIGHT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_metering_hist_4_active_height_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf594 );
    system_isp_write_32( base + 0xf594, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_metering_hist_4_active_height_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf594 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: RGGB start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Starting color of the rggb pattern
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_RGGB_START_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_RGGB_START_DATASIZE 2
#define ACAMERA_ISP_METERING_HIST_4_RGGB_START_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_RGGB_START_REG_ADDR 0xf598
#define ACAMERA_ISP_METERING_HIST_4_RGGB_START_OFFSET 0x68
#define ACAMERA_ISP_METERING_HIST_4_RGGB_START_FIELD_MASK 0x3
#define ACAMERA_ISP_METERING_HIST_4_RGGB_START_R_GR_GB_B ( 0 )
#define ACAMERA_ISP_METERING_HIST_4_RGGB_START_GR_R_B_GB ( 1 )
#define ACAMERA_ISP_METERING_HIST_4_RGGB_START_GB_B_R_GR ( 2 )
#define ACAMERA_ISP_METERING_HIST_4_RGGB_START_B_GB_GR_R ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_metering_hist_4_rggb_start_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf598 );
    system_isp_write_32( base + 0xf598, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_rggb_start_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf598 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: CFA pattern
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pattern select:
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_CFA_PATTERN_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_CFA_PATTERN_DATASIZE 2
#define ACAMERA_ISP_METERING_HIST_4_CFA_PATTERN_FIELD_OFFSET 4
#define ACAMERA_ISP_METERING_HIST_4_CFA_PATTERN_REG_ADDR 0xf598
#define ACAMERA_ISP_METERING_HIST_4_CFA_PATTERN_OFFSET 0x68
#define ACAMERA_ISP_METERING_HIST_4_CFA_PATTERN_FIELD_MASK 0x30
#define ACAMERA_ISP_METERING_HIST_4_CFA_PATTERN_RGGB ( 0 )
#define ACAMERA_ISP_METERING_HIST_4_CFA_PATTERN_RCCC ( 1 )
#define ACAMERA_ISP_METERING_HIST_4_CFA_PATTERN_RIRGB ( 2 )
#define ACAMERA_ISP_METERING_HIST_4_CFA_PATTERN_RGIRB ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_metering_hist_4_cfa_pattern_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf598 );
    system_isp_write_32( base + 0xf598, ( ( ( uint32_t )( data & 0x3 ) ) << 4 ) | ( curr & 0xffffffcf ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_cfa_pattern_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf598 ) & 0x30 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Shading LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial shading profile
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_SHADING_LUT_DEFAULT 4096
#define ACAMERA_ISP_METERING_HIST_4_SHADING_LUT_DATASIZE 16
#define ACAMERA_ISP_METERING_HIST_4_SHADING_LUT_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_SHADING_LUT_REG_ADDR 0xf59c
#define ACAMERA_ISP_METERING_HIST_4_SHADING_LUT_OFFSET 0x6c
#define ACAMERA_ISP_METERING_HIST_4_SHADING_LUT_FIELD_MASK 0xffff

// index (0-16), args: data (16-bit)
static __inline void acamera_isp_metering_hist_4_shading_lut_write( uint32_t base, uint32_t index, uint16_t data )
{
    uint32_t addr = base + 0xf59c + ( ( index * sizeof( uint16_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint16_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint16_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint16_t acamera_isp_metering_hist_4_shading_lut_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf59c + ( ( index * sizeof( uint16_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint16_t ) ) & 0x3 ) << 3;
    return ( uint16_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Weight Table
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets zone weighting for the histogram. Index is (col,row) where (0,0) is top-left zone
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_WEIGHT_TABLE_DEFAULT 15
#define ACAMERA_ISP_METERING_HIST_4_WEIGHT_TABLE_DATASIZE 4
#define ACAMERA_ISP_METERING_HIST_4_WEIGHT_TABLE_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_WEIGHT_TABLE_REG_ADDR 0xf5c0
#define ACAMERA_ISP_METERING_HIST_4_WEIGHT_TABLE_OFFSET 0x90
#define ACAMERA_ISP_METERING_HIST_4_WEIGHT_TABLE_FIELD_MASK 0xf

// index1 (0-14), index2 (0-14), args: data (4-bit)
static __inline void acamera_isp_metering_hist_4_weight_table_write( uint32_t base, uint32_t index1, uint32_t index2, uint8_t data )
{
    uint32_t addr;
    uint8_t offset;
    uint32_t curr;
    addr = base + 0xf5c0 + ( index1 * 15 + index2 );
    offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    curr = system_isp_read_32( addr );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( 0xFF << offset ) ) );
}
static __inline uint8_t acamera_isp_metering_hist_4_weight_table_read( uint32_t base, uint32_t index1, uint32_t index2 )
{
    uint32_t addr = base + 0xf5c0 + ( ( index1 * 15 + index2 ) );
    uint8_t offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: lut X
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// X cooerdinates of NEQ LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_LUT_X_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_LUT_X_DATASIZE 20
#define ACAMERA_ISP_METERING_HIST_4_LUT_X_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_LUT_X_REG_ADDR 0xf6b0
#define ACAMERA_ISP_METERING_HIST_4_LUT_X_OFFSET 0x180
#define ACAMERA_ISP_METERING_HIST_4_LUT_X_FIELD_MASK 0xfffff

// index (0-8), args: data (20-bit)
static __inline void acamera_isp_metering_hist_4_lut_x_write( uint32_t base, uint32_t index, uint32_t data )
{
    uint32_t addr = base + 0xf6b0 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint32_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint32_t acamera_isp_metering_hist_4_lut_x_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf6b0 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    return ( uint32_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: lut Y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// X cooerdinates of NEQ LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_METERING_HIST_4_LUT_Y_DEFAULT 0
#define ACAMERA_ISP_METERING_HIST_4_LUT_Y_DATASIZE 21
#define ACAMERA_ISP_METERING_HIST_4_LUT_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_METERING_HIST_4_LUT_Y_REG_ADDR 0xf6d4
#define ACAMERA_ISP_METERING_HIST_4_LUT_Y_OFFSET 0x1a4
#define ACAMERA_ISP_METERING_HIST_4_LUT_Y_FIELD_MASK 0x1fffff

// index (0-8), args: data (21-bit)
static __inline void acamera_isp_metering_hist_4_lut_y_write( uint32_t base, uint32_t index, uint32_t data )
{
    uint32_t addr = base + 0xf6d4 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint32_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint32_t acamera_isp_metering_hist_4_lut_y_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xf6d4 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    return ( uint32_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: ROI Histogram 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: skip x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in horizontal direction: 0=every 2nd pixel; 1=every 3rd pixel; 2=every 4th pixel; 3=every 5th pixel; 4=every 8th pixel ; 5+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_SKIP_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_SKIP_X_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_1_SKIP_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_SKIP_X_REG_ADDR 0xf700
#define ACAMERA_ISP_ROI_HIST_1_SKIP_X_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_1_SKIP_X_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_1_skip_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf700 );
    system_isp_write_32( base + 0xf700, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_roi_hist_1_skip_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf700 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: skip y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in vertical direction: 0=every pixel; 1=every 2nd pixel; 2=every 3rd pixel; 3=every 4th pixel; 4=every 5th pixel; 5=every 8th pixel ; 6+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_SKIP_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_SKIP_Y_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_1_SKIP_Y_FIELD_OFFSET 4
#define ACAMERA_ISP_ROI_HIST_1_SKIP_Y_REG_ADDR 0xf700
#define ACAMERA_ISP_ROI_HIST_1_SKIP_Y_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_1_SKIP_Y_FIELD_MASK 0x70

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_1_skip_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf700 );
    system_isp_write_32( base + 0xf700, ( ( ( uint32_t )( data & 0x7 ) ) << 4 ) | ( curr & 0xffffff8f ) );
}
static __inline uint8_t acamera_isp_roi_hist_1_skip_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf700 ) & 0x70 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: offset x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first column;  1=start from second column
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_OFFSET_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_OFFSET_X_DATASIZE 1
#define ACAMERA_ISP_ROI_HIST_1_OFFSET_X_FIELD_OFFSET 3
#define ACAMERA_ISP_ROI_HIST_1_OFFSET_X_REG_ADDR 0xf700
#define ACAMERA_ISP_ROI_HIST_1_OFFSET_X_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_1_OFFSET_X_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_roi_hist_1_offset_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf700 );
    system_isp_write_32( base + 0xf700, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_roi_hist_1_offset_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf700 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: offset y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first row; 1= start from second row
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_OFFSET_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_OFFSET_Y_DATASIZE 1
#define ACAMERA_ISP_ROI_HIST_1_OFFSET_Y_FIELD_OFFSET 7
#define ACAMERA_ISP_ROI_HIST_1_OFFSET_Y_REG_ADDR 0xf700
#define ACAMERA_ISP_ROI_HIST_1_OFFSET_Y_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_1_OFFSET_Y_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_roi_hist_1_offset_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf700 );
    system_isp_write_32( base + 0xf700, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_roi_hist_1_offset_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf700 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Plane mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Plane separation mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_FIELD_OFFSET 8
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_REG_ADDR 0xf700
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_FIELD_MASK 0x700
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_COLLECT_ALL_THE_PLANES_IN_ONE_HISTOGRAM ( 0 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_COLLECT_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 1 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_COLLECT_EVERY_PIXEL_OF_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 2 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_RESERVED_3 ( 3 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_COLLECT_ODD__X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 4 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_COLLECT_EVEN_X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 5 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_COLLECT_ODD__X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 6 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_MODE_COLLECT_EVEN_X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_1_plane_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf700 );
    system_isp_write_32( base + 0xf700, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_isp_roi_hist_1_plane_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf700 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: RGGB start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Starting color of the rggb pattern
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_RGGB_START_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_RGGB_START_DATASIZE 2
#define ACAMERA_ISP_ROI_HIST_1_RGGB_START_FIELD_OFFSET 16
#define ACAMERA_ISP_ROI_HIST_1_RGGB_START_REG_ADDR 0xf700
#define ACAMERA_ISP_ROI_HIST_1_RGGB_START_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_1_RGGB_START_FIELD_MASK 0x30000
#define ACAMERA_ISP_ROI_HIST_1_RGGB_START_R_GR_GB_B ( 0 )
#define ACAMERA_ISP_ROI_HIST_1_RGGB_START_GR_R_B_GB ( 1 )
#define ACAMERA_ISP_ROI_HIST_1_RGGB_START_GB_B_R_GR ( 2 )
#define ACAMERA_ISP_ROI_HIST_1_RGGB_START_B_GB_GR_R ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_roi_hist_1_rggb_start_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf700 );
    system_isp_write_32( base + 0xf700, ( ( ( uint32_t )( data & 0x3 ) ) << 16 ) | ( curr & 0xfffcffff ) );
}
static __inline uint8_t acamera_isp_roi_hist_1_rggb_start_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf700 ) & 0x30000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: scale bottom
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of bottom half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_SCALE_BOTTOM_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_SCALE_BOTTOM_DATASIZE 4
#define ACAMERA_ISP_ROI_HIST_1_SCALE_BOTTOM_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_SCALE_BOTTOM_REG_ADDR 0xf704
#define ACAMERA_ISP_ROI_HIST_1_SCALE_BOTTOM_OFFSET 0x4
#define ACAMERA_ISP_ROI_HIST_1_SCALE_BOTTOM_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_isp_roi_hist_1_scale_bottom_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf704 );
    system_isp_write_32( base + 0xf704, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_roi_hist_1_scale_bottom_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf704 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: scale top
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of top half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_SCALE_TOP_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_SCALE_TOP_DATASIZE 4
#define ACAMERA_ISP_ROI_HIST_1_SCALE_TOP_FIELD_OFFSET 4
#define ACAMERA_ISP_ROI_HIST_1_SCALE_TOP_REG_ADDR 0xf704
#define ACAMERA_ISP_ROI_HIST_1_SCALE_TOP_OFFSET 0x4
#define ACAMERA_ISP_ROI_HIST_1_SCALE_TOP_FIELD_MASK 0xf0

// args: data (4-bit)
static __inline void acamera_isp_roi_hist_1_scale_top_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf704 );
    system_isp_write_32( base + 0xf704, ( ( ( uint32_t )( data & 0xf ) ) << 4 ) | ( curr & 0xffffff0f ) );
}
static __inline uint8_t acamera_isp_roi_hist_1_scale_top_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf704 ) & 0xf0 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Total Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total number of pixels processed (skip x and skip y are taken into account)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_TOTAL_PIXELS_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_TOTAL_PIXELS_DATASIZE 32
#define ACAMERA_ISP_ROI_HIST_1_TOTAL_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_TOTAL_PIXELS_REG_ADDR 0xf708
#define ACAMERA_ISP_ROI_HIST_1_TOTAL_PIXELS_OFFSET 0x8
#define ACAMERA_ISP_ROI_HIST_1_TOTAL_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_roi_hist_1_total_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf708 );
}
// ------------------------------------------------------------------------------ //
// Register: Counted Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of pixels accumulated (with nonzero weight)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_COUNTED_PIXELS_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_COUNTED_PIXELS_DATASIZE 32
#define ACAMERA_ISP_ROI_HIST_1_COUNTED_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_COUNTED_PIXELS_REG_ADDR 0xf70c
#define ACAMERA_ISP_ROI_HIST_1_COUNTED_PIXELS_OFFSET 0xc
#define ACAMERA_ISP_ROI_HIST_1_COUNTED_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_roi_hist_1_counted_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf70c );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Total
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels processed for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_PLANE_TOTAL_LUT_NODES ( 4 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_TOTAL_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_TOTAL_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_TOTAL_LUT_OFFSET ( 0xf710 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_roi_hist_1_plane_total_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf710 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Counted
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels accumulated for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_PLANE_COUNTED_LUT_NODES ( 4 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_COUNTED_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_COUNTED_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_ROI_HIST_1_PLANE_COUNTED_LUT_OFFSET ( 0xf720 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_roi_hist_1_plane_counted_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf720 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_GAIN_00_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_1_GAIN_00_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_1_GAIN_00_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_GAIN_00_REG_ADDR 0xf730
#define ACAMERA_ISP_ROI_HIST_1_GAIN_00_OFFSET 0x30
#define ACAMERA_ISP_ROI_HIST_1_GAIN_00_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_1_gain_00_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf730 );
    system_isp_write_32( base + 0xf730, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_1_gain_00_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf730 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_GAIN_01_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_1_GAIN_01_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_1_GAIN_01_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_GAIN_01_REG_ADDR 0xf734
#define ACAMERA_ISP_ROI_HIST_1_GAIN_01_OFFSET 0x34
#define ACAMERA_ISP_ROI_HIST_1_GAIN_01_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_1_gain_01_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf734 );
    system_isp_write_32( base + 0xf734, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_1_gain_01_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf734 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_GAIN_10_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_1_GAIN_10_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_1_GAIN_10_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_GAIN_10_REG_ADDR 0xf738
#define ACAMERA_ISP_ROI_HIST_1_GAIN_10_OFFSET 0x38
#define ACAMERA_ISP_ROI_HIST_1_GAIN_10_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_1_gain_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf738 );
    system_isp_write_32( base + 0xf738, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_1_gain_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf738 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_GAIN_11_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_1_GAIN_11_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_1_GAIN_11_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_GAIN_11_REG_ADDR 0xf73c
#define ACAMERA_ISP_ROI_HIST_1_GAIN_11_OFFSET 0x3c
#define ACAMERA_ISP_ROI_HIST_1_GAIN_11_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_1_gain_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf73c );
    system_isp_write_32( base + 0xf73c, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_1_gain_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf73c ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_1_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_BLACK_00_REG_ADDR 0xf740
#define ACAMERA_ISP_ROI_HIST_1_BLACK_00_OFFSET 0x40
#define ACAMERA_ISP_ROI_HIST_1_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_1_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf740 );
    system_isp_write_32( base + 0xf740, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_1_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf740 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_1_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_BLACK_01_REG_ADDR 0xf744
#define ACAMERA_ISP_ROI_HIST_1_BLACK_01_OFFSET 0x44
#define ACAMERA_ISP_ROI_HIST_1_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_1_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf744 );
    system_isp_write_32( base + 0xf744, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_1_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf744 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_1_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_BLACK_10_REG_ADDR 0xf748
#define ACAMERA_ISP_ROI_HIST_1_BLACK_10_OFFSET 0x48
#define ACAMERA_ISP_ROI_HIST_1_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_1_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf748 );
    system_isp_write_32( base + 0xf748, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_1_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf748 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_1_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_BLACK_11_REG_ADDR 0xf74c
#define ACAMERA_ISP_ROI_HIST_1_BLACK_11_OFFSET 0x4c
#define ACAMERA_ISP_ROI_HIST_1_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_1_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf74c );
    system_isp_write_32( base + 0xf74c, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_1_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf74c ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: start x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Horizontal offset from left side of image in pixels for the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_START_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_START_X_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_1_START_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_START_X_REG_ADDR 0xf750
#define ACAMERA_ISP_ROI_HIST_1_START_X_OFFSET 0x50
#define ACAMERA_ISP_ROI_HIST_1_START_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_1_start_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf750 );
    system_isp_write_32( base + 0xf750, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_1_start_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf750 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: start y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Vertical offset from top of image in lines for the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_START_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_1_START_Y_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_1_START_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_START_Y_REG_ADDR 0xf754
#define ACAMERA_ISP_ROI_HIST_1_START_Y_OFFSET 0x54
#define ACAMERA_ISP_ROI_HIST_1_START_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_1_start_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf754 );
    system_isp_write_32( base + 0xf754, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_1_start_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf754 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: size x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Width of the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_SIZE_X_DEFAULT 65535
#define ACAMERA_ISP_ROI_HIST_1_SIZE_X_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_1_SIZE_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_SIZE_X_REG_ADDR 0xf758
#define ACAMERA_ISP_ROI_HIST_1_SIZE_X_OFFSET 0x58
#define ACAMERA_ISP_ROI_HIST_1_SIZE_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_1_size_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf758 );
    system_isp_write_32( base + 0xf758, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_1_size_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf758 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: size y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Height of the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_1_SIZE_Y_DEFAULT 65535
#define ACAMERA_ISP_ROI_HIST_1_SIZE_Y_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_1_SIZE_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_1_SIZE_Y_REG_ADDR 0xf75c
#define ACAMERA_ISP_ROI_HIST_1_SIZE_Y_OFFSET 0x5c
#define ACAMERA_ISP_ROI_HIST_1_SIZE_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_1_size_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf75c );
    system_isp_write_32( base + 0xf75c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_1_size_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf75c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: ROI Histogram 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: skip x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in horizontal direction: 0=every 2nd pixel; 1=every 3rd pixel; 2=every 4th pixel; 3=every 5th pixel; 4=every 8th pixel ; 5+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_SKIP_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_SKIP_X_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_2_SKIP_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_SKIP_X_REG_ADDR 0xf780
#define ACAMERA_ISP_ROI_HIST_2_SKIP_X_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_2_SKIP_X_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_2_skip_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf780 );
    system_isp_write_32( base + 0xf780, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_roi_hist_2_skip_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf780 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: skip y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in vertical direction: 0=every pixel; 1=every 2nd pixel; 2=every 3rd pixel; 3=every 4th pixel; 4=every 5th pixel; 5=every 8th pixel ; 6+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_SKIP_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_SKIP_Y_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_2_SKIP_Y_FIELD_OFFSET 4
#define ACAMERA_ISP_ROI_HIST_2_SKIP_Y_REG_ADDR 0xf780
#define ACAMERA_ISP_ROI_HIST_2_SKIP_Y_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_2_SKIP_Y_FIELD_MASK 0x70

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_2_skip_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf780 );
    system_isp_write_32( base + 0xf780, ( ( ( uint32_t )( data & 0x7 ) ) << 4 ) | ( curr & 0xffffff8f ) );
}
static __inline uint8_t acamera_isp_roi_hist_2_skip_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf780 ) & 0x70 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: offset x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first column;  1=start from second column
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_OFFSET_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_OFFSET_X_DATASIZE 1
#define ACAMERA_ISP_ROI_HIST_2_OFFSET_X_FIELD_OFFSET 3
#define ACAMERA_ISP_ROI_HIST_2_OFFSET_X_REG_ADDR 0xf780
#define ACAMERA_ISP_ROI_HIST_2_OFFSET_X_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_2_OFFSET_X_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_roi_hist_2_offset_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf780 );
    system_isp_write_32( base + 0xf780, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_roi_hist_2_offset_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf780 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: offset y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first row; 1= start from second row
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_OFFSET_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_OFFSET_Y_DATASIZE 1
#define ACAMERA_ISP_ROI_HIST_2_OFFSET_Y_FIELD_OFFSET 7
#define ACAMERA_ISP_ROI_HIST_2_OFFSET_Y_REG_ADDR 0xf780
#define ACAMERA_ISP_ROI_HIST_2_OFFSET_Y_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_2_OFFSET_Y_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_roi_hist_2_offset_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf780 );
    system_isp_write_32( base + 0xf780, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_roi_hist_2_offset_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf780 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Plane mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Plane separation mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_FIELD_OFFSET 8
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_REG_ADDR 0xf780
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_FIELD_MASK 0x700
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_COLLECT_ALL_THE_PLANES_IN_ONE_HISTOGRAM ( 0 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_COLLECT_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 1 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_COLLECT_EVERY_PIXEL_OF_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 2 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_RESERVED_3 ( 3 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_COLLECT_ODD__X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 4 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_COLLECT_EVEN_X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 5 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_COLLECT_ODD__X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 6 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_MODE_COLLECT_EVEN_X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_2_plane_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf780 );
    system_isp_write_32( base + 0xf780, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_isp_roi_hist_2_plane_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf780 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: RGGB start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Starting color of the rggb pattern
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_RGGB_START_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_RGGB_START_DATASIZE 2
#define ACAMERA_ISP_ROI_HIST_2_RGGB_START_FIELD_OFFSET 16
#define ACAMERA_ISP_ROI_HIST_2_RGGB_START_REG_ADDR 0xf780
#define ACAMERA_ISP_ROI_HIST_2_RGGB_START_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_2_RGGB_START_FIELD_MASK 0x30000
#define ACAMERA_ISP_ROI_HIST_2_RGGB_START_R_GR_GB_B ( 0 )
#define ACAMERA_ISP_ROI_HIST_2_RGGB_START_GR_R_B_GB ( 1 )
#define ACAMERA_ISP_ROI_HIST_2_RGGB_START_GB_B_R_GR ( 2 )
#define ACAMERA_ISP_ROI_HIST_2_RGGB_START_B_GB_GR_R ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_roi_hist_2_rggb_start_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf780 );
    system_isp_write_32( base + 0xf780, ( ( ( uint32_t )( data & 0x3 ) ) << 16 ) | ( curr & 0xfffcffff ) );
}
static __inline uint8_t acamera_isp_roi_hist_2_rggb_start_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf780 ) & 0x30000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: scale bottom
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of bottom half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_SCALE_BOTTOM_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_SCALE_BOTTOM_DATASIZE 4
#define ACAMERA_ISP_ROI_HIST_2_SCALE_BOTTOM_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_SCALE_BOTTOM_REG_ADDR 0xf784
#define ACAMERA_ISP_ROI_HIST_2_SCALE_BOTTOM_OFFSET 0x4
#define ACAMERA_ISP_ROI_HIST_2_SCALE_BOTTOM_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_isp_roi_hist_2_scale_bottom_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf784 );
    system_isp_write_32( base + 0xf784, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_roi_hist_2_scale_bottom_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf784 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: scale top
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of top half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_SCALE_TOP_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_SCALE_TOP_DATASIZE 4
#define ACAMERA_ISP_ROI_HIST_2_SCALE_TOP_FIELD_OFFSET 4
#define ACAMERA_ISP_ROI_HIST_2_SCALE_TOP_REG_ADDR 0xf784
#define ACAMERA_ISP_ROI_HIST_2_SCALE_TOP_OFFSET 0x4
#define ACAMERA_ISP_ROI_HIST_2_SCALE_TOP_FIELD_MASK 0xf0

// args: data (4-bit)
static __inline void acamera_isp_roi_hist_2_scale_top_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf784 );
    system_isp_write_32( base + 0xf784, ( ( ( uint32_t )( data & 0xf ) ) << 4 ) | ( curr & 0xffffff0f ) );
}
static __inline uint8_t acamera_isp_roi_hist_2_scale_top_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf784 ) & 0xf0 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Total Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total number of pixels processed (skip x and skip y are taken into account)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_TOTAL_PIXELS_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_TOTAL_PIXELS_DATASIZE 32
#define ACAMERA_ISP_ROI_HIST_2_TOTAL_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_TOTAL_PIXELS_REG_ADDR 0xf788
#define ACAMERA_ISP_ROI_HIST_2_TOTAL_PIXELS_OFFSET 0x8
#define ACAMERA_ISP_ROI_HIST_2_TOTAL_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_roi_hist_2_total_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf788 );
}
// ------------------------------------------------------------------------------ //
// Register: Counted Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of pixels accumulated (with nonzero weight)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_COUNTED_PIXELS_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_COUNTED_PIXELS_DATASIZE 32
#define ACAMERA_ISP_ROI_HIST_2_COUNTED_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_COUNTED_PIXELS_REG_ADDR 0xf78c
#define ACAMERA_ISP_ROI_HIST_2_COUNTED_PIXELS_OFFSET 0xc
#define ACAMERA_ISP_ROI_HIST_2_COUNTED_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_roi_hist_2_counted_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf78c );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Total
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels processed for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_PLANE_TOTAL_LUT_NODES ( 4 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_TOTAL_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_TOTAL_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_TOTAL_LUT_OFFSET ( 0xf790 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_roi_hist_2_plane_total_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf790 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Counted
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels accumulated for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_PLANE_COUNTED_LUT_NODES ( 4 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_COUNTED_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_COUNTED_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_ROI_HIST_2_PLANE_COUNTED_LUT_OFFSET ( 0xf7a0 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_roi_hist_2_plane_counted_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf7a0 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_GAIN_00_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_2_GAIN_00_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_2_GAIN_00_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_GAIN_00_REG_ADDR 0xf7b0
#define ACAMERA_ISP_ROI_HIST_2_GAIN_00_OFFSET 0x30
#define ACAMERA_ISP_ROI_HIST_2_GAIN_00_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_2_gain_00_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7b0 );
    system_isp_write_32( base + 0xf7b0, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_2_gain_00_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf7b0 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_GAIN_01_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_2_GAIN_01_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_2_GAIN_01_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_GAIN_01_REG_ADDR 0xf7b4
#define ACAMERA_ISP_ROI_HIST_2_GAIN_01_OFFSET 0x34
#define ACAMERA_ISP_ROI_HIST_2_GAIN_01_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_2_gain_01_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7b4 );
    system_isp_write_32( base + 0xf7b4, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_2_gain_01_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf7b4 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_GAIN_10_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_2_GAIN_10_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_2_GAIN_10_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_GAIN_10_REG_ADDR 0xf7b8
#define ACAMERA_ISP_ROI_HIST_2_GAIN_10_OFFSET 0x38
#define ACAMERA_ISP_ROI_HIST_2_GAIN_10_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_2_gain_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7b8 );
    system_isp_write_32( base + 0xf7b8, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_2_gain_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf7b8 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_GAIN_11_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_2_GAIN_11_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_2_GAIN_11_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_GAIN_11_REG_ADDR 0xf7bc
#define ACAMERA_ISP_ROI_HIST_2_GAIN_11_OFFSET 0x3c
#define ACAMERA_ISP_ROI_HIST_2_GAIN_11_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_2_gain_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7bc );
    system_isp_write_32( base + 0xf7bc, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_2_gain_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf7bc ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_2_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_BLACK_00_REG_ADDR 0xf7c0
#define ACAMERA_ISP_ROI_HIST_2_BLACK_00_OFFSET 0x40
#define ACAMERA_ISP_ROI_HIST_2_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_2_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7c0 );
    system_isp_write_32( base + 0xf7c0, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_2_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf7c0 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_2_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_BLACK_01_REG_ADDR 0xf7c4
#define ACAMERA_ISP_ROI_HIST_2_BLACK_01_OFFSET 0x44
#define ACAMERA_ISP_ROI_HIST_2_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_2_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7c4 );
    system_isp_write_32( base + 0xf7c4, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_2_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf7c4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_2_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_BLACK_10_REG_ADDR 0xf7c8
#define ACAMERA_ISP_ROI_HIST_2_BLACK_10_OFFSET 0x48
#define ACAMERA_ISP_ROI_HIST_2_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_2_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7c8 );
    system_isp_write_32( base + 0xf7c8, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_2_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf7c8 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_2_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_BLACK_11_REG_ADDR 0xf7cc
#define ACAMERA_ISP_ROI_HIST_2_BLACK_11_OFFSET 0x4c
#define ACAMERA_ISP_ROI_HIST_2_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_2_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7cc );
    system_isp_write_32( base + 0xf7cc, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_2_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf7cc ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: start x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Horizontal offset from left side of image in pixels for the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_START_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_START_X_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_2_START_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_START_X_REG_ADDR 0xf7d0
#define ACAMERA_ISP_ROI_HIST_2_START_X_OFFSET 0x50
#define ACAMERA_ISP_ROI_HIST_2_START_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_2_start_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7d0 );
    system_isp_write_32( base + 0xf7d0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_2_start_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf7d0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: start y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Vertical offset from top of image in lines for the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_START_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_2_START_Y_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_2_START_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_START_Y_REG_ADDR 0xf7d4
#define ACAMERA_ISP_ROI_HIST_2_START_Y_OFFSET 0x54
#define ACAMERA_ISP_ROI_HIST_2_START_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_2_start_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7d4 );
    system_isp_write_32( base + 0xf7d4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_2_start_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf7d4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: size x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Width of the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_SIZE_X_DEFAULT 65535
#define ACAMERA_ISP_ROI_HIST_2_SIZE_X_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_2_SIZE_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_SIZE_X_REG_ADDR 0xf7d8
#define ACAMERA_ISP_ROI_HIST_2_SIZE_X_OFFSET 0x58
#define ACAMERA_ISP_ROI_HIST_2_SIZE_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_2_size_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7d8 );
    system_isp_write_32( base + 0xf7d8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_2_size_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf7d8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: size y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Height of the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_2_SIZE_Y_DEFAULT 65535
#define ACAMERA_ISP_ROI_HIST_2_SIZE_Y_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_2_SIZE_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_2_SIZE_Y_REG_ADDR 0xf7dc
#define ACAMERA_ISP_ROI_HIST_2_SIZE_Y_OFFSET 0x5c
#define ACAMERA_ISP_ROI_HIST_2_SIZE_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_2_size_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf7dc );
    system_isp_write_32( base + 0xf7dc, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_2_size_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf7dc ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: ROI Histogram 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: skip x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in horizontal direction: 0=every 2nd pixel; 1=every 3rd pixel; 2=every 4th pixel; 3=every 5th pixel; 4=every 8th pixel ; 5+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_SKIP_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_SKIP_X_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_3_SKIP_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_SKIP_X_REG_ADDR 0xf800
#define ACAMERA_ISP_ROI_HIST_3_SKIP_X_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_3_SKIP_X_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_3_skip_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf800 );
    system_isp_write_32( base + 0xf800, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_roi_hist_3_skip_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf800 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: skip y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in vertical direction: 0=every pixel; 1=every 2nd pixel; 2=every 3rd pixel; 3=every 4th pixel; 4=every 5th pixel; 5=every 8th pixel ; 6+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_SKIP_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_SKIP_Y_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_3_SKIP_Y_FIELD_OFFSET 4
#define ACAMERA_ISP_ROI_HIST_3_SKIP_Y_REG_ADDR 0xf800
#define ACAMERA_ISP_ROI_HIST_3_SKIP_Y_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_3_SKIP_Y_FIELD_MASK 0x70

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_3_skip_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf800 );
    system_isp_write_32( base + 0xf800, ( ( ( uint32_t )( data & 0x7 ) ) << 4 ) | ( curr & 0xffffff8f ) );
}
static __inline uint8_t acamera_isp_roi_hist_3_skip_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf800 ) & 0x70 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: offset x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first column;  1=start from second column
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_OFFSET_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_OFFSET_X_DATASIZE 1
#define ACAMERA_ISP_ROI_HIST_3_OFFSET_X_FIELD_OFFSET 3
#define ACAMERA_ISP_ROI_HIST_3_OFFSET_X_REG_ADDR 0xf800
#define ACAMERA_ISP_ROI_HIST_3_OFFSET_X_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_3_OFFSET_X_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_roi_hist_3_offset_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf800 );
    system_isp_write_32( base + 0xf800, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_roi_hist_3_offset_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf800 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: offset y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first row; 1= start from second row
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_OFFSET_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_OFFSET_Y_DATASIZE 1
#define ACAMERA_ISP_ROI_HIST_3_OFFSET_Y_FIELD_OFFSET 7
#define ACAMERA_ISP_ROI_HIST_3_OFFSET_Y_REG_ADDR 0xf800
#define ACAMERA_ISP_ROI_HIST_3_OFFSET_Y_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_3_OFFSET_Y_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_roi_hist_3_offset_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf800 );
    system_isp_write_32( base + 0xf800, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_roi_hist_3_offset_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf800 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Plane mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Plane separation mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_FIELD_OFFSET 8
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_REG_ADDR 0xf800
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_FIELD_MASK 0x700
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_COLLECT_ALL_THE_PLANES_IN_ONE_HISTOGRAM ( 0 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_COLLECT_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 1 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_COLLECT_EVERY_PIXEL_OF_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 2 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_RESERVED_3 ( 3 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_COLLECT_ODD__X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 4 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_COLLECT_EVEN_X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 5 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_COLLECT_ODD__X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 6 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_MODE_COLLECT_EVEN_X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_3_plane_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf800 );
    system_isp_write_32( base + 0xf800, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_isp_roi_hist_3_plane_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf800 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: RGGB start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Starting color of the rggb pattern
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_RGGB_START_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_RGGB_START_DATASIZE 2
#define ACAMERA_ISP_ROI_HIST_3_RGGB_START_FIELD_OFFSET 16
#define ACAMERA_ISP_ROI_HIST_3_RGGB_START_REG_ADDR 0xf800
#define ACAMERA_ISP_ROI_HIST_3_RGGB_START_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_3_RGGB_START_FIELD_MASK 0x30000
#define ACAMERA_ISP_ROI_HIST_3_RGGB_START_R_GR_GB_B ( 0 )
#define ACAMERA_ISP_ROI_HIST_3_RGGB_START_GR_R_B_GB ( 1 )
#define ACAMERA_ISP_ROI_HIST_3_RGGB_START_GB_B_R_GR ( 2 )
#define ACAMERA_ISP_ROI_HIST_3_RGGB_START_B_GB_GR_R ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_roi_hist_3_rggb_start_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf800 );
    system_isp_write_32( base + 0xf800, ( ( ( uint32_t )( data & 0x3 ) ) << 16 ) | ( curr & 0xfffcffff ) );
}
static __inline uint8_t acamera_isp_roi_hist_3_rggb_start_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf800 ) & 0x30000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: scale bottom
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of bottom half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_SCALE_BOTTOM_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_SCALE_BOTTOM_DATASIZE 4
#define ACAMERA_ISP_ROI_HIST_3_SCALE_BOTTOM_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_SCALE_BOTTOM_REG_ADDR 0xf804
#define ACAMERA_ISP_ROI_HIST_3_SCALE_BOTTOM_OFFSET 0x4
#define ACAMERA_ISP_ROI_HIST_3_SCALE_BOTTOM_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_isp_roi_hist_3_scale_bottom_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf804 );
    system_isp_write_32( base + 0xf804, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_roi_hist_3_scale_bottom_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf804 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: scale top
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of top half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_SCALE_TOP_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_SCALE_TOP_DATASIZE 4
#define ACAMERA_ISP_ROI_HIST_3_SCALE_TOP_FIELD_OFFSET 4
#define ACAMERA_ISP_ROI_HIST_3_SCALE_TOP_REG_ADDR 0xf804
#define ACAMERA_ISP_ROI_HIST_3_SCALE_TOP_OFFSET 0x4
#define ACAMERA_ISP_ROI_HIST_3_SCALE_TOP_FIELD_MASK 0xf0

// args: data (4-bit)
static __inline void acamera_isp_roi_hist_3_scale_top_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf804 );
    system_isp_write_32( base + 0xf804, ( ( ( uint32_t )( data & 0xf ) ) << 4 ) | ( curr & 0xffffff0f ) );
}
static __inline uint8_t acamera_isp_roi_hist_3_scale_top_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf804 ) & 0xf0 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Total Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total number of pixels processed (skip x and skip y are taken into account)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_TOTAL_PIXELS_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_TOTAL_PIXELS_DATASIZE 32
#define ACAMERA_ISP_ROI_HIST_3_TOTAL_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_TOTAL_PIXELS_REG_ADDR 0xf808
#define ACAMERA_ISP_ROI_HIST_3_TOTAL_PIXELS_OFFSET 0x8
#define ACAMERA_ISP_ROI_HIST_3_TOTAL_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_roi_hist_3_total_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf808 );
}
// ------------------------------------------------------------------------------ //
// Register: Counted Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of pixels accumulated (with nonzero weight)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_COUNTED_PIXELS_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_COUNTED_PIXELS_DATASIZE 32
#define ACAMERA_ISP_ROI_HIST_3_COUNTED_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_COUNTED_PIXELS_REG_ADDR 0xf80c
#define ACAMERA_ISP_ROI_HIST_3_COUNTED_PIXELS_OFFSET 0xc
#define ACAMERA_ISP_ROI_HIST_3_COUNTED_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_roi_hist_3_counted_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf80c );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Total
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels processed for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_PLANE_TOTAL_LUT_NODES ( 4 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_TOTAL_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_TOTAL_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_TOTAL_LUT_OFFSET ( 0xf810 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_roi_hist_3_plane_total_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf810 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Counted
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels accumulated for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_PLANE_COUNTED_LUT_NODES ( 4 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_COUNTED_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_COUNTED_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_ROI_HIST_3_PLANE_COUNTED_LUT_OFFSET ( 0xf820 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_roi_hist_3_plane_counted_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf820 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_GAIN_00_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_3_GAIN_00_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_3_GAIN_00_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_GAIN_00_REG_ADDR 0xf830
#define ACAMERA_ISP_ROI_HIST_3_GAIN_00_OFFSET 0x30
#define ACAMERA_ISP_ROI_HIST_3_GAIN_00_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_3_gain_00_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf830 );
    system_isp_write_32( base + 0xf830, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_3_gain_00_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf830 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_GAIN_01_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_3_GAIN_01_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_3_GAIN_01_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_GAIN_01_REG_ADDR 0xf834
#define ACAMERA_ISP_ROI_HIST_3_GAIN_01_OFFSET 0x34
#define ACAMERA_ISP_ROI_HIST_3_GAIN_01_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_3_gain_01_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf834 );
    system_isp_write_32( base + 0xf834, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_3_gain_01_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf834 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_GAIN_10_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_3_GAIN_10_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_3_GAIN_10_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_GAIN_10_REG_ADDR 0xf838
#define ACAMERA_ISP_ROI_HIST_3_GAIN_10_OFFSET 0x38
#define ACAMERA_ISP_ROI_HIST_3_GAIN_10_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_3_gain_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf838 );
    system_isp_write_32( base + 0xf838, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_3_gain_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf838 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_GAIN_11_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_3_GAIN_11_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_3_GAIN_11_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_GAIN_11_REG_ADDR 0xf83c
#define ACAMERA_ISP_ROI_HIST_3_GAIN_11_OFFSET 0x3c
#define ACAMERA_ISP_ROI_HIST_3_GAIN_11_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_3_gain_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf83c );
    system_isp_write_32( base + 0xf83c, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_3_gain_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf83c ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_3_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_BLACK_00_REG_ADDR 0xf840
#define ACAMERA_ISP_ROI_HIST_3_BLACK_00_OFFSET 0x40
#define ACAMERA_ISP_ROI_HIST_3_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_3_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf840 );
    system_isp_write_32( base + 0xf840, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_3_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf840 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_3_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_BLACK_01_REG_ADDR 0xf844
#define ACAMERA_ISP_ROI_HIST_3_BLACK_01_OFFSET 0x44
#define ACAMERA_ISP_ROI_HIST_3_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_3_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf844 );
    system_isp_write_32( base + 0xf844, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_3_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf844 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_3_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_BLACK_10_REG_ADDR 0xf848
#define ACAMERA_ISP_ROI_HIST_3_BLACK_10_OFFSET 0x48
#define ACAMERA_ISP_ROI_HIST_3_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_3_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf848 );
    system_isp_write_32( base + 0xf848, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_3_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf848 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_3_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_BLACK_11_REG_ADDR 0xf84c
#define ACAMERA_ISP_ROI_HIST_3_BLACK_11_OFFSET 0x4c
#define ACAMERA_ISP_ROI_HIST_3_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_3_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf84c );
    system_isp_write_32( base + 0xf84c, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_3_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf84c ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: start x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Horizontal offset from left side of image in pixels for the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_START_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_START_X_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_3_START_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_START_X_REG_ADDR 0xf850
#define ACAMERA_ISP_ROI_HIST_3_START_X_OFFSET 0x50
#define ACAMERA_ISP_ROI_HIST_3_START_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_3_start_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf850 );
    system_isp_write_32( base + 0xf850, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_3_start_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf850 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: start y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Vertical offset from top of image in lines for the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_START_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_3_START_Y_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_3_START_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_START_Y_REG_ADDR 0xf854
#define ACAMERA_ISP_ROI_HIST_3_START_Y_OFFSET 0x54
#define ACAMERA_ISP_ROI_HIST_3_START_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_3_start_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf854 );
    system_isp_write_32( base + 0xf854, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_3_start_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf854 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: size x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Width of the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_SIZE_X_DEFAULT 65535
#define ACAMERA_ISP_ROI_HIST_3_SIZE_X_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_3_SIZE_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_SIZE_X_REG_ADDR 0xf858
#define ACAMERA_ISP_ROI_HIST_3_SIZE_X_OFFSET 0x58
#define ACAMERA_ISP_ROI_HIST_3_SIZE_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_3_size_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf858 );
    system_isp_write_32( base + 0xf858, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_3_size_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf858 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: size y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Height of the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_3_SIZE_Y_DEFAULT 65535
#define ACAMERA_ISP_ROI_HIST_3_SIZE_Y_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_3_SIZE_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_3_SIZE_Y_REG_ADDR 0xf85c
#define ACAMERA_ISP_ROI_HIST_3_SIZE_Y_OFFSET 0x5c
#define ACAMERA_ISP_ROI_HIST_3_SIZE_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_3_size_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf85c );
    system_isp_write_32( base + 0xf85c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_3_size_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf85c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: ROI Histogram 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: skip x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in horizontal direction: 0=every 2nd pixel; 1=every 3rd pixel; 2=every 4th pixel; 3=every 5th pixel; 4=every 8th pixel ; 5+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_SKIP_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_SKIP_X_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_4_SKIP_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_SKIP_X_REG_ADDR 0xf880
#define ACAMERA_ISP_ROI_HIST_4_SKIP_X_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_4_SKIP_X_FIELD_MASK 0x7

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_4_skip_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf880 );
    system_isp_write_32( base + 0xf880, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_isp_roi_hist_4_skip_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf880 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: skip y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Histogram decimation in vertical direction: 0=every pixel; 1=every 2nd pixel; 2=every 3rd pixel; 3=every 4th pixel; 4=every 5th pixel; 5=every 8th pixel ; 6+=every 9th pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_SKIP_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_SKIP_Y_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_4_SKIP_Y_FIELD_OFFSET 4
#define ACAMERA_ISP_ROI_HIST_4_SKIP_Y_REG_ADDR 0xf880
#define ACAMERA_ISP_ROI_HIST_4_SKIP_Y_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_4_SKIP_Y_FIELD_MASK 0x70

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_4_skip_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf880 );
    system_isp_write_32( base + 0xf880, ( ( ( uint32_t )( data & 0x7 ) ) << 4 ) | ( curr & 0xffffff8f ) );
}
static __inline uint8_t acamera_isp_roi_hist_4_skip_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf880 ) & 0x70 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: offset x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first column;  1=start from second column
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_OFFSET_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_OFFSET_X_DATASIZE 1
#define ACAMERA_ISP_ROI_HIST_4_OFFSET_X_FIELD_OFFSET 3
#define ACAMERA_ISP_ROI_HIST_4_OFFSET_X_REG_ADDR 0xf880
#define ACAMERA_ISP_ROI_HIST_4_OFFSET_X_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_4_OFFSET_X_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_isp_roi_hist_4_offset_x_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf880 );
    system_isp_write_32( base + 0xf880, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_isp_roi_hist_4_offset_x_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf880 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: offset y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0= start from the first row; 1= start from second row
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_OFFSET_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_OFFSET_Y_DATASIZE 1
#define ACAMERA_ISP_ROI_HIST_4_OFFSET_Y_FIELD_OFFSET 7
#define ACAMERA_ISP_ROI_HIST_4_OFFSET_Y_REG_ADDR 0xf880
#define ACAMERA_ISP_ROI_HIST_4_OFFSET_Y_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_4_OFFSET_Y_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_isp_roi_hist_4_offset_y_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf880 );
    system_isp_write_32( base + 0xf880, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_isp_roi_hist_4_offset_y_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf880 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Plane mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Plane separation mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_DATASIZE 3
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_FIELD_OFFSET 8
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_REG_ADDR 0xf880
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_FIELD_MASK 0x700
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_COLLECT_ALL_THE_PLANES_IN_ONE_HISTOGRAM ( 0 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_COLLECT_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 1 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_COLLECT_EVERY_PIXEL_OF_4_BAYER_PLANES_INTO_4_SEPARATE_BANKS ( 2 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_RESERVED_3 ( 3 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_COLLECT_ODD__X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 4 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_COLLECT_EVEN_X_ODD__Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 5 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_COLLECT_ODD__X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 6 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_MODE_COLLECT_EVEN_X_EVEN_Y_PLANE_TO_BANK_0_REST_TO_BANK_1 ( 7 )

// args: data (3-bit)
static __inline void acamera_isp_roi_hist_4_plane_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf880 );
    system_isp_write_32( base + 0xf880, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_isp_roi_hist_4_plane_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf880 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: RGGB start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Starting color of the rggb pattern
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_RGGB_START_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_RGGB_START_DATASIZE 2
#define ACAMERA_ISP_ROI_HIST_4_RGGB_START_FIELD_OFFSET 16
#define ACAMERA_ISP_ROI_HIST_4_RGGB_START_REG_ADDR 0xf880
#define ACAMERA_ISP_ROI_HIST_4_RGGB_START_OFFSET 0x0
#define ACAMERA_ISP_ROI_HIST_4_RGGB_START_FIELD_MASK 0x30000
#define ACAMERA_ISP_ROI_HIST_4_RGGB_START_R_GR_GB_B ( 0 )
#define ACAMERA_ISP_ROI_HIST_4_RGGB_START_GR_R_B_GB ( 1 )
#define ACAMERA_ISP_ROI_HIST_4_RGGB_START_GB_B_R_GR ( 2 )
#define ACAMERA_ISP_ROI_HIST_4_RGGB_START_B_GB_GR_R ( 3 )

// args: data (2-bit)
static __inline void acamera_isp_roi_hist_4_rggb_start_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf880 );
    system_isp_write_32( base + 0xf880, ( ( ( uint32_t )( data & 0x3 ) ) << 16 ) | ( curr & 0xfffcffff ) );
}
static __inline uint8_t acamera_isp_roi_hist_4_rggb_start_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf880 ) & 0x30000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: scale bottom
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of bottom half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_SCALE_BOTTOM_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_SCALE_BOTTOM_DATASIZE 4
#define ACAMERA_ISP_ROI_HIST_4_SCALE_BOTTOM_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_SCALE_BOTTOM_REG_ADDR 0xf884
#define ACAMERA_ISP_ROI_HIST_4_SCALE_BOTTOM_OFFSET 0x4
#define ACAMERA_ISP_ROI_HIST_4_SCALE_BOTTOM_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_isp_roi_hist_4_scale_bottom_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf884 );
    system_isp_write_32( base + 0xf884, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_isp_roi_hist_4_scale_bottom_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf884 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: scale top
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// scale of top half of the range: 0=1x ,1=2x, 2=4x, 4=8x, 4=16x
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_SCALE_TOP_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_SCALE_TOP_DATASIZE 4
#define ACAMERA_ISP_ROI_HIST_4_SCALE_TOP_FIELD_OFFSET 4
#define ACAMERA_ISP_ROI_HIST_4_SCALE_TOP_REG_ADDR 0xf884
#define ACAMERA_ISP_ROI_HIST_4_SCALE_TOP_OFFSET 0x4
#define ACAMERA_ISP_ROI_HIST_4_SCALE_TOP_FIELD_MASK 0xf0

// args: data (4-bit)
static __inline void acamera_isp_roi_hist_4_scale_top_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf884 );
    system_isp_write_32( base + 0xf884, ( ( ( uint32_t )( data & 0xf ) ) << 4 ) | ( curr & 0xffffff0f ) );
}
static __inline uint8_t acamera_isp_roi_hist_4_scale_top_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0xf884 ) & 0xf0 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Total Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total number of pixels processed (skip x and skip y are taken into account)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_TOTAL_PIXELS_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_TOTAL_PIXELS_DATASIZE 32
#define ACAMERA_ISP_ROI_HIST_4_TOTAL_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_TOTAL_PIXELS_REG_ADDR 0xf888
#define ACAMERA_ISP_ROI_HIST_4_TOTAL_PIXELS_OFFSET 0x8
#define ACAMERA_ISP_ROI_HIST_4_TOTAL_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_roi_hist_4_total_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf888 );
}
// ------------------------------------------------------------------------------ //
// Register: Counted Pixels
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of pixels accumulated (with nonzero weight)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_COUNTED_PIXELS_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_COUNTED_PIXELS_DATASIZE 32
#define ACAMERA_ISP_ROI_HIST_4_COUNTED_PIXELS_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_COUNTED_PIXELS_REG_ADDR 0xf88c
#define ACAMERA_ISP_ROI_HIST_4_COUNTED_PIXELS_OFFSET 0xc
#define ACAMERA_ISP_ROI_HIST_4_COUNTED_PIXELS_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_isp_roi_hist_4_counted_pixels_read( uint32_t base )
{
    return system_isp_read_32( base + 0xf88c );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Total
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels processed for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_PLANE_TOTAL_LUT_NODES ( 4 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_TOTAL_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_TOTAL_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_TOTAL_LUT_OFFSET ( 0xf890 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_roi_hist_4_plane_total_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf890 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// LUT: Plane Counted
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Total pixels accumulated for each plane
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_PLANE_COUNTED_LUT_NODES ( 4 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_COUNTED_LUT_ADDRBITS ( 2 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_COUNTED_LUT_DATASIZE ( 28 )
#define ACAMERA_ISP_ROI_HIST_4_PLANE_COUNTED_LUT_OFFSET ( 0xf8a0 )

// args: index (0-3), data (28-bit)
static __inline void acamera_isp_roi_hist_4_plane_counted_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf8a0 + ( index << 2 );
    system_isp_write_32( addr, data );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_GAIN_00_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_4_GAIN_00_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_4_GAIN_00_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_GAIN_00_REG_ADDR 0xf8b0
#define ACAMERA_ISP_ROI_HIST_4_GAIN_00_OFFSET 0x30
#define ACAMERA_ISP_ROI_HIST_4_GAIN_00_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_4_gain_00_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8b0 );
    system_isp_write_32( base + 0xf8b0, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_4_gain_00_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf8b0 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_GAIN_01_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_4_GAIN_01_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_4_GAIN_01_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_GAIN_01_REG_ADDR 0xf8b4
#define ACAMERA_ISP_ROI_HIST_4_GAIN_01_OFFSET 0x34
#define ACAMERA_ISP_ROI_HIST_4_GAIN_01_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_4_gain_01_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8b4 );
    system_isp_write_32( base + 0xf8b4, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_4_gain_01_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf8b4 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_GAIN_10_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_4_GAIN_10_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_4_GAIN_10_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_GAIN_10_REG_ADDR 0xf8b8
#define ACAMERA_ISP_ROI_HIST_4_GAIN_10_OFFSET 0x38
#define ACAMERA_ISP_ROI_HIST_4_GAIN_10_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_4_gain_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8b8 );
    system_isp_write_32( base + 0xf8b8, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_4_gain_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf8b8 ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Gain 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Multiplier for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_GAIN_11_DEFAULT 256
#define ACAMERA_ISP_ROI_HIST_4_GAIN_11_DATASIZE 12
#define ACAMERA_ISP_ROI_HIST_4_GAIN_11_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_GAIN_11_REG_ADDR 0xf8bc
#define ACAMERA_ISP_ROI_HIST_4_GAIN_11_OFFSET 0x3c
#define ACAMERA_ISP_ROI_HIST_4_GAIN_11_FIELD_MASK 0xfff

// args: data (12-bit)
static __inline void acamera_isp_roi_hist_4_gain_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8bc );
    system_isp_write_32( base + 0xf8bc, ( ( ( uint32_t )( data & 0xfff ) ) << 0 ) | ( curr & 0xfffff000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_4_gain_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf8bc ) & 0xfff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 00
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 00 (R)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_BLACK_00_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_BLACK_00_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_4_BLACK_00_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_BLACK_00_REG_ADDR 0xf8c0
#define ACAMERA_ISP_ROI_HIST_4_BLACK_00_OFFSET 0x40
#define ACAMERA_ISP_ROI_HIST_4_BLACK_00_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_4_black_00_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8c0 );
    system_isp_write_32( base + 0xf8c0, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_4_black_00_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf8c0 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 01
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 01 (Gr)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_BLACK_01_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_BLACK_01_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_4_BLACK_01_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_BLACK_01_REG_ADDR 0xf8c4
#define ACAMERA_ISP_ROI_HIST_4_BLACK_01_OFFSET 0x44
#define ACAMERA_ISP_ROI_HIST_4_BLACK_01_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_4_black_01_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8c4 );
    system_isp_write_32( base + 0xf8c4, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_4_black_01_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf8c4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 10 (Gb)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_BLACK_10_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_BLACK_10_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_4_BLACK_10_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_BLACK_10_REG_ADDR 0xf8c8
#define ACAMERA_ISP_ROI_HIST_4_BLACK_10_OFFSET 0x48
#define ACAMERA_ISP_ROI_HIST_4_BLACK_10_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_4_black_10_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8c8 );
    system_isp_write_32( base + 0xf8c8, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_4_black_10_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf8c8 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Black 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Black offset for color channel 11 (B)
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_BLACK_11_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_BLACK_11_DATASIZE 20
#define ACAMERA_ISP_ROI_HIST_4_BLACK_11_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_BLACK_11_REG_ADDR 0xf8cc
#define ACAMERA_ISP_ROI_HIST_4_BLACK_11_OFFSET 0x4c
#define ACAMERA_ISP_ROI_HIST_4_BLACK_11_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_isp_roi_hist_4_black_11_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8cc );
    system_isp_write_32( base + 0xf8cc, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_isp_roi_hist_4_black_11_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0xf8cc ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: start x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Horizontal offset from left side of image in pixels for the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_START_X_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_START_X_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_4_START_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_START_X_REG_ADDR 0xf8d0
#define ACAMERA_ISP_ROI_HIST_4_START_X_OFFSET 0x50
#define ACAMERA_ISP_ROI_HIST_4_START_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_4_start_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8d0 );
    system_isp_write_32( base + 0xf8d0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_4_start_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf8d0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: start y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Vertical offset from top of image in lines for the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_START_Y_DEFAULT 0
#define ACAMERA_ISP_ROI_HIST_4_START_Y_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_4_START_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_START_Y_REG_ADDR 0xf8d4
#define ACAMERA_ISP_ROI_HIST_4_START_Y_OFFSET 0x54
#define ACAMERA_ISP_ROI_HIST_4_START_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_4_start_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8d4 );
    system_isp_write_32( base + 0xf8d4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_4_start_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf8d4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: size x
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Width of the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_SIZE_X_DEFAULT 65535
#define ACAMERA_ISP_ROI_HIST_4_SIZE_X_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_4_SIZE_X_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_SIZE_X_REG_ADDR 0xf8d8
#define ACAMERA_ISP_ROI_HIST_4_SIZE_X_OFFSET 0x58
#define ACAMERA_ISP_ROI_HIST_4_SIZE_X_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_4_size_x_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8d8 );
    system_isp_write_32( base + 0xf8d8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_4_size_x_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf8d8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: size y
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Height of the ROI window
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ROI_HIST_4_SIZE_Y_DEFAULT 65535
#define ACAMERA_ISP_ROI_HIST_4_SIZE_Y_DATASIZE 16
#define ACAMERA_ISP_ROI_HIST_4_SIZE_Y_FIELD_OFFSET 0
#define ACAMERA_ISP_ROI_HIST_4_SIZE_Y_REG_ADDR 0xf8dc
#define ACAMERA_ISP_ROI_HIST_4_SIZE_Y_OFFSET 0x5c
#define ACAMERA_ISP_ROI_HIST_4_SIZE_Y_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_isp_roi_hist_4_size_y_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0xf8dc );
    system_isp_write_32( base + 0xf8dc, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_isp_roi_hist_4_size_y_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0xf8dc ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Iridix LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// LUT: Asymmetry LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Iridix target curve.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_LUT_ASYMMETRY_LUT_NODES ( 65 )
#define ACAMERA_ISP_IRIDIX_LUT_ASYMMETRY_LUT_ADDRBITS ( 7 )
#define ACAMERA_ISP_IRIDIX_LUT_ASYMMETRY_LUT_DATASIZE ( 24 )
#define ACAMERA_ISP_IRIDIX_LUT_ASYMMETRY_LUT_OFFSET ( 0xf900 )

// args: index (0-64), data (24-bit)
static __inline void acamera_isp_iridix_lut_asymmetry_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xf900 + ( index << 2 );
    system_isp_write_32( addr, data );
}
static __inline uint32_t acamera_isp_iridix_lut_asymmetry_lut_read( uint32_t base, uint8_t index )
{
    uint32_t addr = base + 0xf900 + ( index << 2 );
    return system_isp_read_32( addr );
}
// ------------------------------------------------------------------------------ //
// LUT: GlobalTM X LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_LUT_GLOBALTM_X_LUT_NODES ( 33 )
#define ACAMERA_ISP_IRIDIX_LUT_GLOBALTM_X_LUT_ADDRBITS ( 6 )
#define ACAMERA_ISP_IRIDIX_LUT_GLOBALTM_X_LUT_DATASIZE ( 24 )
#define ACAMERA_ISP_IRIDIX_LUT_GLOBALTM_X_LUT_OFFSET ( 0xe780 )

// args: index (0-32), data (24-bit)
static __inline void acamera_isp_iridix_lut_globaltm_x_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xe780 + ( index << 2 );
    system_isp_write_32( addr, data );
}
static __inline uint32_t acamera_isp_iridix_lut_globaltm_x_lut_read( uint32_t base, uint8_t index )
{
    uint32_t addr = base + 0xe780 + ( index << 2 );
    return system_isp_read_32( addr );
}
// ------------------------------------------------------------------------------ //
// LUT: GlobalTM Y LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_IRIDIX_LUT_GLOBALTM_Y_LUT_NODES ( 33 )
#define ACAMERA_ISP_IRIDIX_LUT_GLOBALTM_Y_LUT_ADDRBITS ( 6 )
#define ACAMERA_ISP_IRIDIX_LUT_GLOBALTM_Y_LUT_DATASIZE ( 25 )
#define ACAMERA_ISP_IRIDIX_LUT_GLOBALTM_Y_LUT_OFFSET ( 0xe840 )

// args: index (0-32), data (25-bit)
static __inline void acamera_isp_iridix_lut_globaltm_y_lut_write( uint32_t base, uint8_t index, uint32_t data )
{
    uint32_t addr = base + 0xe840 + ( index << 2 );
    system_isp_write_32( addr, data );
}
static __inline uint32_t acamera_isp_iridix_lut_globaltm_y_lut_read( uint32_t base, uint8_t index )
{
    uint32_t addr = base + 0xe840 + ( index << 2 );
    return system_isp_read_32( addr );
}
// ------------------------------------------------------------------------------ //
// Group: Sinter Shading
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// LUT: rm_shading_lut
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Radial Sinter LUT.  See TRM for more details
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_SINTER_SHADING_RM_SHADING_LUT_NODES ( 33 )
#define ACAMERA_ISP_SINTER_SHADING_RM_SHADING_LUT_ADDRBITS ( 6 )
#define ACAMERA_ISP_SINTER_SHADING_RM_SHADING_LUT_DATASIZE ( 8 )
#define ACAMERA_ISP_SINTER_SHADING_RM_SHADING_LUT_OFFSET ( 0xfa40 )

// args: index (0-32), data (8-bit)
static __inline void acamera_isp_sinter_shading_rm_shading_lut_write( uint32_t base, uint8_t index, uint8_t data )
{
    uint32_t addr = base + 0xfa40 + ( index & 0xFFFFFFFC );
    uint8_t offset = ( index & 3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( 0xFF << offset ) ) );
}
static __inline uint8_t acamera_isp_sinter_shading_rm_shading_lut_read( uint32_t base, uint8_t index )
{
    uint32_t addr = base + 0xfa40 + ( index & 0xFFFFFFFC );
    uint8_t offset = ( index & 3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: Noise Profile RAW frontend LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile controls for RAW frontend
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Weight lut
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile LUT.  Calculated during calibration process.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LUT_WEIGHT_LUT_DEFAULT 0
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LUT_WEIGHT_LUT_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LUT_WEIGHT_LUT_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LUT_WEIGHT_LUT_REG_ADDR 0xfa80
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LUT_WEIGHT_LUT_OFFSET 0x1a80
#define ACAMERA_ISP_NOISE_PROFILE_RAW_FRONTEND_LUT_WEIGHT_LUT_FIELD_MASK 0xff

// index (0-127), args: data (8-bit)
static __inline void acamera_isp_noise_profile_raw_frontend_lut_weight_lut_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0xfa80 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_isp_noise_profile_raw_frontend_lut_weight_lut_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xfa80 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: Noise Profile Frame Stitch LUT VS
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile for short exposure data at frame stitch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Weight lut
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile LUT.  Calculated during calibration process.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_WDR_VS_WEIGHT_LUT_DEFAULT 0
#define ACAMERA_ISP_NOISE_PROFILE_WDR_VS_WEIGHT_LUT_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_WDR_VS_WEIGHT_LUT_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_WDR_VS_WEIGHT_LUT_REG_ADDR 0xfb00
#define ACAMERA_ISP_NOISE_PROFILE_WDR_VS_WEIGHT_LUT_OFFSET 0x1b00
#define ACAMERA_ISP_NOISE_PROFILE_WDR_VS_WEIGHT_LUT_FIELD_MASK 0xff

// index (0-127), args: data (8-bit)
static __inline void acamera_isp_noise_profile_wdr_vs_weight_lut_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0xfb00 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_isp_noise_profile_wdr_vs_weight_lut_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xfb00 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: Noise Profile Frame Stitch LUT S
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile for med2 exposure data at frame stitch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Weight lut
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile LUT.  Calculated during calibration process.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_WDR_S_WEIGHT_LUT_DEFAULT 0
#define ACAMERA_ISP_NOISE_PROFILE_WDR_S_WEIGHT_LUT_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_WDR_S_WEIGHT_LUT_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_WDR_S_WEIGHT_LUT_REG_ADDR 0xfb80
#define ACAMERA_ISP_NOISE_PROFILE_WDR_S_WEIGHT_LUT_OFFSET 0x1b80
#define ACAMERA_ISP_NOISE_PROFILE_WDR_S_WEIGHT_LUT_FIELD_MASK 0xff

// index (0-127), args: data (8-bit)
static __inline void acamera_isp_noise_profile_wdr_s_weight_lut_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0xfb80 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_isp_noise_profile_wdr_s_weight_lut_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xfb80 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: Noise Profile Frame Stitch LUT M
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile for med1 exposure data at frame stitch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Weight lut
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile LUT.  Calculated during calibration process.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_WDR_M_WEIGHT_LUT_DEFAULT 0
#define ACAMERA_ISP_NOISE_PROFILE_WDR_M_WEIGHT_LUT_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_WDR_M_WEIGHT_LUT_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_WDR_M_WEIGHT_LUT_REG_ADDR 0xfc00
#define ACAMERA_ISP_NOISE_PROFILE_WDR_M_WEIGHT_LUT_OFFSET 0x1c00
#define ACAMERA_ISP_NOISE_PROFILE_WDR_M_WEIGHT_LUT_FIELD_MASK 0xff

// index (0-127), args: data (8-bit)
static __inline void acamera_isp_noise_profile_wdr_m_weight_lut_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0xfc00 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_isp_noise_profile_wdr_m_weight_lut_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xfc00 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: Noise Profile Frame Stitch LUT L
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile for long exposure data at frame stitch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Weight lut
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile LUT.  Calculated during calibration process.
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_NOISE_PROFILE_WDR_L_WEIGHT_LUT_DEFAULT 0
#define ACAMERA_ISP_NOISE_PROFILE_WDR_L_WEIGHT_LUT_DATASIZE 8
#define ACAMERA_ISP_NOISE_PROFILE_WDR_L_WEIGHT_LUT_FIELD_OFFSET 0
#define ACAMERA_ISP_NOISE_PROFILE_WDR_L_WEIGHT_LUT_REG_ADDR 0xfc80
#define ACAMERA_ISP_NOISE_PROFILE_WDR_L_WEIGHT_LUT_OFFSET 0x1c80
#define ACAMERA_ISP_NOISE_PROFILE_WDR_L_WEIGHT_LUT_FIELD_MASK 0xff

// index (0-127), args: data (8-bit)
static __inline void acamera_isp_noise_profile_wdr_l_weight_lut_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0xfc80 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_isp_noise_profile_wdr_l_weight_lut_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xfc80 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: Noise Profile Demosaic LUT
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bayer Demosaic lookup
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Weight lut
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Noise profile LUT
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_DEMOSAIC_LUT_WEIGHT_LUT_DEFAULT 0
#define ACAMERA_ISP_DEMOSAIC_LUT_WEIGHT_LUT_DATASIZE 8
#define ACAMERA_ISP_DEMOSAIC_LUT_WEIGHT_LUT_FIELD_OFFSET 0
#define ACAMERA_ISP_DEMOSAIC_LUT_WEIGHT_LUT_REG_ADDR 0xfd80
#define ACAMERA_ISP_DEMOSAIC_LUT_WEIGHT_LUT_OFFSET 0x1d80
#define ACAMERA_ISP_DEMOSAIC_LUT_WEIGHT_LUT_FIELD_MASK 0xff

// index (0-127), args: data (8-bit)
static __inline void acamera_isp_demosaic_lut_weight_lut_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0xfd80 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_isp_demosaic_lut_weight_lut_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0xfd80 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Group: Zones
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Controls zone weighting for auto-exposure and auto-white-balance
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: AEXP Weight
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets zone weighting for auto exposure. Index is (row,col) where (0,0) is top-left zone
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ZONES_AEXP_WEIGHT_DEFAULT 15
#define ACAMERA_ISP_ZONES_AEXP_WEIGHT_DATASIZE 4
#define ACAMERA_ISP_ZONES_AEXP_WEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_ZONES_AEXP_WEIGHT_REG_ADDR 0xfe00
#define ACAMERA_ISP_ZONES_AEXP_WEIGHT_OFFSET 0x0
#define ACAMERA_ISP_ZONES_AEXP_WEIGHT_FIELD_MASK 0xf

// index1 (0-14), index2 (0-14), args: data (4-bit)
static __inline void acamera_isp_zones_aexp_weight_write( uint32_t base, uint32_t index1, uint32_t index2, uint8_t data )
{
    uint32_t addr;
    uint8_t offset;
    uint32_t curr;
    addr = base + 0xfe00 + ( index1 * 15 + index2 );
    offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    curr = system_isp_read_32( addr );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( 0xFF << offset ) ) );
}
static __inline uint8_t acamera_isp_zones_aexp_weight_read( uint32_t base, uint32_t index1, uint32_t index2 )
{
    uint32_t addr = base + 0xfe00 + ( ( index1 * 15 + index2 ) );
    uint8_t offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: AWB Weight
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Sets zone weighting for auto white balance. Index is (row,col) where (0,0) is top-left zone
// ------------------------------------------------------------------------------ //

#define ACAMERA_ISP_ZONES_AWB_WEIGHT_DEFAULT 15
#define ACAMERA_ISP_ZONES_AWB_WEIGHT_DATASIZE 4
#define ACAMERA_ISP_ZONES_AWB_WEIGHT_FIELD_OFFSET 0
#define ACAMERA_ISP_ZONES_AWB_WEIGHT_REG_ADDR 0xff00
#define ACAMERA_ISP_ZONES_AWB_WEIGHT_OFFSET 0x100
#define ACAMERA_ISP_ZONES_AWB_WEIGHT_FIELD_MASK 0xf

// index1 (0-14), index2 (0-14), args: data (4-bit)
static __inline void acamera_isp_zones_awb_weight_write( uint32_t base, uint32_t index1, uint32_t index2, uint8_t data )
{
    uint32_t addr;
    uint8_t offset;
    uint32_t curr;
    addr = base + 0xff00 + ( index1 * 15 + index2 );
    offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    curr = system_isp_read_32( addr );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( 0xFF << offset ) ) );
}
static __inline uint8_t acamera_isp_zones_awb_weight_read( uint32_t base, uint32_t index1, uint32_t index2 )
{
    uint32_t addr = base + 0xff00 + ( ( index1 * 15 + index2 ) );
    uint8_t offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
#endif //__ACAMERA_ISP_CONFIG_H__
