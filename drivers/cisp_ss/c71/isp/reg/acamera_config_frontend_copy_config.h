//----------------------------------------------------------------------------
//   The confidential and proprietary information contained in this file may
//   only be used by a person authorised under and to the extent permitted
//   by a subsisting licensing agreement from ARM Limited or its affiliates.
//
//          (C) COPYRIGHT [2019] ARM Limited or its affiliates.
//              ALL RIGHTS RESERVED
//
//   This entire notice must be reproduced on all copies of this file
//   and copies of this file may only be made by a person if such person is
//   permitted to do so under the terms of a subsisting license agreement
//   from ARM Limited or its affiliates.
//----------------------------------------------------------------------------

#ifndef __ACAMERA_CONFIG_FRONTEND_COPY_CONFIG_H__
#define __ACAMERA_CONFIG_FRONTEND_COPY_CONFIG_H__

#include "system_isp_io.h"

// File generated by isp_config.py

// ------------------------------------------------------------------------------ //
// Instance 'config_frontend_copy' of module 'ip_config_frontend'
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_BASE_ADDR ( 0x11800 )
#define ACAMERA_CONFIG_FRONTEND_COPY_SIZE ( 0x800 )

// ------------------------------------------------------------------------------ //
// Group: Interrupts
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Interrupt controller
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame blank status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Blanking status for frame interrupts
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_BLANK_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_BLANK_STATUS_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_BLANK_STATUS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_BLANK_STATUS_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_BLANK_STATUS_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_BLANK_STATUS_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_interrupts_frame_blank_status_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11880 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp sensor1
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR1_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR1_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR1_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR1_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_sensor1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_sensor1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp sensor2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR2_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR2_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR2_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR2_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_sensor2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_sensor2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp sensor3
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR3_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR3_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR3_FIELD_OFFSET 2
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR3_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR3_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR3_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_sensor3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_sensor3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp sensor4
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR4_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR4_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR4_FIELD_OFFSET 3
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR4_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR4_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SENSOR4_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_sensor4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_sensor4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp start1
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START1_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START1_FIELD_OFFSET 4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START1_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START1_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START1_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_start1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_start1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp start2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START2_FIELD_OFFSET 5
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START2_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START2_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START2_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_start2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_start2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp start3
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START3_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START3_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START3_FIELD_OFFSET 6
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START3_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START3_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START3_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_start3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_start3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp start4
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START4_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START4_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START4_FIELD_OFFSET 7
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START4_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START4_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START4_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_start4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_start4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp start
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_START_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_start_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_start_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp stitched
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_STITCHED_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_STITCHED_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_STITCHED_FIELD_OFFSET 9
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_STITCHED_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_STITCHED_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_STITCHED_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_stitched_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_stitched_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp defect pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEFECT_PIXEL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEFECT_PIXEL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEFECT_PIXEL_FIELD_OFFSET 10
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEFECT_PIXEL_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEFECT_PIXEL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEFECT_PIXEL_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_defect_pixel_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_defect_pixel_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp sinter
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SINTER_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SINTER_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SINTER_FIELD_OFFSET 11
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SINTER_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SINTER_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SINTER_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_sinter_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_sinter_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp shading
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SHADING_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SHADING_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SHADING_FIELD_OFFSET 12
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SHADING_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SHADING_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_SHADING_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_shading_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_shading_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp iridix
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_IRIDIX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_IRIDIX_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_IRIDIX_FIELD_OFFSET 13
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_IRIDIX_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_IRIDIX_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_IRIDIX_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_iridix_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_iridix_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp demosaic
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEMOSAIC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEMOSAIC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEMOSAIC_FIELD_OFFSET 14
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEMOSAIC_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEMOSAIC_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_DEMOSAIC_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_demosaic_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_demosaic_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Isp out
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_OUT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_OUT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_OUT_FIELD_OFFSET 15
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_OUT_REG_ADDR 0x11880
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_OUT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ISP_OUT_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_isp_out_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11880 );
    system_isp_write_32( base + 0x11880, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_isp_out_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11880 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame start mask
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt mask for frame start events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_MASK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_MASK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_MASK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_MASK_REG_ADDR 0x11884
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_MASK_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_MASK_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_interrupts_frame_start_mask_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11884 );
    system_isp_write_32( base + 0x11884, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_interrupts_frame_start_mask_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11884 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame start status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt status bits for frame start events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_STATUS_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_STATUS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_STATUS_REG_ADDR 0x11888
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_STATUS_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_STATUS_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_interrupts_frame_start_status_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11888 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame start clear
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Clearing of interrupt status bits
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_CLEAR_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_CLEAR_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_CLEAR_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_CLEAR_REG_ADDR 0x1188c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_CLEAR_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_CLEAR_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_interrupts_frame_start_clear_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1188c );
    system_isp_write_32( base + 0x1188c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_interrupts_frame_start_clear_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1188c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame start level0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt level bit 0 for frame start events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL0_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL0_REG_ADDR 0x11890
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL0_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_interrupts_frame_start_level0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11890 );
    system_isp_write_32( base + 0x11890, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_interrupts_frame_start_level0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11890 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame start level1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt level bit 1 for frame start events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL1_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL1_REG_ADDR 0x11894
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL1_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_START_LEVEL1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_interrupts_frame_start_level1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11894 );
    system_isp_write_32( base + 0x11894, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_interrupts_frame_start_level1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11894 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame end mask
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt mask for frame end events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_MASK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_MASK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_MASK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_MASK_REG_ADDR 0x11898
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_MASK_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_MASK_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_interrupts_frame_end_mask_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11898 );
    system_isp_write_32( base + 0x11898, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_interrupts_frame_end_mask_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11898 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame end status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt status bits for frame end events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_STATUS_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_STATUS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_STATUS_REG_ADDR 0x1189c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_STATUS_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_STATUS_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_interrupts_frame_end_status_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1189c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame end clear
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Clearing of interrupt status bits
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_CLEAR_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_CLEAR_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_CLEAR_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_CLEAR_REG_ADDR 0x118a0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_CLEAR_OFFSET 0x20
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_CLEAR_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_interrupts_frame_end_clear_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118a0 );
    system_isp_write_32( base + 0x118a0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_interrupts_frame_end_clear_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x118a0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame end level0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt level bit 0 for frame end events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL0_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL0_REG_ADDR 0x118a4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL0_OFFSET 0x24
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_interrupts_frame_end_level0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118a4 );
    system_isp_write_32( base + 0x118a4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_interrupts_frame_end_level0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x118a4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame end level1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt level bit 1 for frame end events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL1_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL1_REG_ADDR 0x118a8
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL1_OFFSET 0x28
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FRAME_END_LEVEL1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_interrupts_frame_end_level1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118a8 );
    system_isp_write_32( base + 0x118a8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_interrupts_frame_end_level1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x118a8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Stats valid status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Ready status for module events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_VALID_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_VALID_STATUS_DATASIZE 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_VALID_STATUS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_VALID_STATUS_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_VALID_STATUS_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_VALID_STATUS_FIELD_MASK 0x1ffff

// args: data (17-bit)
static __inline uint32_t acamera_config_frontend_copy_interrupts_stats_valid_status_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118ac ) & 0x1ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Metering aexp
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AEXP_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AEXP_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AEXP_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AEXP_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AEXP_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AEXP_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_metering_aexp_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_metering_aexp_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Metering awb
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AWB_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AWB_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AWB_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AWB_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AWB_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_AWB_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_metering_awb_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_metering_awb_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Metering hist 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_1_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_1_FIELD_OFFSET 2
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_1_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_1_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_1_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_metering_hist_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_metering_hist_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Metering hist 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_2_FIELD_OFFSET 3
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_2_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_2_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_2_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_metering_hist_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_metering_hist_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Metering hist 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_3_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_3_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_3_FIELD_OFFSET 4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_3_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_3_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_3_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_metering_hist_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_metering_hist_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Metering hist 4
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_4_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_4_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_4_FIELD_OFFSET 5
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_4_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_4_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_METERING_HIST_4_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_metering_hist_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_metering_hist_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Antifog hist
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ANTIFOG_HIST_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ANTIFOG_HIST_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ANTIFOG_HIST_FIELD_OFFSET 6
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ANTIFOG_HIST_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ANTIFOG_HIST_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ANTIFOG_HIST_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_antifog_hist_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_antifog_hist_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Roi hist 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_1_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_1_FIELD_OFFSET 7
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_1_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_1_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_1_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_roi_hist_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_roi_hist_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Roi hist 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_2_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_2_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_2_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_2_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_roi_hist_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_roi_hist_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Roi hist 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_3_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_3_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_3_FIELD_OFFSET 9
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_3_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_3_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_3_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_roi_hist_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_roi_hist_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Roi hist 4
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_4_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_4_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_4_FIELD_OFFSET 10
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_4_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_4_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_ROI_HIST_4_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_roi_hist_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_roi_hist_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Uroi
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_UROI_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_UROI_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_UROI_FIELD_OFFSET 11
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_UROI_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_UROI_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_UROI_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_uroi_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_uroi_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Iridix
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_IRIDIX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_IRIDIX_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_IRIDIX_FIELD_OFFSET 12
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_IRIDIX_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_IRIDIX_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_IRIDIX_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_iridix_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_iridix_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Defect pixel
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_DEFECT_PIXEL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_DEFECT_PIXEL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_DEFECT_PIXEL_FIELD_OFFSET 13
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_DEFECT_PIXEL_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_DEFECT_PIXEL_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_DEFECT_PIXEL_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_defect_pixel_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_defect_pixel_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Bist status
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_BIST_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_BIST_STATUS_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_BIST_STATUS_FIELD_OFFSET 14
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_BIST_STATUS_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_BIST_STATUS_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_BIST_STATUS_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_bist_status_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_bist_status_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Fault collector status
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FAULT_COLLECTOR_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FAULT_COLLECTOR_STATUS_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FAULT_COLLECTOR_STATUS_FIELD_OFFSET 15
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FAULT_COLLECTOR_STATUS_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FAULT_COLLECTOR_STATUS_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_FAULT_COLLECTOR_STATUS_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_fault_collector_status_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_fault_collector_status_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: MCFE processing queue status
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_PROCESSING_QUEUE_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_PROCESSING_QUEUE_STATUS_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_PROCESSING_QUEUE_STATUS_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_PROCESSING_QUEUE_STATUS_REG_ADDR 0x118ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_PROCESSING_QUEUE_STATUS_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_PROCESSING_QUEUE_STATUS_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_mcfe_processing_queue_status_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118ac );
    system_isp_write_32( base + 0x118ac, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_mcfe_processing_queue_status_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118ac ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Stats mask
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt mask for module events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_MASK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_MASK_DATASIZE 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_MASK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_MASK_REG_ADDR 0x118b0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_MASK_OFFSET 0x30
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_MASK_FIELD_MASK 0x1ffff

// args: data (17-bit)
static __inline void acamera_config_frontend_copy_interrupts_stats_mask_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118b0 );
    system_isp_write_32( base + 0x118b0, ( ( ( uint32_t )( data & 0x1ffff ) ) << 0 ) | ( curr & 0xfffe0000 ) );
}
static __inline uint32_t acamera_config_frontend_copy_interrupts_stats_mask_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118b0 ) & 0x1ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Stats status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  interrupt status bits for module events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_STATUS_DATASIZE 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_STATUS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_STATUS_REG_ADDR 0x118b4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_STATUS_OFFSET 0x34
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_STATUS_FIELD_MASK 0x1ffff

// args: data (17-bit)
static __inline uint32_t acamera_config_frontend_copy_interrupts_stats_status_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118b4 ) & 0x1ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Stats clear
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Clearing of interrupt status bits
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_CLEAR_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_CLEAR_DATASIZE 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_CLEAR_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_CLEAR_REG_ADDR 0x118b8
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_CLEAR_OFFSET 0x38
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_CLEAR_FIELD_MASK 0x1ffff

// args: data (17-bit)
static __inline void acamera_config_frontend_copy_interrupts_stats_clear_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118b8 );
    system_isp_write_32( base + 0x118b8, ( ( ( uint32_t )( data & 0x1ffff ) ) << 0 ) | ( curr & 0xfffe0000 ) );
}
static __inline uint32_t acamera_config_frontend_copy_interrupts_stats_clear_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118b8 ) & 0x1ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Stats level0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt level bit 0 for module events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL0_DATASIZE 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL0_REG_ADDR 0x118bc
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL0_OFFSET 0x3c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL0_FIELD_MASK 0x1ffff

// args: data (17-bit)
static __inline void acamera_config_frontend_copy_interrupts_stats_level0_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118bc );
    system_isp_write_32( base + 0x118bc, ( ( ( uint32_t )( data & 0x1ffff ) ) << 0 ) | ( curr & 0xfffe0000 ) );
}
static __inline uint32_t acamera_config_frontend_copy_interrupts_stats_level0_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118bc ) & 0x1ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Stats level1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt level bit 1 for module events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL1_DATASIZE 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL1_REG_ADDR 0x118c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL1_OFFSET 0x40
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_STATS_LEVEL1_FIELD_MASK 0x1ffff

// args: data (17-bit)
static __inline void acamera_config_frontend_copy_interrupts_stats_level1_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c0 );
    system_isp_write_32( base + 0x118c0, ( ( ( uint32_t )( data & 0x1ffff ) ) << 0 ) | ( curr & 0xfffe0000 ) );
}
static __inline uint32_t acamera_config_frontend_copy_interrupts_stats_level1_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118c0 ) & 0x1ffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MCFE valid status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Ready status for MCFE events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_VALID_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_VALID_STATUS_DATASIZE 20
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_VALID_STATUS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_VALID_STATUS_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_VALID_STATUS_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_VALID_STATUS_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline uint32_t acamera_config_frontend_copy_interrupts_mcfe_valid_status_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118c4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Input cdma 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_1_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_1_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_1_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_1_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_input_cdma_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_input_cdma_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Input cdma 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_2_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_2_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_2_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_2_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_input_cdma_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_input_cdma_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Input cdma 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_3_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_3_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_3_FIELD_OFFSET 2
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_3_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_3_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_3_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_input_cdma_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_input_cdma_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Input cdma 4
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_4_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_4_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_4_FIELD_OFFSET 3
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_4_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_4_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INPUT_CDMA_4_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_input_cdma_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_input_cdma_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_1_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_1_FIELD_OFFSET 4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_1_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_1_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_1_FIELD_MASK 0x10

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 4 ) | ( curr & 0xffffffef ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x10 ) >> 4 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_2_FIELD_OFFSET 5
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_2_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_2_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_2_FIELD_MASK 0x20

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 5 ) | ( curr & 0xffffffdf ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x20 ) >> 5 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_3_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_3_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_3_FIELD_OFFSET 6
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_3_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_3_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_3_FIELD_MASK 0x40

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 6 ) | ( curr & 0xffffffbf ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x40 ) >> 6 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 4
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_4_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_4_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_4_FIELD_OFFSET 7
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_4_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_4_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_4_FIELD_MASK 0x80

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 5
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_5_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_5_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_5_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_5_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_5_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_5_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 6
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_6_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_6_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_6_FIELD_OFFSET 9
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_6_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_6_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_6_FIELD_MASK 0x200

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 7
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_7_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_7_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_7_FIELD_OFFSET 10
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_7_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_7_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_7_FIELD_MASK 0x400

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 8
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_8_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_8_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_8_FIELD_OFFSET 11
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_8_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_8_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_8_FIELD_MASK 0x800

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 9
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_9_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_9_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_9_FIELD_OFFSET 12
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_9_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_9_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_9_FIELD_MASK 0x1000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 10
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_10_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_10_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_10_FIELD_OFFSET 13
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_10_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_10_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_10_FIELD_MASK 0x2000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 13 ) | ( curr & 0xffffdfff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x2000 ) >> 13 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 11
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_11_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_11_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_11_FIELD_OFFSET 14
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_11_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_11_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_11_FIELD_MASK 0x4000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 12
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_12_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_12_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_12_FIELD_OFFSET 15
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_12_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_12_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_12_FIELD_MASK 0x8000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 13
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_13_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_13_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_13_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_13_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_13_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_13_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 14
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_14_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_14_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_14_FIELD_OFFSET 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_14_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_14_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_14_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 15
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_15_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_15_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_15_FIELD_OFFSET 18
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_15_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_15_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_15_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot 16
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_16_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_16_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_16_FIELD_OFFSET 19
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_16_REG_ADDR 0x118c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_16_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_SLOT_16_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_interrupts_slot_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c4 );
    system_isp_write_32( base + 0x118c4, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_slot_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118c4 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: MCFE mask
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt mask for MCFE events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_MASK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_MASK_DATASIZE 20
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_MASK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_MASK_REG_ADDR 0x118c8
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_MASK_OFFSET 0x48
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_MASK_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_config_frontend_copy_interrupts_mcfe_mask_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c8 );
    system_isp_write_32( base + 0x118c8, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_config_frontend_copy_interrupts_mcfe_mask_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118c8 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MCFE status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  interrupt status bits for MCFE events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_STATUS_DATASIZE 20
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_STATUS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_STATUS_REG_ADDR 0x118cc
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_STATUS_OFFSET 0x4c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_STATUS_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline uint32_t acamera_config_frontend_copy_interrupts_mcfe_status_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118cc ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MCFE clear
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Clearing of interrupt status bits
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_CLEAR_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_CLEAR_DATASIZE 20
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_CLEAR_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_CLEAR_REG_ADDR 0x118d0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_CLEAR_OFFSET 0x50
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_CLEAR_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_config_frontend_copy_interrupts_mcfe_clear_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118d0 );
    system_isp_write_32( base + 0x118d0, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_config_frontend_copy_interrupts_mcfe_clear_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118d0 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MCFE level0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt level bit 0 for MCFE events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL0_DATASIZE 20
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL0_REG_ADDR 0x118d4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL0_OFFSET 0x54
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL0_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_config_frontend_copy_interrupts_mcfe_level0_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118d4 );
    system_isp_write_32( base + 0x118d4, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_config_frontend_copy_interrupts_mcfe_level0_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118d4 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: MCFE level1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Interrupt level bit 1 for MCFE events
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL1_DATASIZE 20
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL1_REG_ADDR 0x118d8
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL1_OFFSET 0x58
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_MCFE_LEVEL1_FIELD_MASK 0xfffff

// args: data (20-bit)
static __inline void acamera_config_frontend_copy_interrupts_mcfe_level1_write( uint32_t base, uint32_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118d8 );
    system_isp_write_32( base + 0x118d8, ( ( ( uint32_t )( data & 0xfffff ) ) << 0 ) | ( curr & 0xfff00000 ) );
}
static __inline uint32_t acamera_config_frontend_copy_interrupts_mcfe_level1_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x118d8 ) & 0xfffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Interrupt trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Manual triggering of the interrupt outputs
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INTERRUPT_TRIGGER_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INTERRUPT_TRIGGER_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INTERRUPT_TRIGGER_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INTERRUPT_TRIGGER_REG_ADDR 0x118dc
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INTERRUPT_TRIGGER_OFFSET 0x5c
#define ACAMERA_CONFIG_FRONTEND_COPY_INTERRUPTS_INTERRUPT_TRIGGER_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_interrupts_interrupt_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118dc );
    system_isp_write_32( base + 0x118dc, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_config_frontend_copy_interrupts_interrupt_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x118dc ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Input port 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Controls video input port.
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Preset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//       Allows selection of various input port presets for standard sensor inputs.  See TRM for details of available presets.
//        0-14: Frequently used presets.  If using one of available presets, remaining bits in registers 0x100 and 0x104 are not used.
//        15:   Input port configured according to registers in 0x100 and 0x104.  Consult Apical support for special input port requirements.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_PRESET_DEFAULT 2
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_PRESET_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_PRESET_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_PRESET_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_PRESET_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_PRESET_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_input_port_1_preset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_preset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: VS use field
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_USE_FIELD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_USE_FIELD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_USE_FIELD_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_USE_FIELD_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_USE_FIELD_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_USE_FIELD_FIELD_MASK 0x100
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_USE_FIELD_USE_VSYNC_I_PORT_FOR_VERTICAL_SYNC ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_USE_FIELD_USE_FIELD_I_PORT_FOR_VERTICAL_SYNC ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_vs_use_field_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_vs_use_field_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: VS toggle
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_TOGGLE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_TOGGLE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_TOGGLE_FIELD_OFFSET 9
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_TOGGLE_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_TOGGLE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_TOGGLE_FIELD_MASK 0x200
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_TOGGLE_VSYNC_IS_PULSETYPE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_TOGGLE_VSYNC_IS_TOGGLETYPE_FIELD_SIGNAL ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_vs_toggle_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_vs_toggle_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: VS polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_FIELD_OFFSET 10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_FIELD_MASK 0x400
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_HORIZONTAL_COUNTER_RESET_ON_RISING_EDGE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_HORIZONTAL_COUNTER_RESET_ON_FALLING_EDGE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_vs_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_vs_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: VS polarity acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_ACL_FIELD_OFFSET 11
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_ACL_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_ACL_FIELD_MASK 0x800
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_ACL_DONT_INVERT_POLARITY_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VS_POLARITY_ACL_INVERT_POLARITY_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_vs_polarity_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_vs_polarity_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: HS use acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_USE_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_USE_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_USE_ACL_FIELD_OFFSET 12
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_USE_ACL_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_USE_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_USE_ACL_FIELD_MASK 0x1000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_USE_ACL_USE_HSYNC_I_PORT_FOR_ACTIVELINE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_USE_ACL_USE_ACL_I_PORT_FOR_ACTIVELINE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hs_use_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_hs_use_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: VC C select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_C_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_C_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_C_SELECT_FIELD_OFFSET 14
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_C_SELECT_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_C_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_C_SELECT_FIELD_MASK 0x4000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_C_SELECT_VERTICAL_COUNTER_COUNTS_ON_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_C_SELECT_VERTICAL_COUNTER_COUNTS_ON_HORIZONTAL_COUNTER_OVERFLOW_OR_RESET ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_vc_c_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_vc_c_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: VC R select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_R_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_R_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_R_SELECT_FIELD_OFFSET 15
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_R_SELECT_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_R_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_R_SELECT_FIELD_MASK 0x8000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_EDGE_OF_VS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_R_SELECT_VERTICAL_COUNTER_IS_RESET_AFTER_TIMEOUT_ON_HS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_vc_r_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_vc_r_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: HS xor VS
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_XOR_VS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_XOR_VS_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_XOR_VS_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_XOR_VS_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_XOR_VS_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_XOR_VS_FIELD_MASK 0x10000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_XOR_VS_NORMAL_MODE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_XOR_VS_HVALID__HSYNC_XOR_VSYNC ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hs_xor_vs_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_hs_xor_vs_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: HS polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_FIELD_OFFSET 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_FIELD_MASK 0x20000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_DONT_INVERT_POLARITY_OF_HS_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_INVERT_POLARITY_OF_HS_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hs_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_hs_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: HS polarity acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_ACL_FIELD_OFFSET 18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_ACL_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_ACL_FIELD_MASK 0x40000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_ACL_DONT_INVERT_POLARITY_OF_HS_FOR_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_ACL_INVERT_POLARITY_OF_HS_FOR_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hs_polarity_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_hs_polarity_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: HS polarity hs
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_HS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_HS_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_HS_FIELD_OFFSET 19
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_HS_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_HS_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_HS_FIELD_MASK 0x80000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_HS_HORIZONTAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_HS_HORIZONTAL_COUNTER_IS_RESET_ON_VSYNC_EG_WHEN_HSYNC_IS_NOT_AVAILABLE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hs_polarity_hs_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_hs_polarity_hs_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: HS polarity vc
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_VC_DEFAULT 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_VC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_VC_FIELD_OFFSET 20
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_VC_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_VC_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_VC_FIELD_MASK 0x100000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_VC_VERTICAL_COUNTER_INCREMENTS_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HS_POLARITY_VC_VERTICAL_COUNTER_INCREMENTS_ON_FALLING_EDGE_OF_HS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hs_polarity_vc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_hs_polarity_vc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: HC R select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_R_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_R_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_R_SELECT_FIELD_OFFSET 23
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_R_SELECT_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_R_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_R_SELECT_FIELD_MASK 0x800000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_VS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hc_r_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_hc_r_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: Acl polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACL_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACL_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACL_POLARITY_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACL_POLARITY_REG_ADDR 0x11900
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACL_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACL_POLARITY_FIELD_MASK 0x1000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACL_POLARITY_DONT_INVERT_ACL_I_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACL_POLARITY_INVERT_ACL_I_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_acl_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11900 );
    system_isp_write_32( base + 0x11900, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_acl_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11900 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Field polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_POLARITY_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_POLARITY_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_POLARITY_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_POLARITY_FIELD_MASK 0x1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_POLARITY_DONT_INVERT_FIELD_I_FOR_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_POLARITY_INVERT_FIELD_I_FOR_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_field_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_field_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Field toggle
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_TOGGLE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_TOGGLE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_TOGGLE_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_TOGGLE_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_TOGGLE_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_TOGGLE_FIELD_MASK 0x2
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_TOGGLE_FIELD_IS_PULSETYPE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_TOGGLE_FIELD_IS_TOGGLETYPE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_field_toggle_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_field_toggle_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Aclg window0
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW0_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW0_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW0_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW0_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW0_FIELD_MASK 0x100
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW0_EXCLUDE_WINDOW0_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW0_INCLUDE_WINDOW0_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_aclg_window0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_aclg_window0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Aclg HSync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_HSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_HSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_HSYNC_FIELD_OFFSET 9
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_HSYNC_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_HSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_HSYNC_FIELD_MASK 0x200
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_HSYNC_EXCLUDE_HSYNC_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_HSYNC_INCLUDE_HSYNC_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_aclg_hsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_aclg_hsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: Aclg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW2_FIELD_OFFSET 10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW2_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW2_FIELD_MASK 0x400
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_aclg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_aclg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: Aclg acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_ACL_FIELD_OFFSET 11
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_ACL_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_ACL_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_ACL_FIELD_MASK 0x800
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_ACL_EXCLUDE_ACL_I_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_ACL_INCLUDE_ACL_I_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_aclg_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_aclg_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: Aclg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_VSYNC_FIELD_OFFSET 12
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_VSYNC_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_VSYNC_FIELD_MASK 0x1000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_ACLG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_aclg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_aclg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: HSg window1
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW1_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW1_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW1_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW1_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW1_FIELD_MASK 0x10000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW1_EXCLUDE_WINDOW1_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW1_INCLUDE_WINDOW1_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hsg_window1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_hsg_window1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: HSg hsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_HSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_HSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_HSYNC_FIELD_OFFSET 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_HSYNC_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_HSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_HSYNC_FIELD_MASK 0x20000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_HSYNC_EXCLUDE_HSYNC_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_HSYNC_INCLUDE_HSYNC_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hsg_hsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_hsg_hsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: HSg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_VSYNC_FIELD_OFFSET 18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_VSYNC_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_VSYNC_FIELD_MASK 0x40000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hsg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_hsg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: HSg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW2_FIELD_OFFSET 19
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW2_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW2_FIELD_MASK 0x80000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HSG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_HS_GATE_MASK_OUT_SPURIOUS_HS_DURING_BLANK ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hsg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_hsg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Fieldg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_VSYNC_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_VSYNC_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_VSYNC_FIELD_MASK 0x1000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_fieldg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_fieldg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Fieldg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_WINDOW2_FIELD_OFFSET 25
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_WINDOW2_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_WINDOW2_FIELD_MASK 0x2000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_fieldg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_fieldg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: Fieldg field
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_FIELD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_FIELD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_FIELD_FIELD_OFFSET 26
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_FIELD_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_FIELD_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_FIELD_FIELD_MASK 0x4000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_FIELD_EXCLUDE_FIELD_I_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELDG_FIELD_INCLUDE_FIELD_I_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_fieldg_field_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_fieldg_field_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: field mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_MODE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_MODE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_MODE_FIELD_OFFSET 27
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_MODE_REG_ADDR 0x11904
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_MODE_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_MODE_FIELD_MASK 0x8000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_MODE_PULSE_FIELD ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FIELD_MODE_TOGGLE_FIELD ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11904 );
    system_isp_write_32( base + 0x11904, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11904 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: Hc limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// horizontal counter limit value (counts: 0,1,...hc_limit-1,hc_limit,0,1,...)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_LIMIT_DEFAULT 65535
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_LIMIT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_LIMIT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_LIMIT_REG_ADDR 0x11908
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_LIMIT_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_LIMIT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hc_limit_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11908 );
    system_isp_write_32( base + 0x11908, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_1_hc_limit_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11908 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Hc start0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window0 start for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START0_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START0_REG_ADDR 0x1190c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START0_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hc_start0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1190c );
    system_isp_write_32( base + 0x1190c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_1_hc_start0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1190c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Hc size0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window0 size for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE0_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE0_REG_ADDR 0x11910
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE0_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hc_size0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11910 );
    system_isp_write_32( base + 0x11910, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_1_hc_size0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11910 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Hc start1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window1 start for HS gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START1_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START1_REG_ADDR 0x11914
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START1_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_START1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hc_start1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11914 );
    system_isp_write_32( base + 0x11914, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_1_hc_start1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11914 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Hc size1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window1 size for HS gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE1_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE1_REG_ADDR 0x11918
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE1_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_HC_SIZE1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_1_hc_size1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11918 );
    system_isp_write_32( base + 0x11918, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_1_hc_size1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11918 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Vc limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// vertical counter limit value (counts: 0,1,...vc_limit-1,vc_limit,0,1,...)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_LIMIT_DEFAULT 65535
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_LIMIT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_LIMIT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_LIMIT_REG_ADDR 0x1191c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_LIMIT_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_LIMIT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_1_vc_limit_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1191c );
    system_isp_write_32( base + 0x1191c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_1_vc_limit_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1191c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Vc start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window2 start for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_START_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_START_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_START_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_START_REG_ADDR 0x11920
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_START_OFFSET 0x20
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_START_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_1_vc_start_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11920 );
    system_isp_write_32( base + 0x11920, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_1_vc_start_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11920 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Vc size
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window2 size for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_SIZE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_SIZE_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_SIZE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_SIZE_REG_ADDR 0x11924
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_SIZE_OFFSET 0x24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_VC_SIZE_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_1_vc_size_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11924 );
    system_isp_write_32( base + 0x11924, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_1_vc_size_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11924 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// detected frame width.  Read only value.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_WIDTH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_WIDTH_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_WIDTH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_WIDTH_REG_ADDR 0x11928
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_WIDTH_OFFSET 0x28
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_WIDTH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_input_port_1_frame_width_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11928 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// detected frame height.  Read only value.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_HEIGHT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_HEIGHT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_HEIGHT_REG_ADDR 0x1192c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_HEIGHT_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FRAME_HEIGHT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_input_port_1_frame_height_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1192c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Freeze config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Used to freeze input port configuration.  Used when multiple register writes are required to change input port configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FREEZE_CONFIG_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FREEZE_CONFIG_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FREEZE_CONFIG_FIELD_OFFSET 7
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FREEZE_CONFIG_REG_ADDR 0x119f0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FREEZE_CONFIG_OFFSET 0xf0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FREEZE_CONFIG_FIELD_MASK 0x80
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FREEZE_CONFIG_NORMAL_OPERATION ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_FREEZE_CONFIG_HOLD_PREVIOUS_INPUT_PORT_CONFIG_STATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_1_freeze_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119f0 );
    system_isp_write_32( base + 0x119f0, ( ( ( uint32_t )( data & 0x1 ) ) << 7 ) | ( curr & 0xffffff7f ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_freeze_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f0 ) & 0x80 ) >> 7 );
}
// ------------------------------------------------------------------------------ //
// Register: Mode request
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Used to stop and start input port.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_REG_ADDR 0x119f0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_OFFSET 0xf0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_FIELD_MASK 0x7
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_SAFE_STOP ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_SAFE_START ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_URGENT_STOP ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_URGENT_START ( 3 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_RESERVED4 ( 4 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_SAFER_START ( 5 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_RESERVED6 ( 6 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_REQUEST_RESERVED7 ( 7 )

// args: data (3-bit)
static __inline void acamera_config_frontend_copy_input_port_1_mode_request_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119f0 );
    system_isp_write_32( base + 0x119f0, ( ( ( uint32_t )( data & 0x7 ) ) << 0 ) | ( curr & 0xfffffff8 ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_1_mode_request_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f0 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Mode status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//      Used to monitor input port status:
//      bit 0: 1=running, 0=stopped, bits 1,2-reserved
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_STATUS_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_STATUS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_STATUS_REG_ADDR 0x119f4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_STATUS_OFFSET 0xf4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_1_MODE_STATUS_FIELD_MASK 0x7

// args: data (3-bit)
static __inline uint8_t acamera_config_frontend_copy_input_port_1_mode_status_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f4 ) & 0x7 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Input port 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Controls video input port.
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: preset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//       Allows selection of various input port presets for standard sensor inputs.  See TRM for details of available presets.
//        0-14: Frequently used presets.  If using one of available presets, remaining bits in registers 0x100 and 0x104 are not used.
//        15:   Input port configured according to registers in 0x100 and 0x104.  Consult Apical support for special input port requirements.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_PRESET_DEFAULT 2
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_PRESET_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_PRESET_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_PRESET_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_PRESET_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_PRESET_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_input_port_2_preset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_preset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vs_use field
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_USE_FIELD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_USE_FIELD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_USE_FIELD_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_USE_FIELD_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_USE_FIELD_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_USE_FIELD_FIELD_MASK 0x100
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_USE_FIELD_USE_VSYNC_I_PORT_FOR_VERTICAL_SYNC ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_USE_FIELD_USE_FIELD_I_PORT_FOR_VERTICAL_SYNC ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_vs_use_field_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_vs_use_field_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: vs toggle
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_TOGGLE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_TOGGLE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_TOGGLE_FIELD_OFFSET 9
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_TOGGLE_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_TOGGLE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_TOGGLE_FIELD_MASK 0x200
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_TOGGLE_VSYNC_IS_PULSETYPE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_TOGGLE_VSYNC_IS_TOGGLETYPE_FIELD_SIGNAL ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_vs_toggle_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_vs_toggle_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: vs polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_FIELD_OFFSET 10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_FIELD_MASK 0x400
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_HORIZONTAL_COUNTER_RESET_ON_RISING_EDGE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_HORIZONTAL_COUNTER_RESET_ON_FALLING_EDGE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_vs_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_vs_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: vs_polarity acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_ACL_FIELD_OFFSET 11
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_ACL_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_ACL_FIELD_MASK 0x800
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_ACL_DONT_INVERT_POLARITY_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VS_POLARITY_ACL_INVERT_POLARITY_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_vs_polarity_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_vs_polarity_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_use acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_USE_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_USE_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_USE_ACL_FIELD_OFFSET 12
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_USE_ACL_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_USE_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_USE_ACL_FIELD_MASK 0x1000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_USE_ACL_USE_HSYNC_I_PORT_FOR_ACTIVELINE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_USE_ACL_USE_ACL_I_PORT_FOR_ACTIVELINE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hs_use_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_hs_use_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: vc_c select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_C_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_C_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_C_SELECT_FIELD_OFFSET 14
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_C_SELECT_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_C_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_C_SELECT_FIELD_MASK 0x4000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_C_SELECT_VERTICAL_COUNTER_COUNTS_ON_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_C_SELECT_VERTICAL_COUNTER_COUNTS_ON_HORIZONTAL_COUNTER_OVERFLOW_OR_RESET ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_vc_c_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_vc_c_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: vc_r select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_R_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_R_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_R_SELECT_FIELD_OFFSET 15
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_R_SELECT_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_R_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_R_SELECT_FIELD_MASK 0x8000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_EDGE_OF_VS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_R_SELECT_VERTICAL_COUNTER_IS_RESET_AFTER_TIMEOUT_ON_HS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_vc_r_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_vc_r_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_xor vs
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_XOR_VS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_XOR_VS_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_XOR_VS_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_XOR_VS_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_XOR_VS_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_XOR_VS_FIELD_MASK 0x10000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_XOR_VS_NORMAL_MODE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_XOR_VS_HVALID__HSYNC_XOR_VSYNC ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hs_xor_vs_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_hs_xor_vs_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: hs polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_FIELD_OFFSET 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_FIELD_MASK 0x20000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_DONT_INVERT_POLARITY_OF_HS_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_INVERT_POLARITY_OF_HS_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hs_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_hs_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_polarity acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_ACL_FIELD_OFFSET 18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_ACL_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_ACL_FIELD_MASK 0x40000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_ACL_DONT_INVERT_POLARITY_OF_HS_FOR_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_ACL_INVERT_POLARITY_OF_HS_FOR_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hs_polarity_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_hs_polarity_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_polarity hs
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_HS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_HS_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_HS_FIELD_OFFSET 19
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_HS_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_HS_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_HS_FIELD_MASK 0x80000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_HS_HORIZONTAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_HS_HORIZONTAL_COUNTER_IS_RESET_ON_VSYNC_EG_WHEN_HSYNC_IS_NOT_AVAILABLE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hs_polarity_hs_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_hs_polarity_hs_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_polarity vc
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_VC_DEFAULT 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_VC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_VC_FIELD_OFFSET 20
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_VC_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_VC_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_VC_FIELD_MASK 0x100000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_VC_VERTICAL_COUNTER_INCREMENTS_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HS_POLARITY_VC_VERTICAL_COUNTER_INCREMENTS_ON_FALLING_EDGE_OF_HS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hs_polarity_vc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_hs_polarity_vc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: hc_r select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_R_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_R_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_R_SELECT_FIELD_OFFSET 23
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_R_SELECT_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_R_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_R_SELECT_FIELD_MASK 0x800000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_VS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hc_r_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_hc_r_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: acl polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACL_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACL_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACL_POLARITY_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACL_POLARITY_REG_ADDR 0x11940
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACL_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACL_POLARITY_FIELD_MASK 0x1000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACL_POLARITY_DONT_INVERT_ACL_I_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACL_POLARITY_INVERT_ACL_I_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_acl_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11940 );
    system_isp_write_32( base + 0x11940, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_acl_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11940 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: field polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_POLARITY_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_POLARITY_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_POLARITY_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_POLARITY_FIELD_MASK 0x1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_POLARITY_DONT_INVERT_FIELD_I_FOR_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_POLARITY_INVERT_FIELD_I_FOR_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_field_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_field_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: field toggle
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_TOGGLE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_TOGGLE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_TOGGLE_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_TOGGLE_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_TOGGLE_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_TOGGLE_FIELD_MASK 0x2
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_TOGGLE_FIELD_IS_PULSETYPE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_TOGGLE_FIELD_IS_TOGGLETYPE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_field_toggle_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_field_toggle_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg window0
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW0_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW0_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW0_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW0_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW0_FIELD_MASK 0x100
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW0_EXCLUDE_WINDOW0_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW0_INCLUDE_WINDOW0_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_aclg_window0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_aclg_window0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg hsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_HSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_HSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_HSYNC_FIELD_OFFSET 9
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_HSYNC_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_HSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_HSYNC_FIELD_MASK 0x200
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_HSYNC_EXCLUDE_HSYNC_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_HSYNC_INCLUDE_HSYNC_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_aclg_hsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_aclg_hsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW2_FIELD_OFFSET 10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW2_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW2_FIELD_MASK 0x400
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_aclg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_aclg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_ACL_FIELD_OFFSET 11
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_ACL_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_ACL_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_ACL_FIELD_MASK 0x800
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_ACL_EXCLUDE_ACL_I_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_ACL_INCLUDE_ACL_I_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_aclg_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_aclg_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_VSYNC_FIELD_OFFSET 12
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_VSYNC_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_VSYNC_FIELD_MASK 0x1000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_ACLG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_aclg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_aclg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg window1
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW1_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW1_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW1_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW1_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW1_FIELD_MASK 0x10000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW1_EXCLUDE_WINDOW1_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW1_INCLUDE_WINDOW1_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hsg_window1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_hsg_window1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg hsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_HSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_HSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_HSYNC_FIELD_OFFSET 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_HSYNC_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_HSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_HSYNC_FIELD_MASK 0x20000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_HSYNC_EXCLUDE_HSYNC_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_HSYNC_INCLUDE_HSYNC_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hsg_hsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_hsg_hsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_VSYNC_FIELD_OFFSET 18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_VSYNC_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_VSYNC_FIELD_MASK 0x40000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hsg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_hsg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW2_FIELD_OFFSET 19
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW2_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW2_FIELD_MASK 0x80000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HSG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_HS_GATE_MASK_OUT_SPURIOUS_HS_DURING_BLANK ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hsg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_hsg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: fieldg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_VSYNC_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_VSYNC_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_VSYNC_FIELD_MASK 0x1000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_fieldg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_fieldg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: fieldg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_WINDOW2_FIELD_OFFSET 25
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_WINDOW2_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_WINDOW2_FIELD_MASK 0x2000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_fieldg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_fieldg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: fieldg field
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_FIELD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_FIELD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_FIELD_FIELD_OFFSET 26
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_FIELD_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_FIELD_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_FIELD_FIELD_MASK 0x4000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_FIELD_EXCLUDE_FIELD_I_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELDG_FIELD_INCLUDE_FIELD_I_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_fieldg_field_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_fieldg_field_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: field mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_MODE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_MODE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_MODE_FIELD_OFFSET 27
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_MODE_REG_ADDR 0x11944
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_MODE_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_MODE_FIELD_MASK 0x8000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_MODE_PULSE_FIELD ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FIELD_MODE_TOGGLE_FIELD ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11944 );
    system_isp_write_32( base + 0x11944, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11944 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: hc limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// horizontal counter limit value (counts: 0,1,...hc_limit-1,hc_limit,0,1,...)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_LIMIT_DEFAULT 65535
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_LIMIT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_LIMIT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_LIMIT_REG_ADDR 0x11948
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_LIMIT_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_LIMIT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hc_limit_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11948 );
    system_isp_write_32( base + 0x11948, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_2_hc_limit_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11948 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc start0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window0 start for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START0_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START0_REG_ADDR 0x1194c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START0_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hc_start0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1194c );
    system_isp_write_32( base + 0x1194c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_2_hc_start0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1194c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc size0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window0 size for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE0_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE0_REG_ADDR 0x11950
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE0_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hc_size0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11950 );
    system_isp_write_32( base + 0x11950, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_2_hc_size0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11950 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc start1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window1 start for HS gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START1_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START1_REG_ADDR 0x11954
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START1_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_START1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hc_start1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11954 );
    system_isp_write_32( base + 0x11954, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_2_hc_start1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11954 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc size1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window1 size for HS gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE1_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE1_REG_ADDR 0x11958
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE1_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_HC_SIZE1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_2_hc_size1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11958 );
    system_isp_write_32( base + 0x11958, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_2_hc_size1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11958 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vc limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// vertical counter limit value (counts: 0,1,...vc_limit-1,vc_limit,0,1,...)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_LIMIT_DEFAULT 65535
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_LIMIT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_LIMIT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_LIMIT_REG_ADDR 0x1195c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_LIMIT_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_LIMIT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_2_vc_limit_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1195c );
    system_isp_write_32( base + 0x1195c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_2_vc_limit_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1195c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vc start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window2 start for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_START_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_START_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_START_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_START_REG_ADDR 0x11960
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_START_OFFSET 0x20
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_START_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_2_vc_start_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11960 );
    system_isp_write_32( base + 0x11960, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_2_vc_start_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11960 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vc size
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window2 size for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_SIZE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_SIZE_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_SIZE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_SIZE_REG_ADDR 0x11964
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_SIZE_OFFSET 0x24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_VC_SIZE_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_2_vc_size_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11964 );
    system_isp_write_32( base + 0x11964, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_2_vc_size_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11964 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: frame width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// detected frame width.  Read only value.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_WIDTH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_WIDTH_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_WIDTH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_WIDTH_REG_ADDR 0x11968
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_WIDTH_OFFSET 0x28
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_WIDTH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_input_port_2_frame_width_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11968 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: frame height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// detected frame height.  Read only value.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_HEIGHT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_HEIGHT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_HEIGHT_REG_ADDR 0x1196c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_HEIGHT_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FRAME_HEIGHT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_input_port_2_frame_height_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1196c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: freeze config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Used to freeze input port configuration.  Used when multiple register writes are required to change input port configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FREEZE_CONFIG_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FREEZE_CONFIG_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FREEZE_CONFIG_FIELD_OFFSET 15
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FREEZE_CONFIG_REG_ADDR 0x119f0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FREEZE_CONFIG_OFFSET 0xb0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FREEZE_CONFIG_FIELD_MASK 0x8000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FREEZE_CONFIG_NORMAL_OPERATION ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_FREEZE_CONFIG_HOLD_PREVIOUS_INPUT_PORT_CONFIG_STATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_2_freeze_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119f0 );
    system_isp_write_32( base + 0x119f0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_freeze_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: mode request
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Used to stop and start input port.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_REG_ADDR 0x119f0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_OFFSET 0xb0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_FIELD_MASK 0x700
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_SAFE_STOP ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_SAFE_START ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_URGENT_STOP ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_URGENT_START ( 3 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_RESERVED4 ( 4 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_SAFER_START ( 5 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_RESERVED6 ( 6 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_REQUEST_RESERVED7 ( 7 )

// args: data (3-bit)
static __inline void acamera_config_frontend_copy_input_port_2_mode_request_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119f0 );
    system_isp_write_32( base + 0x119f0, ( ( ( uint32_t )( data & 0x7 ) ) << 8 ) | ( curr & 0xfffff8ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_2_mode_request_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f0 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: mode status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//      Used to monitor input port status:
//      bit 0: 1=running, 0=stopped, bits 1,2-reserved
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_STATUS_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_STATUS_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_STATUS_REG_ADDR 0x119f4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_STATUS_OFFSET 0xb4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_2_MODE_STATUS_FIELD_MASK 0x700

// args: data (3-bit)
static __inline uint8_t acamera_config_frontend_copy_input_port_2_mode_status_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f4 ) & 0x700 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Group: Input port 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Controls video input port.
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: preset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//       Allows selection of various input port presets for standard sensor inputs.  See TRM for details of available presets.
//        0-14: Frequently used presets.  If using one of available presets, remaining bits in registers 0x100 and 0x104 are not used.
//        15:   Input port configured according to registers in 0x100 and 0x104.  Consult Apical support for special input port requirements.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_PRESET_DEFAULT 2
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_PRESET_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_PRESET_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_PRESET_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_PRESET_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_PRESET_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_input_port_3_preset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_preset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vs_use field
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_USE_FIELD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_USE_FIELD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_USE_FIELD_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_USE_FIELD_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_USE_FIELD_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_USE_FIELD_FIELD_MASK 0x100
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_USE_FIELD_USE_VSYNC_I_PORT_FOR_VERTICAL_SYNC ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_USE_FIELD_USE_FIELD_I_PORT_FOR_VERTICAL_SYNC ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_vs_use_field_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_vs_use_field_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: vs toggle
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_TOGGLE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_TOGGLE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_TOGGLE_FIELD_OFFSET 9
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_TOGGLE_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_TOGGLE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_TOGGLE_FIELD_MASK 0x200
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_TOGGLE_VSYNC_IS_PULSETYPE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_TOGGLE_VSYNC_IS_TOGGLETYPE_FIELD_SIGNAL ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_vs_toggle_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_vs_toggle_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: vs polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_FIELD_OFFSET 10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_FIELD_MASK 0x400
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_HORIZONTAL_COUNTER_RESET_ON_RISING_EDGE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_HORIZONTAL_COUNTER_RESET_ON_FALLING_EDGE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_vs_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_vs_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: vs_polarity acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_ACL_FIELD_OFFSET 11
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_ACL_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_ACL_FIELD_MASK 0x800
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_ACL_DONT_INVERT_POLARITY_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VS_POLARITY_ACL_INVERT_POLARITY_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_vs_polarity_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_vs_polarity_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_use acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_USE_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_USE_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_USE_ACL_FIELD_OFFSET 12
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_USE_ACL_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_USE_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_USE_ACL_FIELD_MASK 0x1000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_USE_ACL_USE_HSYNC_I_PORT_FOR_ACTIVELINE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_USE_ACL_USE_ACL_I_PORT_FOR_ACTIVELINE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hs_use_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_hs_use_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: vc_c select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_C_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_C_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_C_SELECT_FIELD_OFFSET 14
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_C_SELECT_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_C_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_C_SELECT_FIELD_MASK 0x4000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_C_SELECT_VERTICAL_COUNTER_COUNTS_ON_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_C_SELECT_VERTICAL_COUNTER_COUNTS_ON_HORIZONTAL_COUNTER_OVERFLOW_OR_RESET ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_vc_c_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_vc_c_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: vc_r select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_R_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_R_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_R_SELECT_FIELD_OFFSET 15
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_R_SELECT_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_R_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_R_SELECT_FIELD_MASK 0x8000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_EDGE_OF_VS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_R_SELECT_VERTICAL_COUNTER_IS_RESET_AFTER_TIMEOUT_ON_HS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_vc_r_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_vc_r_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_xor vs
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_XOR_VS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_XOR_VS_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_XOR_VS_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_XOR_VS_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_XOR_VS_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_XOR_VS_FIELD_MASK 0x10000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_XOR_VS_NORMAL_MODE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_XOR_VS_HVALID__HSYNC_XOR_VSYNC ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hs_xor_vs_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_hs_xor_vs_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: hs polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_FIELD_OFFSET 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_FIELD_MASK 0x20000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_DONT_INVERT_POLARITY_OF_HS_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_INVERT_POLARITY_OF_HS_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hs_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_hs_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_polarity acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_ACL_FIELD_OFFSET 18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_ACL_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_ACL_FIELD_MASK 0x40000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_ACL_DONT_INVERT_POLARITY_OF_HS_FOR_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_ACL_INVERT_POLARITY_OF_HS_FOR_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hs_polarity_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_hs_polarity_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_polarity hs
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_HS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_HS_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_HS_FIELD_OFFSET 19
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_HS_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_HS_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_HS_FIELD_MASK 0x80000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_HS_HORIZONTAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_HS_HORIZONTAL_COUNTER_IS_RESET_ON_VSYNC_EG_WHEN_HSYNC_IS_NOT_AVAILABLE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hs_polarity_hs_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_hs_polarity_hs_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_polarity vc
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_VC_DEFAULT 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_VC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_VC_FIELD_OFFSET 20
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_VC_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_VC_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_VC_FIELD_MASK 0x100000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_VC_VERTICAL_COUNTER_INCREMENTS_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HS_POLARITY_VC_VERTICAL_COUNTER_INCREMENTS_ON_FALLING_EDGE_OF_HS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hs_polarity_vc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_hs_polarity_vc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: hc_r select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_R_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_R_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_R_SELECT_FIELD_OFFSET 23
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_R_SELECT_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_R_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_R_SELECT_FIELD_MASK 0x800000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_VS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hc_r_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_hc_r_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: acl polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACL_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACL_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACL_POLARITY_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACL_POLARITY_REG_ADDR 0x11980
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACL_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACL_POLARITY_FIELD_MASK 0x1000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACL_POLARITY_DONT_INVERT_ACL_I_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACL_POLARITY_INVERT_ACL_I_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_acl_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11980 );
    system_isp_write_32( base + 0x11980, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_acl_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11980 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: field polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_POLARITY_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_POLARITY_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_POLARITY_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_POLARITY_FIELD_MASK 0x1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_POLARITY_DONT_INVERT_FIELD_I_FOR_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_POLARITY_INVERT_FIELD_I_FOR_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_field_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_field_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: field toggle
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_TOGGLE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_TOGGLE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_TOGGLE_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_TOGGLE_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_TOGGLE_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_TOGGLE_FIELD_MASK 0x2
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_TOGGLE_FIELD_IS_PULSETYPE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_TOGGLE_FIELD_IS_TOGGLETYPE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_field_toggle_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_field_toggle_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg window0
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW0_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW0_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW0_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW0_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW0_FIELD_MASK 0x100
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW0_EXCLUDE_WINDOW0_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW0_INCLUDE_WINDOW0_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_aclg_window0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_aclg_window0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg hsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_HSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_HSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_HSYNC_FIELD_OFFSET 9
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_HSYNC_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_HSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_HSYNC_FIELD_MASK 0x200
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_HSYNC_EXCLUDE_HSYNC_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_HSYNC_INCLUDE_HSYNC_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_aclg_hsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_aclg_hsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW2_FIELD_OFFSET 10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW2_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW2_FIELD_MASK 0x400
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_aclg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_aclg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_ACL_FIELD_OFFSET 11
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_ACL_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_ACL_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_ACL_FIELD_MASK 0x800
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_ACL_EXCLUDE_ACL_I_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_ACL_INCLUDE_ACL_I_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_aclg_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_aclg_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_VSYNC_FIELD_OFFSET 12
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_VSYNC_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_VSYNC_FIELD_MASK 0x1000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_ACLG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_aclg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_aclg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg window1
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW1_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW1_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW1_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW1_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW1_FIELD_MASK 0x10000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW1_EXCLUDE_WINDOW1_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW1_INCLUDE_WINDOW1_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hsg_window1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_hsg_window1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg hsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_HSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_HSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_HSYNC_FIELD_OFFSET 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_HSYNC_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_HSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_HSYNC_FIELD_MASK 0x20000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_HSYNC_EXCLUDE_HSYNC_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_HSYNC_INCLUDE_HSYNC_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hsg_hsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_hsg_hsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_VSYNC_FIELD_OFFSET 18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_VSYNC_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_VSYNC_FIELD_MASK 0x40000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hsg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_hsg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW2_FIELD_OFFSET 19
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW2_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW2_FIELD_MASK 0x80000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HSG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_HS_GATE_MASK_OUT_SPURIOUS_HS_DURING_BLANK ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hsg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_hsg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: fieldg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_VSYNC_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_VSYNC_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_VSYNC_FIELD_MASK 0x1000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_fieldg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_fieldg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: fieldg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_WINDOW2_FIELD_OFFSET 25
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_WINDOW2_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_WINDOW2_FIELD_MASK 0x2000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_fieldg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_fieldg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: fieldg field
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_FIELD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_FIELD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_FIELD_FIELD_OFFSET 26
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_FIELD_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_FIELD_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_FIELD_FIELD_MASK 0x4000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_FIELD_EXCLUDE_FIELD_I_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELDG_FIELD_INCLUDE_FIELD_I_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_fieldg_field_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_fieldg_field_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: field mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_MODE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_MODE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_MODE_FIELD_OFFSET 27
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_MODE_REG_ADDR 0x11984
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_MODE_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_MODE_FIELD_MASK 0x8000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_MODE_PULSE_FIELD ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FIELD_MODE_TOGGLE_FIELD ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11984 );
    system_isp_write_32( base + 0x11984, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11984 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: hc limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// horizontal counter limit value (counts: 0,1,...hc_limit-1,hc_limit,0,1,...)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_LIMIT_DEFAULT 65535
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_LIMIT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_LIMIT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_LIMIT_REG_ADDR 0x11988
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_LIMIT_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_LIMIT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hc_limit_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11988 );
    system_isp_write_32( base + 0x11988, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_3_hc_limit_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11988 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc start0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window0 start for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START0_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START0_REG_ADDR 0x1198c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START0_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hc_start0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1198c );
    system_isp_write_32( base + 0x1198c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_3_hc_start0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1198c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc size0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window0 size for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE0_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE0_REG_ADDR 0x11990
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE0_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hc_size0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11990 );
    system_isp_write_32( base + 0x11990, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_3_hc_size0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11990 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc start1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window1 start for HS gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START1_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START1_REG_ADDR 0x11994
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START1_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_START1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hc_start1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11994 );
    system_isp_write_32( base + 0x11994, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_3_hc_start1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11994 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc size1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window1 size for HS gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE1_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE1_REG_ADDR 0x11998
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE1_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_HC_SIZE1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_3_hc_size1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11998 );
    system_isp_write_32( base + 0x11998, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_3_hc_size1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11998 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vc limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// vertical counter limit value (counts: 0,1,...vc_limit-1,vc_limit,0,1,...)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_LIMIT_DEFAULT 65535
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_LIMIT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_LIMIT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_LIMIT_REG_ADDR 0x1199c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_LIMIT_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_LIMIT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_3_vc_limit_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1199c );
    system_isp_write_32( base + 0x1199c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_3_vc_limit_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1199c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vc start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window2 start for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_START_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_START_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_START_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_START_REG_ADDR 0x119a0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_START_OFFSET 0x20
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_START_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_3_vc_start_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119a0 );
    system_isp_write_32( base + 0x119a0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_3_vc_start_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119a0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vc size
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window2 size for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_SIZE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_SIZE_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_SIZE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_SIZE_REG_ADDR 0x119a4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_SIZE_OFFSET 0x24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_VC_SIZE_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_3_vc_size_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119a4 );
    system_isp_write_32( base + 0x119a4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_3_vc_size_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119a4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: frame width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// detected frame width.  Read only value.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_WIDTH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_WIDTH_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_WIDTH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_WIDTH_REG_ADDR 0x119a8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_WIDTH_OFFSET 0x28
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_WIDTH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_input_port_3_frame_width_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119a8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: frame height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// detected frame height.  Read only value.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_HEIGHT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_HEIGHT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_HEIGHT_REG_ADDR 0x119ac
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_HEIGHT_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FRAME_HEIGHT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_input_port_3_frame_height_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119ac ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: freeze config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Used to freeze input port configuration.  Used when multiple register writes are required to change input port configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FREEZE_CONFIG_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FREEZE_CONFIG_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FREEZE_CONFIG_FIELD_OFFSET 23
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FREEZE_CONFIG_REG_ADDR 0x119f0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FREEZE_CONFIG_OFFSET 0x70
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FREEZE_CONFIG_FIELD_MASK 0x800000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FREEZE_CONFIG_NORMAL_OPERATION ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_FREEZE_CONFIG_HOLD_PREVIOUS_INPUT_PORT_CONFIG_STATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_3_freeze_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119f0 );
    system_isp_write_32( base + 0x119f0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_freeze_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: mode request
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Used to stop and start input port.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_REG_ADDR 0x119f0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_OFFSET 0x70
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_FIELD_MASK 0x70000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_SAFE_STOP ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_SAFE_START ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_URGENT_STOP ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_URGENT_START ( 3 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_RESERVED4 ( 4 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_SAFER_START ( 5 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_RESERVED6 ( 6 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_REQUEST_RESERVED7 ( 7 )

// args: data (3-bit)
static __inline void acamera_config_frontend_copy_input_port_3_mode_request_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119f0 );
    system_isp_write_32( base + 0x119f0, ( ( ( uint32_t )( data & 0x7 ) ) << 16 ) | ( curr & 0xfff8ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_3_mode_request_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f0 ) & 0x70000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: mode status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//      Used to monitor input port status:
//      bit 0: 1=running, 0=stopped, bits 1,2-reserved
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_STATUS_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_STATUS_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_STATUS_REG_ADDR 0x119f4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_STATUS_OFFSET 0x74
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_3_MODE_STATUS_FIELD_MASK 0x70000

// args: data (3-bit)
static __inline uint8_t acamera_config_frontend_copy_input_port_3_mode_status_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f4 ) & 0x70000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Group: Input port 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Controls video input port.
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: preset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//       Allows selection of various input port presets for standard sensor inputs.  See TRM for details of available presets.
//        0-14: Frequently used presets.  If using one of available presets, remaining bits in registers 0x100 and 0x104 are not used.
//        15:   Input port configured according to registers in 0x100 and 0x104.  Consult Apical support for special input port requirements.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_PRESET_DEFAULT 2
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_PRESET_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_PRESET_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_PRESET_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_PRESET_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_PRESET_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_input_port_4_preset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_preset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vs_use field
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_USE_FIELD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_USE_FIELD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_USE_FIELD_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_USE_FIELD_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_USE_FIELD_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_USE_FIELD_FIELD_MASK 0x100
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_USE_FIELD_USE_VSYNC_I_PORT_FOR_VERTICAL_SYNC ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_USE_FIELD_USE_FIELD_I_PORT_FOR_VERTICAL_SYNC ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_vs_use_field_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_vs_use_field_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: vs toggle
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_TOGGLE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_TOGGLE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_TOGGLE_FIELD_OFFSET 9
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_TOGGLE_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_TOGGLE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_TOGGLE_FIELD_MASK 0x200
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_TOGGLE_VSYNC_IS_PULSETYPE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_TOGGLE_VSYNC_IS_TOGGLETYPE_FIELD_SIGNAL ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_vs_toggle_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_vs_toggle_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: vs polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_FIELD_OFFSET 10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_FIELD_MASK 0x400
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_HORIZONTAL_COUNTER_RESET_ON_RISING_EDGE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_HORIZONTAL_COUNTER_RESET_ON_FALLING_EDGE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_vs_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_vs_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: vs_polarity acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_ACL_FIELD_OFFSET 11
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_ACL_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_ACL_FIELD_MASK 0x800
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_ACL_DONT_INVERT_POLARITY_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VS_POLARITY_ACL_INVERT_POLARITY_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_vs_polarity_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_vs_polarity_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_use acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_USE_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_USE_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_USE_ACL_FIELD_OFFSET 12
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_USE_ACL_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_USE_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_USE_ACL_FIELD_MASK 0x1000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_USE_ACL_USE_HSYNC_I_PORT_FOR_ACTIVELINE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_USE_ACL_USE_ACL_I_PORT_FOR_ACTIVELINE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hs_use_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_hs_use_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: vc_c select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_C_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_C_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_C_SELECT_FIELD_OFFSET 14
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_C_SELECT_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_C_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_C_SELECT_FIELD_MASK 0x4000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_C_SELECT_VERTICAL_COUNTER_COUNTS_ON_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_C_SELECT_VERTICAL_COUNTER_COUNTS_ON_HORIZONTAL_COUNTER_OVERFLOW_OR_RESET ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_vc_c_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 14 ) | ( curr & 0xffffbfff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_vc_c_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x4000 ) >> 14 );
}
// ------------------------------------------------------------------------------ //
// Register: vc_r select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_R_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_R_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_R_SELECT_FIELD_OFFSET 15
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_R_SELECT_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_R_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_R_SELECT_FIELD_MASK 0x8000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_EDGE_OF_VS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_R_SELECT_VERTICAL_COUNTER_IS_RESET_AFTER_TIMEOUT_ON_HS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_vc_r_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 15 ) | ( curr & 0xffff7fff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_vc_r_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x8000 ) >> 15 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_xor vs
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_XOR_VS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_XOR_VS_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_XOR_VS_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_XOR_VS_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_XOR_VS_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_XOR_VS_FIELD_MASK 0x10000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_XOR_VS_NORMAL_MODE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_XOR_VS_HVALID__HSYNC_XOR_VSYNC ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hs_xor_vs_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_hs_xor_vs_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: hs polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_FIELD_OFFSET 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_FIELD_MASK 0x20000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_DONT_INVERT_POLARITY_OF_HS_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_INVERT_POLARITY_OF_HS_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hs_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_hs_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_polarity acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_ACL_FIELD_OFFSET 18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_ACL_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_ACL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_ACL_FIELD_MASK 0x40000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_ACL_DONT_INVERT_POLARITY_OF_HS_FOR_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_ACL_INVERT_POLARITY_OF_HS_FOR_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hs_polarity_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_hs_polarity_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_polarity hs
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_HS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_HS_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_HS_FIELD_OFFSET 19
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_HS_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_HS_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_HS_FIELD_MASK 0x80000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_HS_HORIZONTAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_HS_HORIZONTAL_COUNTER_IS_RESET_ON_VSYNC_EG_WHEN_HSYNC_IS_NOT_AVAILABLE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hs_polarity_hs_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_hs_polarity_hs_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: hs_polarity vc
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_VC_DEFAULT 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_VC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_VC_FIELD_OFFSET 20
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_VC_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_VC_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_VC_FIELD_MASK 0x100000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_VC_VERTICAL_COUNTER_INCREMENTS_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HS_POLARITY_VC_VERTICAL_COUNTER_INCREMENTS_ON_FALLING_EDGE_OF_HS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hs_polarity_vc_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 20 ) | ( curr & 0xffefffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_hs_polarity_vc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x100000 ) >> 20 );
}
// ------------------------------------------------------------------------------ //
// Register: hc_r select
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_R_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_R_SELECT_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_R_SELECT_FIELD_OFFSET 23
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_R_SELECT_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_R_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_R_SELECT_FIELD_MASK 0x800000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_HS ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_R_SELECT_VERTICAL_COUNTER_IS_RESET_ON_RISING_EDGE_OF_VS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hc_r_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 23 ) | ( curr & 0xff7fffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_hc_r_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x800000 ) >> 23 );
}
// ------------------------------------------------------------------------------ //
// Register: acl polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACL_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACL_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACL_POLARITY_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACL_POLARITY_REG_ADDR 0x119c0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACL_POLARITY_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACL_POLARITY_FIELD_MASK 0x1000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACL_POLARITY_DONT_INVERT_ACL_I_FOR_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACL_POLARITY_INVERT_ACL_I_FOR_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_acl_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c0 );
    system_isp_write_32( base + 0x119c0, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_acl_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c0 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: field polarity
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_POLARITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_POLARITY_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_POLARITY_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_POLARITY_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_POLARITY_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_POLARITY_FIELD_MASK 0x1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_POLARITY_DONT_INVERT_FIELD_I_FOR_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_POLARITY_INVERT_FIELD_I_FOR_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_field_polarity_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_field_polarity_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: field toggle
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_TOGGLE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_TOGGLE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_TOGGLE_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_TOGGLE_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_TOGGLE_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_TOGGLE_FIELD_MASK 0x2
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_TOGGLE_FIELD_IS_PULSETYPE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_TOGGLE_FIELD_IS_TOGGLETYPE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_field_toggle_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_field_toggle_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg window0
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW0_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW0_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW0_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW0_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW0_FIELD_MASK 0x100
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW0_EXCLUDE_WINDOW0_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW0_INCLUDE_WINDOW0_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_aclg_window0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_aclg_window0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg hsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_HSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_HSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_HSYNC_FIELD_OFFSET 9
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_HSYNC_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_HSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_HSYNC_FIELD_MASK 0x200
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_HSYNC_EXCLUDE_HSYNC_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_HSYNC_INCLUDE_HSYNC_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_aclg_hsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 9 ) | ( curr & 0xfffffdff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_aclg_hsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x200 ) >> 9 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW2_FIELD_OFFSET 10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW2_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW2_FIELD_MASK 0x400
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_aclg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 10 ) | ( curr & 0xfffffbff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_aclg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x400 ) >> 10 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg acl
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_ACL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_ACL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_ACL_FIELD_OFFSET 11
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_ACL_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_ACL_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_ACL_FIELD_MASK 0x800
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_ACL_EXCLUDE_ACL_I_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_ACL_INCLUDE_ACL_I_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_aclg_acl_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 11 ) | ( curr & 0xfffff7ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_aclg_acl_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x800 ) >> 11 );
}
// ------------------------------------------------------------------------------ //
// Register: aclg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_VSYNC_FIELD_OFFSET 12
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_VSYNC_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_VSYNC_FIELD_MASK 0x1000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_ACL_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_ACLG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_ACL_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_aclg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 12 ) | ( curr & 0xffffefff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_aclg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x1000 ) >> 12 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg window1
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW1_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW1_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW1_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW1_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW1_FIELD_MASK 0x10000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW1_EXCLUDE_WINDOW1_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW1_INCLUDE_WINDOW1_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hsg_window1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_hsg_window1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg hsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_HSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_HSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_HSYNC_FIELD_OFFSET 17
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_HSYNC_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_HSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_HSYNC_FIELD_MASK 0x20000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_HSYNC_EXCLUDE_HSYNC_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_HSYNC_INCLUDE_HSYNC_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hsg_hsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_hsg_hsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_VSYNC_FIELD_OFFSET 18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_VSYNC_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_VSYNC_FIELD_MASK 0x40000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_HS_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hsg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_hsg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: hsg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW2_FIELD_OFFSET 19
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW2_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW2_FIELD_MASK 0x80000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_HS_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HSG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_HS_GATE_MASK_OUT_SPURIOUS_HS_DURING_BLANK ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hsg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_hsg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: fieldg vsync
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_VSYNC_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_VSYNC_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_VSYNC_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_VSYNC_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_VSYNC_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_VSYNC_FIELD_MASK 0x1000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_VSYNC_EXCLUDE_VSYNC_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_VSYNC_INCLUDE_VSYNC_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_fieldg_vsync_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_fieldg_vsync_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: fieldg window2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_WINDOW2_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_WINDOW2_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_WINDOW2_FIELD_OFFSET 25
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_WINDOW2_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_WINDOW2_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_WINDOW2_FIELD_MASK 0x2000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_WINDOW2_EXCLUDE_WINDOW2_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_WINDOW2_INCLUDE_WINDOW2_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_fieldg_window2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 25 ) | ( curr & 0xfdffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_fieldg_window2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x2000000 ) >> 25 );
}
// ------------------------------------------------------------------------------ //
// Register: fieldg field
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_FIELD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_FIELD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_FIELD_FIELD_OFFSET 26
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_FIELD_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_FIELD_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_FIELD_FIELD_MASK 0x4000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_FIELD_EXCLUDE_FIELD_I_SIGNAL_IN_FIELD_GATE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELDG_FIELD_INCLUDE_FIELD_I_SIGNAL_IN_FIELD_GATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_fieldg_field_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 26 ) | ( curr & 0xfbffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_fieldg_field_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x4000000 ) >> 26 );
}
// ------------------------------------------------------------------------------ //
// Register: field mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_MODE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_MODE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_MODE_FIELD_OFFSET 27
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_MODE_REG_ADDR 0x119c4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_MODE_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_MODE_FIELD_MASK 0x8000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_MODE_PULSE_FIELD ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FIELD_MODE_TOGGLE_FIELD ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c4 );
    system_isp_write_32( base + 0x119c4, ( ( ( uint32_t )( data & 0x1 ) ) << 27 ) | ( curr & 0xf7ffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119c4 ) & 0x8000000 ) >> 27 );
}
// ------------------------------------------------------------------------------ //
// Register: hc limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// horizontal counter limit value (counts: 0,1,...hc_limit-1,hc_limit,0,1,...)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_LIMIT_DEFAULT 65535
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_LIMIT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_LIMIT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_LIMIT_REG_ADDR 0x119c8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_LIMIT_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_LIMIT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hc_limit_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119c8 );
    system_isp_write_32( base + 0x119c8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_4_hc_limit_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119c8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc start0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window0 start for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START0_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START0_REG_ADDR 0x119cc
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START0_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hc_start0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119cc );
    system_isp_write_32( base + 0x119cc, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_4_hc_start0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119cc ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc size0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window0 size for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE0_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE0_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE0_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE0_REG_ADDR 0x119d0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE0_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE0_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hc_size0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119d0 );
    system_isp_write_32( base + 0x119d0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_4_hc_size0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119d0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc start1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window1 start for HS gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START1_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START1_REG_ADDR 0x119d4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START1_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_START1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hc_start1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119d4 );
    system_isp_write_32( base + 0x119d4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_4_hc_start1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119d4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: hc size1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window1 size for HS gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE1_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE1_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE1_REG_ADDR 0x119d8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE1_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_HC_SIZE1_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_4_hc_size1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119d8 );
    system_isp_write_32( base + 0x119d8, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_4_hc_size1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119d8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vc limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// vertical counter limit value (counts: 0,1,...vc_limit-1,vc_limit,0,1,...)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_LIMIT_DEFAULT 65535
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_LIMIT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_LIMIT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_LIMIT_REG_ADDR 0x119dc
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_LIMIT_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_LIMIT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_4_vc_limit_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119dc );
    system_isp_write_32( base + 0x119dc, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_4_vc_limit_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119dc ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vc start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window2 start for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_START_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_START_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_START_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_START_REG_ADDR 0x119e0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_START_OFFSET 0x20
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_START_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_4_vc_start_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119e0 );
    system_isp_write_32( base + 0x119e0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_4_vc_start_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119e0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: vc size
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// window2 size for ACL gate.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_SIZE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_SIZE_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_SIZE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_SIZE_REG_ADDR 0x119e4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_SIZE_OFFSET 0x24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_VC_SIZE_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_input_port_4_vc_size_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119e4 );
    system_isp_write_32( base + 0x119e4, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_input_port_4_vc_size_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119e4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: frame width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// detected frame width.  Read only value.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_WIDTH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_WIDTH_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_WIDTH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_WIDTH_REG_ADDR 0x119e8
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_WIDTH_OFFSET 0x28
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_WIDTH_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_input_port_4_frame_width_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119e8 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: frame height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// detected frame height.  Read only value.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_HEIGHT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_HEIGHT_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_HEIGHT_REG_ADDR 0x119ec
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_HEIGHT_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FRAME_HEIGHT_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_input_port_4_frame_height_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x119ec ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: freeze config
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Used to freeze input port configuration.  Used when multiple register writes are required to change input port configuration.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FREEZE_CONFIG_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FREEZE_CONFIG_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FREEZE_CONFIG_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FREEZE_CONFIG_REG_ADDR 0x119f0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FREEZE_CONFIG_OFFSET 0x30
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FREEZE_CONFIG_FIELD_MASK 0x80000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FREEZE_CONFIG_NORMAL_OPERATION ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_FREEZE_CONFIG_HOLD_PREVIOUS_INPUT_PORT_CONFIG_STATE ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_input_port_4_freeze_config_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119f0 );
    system_isp_write_32( base + 0x119f0, ( ( ( uint32_t )( data & 0x1 ) ) << 31 ) | ( curr & 0x7fffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_freeze_config_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f0 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: mode request
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Used to stop and start input port.  See TRM for further details.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_REG_ADDR 0x119f0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_OFFSET 0x30
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_FIELD_MASK 0x7000000
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_SAFE_STOP ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_SAFE_START ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_URGENT_STOP ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_URGENT_START ( 3 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_RESERVED4 ( 4 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_SAFER_START ( 5 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_RESERVED6 ( 6 )
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_REQUEST_RESERVED7 ( 7 )

// args: data (3-bit)
static __inline void acamera_config_frontend_copy_input_port_4_mode_request_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x119f0 );
    system_isp_write_32( base + 0x119f0, ( ( ( uint32_t )( data & 0x7 ) ) << 24 ) | ( curr & 0xf8ffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_input_port_4_mode_request_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f0 ) & 0x7000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: mode status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//      Used to monitor input port status:
//      bit 0: 1=running, 0=stopped, bits 1,2-reserved
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_STATUS_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_STATUS_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_STATUS_REG_ADDR 0x119f4
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_STATUS_OFFSET 0x34
#define ACAMERA_CONFIG_FRONTEND_COPY_INPUT_PORT_4_MODE_STATUS_FIELD_MASK 0x7000000

// args: data (3-bit)
static __inline uint8_t acamera_config_frontend_copy_input_port_4_mode_status_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x119f4 ) & 0x7000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Stats 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        Group Frame Stats n correspond frame geometry statistics at the MCFE input n
//
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: stats reset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      1 = Clear the accumulators.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_RESET_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_RESET_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_RESET_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_RESET_REG_ADDR 0x11b80
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_RESET_OFFSET 0x180
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_RESET_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_stats_1_stats_reset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11b80 );
    system_isp_write_32( base + 0x11b80, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_stats_1_stats_reset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11b80 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: stats hold
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      1 = Stop updating the status registers. The internal accumulators will still run.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_HOLD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_HOLD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_HOLD_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_HOLD_REG_ADDR 0x11b84
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_HOLD_OFFSET 0x184
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_STATS_HOLD_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_stats_1_stats_hold_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11b84 );
    system_isp_write_32( base + 0x11b84, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_stats_1_stats_hold_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11b84 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: active width min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Minimal value of active width (in pixels) since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MIN_REG_ADDR 0x11a10
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MIN_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_active_width_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a10 );
}
// ------------------------------------------------------------------------------ //
// Register: active width max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Maximal value of active width (in pixels) since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MAX_REG_ADDR 0x11a14
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MAX_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_active_width_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a14 );
}
// ------------------------------------------------------------------------------ //
// Register: active width sum
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Sum of line active widths (in pixels) since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_SUM_REG_ADDR 0x11a18
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_SUM_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_active_width_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a18 );
}
// ------------------------------------------------------------------------------ //
// Register: active width num
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Total number of active lines since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_NUM_REG_ADDR 0x11a1c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_NUM_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_WIDTH_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_active_width_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a1c );
}
// ------------------------------------------------------------------------------ //
// Register: active height min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Minimal value of active height (in lines) since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MIN_REG_ADDR 0x11a20
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MIN_OFFSET 0x20
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_active_height_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a20 );
}
// ------------------------------------------------------------------------------ //
// Register: active height max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Maximal value of active height (in lines) since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MAX_REG_ADDR 0x11a24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MAX_OFFSET 0x24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_active_height_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a24 );
}
// ------------------------------------------------------------------------------ //
// Register: active height sum
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Sum of line active heights (in lines) since module reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_SUM_REG_ADDR 0x11a28
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_SUM_OFFSET 0x28
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_active_height_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a28 );
}
// ------------------------------------------------------------------------------ //
// Register: active height num
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Total number of active frames since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_NUM_REG_ADDR 0x11a2c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_NUM_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_ACTIVE_HEIGHT_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_active_height_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a2c );
}
// ------------------------------------------------------------------------------ //
// Register: hblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Minimal value of horizontal blanking (in pixels) since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MIN_REG_ADDR 0x11a30
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MIN_OFFSET 0x30
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a30 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Maximal value of horizontal blanking (in pixels) since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MAX_REG_ADDR 0x11a34
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MAX_OFFSET 0x34
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a34 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank sum
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      TSum of line horizontal blankings (in pixels) since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_SUM_REG_ADDR 0x11a38
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_SUM_OFFSET 0x38
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_hblank_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a38 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank num
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Total number of horizontal blankings since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_NUM_REG_ADDR 0x11a3c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_NUM_OFFSET 0x3c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_HBLANK_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_hblank_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a3c );
}
// ------------------------------------------------------------------------------ //
// Register: vblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Minimal value of vertical blanking (in pixels) since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MIN_REG_ADDR 0x11a40
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MIN_OFFSET 0x40
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a40 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Maximal value of vertical blanking (in pixels) since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MAX_REG_ADDR 0x11a44
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MAX_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a44 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank sum
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Sum of line vertical blankings (in pixels) since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_SUM_REG_ADDR 0x11a48
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_SUM_OFFSET 0x48
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_vblank_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a48 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank num
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//	      Total number of vertical blankings since stats reset.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_NUM_REG_ADDR 0x11a4c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_NUM_OFFSET 0x4c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_1_VBLANK_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_1_vblank_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a4c );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Stats 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        See Frame Stats 1 for a description of these registers.
//
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: stats reset
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_RESET_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_RESET_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_RESET_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_RESET_REG_ADDR 0x11b80
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_RESET_OFFSET 0x100
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_RESET_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_stats_2_stats_reset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11b80 );
    system_isp_write_32( base + 0x11b80, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_stats_2_stats_reset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11b80 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: stats hold
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_HOLD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_HOLD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_HOLD_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_HOLD_REG_ADDR 0x11b84
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_HOLD_OFFSET 0x104
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_STATS_HOLD_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_stats_2_stats_hold_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11b84 );
    system_isp_write_32( base + 0x11b84, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_stats_2_stats_hold_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11b84 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: active width min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MIN_REG_ADDR 0x11a90
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MIN_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_active_width_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a90 );
}
// ------------------------------------------------------------------------------ //
// Register: active width max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MAX_REG_ADDR 0x11a94
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MAX_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_active_width_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a94 );
}
// ------------------------------------------------------------------------------ //
// Register: active width sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_SUM_REG_ADDR 0x11a98
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_SUM_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_active_width_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a98 );
}
// ------------------------------------------------------------------------------ //
// Register: active width num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_NUM_REG_ADDR 0x11a9c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_NUM_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_WIDTH_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_active_width_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a9c );
}
// ------------------------------------------------------------------------------ //
// Register: active height min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MIN_REG_ADDR 0x11aa0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MIN_OFFSET 0x20
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_active_height_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11aa0 );
}
// ------------------------------------------------------------------------------ //
// Register: active height max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MAX_REG_ADDR 0x11aa4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MAX_OFFSET 0x24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_active_height_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11aa4 );
}
// ------------------------------------------------------------------------------ //
// Register: active height sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_SUM_REG_ADDR 0x11aa8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_SUM_OFFSET 0x28
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_active_height_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11aa8 );
}
// ------------------------------------------------------------------------------ //
// Register: active height num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_NUM_REG_ADDR 0x11aac
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_NUM_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_ACTIVE_HEIGHT_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_active_height_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11aac );
}
// ------------------------------------------------------------------------------ //
// Register: hblank min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MIN_REG_ADDR 0x11ab0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MIN_OFFSET 0x30
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ab0 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MAX_REG_ADDR 0x11ab4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MAX_OFFSET 0x34
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ab4 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_SUM_REG_ADDR 0x11ab8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_SUM_OFFSET 0x38
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_hblank_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ab8 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_NUM_REG_ADDR 0x11abc
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_NUM_OFFSET 0x3c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_HBLANK_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_hblank_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11abc );
}
// ------------------------------------------------------------------------------ //
// Register: vblank min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MIN_REG_ADDR 0x11ac0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MIN_OFFSET 0x40
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ac0 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MAX_REG_ADDR 0x11ac4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MAX_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ac4 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_SUM_REG_ADDR 0x11ac8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_SUM_OFFSET 0x48
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_vblank_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ac8 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_NUM_REG_ADDR 0x11acc
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_NUM_OFFSET 0x4c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_2_VBLANK_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_2_vblank_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11acc );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Stats 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        See Frame Stats 1 for a description of these registers.
//
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: stats reset
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_RESET_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_RESET_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_RESET_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_RESET_REG_ADDR 0x11b80
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_RESET_OFFSET 0x80
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_RESET_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_stats_3_stats_reset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11b80 );
    system_isp_write_32( base + 0x11b80, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_stats_3_stats_reset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11b80 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: stats hold
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_HOLD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_HOLD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_HOLD_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_HOLD_REG_ADDR 0x11b84
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_HOLD_OFFSET 0x84
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_STATS_HOLD_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_stats_3_stats_hold_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11b84 );
    system_isp_write_32( base + 0x11b84, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_stats_3_stats_hold_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11b84 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: active width min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MIN_REG_ADDR 0x11b10
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MIN_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_active_width_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b10 );
}
// ------------------------------------------------------------------------------ //
// Register: active width max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MAX_REG_ADDR 0x11b14
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MAX_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_active_width_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b14 );
}
// ------------------------------------------------------------------------------ //
// Register: active width sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_SUM_REG_ADDR 0x11b18
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_SUM_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_active_width_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b18 );
}
// ------------------------------------------------------------------------------ //
// Register: active width num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_NUM_REG_ADDR 0x11b1c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_NUM_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_WIDTH_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_active_width_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b1c );
}
// ------------------------------------------------------------------------------ //
// Register: active height min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MIN_REG_ADDR 0x11b20
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MIN_OFFSET 0x20
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_active_height_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b20 );
}
// ------------------------------------------------------------------------------ //
// Register: active height max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MAX_REG_ADDR 0x11b24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MAX_OFFSET 0x24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_active_height_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b24 );
}
// ------------------------------------------------------------------------------ //
// Register: active height sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_SUM_REG_ADDR 0x11b28
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_SUM_OFFSET 0x28
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_active_height_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b28 );
}
// ------------------------------------------------------------------------------ //
// Register: active height num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_NUM_REG_ADDR 0x11b2c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_NUM_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_ACTIVE_HEIGHT_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_active_height_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b2c );
}
// ------------------------------------------------------------------------------ //
// Register: hblank min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MIN_REG_ADDR 0x11b30
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MIN_OFFSET 0x30
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b30 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MAX_REG_ADDR 0x11b34
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MAX_OFFSET 0x34
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b34 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_SUM_REG_ADDR 0x11b38
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_SUM_OFFSET 0x38
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_hblank_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b38 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_NUM_REG_ADDR 0x11b3c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_NUM_OFFSET 0x3c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_HBLANK_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_hblank_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b3c );
}
// ------------------------------------------------------------------------------ //
// Register: vblank min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MIN_REG_ADDR 0x11b40
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MIN_OFFSET 0x40
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b40 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MAX_REG_ADDR 0x11b44
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MAX_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b44 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_SUM_REG_ADDR 0x11b48
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_SUM_OFFSET 0x48
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_vblank_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b48 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_NUM_REG_ADDR 0x11b4c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_NUM_OFFSET 0x4c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_3_VBLANK_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_3_vblank_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b4c );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Stats 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//        See Frame Stats 1 for a description of these registers.
//
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: stats reset
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_RESET_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_RESET_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_RESET_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_RESET_REG_ADDR 0x11b80
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_RESET_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_RESET_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_stats_4_stats_reset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11b80 );
    system_isp_write_32( base + 0x11b80, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_stats_4_stats_reset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11b80 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: stats hold
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_HOLD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_HOLD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_HOLD_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_HOLD_REG_ADDR 0x11b84
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_HOLD_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_STATS_HOLD_FIELD_MASK 0x1000000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_stats_4_stats_hold_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11b84 );
    system_isp_write_32( base + 0x11b84, ( ( ( uint32_t )( data & 0x1 ) ) << 24 ) | ( curr & 0xfeffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_stats_4_stats_hold_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11b84 ) & 0x1000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: active width min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MIN_REG_ADDR 0x11b90
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MIN_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_active_width_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b90 );
}
// ------------------------------------------------------------------------------ //
// Register: active width max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MAX_REG_ADDR 0x11b94
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MAX_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_active_width_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b94 );
}
// ------------------------------------------------------------------------------ //
// Register: active width sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_SUM_REG_ADDR 0x11b98
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_SUM_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_active_width_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b98 );
}
// ------------------------------------------------------------------------------ //
// Register: active width num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_NUM_REG_ADDR 0x11b9c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_NUM_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_WIDTH_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_active_width_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11b9c );
}
// ------------------------------------------------------------------------------ //
// Register: active height min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MIN_REG_ADDR 0x11ba0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MIN_OFFSET 0x20
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_active_height_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ba0 );
}
// ------------------------------------------------------------------------------ //
// Register: active height max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MAX_REG_ADDR 0x11ba4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MAX_OFFSET 0x24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_active_height_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ba4 );
}
// ------------------------------------------------------------------------------ //
// Register: active height sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_SUM_REG_ADDR 0x11ba8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_SUM_OFFSET 0x28
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_active_height_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ba8 );
}
// ------------------------------------------------------------------------------ //
// Register: active height num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_NUM_REG_ADDR 0x11bac
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_NUM_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_ACTIVE_HEIGHT_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_active_height_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11bac );
}
// ------------------------------------------------------------------------------ //
// Register: hblank min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MIN_REG_ADDR 0x11bb0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MIN_OFFSET 0x30
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11bb0 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MAX_REG_ADDR 0x11bb4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MAX_OFFSET 0x34
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11bb4 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_SUM_REG_ADDR 0x11bb8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_SUM_OFFSET 0x38
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_hblank_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11bb8 );
}
// ------------------------------------------------------------------------------ //
// Register: hblank num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_NUM_REG_ADDR 0x11bbc
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_NUM_OFFSET 0x3c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_HBLANK_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_hblank_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11bbc );
}
// ------------------------------------------------------------------------------ //
// Register: vblank min
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MIN_REG_ADDR 0x11bc0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MIN_OFFSET 0x40
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11bc0 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank max
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MAX_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MAX_REG_ADDR 0x11bc4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MAX_OFFSET 0x44
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11bc4 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank sum
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_SUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_SUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_SUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_SUM_REG_ADDR 0x11bc8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_SUM_OFFSET 0x48
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_SUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_vblank_sum_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11bc8 );
}
// ------------------------------------------------------------------------------ //
// Register: vblank num
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_NUM_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_NUM_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_NUM_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_NUM_REG_ADDR 0x11bcc
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_NUM_OFFSET 0x4c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_STATS_4_VBLANK_NUM_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_stats_4_vblank_num_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11bcc );
}
// ------------------------------------------------------------------------------ //
// Group: Stream crossbar
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Stream1 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Select the mode for the MCFE input 1
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SELECT_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SELECT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SELECT_REG_ADDR 0x11be0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SELECT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SELECT_FIELD_MASK 0x3
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SELECT_OFF ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SELECT_SELECT_DATA_FROM_ONE_INPUT ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SELECT_SELECT_DATA_FROM_ONE_INPUT_AND_FILTER_BY_ID ( 2 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream1_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11be0 );
    system_isp_write_32( base + 0x11be0, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream1_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11be0 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Stream1 source
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Select the stream source for the MCFE input 1 (when Stream 1 select is 1 or 2)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SOURCE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SOURCE_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SOURCE_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SOURCE_REG_ADDR 0x11be0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SOURCE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SOURCE_FIELD_MASK 0x300
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SOURCE_VIDEO_PORT_1 ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SOURCE_VIDEO_PORT_2 ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SOURCE_VIDEO_PORT_3 ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_SOURCE_VIDEO_PORT_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream1_source_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11be0 );
    system_isp_write_32( base + 0x11be0, ( ( ( uint32_t )( data & 0x3 ) ) << 8 ) | ( curr & 0xfffffcff ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream1_source_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11be0 ) & 0x300 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Stream1 id
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Stream ID to match for the MCFE input 1 (when Stream 1 select is 2)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_ID_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_ID_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_ID_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_ID_REG_ADDR 0x11be0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_ID_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM1_ID_FIELD_MASK 0x70000

// args: data (3-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream1_id_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11be0 );
    system_isp_write_32( base + 0x11be0, ( ( ( uint32_t )( data & 0x7 ) ) << 16 ) | ( curr & 0xfff8ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream1_id_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11be0 ) & 0x70000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Stream2 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Select the mode for the MCFE input 2
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SELECT_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SELECT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SELECT_REG_ADDR 0x11be4
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SELECT_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SELECT_FIELD_MASK 0x3
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SELECT_OFF ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SELECT_SELECT_DATA_FROM_ONE_INPUT ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SELECT_SELECT_DATA_FROM_ONE_INPUT_AND_FILTER_BY_ID ( 2 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream2_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11be4 );
    system_isp_write_32( base + 0x11be4, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream2_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11be4 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Stream2 source
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Select the stream source for the MCFE input 2 (when Stream 2 select is 1 or 2)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SOURCE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SOURCE_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SOURCE_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SOURCE_REG_ADDR 0x11be4
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SOURCE_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SOURCE_FIELD_MASK 0x300
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SOURCE_VIDEO_PORT_1 ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SOURCE_VIDEO_PORT_2 ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SOURCE_VIDEO_PORT_3 ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_SOURCE_VIDEO_PORT_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream2_source_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11be4 );
    system_isp_write_32( base + 0x11be4, ( ( ( uint32_t )( data & 0x3 ) ) << 8 ) | ( curr & 0xfffffcff ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream2_source_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11be4 ) & 0x300 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Stream2 id
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Stream ID to match for the MCFE input 2 (when Stream 2 select is 2)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_ID_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_ID_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_ID_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_ID_REG_ADDR 0x11be4
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_ID_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM2_ID_FIELD_MASK 0x70000

// args: data (3-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream2_id_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11be4 );
    system_isp_write_32( base + 0x11be4, ( ( ( uint32_t )( data & 0x7 ) ) << 16 ) | ( curr & 0xfff8ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream2_id_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11be4 ) & 0x70000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Stream3 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Select the mode for the MCFE input 3
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SELECT_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SELECT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SELECT_REG_ADDR 0x11be8
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SELECT_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SELECT_FIELD_MASK 0x3
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SELECT_OFF ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SELECT_SELECT_DATA_FROM_ONE_INPUT ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SELECT_SELECT_DATA_FROM_ONE_INPUT_AND_FILTER_BY_ID ( 2 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream3_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11be8 );
    system_isp_write_32( base + 0x11be8, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream3_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11be8 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Stream3 source
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Select the stream source for the MCFE input 3 (when Stream 3 select is 1 or 2)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SOURCE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SOURCE_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SOURCE_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SOURCE_REG_ADDR 0x11be8
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SOURCE_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SOURCE_FIELD_MASK 0x300
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SOURCE_VIDEO_PORT_1 ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SOURCE_VIDEO_PORT_2 ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SOURCE_VIDEO_PORT_3 ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_SOURCE_VIDEO_PORT_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream3_source_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11be8 );
    system_isp_write_32( base + 0x11be8, ( ( ( uint32_t )( data & 0x3 ) ) << 8 ) | ( curr & 0xfffffcff ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream3_source_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11be8 ) & 0x300 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Stream3 id
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Stream ID to match for the MCFE input 3 (when Stream 3 select is 2)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_ID_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_ID_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_ID_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_ID_REG_ADDR 0x11be8
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_ID_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM3_ID_FIELD_MASK 0x70000

// args: data (3-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream3_id_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11be8 );
    system_isp_write_32( base + 0x11be8, ( ( ( uint32_t )( data & 0x7 ) ) << 16 ) | ( curr & 0xfff8ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream3_id_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11be8 ) & 0x70000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Stream4 select
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Select the mode for the MCFE input 4
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SELECT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SELECT_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SELECT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SELECT_REG_ADDR 0x11bec
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SELECT_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SELECT_FIELD_MASK 0x3
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SELECT_OFF ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SELECT_SELECT_DATA_FROM_ONE_INPUT ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SELECT_SELECT_DATA_FROM_ONE_INPUT_AND_FILTER_BY_ID ( 2 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream4_select_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11bec );
    system_isp_write_32( base + 0x11bec, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream4_select_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11bec ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Stream4 source
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Select the stream source for the MCFE input 4 (when Stream 4 select is 1 or 2)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SOURCE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SOURCE_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SOURCE_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SOURCE_REG_ADDR 0x11bec
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SOURCE_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SOURCE_FIELD_MASK 0x300
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SOURCE_VIDEO_PORT_1 ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SOURCE_VIDEO_PORT_2 ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SOURCE_VIDEO_PORT_3 ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_SOURCE_VIDEO_PORT_4 ( 3 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream4_source_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11bec );
    system_isp_write_32( base + 0x11bec, ( ( ( uint32_t )( data & 0x3 ) ) << 8 ) | ( curr & 0xfffffcff ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream4_source_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11bec ) & 0x300 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Stream4 id
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Stream ID to match for the MCFE input 4 (when Stream 4 select is 2)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_ID_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_ID_DATASIZE 3
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_ID_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_ID_REG_ADDR 0x11bec
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_ID_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_STREAM_CROSSBAR_STREAM4_ID_FIELD_MASK 0x70000

// args: data (3-bit)
static __inline void acamera_config_frontend_copy_stream_crossbar_stream4_id_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11bec );
    system_isp_write_32( base + 0x11bec, ( ( ( uint32_t )( data & 0x7 ) ) << 16 ) | ( curr & 0xfff8ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_stream_crossbar_stream4_id_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11bec ) & 0x70000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Group: Multichannel frontend
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: FIFO In configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		      Reorders the 4 FIFOs between MCFE input and frame writers.
//            00 = one FIFO block on each channel
//            01 = channels 1,2 have one FIFO block, channel 3 has 2 FIFOs, channel 4 passed through
//            10 = channels 1,2 have 2 FIFO blocks each, channels 3,4 are passed through
//            11 = channel 1 has 1 FIFO block, channel 2 has 3 FIFO blocks, channels 3,4 are passed through
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_IN_CONFIGURATION_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_IN_CONFIGURATION_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_IN_CONFIGURATION_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_IN_CONFIGURATION_REG_ADDR 0x11c00
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_IN_CONFIGURATION_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_IN_CONFIGURATION_FIELD_MASK 0x3

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_mcfe_fifo_in_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c00 );
    system_isp_write_32( base + 0x11c00, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_fifo_in_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c00 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: FIFO Out configuration
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		      Reorders the 4 FIFOs between frame readers and MCFE outputs.
//            00 = one FIFO block on each channel
//            01 = channels 1,2 have one FIFO block, channel 3 has 2 FIFOs, channel 4 passed through
//            10 = channels 1,2 have 2 FIFO blocks each, channels 3,4 are passed through
//            11 = channel 1 has 1 FIFO block, channel 2 has 3 FIFO blocks, channels 3,4 are passed through
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_OUT_CONFIGURATION_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_OUT_CONFIGURATION_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_OUT_CONFIGURATION_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_OUT_CONFIGURATION_REG_ADDR 0x11c00
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_OUT_CONFIGURATION_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO_OUT_CONFIGURATION_FIELD_MASK 0x300

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_mcfe_fifo_out_configuration_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c00 );
    system_isp_write_32( base + 0x11c00, ( ( ( uint32_t )( data & 0x3 ) ) << 8 ) | ( curr & 0xfffffcff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_fifo_out_configuration_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c00 ) & 0x300 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable flow control
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Enables pipieline flow control to prevent FIFO underflow. If any of FIFOs feeding the pipeline is drains below the respective low_watermark value, the pipeline is stopped until new data arrives.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_ENABLE_FLOW_CONTROL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_ENABLE_FLOW_CONTROL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_ENABLE_FLOW_CONTROL_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_ENABLE_FLOW_CONTROL_REG_ADDR 0x11c00
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_ENABLE_FLOW_CONTROL_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_ENABLE_FLOW_CONTROL_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_mcfe_enable_flow_control_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c00 );
    system_isp_write_32( base + 0x11c00, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_enable_flow_control_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c00 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: FIFO1 low watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		  When several channels are aligned at the MCFE output the line starts when FIFOs are filled above low watermark on all the synchronized channels.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_LOW_WATERMARK_DEFAULT 22
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_LOW_WATERMARK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_LOW_WATERMARK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_LOW_WATERMARK_REG_ADDR 0x11c04
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_LOW_WATERMARK_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_LOW_WATERMARK_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_fifo1_low_watermark_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c04 );
    system_isp_write_32( base + 0x11c04, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_fifo1_low_watermark_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11c04 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: FIFO1 high watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		  When several channels are aligned at the MCFE output the line starts when any of the FIFOs are filled above high watermark. This take piority over the low watermark check.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_HIGH_WATERMARK_DEFAULT 2032
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_HIGH_WATERMARK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_HIGH_WATERMARK_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_HIGH_WATERMARK_REG_ADDR 0x11c04
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_HIGH_WATERMARK_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO1_HIGH_WATERMARK_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_fifo1_high_watermark_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c04 );
    system_isp_write_32( base + 0x11c04, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_fifo1_high_watermark_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11c04 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: FIFO2 low watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		  See description for FIFO1 low watermark
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_LOW_WATERMARK_DEFAULT 22
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_LOW_WATERMARK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_LOW_WATERMARK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_LOW_WATERMARK_REG_ADDR 0x11c08
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_LOW_WATERMARK_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_LOW_WATERMARK_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_fifo2_low_watermark_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c08 );
    system_isp_write_32( base + 0x11c08, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_fifo2_low_watermark_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11c08 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: FIFO2 high watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		  See description for FIFO1 high watermark
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_HIGH_WATERMARK_DEFAULT 2032
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_HIGH_WATERMARK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_HIGH_WATERMARK_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_HIGH_WATERMARK_REG_ADDR 0x11c08
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_HIGH_WATERMARK_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO2_HIGH_WATERMARK_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_fifo2_high_watermark_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c08 );
    system_isp_write_32( base + 0x11c08, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_fifo2_high_watermark_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11c08 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: FIFO3 low watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		  See description for FIFO1 low watermark
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_LOW_WATERMARK_DEFAULT 22
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_LOW_WATERMARK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_LOW_WATERMARK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_LOW_WATERMARK_REG_ADDR 0x11c0c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_LOW_WATERMARK_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_LOW_WATERMARK_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_fifo3_low_watermark_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c0c );
    system_isp_write_32( base + 0x11c0c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_fifo3_low_watermark_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11c0c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: FIFO3 high watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		  See description for FIFO1 high watermark
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_HIGH_WATERMARK_DEFAULT 2032
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_HIGH_WATERMARK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_HIGH_WATERMARK_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_HIGH_WATERMARK_REG_ADDR 0x11c0c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_HIGH_WATERMARK_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO3_HIGH_WATERMARK_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_fifo3_high_watermark_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c0c );
    system_isp_write_32( base + 0x11c0c, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_fifo3_high_watermark_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11c0c ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: FIFO4 low watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		  See description for FIFO1 low watermark
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_LOW_WATERMARK_DEFAULT 22
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_LOW_WATERMARK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_LOW_WATERMARK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_LOW_WATERMARK_REG_ADDR 0x11c10
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_LOW_WATERMARK_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_LOW_WATERMARK_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_fifo4_low_watermark_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c10 );
    system_isp_write_32( base + 0x11c10, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_fifo4_low_watermark_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11c10 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: FIFO4 high watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//		  See description for FIFO1 high watermark
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_HIGH_WATERMARK_DEFAULT 2032
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_HIGH_WATERMARK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_HIGH_WATERMARK_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_HIGH_WATERMARK_REG_ADDR 0x11c10
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_HIGH_WATERMARK_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_FIFO4_HIGH_WATERMARK_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_fifo4_high_watermark_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c10 );
    system_isp_write_32( base + 0x11c10, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_fifo4_high_watermark_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11c10 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Scheduler mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Predefined operation modes
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_REG_ADDR 0x11c14
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_FIELD_MASK 0xf
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_STOPPED ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_MANUAL_SCHEDULING ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_SINGLE_STREAM_ON_FIRST_INPUT ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_DUAL_STREAM_FIFO_ONLY ( 3 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_DUAL_STREAM_FRAME_BUFFER ( 4 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_TRIPLE_STREAM_FIRST_THROUGH_FRAME_BUFFER_SECOND_THROUGH_FIFO_THIRD_DIRECT ( 5 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_QUAD_STREAM_FIRST_AND_SECOND_THROUGH_FRAME_BUFFER_THIRD_THROUGH_FIFO_FOURTH_DIRECT ( 6 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_SINGLE_STREAM_DOL_CONFIGURATON_IS_DEFINED_BY_INPUT_MODE_VALID_INPUT_MODES_02 ( 7 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_TWO_SENSORS_TDMF_FLEX_SCHEDULE ( 8 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_TWO_2X_DOL_SENSORS_TDMF_FLEX_SCHEDULE ( 9 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_THREE_SENSORS_TDMF_FLEX_SCHEDULE ( 10 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_FOUR_SENSORS_TDMF_FLEX_SCHEDULE ( 11 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_TWO_SENSORS_TDMF_FIX_SCHEDULE ( 12 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_TWO_2X_DOL_SENSORS_TDMF_FIX_SCHEDULE ( 13 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_THREE_SENSORS_TDMF_FIX_SCHEDULE ( 14 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_MODE_FOUR_SENSORS_TDMF_FIX_SCHEDULE ( 15 )

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_mcfe_scheduler_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c14 );
    system_isp_write_32( base + 0x11c14, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_scheduler_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c14 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Start slot
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            0xFF - IDLE (normal state)
//            0..15 - slot to trigger in SRAM source mode. Only transition from 0xFF is counted as an event
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_DEFAULT 255
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_REG_ADDR 0x11c18
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_start_slot_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c18 );
    system_isp_write_32( base + 0x11c18, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_start_slot_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c18 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Start slot job id
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// ID for the slot (to be reported via mcfe_job_id register)
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_JOB_ID_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_JOB_ID_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_JOB_ID_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_JOB_ID_REG_ADDR 0x11c18
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_JOB_ID_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_START_SLOT_JOB_ID_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_start_slot_job_id_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c18 );
    system_isp_write_32( base + 0x11c18, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_start_slot_job_id_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11c18 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: PQ clear
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            Reset the processing queue:
//            Set to 0 during normal MCFE operation
//            Set to 1 to purge all pending jobs in the processing queue (e.g. during error recovery)
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_CLEAR_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_CLEAR_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_CLEAR_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_CLEAR_REG_ADDR 0x11c18
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_CLEAR_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_CLEAR_FIELD_MASK 0x100

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_mcfe_pq_clear_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c18 );
    system_isp_write_32( base + 0x11c18, ( ( ( uint32_t )( data & 0x1 ) ) << 8 ) | ( curr & 0xfffffeff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_pq_clear_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c18 ) & 0x100 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: Current slot
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            The slot currently scheduled.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CURRENT_SLOT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CURRENT_SLOT_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CURRENT_SLOT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CURRENT_SLOT_REG_ADDR 0x11c1c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CURRENT_SLOT_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CURRENT_SLOT_FIELD_MASK 0xf

// args: data (4-bit)
static __inline uint8_t acamera_config_frontend_copy_mcfe_current_slot_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c1c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Scheduler status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            The status of the scheduler:
//            0 = Searching for a slot to process.
//            1 = Loading the configuration.
//            2 = Processing a frame.
//            3 = Saving the configuration.
//            4 = Cancelling the current slot.
//            15 = Error condition on one of the slots.
//            5-14 = Unused.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_STATUS_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_STATUS_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_STATUS_REG_ADDR 0x11c1c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_STATUS_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SCHEDULER_STATUS_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline uint8_t acamera_config_frontend_copy_mcfe_scheduler_status_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c1c ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: PQ level
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of entries currently in the processing queue
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_LEVEL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_LEVEL_DATASIZE 5
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_LEVEL_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_LEVEL_REG_ADDR 0x11c1c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_LEVEL_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_LEVEL_FIELD_MASK 0x1f0000

// args: data (5-bit)
static __inline uint8_t acamera_config_frontend_copy_mcfe_pq_level_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c1c ) & 0x1f0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Output writer last ID
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// ID of the next output buffer to be unqueued by firmware
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_WRITER_LAST_ID_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_WRITER_LAST_ID_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_WRITER_LAST_ID_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_WRITER_LAST_ID_REG_ADDR 0x11c20
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_WRITER_LAST_ID_OFFSET 0x20
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_WRITER_LAST_ID_FIELD_MASK 0xff

// index (0-3), args: data (8-bit)
static __inline uint8_t acamera_config_frontend_copy_mcfe_output_writer_last_id_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11c20 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Slot priority
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Slot priority control mask; 1 makes the slots after this one to be scheduled 2 times less often
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_PRIORITY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_PRIORITY_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_PRIORITY_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_PRIORITY_REG_ADDR 0x11c2c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_PRIORITY_OFFSET 0x2c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_PRIORITY_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_priority_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c2c );
    system_isp_write_32( base + 0x11c2c, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_slot_priority_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11c2c ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_REG_ADDR 0x11c30
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_OFFSET 0x30
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_FIELD_MASK 0xf
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_INACTIVE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_PASS_THROUGH_INCLUDING_SUBFRAME_DELAY_THROUGH_AXI_SLOT_DELAY_IS_ADDED_AFTER_FRAME_FINISHED_BEFORE_PROCESSING_THE_NEXT_FRAME ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_TDMF_FIXED_SLOT_EVENT_IS_INPUT_TO_SYNC_PROCESSING_WILL_START_AFTER_SLOT_DELAY ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_TDMF_FLEX_SLOT_ALSO_TEST_CONTEXT_IF_NO_INPUTS_ARE_ASSIGNED ( 3 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_FRAME_ANDOR_CONFIG_FROM_RAM_SOURCE_TRIGGER_TPG_IF_NO_INPUTS_ARE_ASSIGNED_EFFECTIVELY_ONESHOT_MODE_WITH_ANY_COMBINATION_OF_UPLOAD_CONFIG_FEED_FRAME_DOWNLOAD_CONFIG_TRIGGERED_BY_CHANGING_START_SLOT_FROM_1_TO_SLOT_NUMBER ( 4 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_CONFIG_TRANSFER_MODE_EFFECTIVELY_ONESHOT_MODE_WITH_ANY_COMBINATION_OF_UPLOAD_CONFIG_AND_DOWNLOAD_CONFIG_TRIGGERED_BY_CHANGING_START_SLOT_FROM_1_TO_SLOT_NUMBER ( 5 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_MODE_CANCEL_AND_CLEAR_ERRORS ( 6 )

// index (0-15), args: data (4-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_mode_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0x11c30 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_slot_mode_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11c30 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Slot status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           bit 3 is error flag
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_REG_ADDR 0x11c40
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_OFFSET 0x40
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_FIELD_MASK 0xf
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_IDLE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_SCHEDULED_EVENT_HAPPENED ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_WAIT_FOR_BUFFER_AVAILABILITY ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_CONFIG_UPLOADING ( 3 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_FRAME_PROCESSING ( 4 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_STATS_DOWNLOADING ( 5 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_FINISHED__WAITING_FOR_POSTFRAME_TIMEOUT ( 6 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_STATUS_PASSING_DATA_THROUGH ( 7 )

// index (0-15), args: data (4-bit)
static __inline uint8_t acamera_config_frontend_copy_mcfe_slot_status_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11c40 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Slot event
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//          For fixed TDMF operation is the input number to synchronize with.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_EVENT_DEFAULT 597
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_EVENT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_EVENT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_EVENT_REG_ADDR 0x11c50
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_EVENT_OFFSET 0x50
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_EVENT_FIELD_MASK 0xff

// index (0-15), args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_event_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0x11c50 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_slot_event_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11c50 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Slot delay
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//          For fixed TDMF operation: delay after the slot_event.
//          For flexible TDMF and for streaming modes - delay after post-frame downloading of the config.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_DELAY_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_DELAY_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_DELAY_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_DELAY_REG_ADDR 0x11c60
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_DELAY_OFFSET 0x60
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_DELAY_FIELD_MASK 0xffffffff

// index (0-15), args: data (32-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_delay_write( uint32_t base, uint32_t index, uint32_t data )
{
    system_isp_write_32( base + 0x11c60 + ( index << 2 ), data );
}
static __inline uint32_t acamera_config_frontend_copy_mcfe_slot_delay_read( uint32_t base, uint32_t index )
{
    return system_isp_read_32( base + 0x11c60 + ( index << 2 ) );
}
// ------------------------------------------------------------------------------ //
// Register: Slot cfg valid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Valid bit for config DMA settings
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_VALID_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_VALID_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_VALID_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_VALID_REG_ADDR 0x11ca0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_VALID_OFFSET 0xa0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_VALID_FIELD_MASK 0x1

// index (0-15), args: data (1-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_cfg_valid_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0x11ca0 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_slot_cfg_valid_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11ca0 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Slot cfg no ACK
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Disable handshake for the slot configuration transfer
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_NO_ACK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_NO_ACK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_NO_ACK_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_NO_ACK_REG_ADDR 0x11cb0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_NO_ACK_OFFSET 0xb0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_NO_ACK_FIELD_MASK 0xffff0000

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_cfg_no_ack_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11cb0 );
    system_isp_write_32( base + 0x11cb0, ( ( ( uint32_t )( data & 0xffff ) ) << 16 ) | ( curr & 0xffff ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_slot_cfg_no_ack_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11cb0 ) & 0xffff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot cfg available
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Avalilable bit for config DMA settings
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_REG_ADDR 0x11cb0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_OFFSET 0xb0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_cfg_available_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11cb0 );
    system_isp_write_32( base + 0x11cb0, ( ( ( uint32_t )( data & 0xffff ) ) << 0 ) | ( curr & 0xffff0000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_slot_cfg_available_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11cb0 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot cfg available ACK
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Acknowledge of Avalilable bit for config DMA settings. The buffer is unavailable for ISP when slot_cfg_available = slot_cfg_available_ack
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_ACK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_ACK_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_ACK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_ACK_REG_ADDR 0x11cb4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_ACK_OFFSET 0xb4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_AVAILABLE_ACK_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_mcfe_slot_cfg_available_ack_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11cb4 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Slot cfg base
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Base address of the configuration bitmap for the slot
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_BASE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_BASE_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_BASE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_BASE_REG_ADDR 0x11cc0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_BASE_OFFSET 0xc0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_BASE_FIELD_MASK 0xffffffff

// index (0-15), args: data (32-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_cfg_base_write( uint32_t base, uint32_t index, uint32_t data )
{
    system_isp_write_32( base + 0x11cc0 + ( index << 2 ), data );
}
static __inline uint32_t acamera_config_frontend_copy_mcfe_slot_cfg_base_read( uint32_t base, uint32_t index )
{
    return system_isp_read_32( base + 0x11cc0 + ( index << 2 ) );
}
// ------------------------------------------------------------------------------ //
// Register: Slot cfg size
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Size of the configuration bitmap image in the RAM
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_SIZE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_SIZE_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_SIZE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_SIZE_REG_ADDR 0x11d00
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_SIZE_OFFSET 0x100
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_SIZE_FIELD_MASK 0xffffffff

// index (0-15), args: data (32-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_cfg_size_write( uint32_t base, uint32_t index, uint32_t data )
{
    system_isp_write_32( base + 0x11d00 + ( index << 2 ), data );
}
static __inline uint32_t acamera_config_frontend_copy_mcfe_slot_cfg_size_read( uint32_t base, uint32_t index )
{
    return system_isp_read_32( base + 0x11d00 + ( index << 2 ) );
}
// ------------------------------------------------------------------------------ //
// Register: Slot cfg read units
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bitmap of configuration chunks to be transferred to RAM from ISP after slot is processed
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_READ_UNITS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_READ_UNITS_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_READ_UNITS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_READ_UNITS_REG_ADDR 0x11d40
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_READ_UNITS_OFFSET 0x140
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_READ_UNITS_FIELD_MASK 0xffffffff

// index (0-15), args: data (32-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_cfg_read_units_write( uint32_t base, uint32_t index, uint32_t data )
{
    system_isp_write_32( base + 0x11d40 + ( index << 2 ), data );
}
static __inline uint32_t acamera_config_frontend_copy_mcfe_slot_cfg_read_units_read( uint32_t base, uint32_t index )
{
    return system_isp_read_32( base + 0x11d40 + ( index << 2 ) );
}
// ------------------------------------------------------------------------------ //
// Register: Slot cfg write units
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bitmap of configuration chunks to be transferred from RAM to ISP before slot is processed
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_WRITE_UNITS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_WRITE_UNITS_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_WRITE_UNITS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_WRITE_UNITS_REG_ADDR 0x11d80
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_WRITE_UNITS_OFFSET 0x180
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_CFG_WRITE_UNITS_FIELD_MASK 0xffffffff

// index (0-15), args: data (32-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_cfg_write_units_write( uint32_t base, uint32_t index, uint32_t data )
{
    system_isp_write_32( base + 0x11d80 + ( index << 2 ), data );
}
static __inline uint32_t acamera_config_frontend_copy_mcfe_slot_cfg_write_units_read( uint32_t base, uint32_t index )
{
    return system_isp_read_32( base + 0x11d80 + ( index << 2 ) );
}
// ------------------------------------------------------------------------------ //
// Register: Slot inputs
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Input streams that will be processed by ISP in this slot.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_INPUTS_DEFAULT 597
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_INPUTS_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_INPUTS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_INPUTS_REG_ADDR 0x11dc0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_INPUTS_OFFSET 0x1c0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_INPUTS_FIELD_MASK 0xff

// index1 (0-15), index2 (0-3), args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_inputs_write( uint32_t base, uint32_t index1, uint32_t index2, uint8_t data )
{
    uint32_t addr;
    uint8_t offset;
    uint32_t curr;
    addr = base + 0x11dc0 + ( index1 * 4 + index2 );
    offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    curr = system_isp_read_32( addr );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( 0xFF << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_slot_inputs_read( uint32_t base, uint32_t index1, uint32_t index2 )
{
    uint32_t addr = base + 0x11dc0 + ( ( index1 * 4 + index2 ) );
    uint8_t offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Slot outputs buffer1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           First output AXI buffers for current slot.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER1_DEFAULT 597
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER1_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER1_REG_ADDR 0x11e00
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER1_OFFSET 0x200
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER1_FIELD_MASK 0xff

// index1 (0-15), index2 (0-3), args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_outputs_buffer1_write( uint32_t base, uint32_t index1, uint32_t index2, uint8_t data )
{
    uint32_t addr;
    uint8_t offset;
    uint32_t curr;
    addr = base + 0x11e00 + ( index1 * 4 + index2 );
    offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    curr = system_isp_read_32( addr );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( 0xFF << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_slot_outputs_buffer1_read( uint32_t base, uint32_t index1, uint32_t index2 )
{
    uint32_t addr = base + 0x11e00 + ( ( index1 * 4 + index2 ) );
    uint8_t offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Slot outputs buffer2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Second output AXI buffers for current slot.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER2_DEFAULT 597
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER2_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER2_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER2_REG_ADDR 0x11e40
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER2_OFFSET 0x240
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_SLOT_OUTPUTS_BUFFER2_FIELD_MASK 0xff

// index1 (0-15), index2 (0-3), args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_slot_outputs_buffer2_write( uint32_t base, uint32_t index1, uint32_t index2, uint8_t data )
{
    uint32_t addr;
    uint8_t offset;
    uint32_t curr;
    addr = base + 0x11e40 + ( index1 * 4 + index2 );
    offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    curr = system_isp_read_32( addr );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( 0xFF << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_slot_outputs_buffer2_read( uint32_t base, uint32_t index1, uint32_t index2 )
{
    uint32_t addr = base + 0x11e40 + ( ( index1 * 4 + index2 ) );
    uint8_t offset = ( addr & 3 ) << 3;
    addr &= 0xFFFFFFFC;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Input mode
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MODE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MODE_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MODE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MODE_REG_ADDR 0x11e80
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MODE_OFFSET 0x280
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MODE_FIELD_MASK 0x3
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MODE_OFF ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MODE_DIRECT_THROUGH_FIFO ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MODE_SUBFRAME_DELAY_THROUGH_FRAME_BUFFER ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MODE_FRAME_WRITE_FOR_TDMF ( 3 )

// index (0-3), args: data (2-bit)
static __inline void acamera_config_frontend_copy_mcfe_input_mode_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0x11e80 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_input_mode_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11e80 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Input msb align
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Alignment of input data
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MSB_ALIGN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MSB_ALIGN_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MSB_ALIGN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MSB_ALIGN_REG_ADDR 0x11e84
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MSB_ALIGN_OFFSET 0x284
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MSB_ALIGN_FIELD_MASK 0x1
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MSB_ALIGN_ALIGN_TO_LSB ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_MSB_ALIGN_ALIGN_TO_MSB ( 1 )

// index (0-3), args: data (1-bit)
static __inline void acamera_config_frontend_copy_mcfe_input_msb_align_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0x11e84 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_input_msb_align_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11e84 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Input status
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//            bit 0 - writing
//            bit 1 - reading
//            bit 2 - input video active
//            bit 3 - cancelling
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STATUS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STATUS_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STATUS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STATUS_REG_ADDR 0x11e88
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STATUS_OFFSET 0x288
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STATUS_FIELD_MASK 0xf

// index (0-3), args: data (4-bit)
static __inline uint8_t acamera_config_frontend_copy_mcfe_input_status_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11e88 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Input data width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Data width of input data (in bits). Used by MCFE only in input mode DIRECT
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_DATA_WIDTH_DEFAULT 18
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_DATA_WIDTH_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_DATA_WIDTH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_DATA_WIDTH_REG_ADDR 0x11e8c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_DATA_WIDTH_OFFSET 0x28c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_DATA_WIDTH_FIELD_MASK 0xff

// index (0-3), args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_input_data_width_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0x11e8c + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_input_data_width_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11e8c + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Input stat valid
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Valid bit for config DMA settings
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_VALID_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_VALID_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_VALID_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_VALID_REG_ADDR 0x11e90
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_VALID_OFFSET 0x290
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_VALID_FIELD_MASK 0x1

// index (0-3), args: data (1-bit)
static __inline void acamera_config_frontend_copy_mcfe_input_stat_valid_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0x11e90 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_input_stat_valid_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11e90 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Input stat no ACK
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Disable handshake for the DMA settings
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_NO_ACK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_NO_ACK_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_NO_ACK_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_NO_ACK_REG_ADDR 0x11e94
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_NO_ACK_OFFSET 0x294
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_NO_ACK_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_mcfe_input_stat_no_ack_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11e94 );
    system_isp_write_32( base + 0x11e94, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_input_stat_no_ack_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11e94 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Input stat available
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Available bit for config DMA settings
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_REG_ADDR 0x11e94
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_OFFSET 0x294
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_mcfe_input_stat_available_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11e94 );
    system_isp_write_32( base + 0x11e94, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_input_stat_available_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11e94 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Input stat available ACK
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Available bit for config DMA settings
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_ACK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_ACK_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_ACK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_ACK_REG_ADDR 0x11e98
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_ACK_OFFSET 0x298
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_AVAILABLE_ACK_FIELD_MASK 0xf

// args: data (4-bit)
static __inline uint8_t acamera_config_frontend_copy_mcfe_input_stat_available_ack_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11e98 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Input stat base
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Base address of the configuration bitmap for the input channel
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_BASE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_BASE_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_BASE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_BASE_REG_ADDR 0x11ea0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_BASE_OFFSET 0x2a0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_BASE_FIELD_MASK 0xffffffff

// index (0-3), args: data (32-bit)
static __inline void acamera_config_frontend_copy_mcfe_input_stat_base_write( uint32_t base, uint32_t index, uint32_t data )
{
    system_isp_write_32( base + 0x11ea0 + ( index << 2 ), data );
}
static __inline uint32_t acamera_config_frontend_copy_mcfe_input_stat_base_read( uint32_t base, uint32_t index )
{
    return system_isp_read_32( base + 0x11ea0 + ( index << 2 ) );
}
// ------------------------------------------------------------------------------ //
// Register: Input stat size
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Size of the configuration bitmap image in the RAM
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_SIZE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_SIZE_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_SIZE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_SIZE_REG_ADDR 0x11eb0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_SIZE_OFFSET 0x2b0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_SIZE_FIELD_MASK 0xffffffff

// index (0-3), args: data (32-bit)
static __inline void acamera_config_frontend_copy_mcfe_input_stat_size_write( uint32_t base, uint32_t index, uint32_t data )
{
    system_isp_write_32( base + 0x11eb0 + ( index << 2 ), data );
}
static __inline uint32_t acamera_config_frontend_copy_mcfe_input_stat_size_read( uint32_t base, uint32_t index )
{
    return system_isp_read_32( base + 0x11eb0 + ( index << 2 ) );
}
// ------------------------------------------------------------------------------ //
// Register: Input stat read units
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bitmap of configuration chunks to be transferred to RAM from ISP after input frame is finished
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_READ_UNITS_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_READ_UNITS_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_READ_UNITS_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_READ_UNITS_REG_ADDR 0x11ec0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_READ_UNITS_OFFSET 0x2c0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_STAT_READ_UNITS_FIELD_MASK 0xffffffff

// index (0-3), args: data (32-bit)
static __inline void acamera_config_frontend_copy_mcfe_input_stat_read_units_write( uint32_t base, uint32_t index, uint32_t data )
{
    system_isp_write_32( base + 0x11ec0 + ( index << 2 ), data );
}
static __inline uint32_t acamera_config_frontend_copy_mcfe_input_stat_read_units_read( uint32_t base, uint32_t index )
{
    return system_isp_read_32( base + 0x11ec0 + ( index << 2 ) );
}
// ------------------------------------------------------------------------------ //
// Register: Input write buffer1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           First ping-pong AXI buffers for current RAW input.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER1_DEFAULT 597
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER1_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER1_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER1_REG_ADDR 0x11ed0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER1_OFFSET 0x2d0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER1_FIELD_MASK 0xff

// index (0-3), args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_input_write_buffer1_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0x11ed0 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_input_write_buffer1_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11ed0 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Input write buffer2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Second ping-pong AXI buffer for current RAW input.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER2_DEFAULT 597
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER2_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER2_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER2_REG_ADDR 0x11ed4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER2_OFFSET 0x2d4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITE_BUFFER2_FIELD_MASK 0xff

// index (0-3), args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_input_write_buffer2_write( uint32_t base, uint32_t index, uint8_t data )
{
    uint32_t addr = base + 0x11ed4 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    uint32_t curr = system_isp_read_32( addr );
    uint32_t mask = ( uint8_t )( -1 );
    system_isp_write_32( addr, ( (uint32_t)data << offset ) | ( curr & ~( mask << offset ) ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_input_write_buffer2_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11ed4 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Input writer last ID
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// ID of the next input buffer to be unqueued by firmware or Scheduler
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITER_LAST_ID_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITER_LAST_ID_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITER_LAST_ID_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITER_LAST_ID_REG_ADDR 0x11ed8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITER_LAST_ID_OFFSET 0x2d8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_INPUT_WRITER_LAST_ID_FIELD_MASK 0xff

// index (0-3), args: data (8-bit)
static __inline uint8_t acamera_config_frontend_copy_mcfe_input_writer_last_id_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11ed8 + ( ( index * sizeof( uint8_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint8_t ) ) & 0x3 ) << 3;
    return ( uint8_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: PQ state
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//
//           Processing queue state, bits 7:0 - slot no, bits 23:8 - job ID.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_STATE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_STATE_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_STATE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_STATE_REG_ADDR 0x11ee0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_STATE_OFFSET 0x2e0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_PQ_STATE_FIELD_MASK 0xffffff

// index (0-7), args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_mcfe_pq_state_read( uint32_t base, uint32_t index )
{
    uint32_t addr = base + 0x11ee0 + ( ( index * sizeof( uint32_t ) ) & 0xFFFFFFFC );
    uint8_t offset = ( ( index * sizeof( uint32_t ) ) & 0x3 ) << 3;
    return ( uint32_t )( system_isp_read_32( addr ) >> offset );
}
// ------------------------------------------------------------------------------ //
// Register: Output HBlank
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Minimal horizontal blanking at the MCFE output.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_HBLANK_DEFAULT 50
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_HBLANK_DATASIZE 13
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_HBLANK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_HBLANK_REG_ADDR 0x11f00
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_HBLANK_OFFSET 0x300
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_OUTPUT_HBLANK_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_config_frontend_copy_mcfe_output_hblank_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f00 );
    system_isp_write_32( base + 0x11f00, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_config_frontend_copy_mcfe_output_hblank_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11f00 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: CDMA read FIFO watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Config DMA: Number of words space in FIFO before AXI read burst(s) start (legal values = max_burst_length(max_arlen+1) to 2**fifo_aw, but workable value for your system are probably less!). Allowing n back to back bursts to generated if watermark is set to n*burst length. Burst(s) continue while FIFO has enough space for next burst.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_READ_FIFO_WATERMARK_DEFAULT 22
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_READ_FIFO_WATERMARK_DATASIZE 6
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_READ_FIFO_WATERMARK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_READ_FIFO_WATERMARK_REG_ADDR 0x11f04
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_READ_FIFO_WATERMARK_OFFSET 0x304
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_READ_FIFO_WATERMARK_FIELD_MASK 0x3f

// args: data (6-bit)
static __inline void acamera_config_frontend_copy_mcfe_cdma_read_fifo_watermark_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f04 );
    system_isp_write_32( base + 0x11f04, ( ( ( uint32_t )( data & 0x3f ) ) << 0 ) | ( curr & 0xffffffc0 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_cdma_read_fifo_watermark_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f04 ) & 0x3f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: CDMA max arlen
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Config DMA: Max value to use for arlen (axi burst length). 0000= max 1 transfer/burst, upto 1111= max 16 transfers/burst
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_ARLEN_DEFAULT 21
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_ARLEN_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_ARLEN_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_ARLEN_REG_ADDR 0x11f04
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_ARLEN_OFFSET 0x304
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_ARLEN_FIELD_MASK 0xf00

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_mcfe_cdma_max_arlen_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f04 );
    system_isp_write_32( base + 0x11f04, ( ( ( uint32_t )( data & 0xf ) ) << 8 ) | ( curr & 0xfffff0ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_cdma_max_arlen_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f04 ) & 0xf00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: CDMA rxact maxostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Config DMA: Max outstanding read transactions (bursts) allowed. Zero means no maximum (uses internal limit of 2048).
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXACT_MAXOSTAND_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXACT_MAXOSTAND_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXACT_MAXOSTAND_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXACT_MAXOSTAND_REG_ADDR 0x11f04
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXACT_MAXOSTAND_OFFSET 0x304
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXACT_MAXOSTAND_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_cdma_rxact_maxostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f04 );
    system_isp_write_32( base + 0x11f04, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_cdma_rxact_maxostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f04 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: CDMA armaxwait limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Config DMA: arvalid maxwait limit(cycles) to raise axi_fail_armaxwait alarm. Zero disables alarm raise
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_ARMAXWAIT_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_ARMAXWAIT_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_ARMAXWAIT_LIMIT_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_ARMAXWAIT_LIMIT_REG_ADDR 0x11f04
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_ARMAXWAIT_LIMIT_OFFSET 0x304
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_ARMAXWAIT_LIMIT_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_cdma_armaxwait_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f04 );
    system_isp_write_32( base + 0x11f04, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_cdma_armaxwait_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f04 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: CDMA rxnfr ostand limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Config DMA: The number of outstanding read data transfers(responses..1 per transfer) to raise axi_fail_rxnfr_ostand alarm
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXNFR_OSTAND_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXNFR_OSTAND_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXNFR_OSTAND_LIMIT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXNFR_OSTAND_LIMIT_REG_ADDR 0x11f08
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXNFR_OSTAND_LIMIT_OFFSET 0x308
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_RXNFR_OSTAND_LIMIT_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_cdma_rxnfr_ostand_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f08 );
    system_isp_write_32( base + 0x11f08, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_cdma_rxnfr_ostand_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f08 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: CDMA write FIFO watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Config DMA: Number of words in FIFO before AXI write burst(s) start (legal values = max_burst_length(max_awlen+1) to 2**fifo_aw, but workable value for your system are probably less!). Allowing n back to back bursts to generated if watermark is set to n*burst length. Burst(s) continue while FIFO has enough for next burst
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WRITE_FIFO_WATERMARK_DEFAULT 22
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WRITE_FIFO_WATERMARK_DATASIZE 6
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WRITE_FIFO_WATERMARK_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WRITE_FIFO_WATERMARK_REG_ADDR 0x11f08
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WRITE_FIFO_WATERMARK_OFFSET 0x308
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WRITE_FIFO_WATERMARK_FIELD_MASK 0x3f0000

// args: data (6-bit)
static __inline void acamera_config_frontend_copy_mcfe_cdma_write_fifo_watermark_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f08 );
    system_isp_write_32( base + 0x11f08, ( ( ( uint32_t )( data & 0x3f ) ) << 16 ) | ( curr & 0xffc0ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_cdma_write_fifo_watermark_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f08 ) & 0x3f0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: CDMA max awlen
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Config DMA: Max value to use for awlen (axi burst length). 0000= max 1 transfer/burst, upto 1111= max 16 transfers/burst.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_AWLEN_DEFAULT 21
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_AWLEN_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_AWLEN_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_AWLEN_REG_ADDR 0x11f08
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_AWLEN_OFFSET 0x308
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_MAX_AWLEN_FIELD_MASK 0xf000000

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_mcfe_cdma_max_awlen_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f08 );
    system_isp_write_32( base + 0x11f08, ( ( ( uint32_t )( data & 0xf ) ) << 24 ) | ( curr & 0xf0ffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_cdma_max_awlen_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f08 ) & 0xf000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: CDMA wxact maxostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Config DMA: Max outstanding write transactions (bursts) allowed. Zero means no maximum(uses internal limit of 2048).
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_MAXOSTAND_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_MAXOSTAND_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_MAXOSTAND_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_MAXOSTAND_REG_ADDR 0x11f0c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_MAXOSTAND_OFFSET 0x30c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_MAXOSTAND_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_cdma_wxact_maxostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f0c );
    system_isp_write_32( base + 0x11f0c, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_cdma_wxact_maxostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f0c ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: CDMA awmaxwait limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Config DMA: awvalid maxwait limit(cycles) to raise axi_fail_awmaxwait alarm. Zero disables alarm raise
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_AWMAXWAIT_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_AWMAXWAIT_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_AWMAXWAIT_LIMIT_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_AWMAXWAIT_LIMIT_REG_ADDR 0x11f0c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_AWMAXWAIT_LIMIT_OFFSET 0x30c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_AWMAXWAIT_LIMIT_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_cdma_awmaxwait_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f0c );
    system_isp_write_32( base + 0x11f0c, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_cdma_awmaxwait_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f0c ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: CDMA wmaxwait limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Config DMA: wvalid maxwait limit(cycles) to raise axi_fail_wmaxwait alarm. Zero disables alarm raise
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WMAXWAIT_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WMAXWAIT_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WMAXWAIT_LIMIT_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WMAXWAIT_LIMIT_REG_ADDR 0x11f0c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WMAXWAIT_LIMIT_OFFSET 0x30c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WMAXWAIT_LIMIT_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_cdma_wmaxwait_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f0c );
    system_isp_write_32( base + 0x11f0c, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_cdma_wmaxwait_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f0c ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: CDMA wxact ostand limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Config DMA: Number oustsanding write transactions(bursts)(responses..1 per burst) limit to raise axi_fail_wxact_ostand. Zero disables alarm raise
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_OSTAND_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_OSTAND_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_OSTAND_LIMIT_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_OSTAND_LIMIT_REG_ADDR 0x11f0c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_OSTAND_LIMIT_OFFSET 0x30c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_CDMA_WXACT_OSTAND_LIMIT_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_cdma_wxact_ostand_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f0c );
    system_isp_write_32( base + 0x11f0c, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_cdma_wxact_ostand_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f0c ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: WDMA FIFO watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame writer DMA: Number of words in FIFO before AXI write burst(s) start (legal values = max_burst_length(max_awlen+1) to 2**fifo_aw, but workable value for your system are probably less!). Allowing n back to back bursts to generated if watermark is set to n*burst length. Burst(s) continue while FIFO has enough for next burst
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_FIFO_WATERMARK_DEFAULT 22
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_FIFO_WATERMARK_DATASIZE 7
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_FIFO_WATERMARK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_FIFO_WATERMARK_REG_ADDR 0x11f10
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_FIFO_WATERMARK_OFFSET 0x310
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_FIFO_WATERMARK_FIELD_MASK 0x7f

// args: data (7-bit)
static __inline void acamera_config_frontend_copy_mcfe_wdma_fifo_watermark_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f10 );
    system_isp_write_32( base + 0x11f10, ( ( ( uint32_t )( data & 0x7f ) ) << 0 ) | ( curr & 0xffffff80 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_wdma_fifo_watermark_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f10 ) & 0x7f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: WDMA max awlen
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame writer DMA: Max value to use for awlen (axi burst length). 0000= max 1 transfer/burst, upto 1111= max 16 transfers/burst.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_MAX_AWLEN_DEFAULT 21
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_MAX_AWLEN_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_MAX_AWLEN_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_MAX_AWLEN_REG_ADDR 0x11f10
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_MAX_AWLEN_OFFSET 0x310
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_MAX_AWLEN_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_mcfe_wdma_max_awlen_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f10 );
    system_isp_write_32( base + 0x11f10, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_wdma_max_awlen_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f10 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: WDMA wxact maxostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame writer DMA: Max outstanding write transactions (bursts) allowed. Zero means no maximum(uses internal limit of 2048).
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_MAXOSTAND_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_MAXOSTAND_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_MAXOSTAND_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_MAXOSTAND_REG_ADDR 0x11f14
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_MAXOSTAND_OFFSET 0x314
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_MAXOSTAND_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_wdma_wxact_maxostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f14 );
    system_isp_write_32( base + 0x11f14, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_wdma_wxact_maxostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f14 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: WDMA awmaxwait limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame writer DMA: awvalid maxwait limit(cycles) to raise axi_fail_awmaxwait alarm. Zero disables alarm raise
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_AWMAXWAIT_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_AWMAXWAIT_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_AWMAXWAIT_LIMIT_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_AWMAXWAIT_LIMIT_REG_ADDR 0x11f14
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_AWMAXWAIT_LIMIT_OFFSET 0x314
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_AWMAXWAIT_LIMIT_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_wdma_awmaxwait_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f14 );
    system_isp_write_32( base + 0x11f14, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_wdma_awmaxwait_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f14 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: WDMA wmaxwait limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame writer DMA: wvalid maxwait limit(cycles) to raise axi_fail_wmaxwait alarm. Zero disables alarm raise
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WMAXWAIT_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WMAXWAIT_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WMAXWAIT_LIMIT_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WMAXWAIT_LIMIT_REG_ADDR 0x11f14
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WMAXWAIT_LIMIT_OFFSET 0x314
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WMAXWAIT_LIMIT_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_wdma_wmaxwait_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f14 );
    system_isp_write_32( base + 0x11f14, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_wdma_wmaxwait_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f14 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: WDMA wxact ostand limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame writer DMA: Number oustsanding write transactions(bursts)(responses..1 per burst) limit to raise axi_fail_wxact_ostand. Zero disables alarm raise
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_OSTAND_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_OSTAND_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_OSTAND_LIMIT_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_OSTAND_LIMIT_REG_ADDR 0x11f14
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_OSTAND_LIMIT_OFFSET 0x314
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_WDMA_WXACT_OSTAND_LIMIT_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_wdma_wxact_ostand_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f14 );
    system_isp_write_32( base + 0x11f14, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_wdma_wxact_ostand_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f14 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: RDMA FIFO watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Read DMA: Number of words space in FIFO before AXI read burst(s) start (legal values = max_burst_length(max_arlen+1) to 2**fifo_aw, but the workable value for your system is probably less.) Allowing n back to back bursts to generated if watermark is set to n*burst length. Burst(s) continue while FIFO has enough space for next burst.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_FIFO_WATERMARK_DEFAULT 22
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_FIFO_WATERMARK_DATASIZE 7
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_FIFO_WATERMARK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_FIFO_WATERMARK_REG_ADDR 0x11f18
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_FIFO_WATERMARK_OFFSET 0x318
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_FIFO_WATERMARK_FIELD_MASK 0x7f

// args: data (7-bit)
static __inline void acamera_config_frontend_copy_mcfe_rdma_fifo_watermark_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f18 );
    system_isp_write_32( base + 0x11f18, ( ( ( uint32_t )( data & 0x7f ) ) << 0 ) | ( curr & 0xffffff80 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_rdma_fifo_watermark_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f18 ) & 0x7f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: RDMA max arlen
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Read DMA: Max value to use for arlen (axi burst length). 0000= max 1 transfer/burst , upto 1111= max 16 transfers/burst
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_MAX_ARLEN_DEFAULT 21
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_MAX_ARLEN_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_MAX_ARLEN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_MAX_ARLEN_REG_ADDR 0x11f1c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_MAX_ARLEN_OFFSET 0x31c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_MAX_ARLEN_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_mcfe_rdma_max_arlen_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f1c );
    system_isp_write_32( base + 0x11f1c, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_rdma_max_arlen_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f1c ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: RDMA rxact maxostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Read DMA: Max outstanding read transactions (bursts) allowed. Zero means no maximum(uses internal limit of 2048).
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXACT_MAXOSTAND_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXACT_MAXOSTAND_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXACT_MAXOSTAND_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXACT_MAXOSTAND_REG_ADDR 0x11f1c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXACT_MAXOSTAND_OFFSET 0x31c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXACT_MAXOSTAND_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_rdma_rxact_maxostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f1c );
    system_isp_write_32( base + 0x11f1c, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_rdma_rxact_maxostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f1c ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: RDMA armaxwait limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Read DMA: arvalid maxwait limit(cycles) to raise axi_fail_armaxwait alarm. Zero disables alarm raise
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_ARMAXWAIT_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_ARMAXWAIT_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_ARMAXWAIT_LIMIT_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_ARMAXWAIT_LIMIT_REG_ADDR 0x11f1c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_ARMAXWAIT_LIMIT_OFFSET 0x31c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_ARMAXWAIT_LIMIT_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_rdma_armaxwait_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f1c );
    system_isp_write_32( base + 0x11f1c, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_rdma_armaxwait_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f1c ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: RDMA rxnfr ostand limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Read DMA: The number of outstanding read data transfers(responses..1 per transfer) to raise axi_fail_rxnfr_ostand alarm
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXNFR_OSTAND_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXNFR_OSTAND_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXNFR_OSTAND_LIMIT_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXNFR_OSTAND_LIMIT_REG_ADDR 0x11f1c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXNFR_OSTAND_LIMIT_OFFSET 0x31c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_RDMA_RXNFR_OSTAND_LIMIT_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcfe_rdma_rxnfr_ostand_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f1c );
    system_isp_write_32( base + 0x11f1c, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcfe_rdma_rxnfr_ostand_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f1c ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Group: Multichannel backend
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: WDMA FIFO watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output DMA: Number of words in FIFO before AXI write burst(s) start (legal values = max_burst_length(max_awlen+1) to 2**fifo_aw, but workable value for your system is probably less.) Allowing n back to back bursts to be generated if watermark is set to n*burst length. Burst(s) continue while FIFO has enough for next burst
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_FIFO_WATERMARK_DEFAULT 22
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_FIFO_WATERMARK_DATASIZE 7
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_FIFO_WATERMARK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_FIFO_WATERMARK_REG_ADDR 0x11f20
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_FIFO_WATERMARK_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_FIFO_WATERMARK_FIELD_MASK 0x7f

// args: data (7-bit)
static __inline void acamera_config_frontend_copy_mcbe_wdma_fifo_watermark_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f20 );
    system_isp_write_32( base + 0x11f20, ( ( ( uint32_t )( data & 0x7f ) ) << 0 ) | ( curr & 0xffffff80 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcbe_wdma_fifo_watermark_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f20 ) & 0x7f ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: WDMA max awlen
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output DMA: Max value to use for awlen (axi burst length). 0000= max 1 transfer/burst , upto 1111= max 16 transfers/burst.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_MAX_AWLEN_DEFAULT 21
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_MAX_AWLEN_DATASIZE 4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_MAX_AWLEN_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_MAX_AWLEN_REG_ADDR 0x11f20
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_MAX_AWLEN_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_MAX_AWLEN_FIELD_MASK 0xf0000

// args: data (4-bit)
static __inline void acamera_config_frontend_copy_mcbe_wdma_max_awlen_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f20 );
    system_isp_write_32( base + 0x11f20, ( ( ( uint32_t )( data & 0xf ) ) << 16 ) | ( curr & 0xfff0ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcbe_wdma_max_awlen_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f20 ) & 0xf0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: WDMA wxact maxostand
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output DMA: Max outstanding write transactions (bursts) allowed. Zero means no maximum(uses internal limit of 2048).
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_MAXOSTAND_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_MAXOSTAND_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_MAXOSTAND_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_MAXOSTAND_REG_ADDR 0x11f24
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_MAXOSTAND_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_MAXOSTAND_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcbe_wdma_wxact_maxostand_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f24 );
    system_isp_write_32( base + 0x11f24, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcbe_wdma_wxact_maxostand_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f24 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: WDMA awmaxwait limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output DMA: awvalid maxwait limit(cycles) to raise axi_fail_awmaxwait alarm. Zero disables alarm raise
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_AWMAXWAIT_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_AWMAXWAIT_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_AWMAXWAIT_LIMIT_FIELD_OFFSET 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_AWMAXWAIT_LIMIT_REG_ADDR 0x11f24
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_AWMAXWAIT_LIMIT_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_AWMAXWAIT_LIMIT_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcbe_wdma_awmaxwait_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f24 );
    system_isp_write_32( base + 0x11f24, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcbe_wdma_awmaxwait_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f24 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: WDMA wmaxwait limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output DMA: wvalid maxwait limit(cycles) to raise axi_fail_wmaxwait alarm. Zero disables alarm raise
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WMAXWAIT_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WMAXWAIT_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WMAXWAIT_LIMIT_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WMAXWAIT_LIMIT_REG_ADDR 0x11f24
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WMAXWAIT_LIMIT_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WMAXWAIT_LIMIT_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcbe_wdma_wmaxwait_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f24 );
    system_isp_write_32( base + 0x11f24, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcbe_wdma_wmaxwait_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f24 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: WDMA wxact ostand limit
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Output DMA: Number oustsanding write transactions(bursts)(responses..1 per burst) limit to raise axi_fail_wxact_ostand. Zero disables alarm raise
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_OSTAND_LIMIT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_OSTAND_LIMIT_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_OSTAND_LIMIT_FIELD_OFFSET 24
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_OSTAND_LIMIT_REG_ADDR 0x11f24
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_OSTAND_LIMIT_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_WDMA_WXACT_OSTAND_LIMIT_FIELD_MASK 0xff000000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcbe_wdma_wxact_ostand_limit_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f24 );
    system_isp_write_32( base + 0x11f24, ( ( ( uint32_t )( data & 0xff ) ) << 24 ) | ( curr & 0xffffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcbe_wdma_wxact_ostand_limit_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f24 ) & 0xff000000 ) >> 24 );
}
// ------------------------------------------------------------------------------ //
// Register: Enable flow control
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Enables the image pipeline flow control to prevent FIFO overflow. When any of the FIFOs is filled above FIFOx_watermark, the pipeline is stopped until FIFO is drained to the AXI bus.
//
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_ENABLE_FLOW_CONTROL_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_ENABLE_FLOW_CONTROL_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_ENABLE_FLOW_CONTROL_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_ENABLE_FLOW_CONTROL_REG_ADDR 0x11f28
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_ENABLE_FLOW_CONTROL_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_ENABLE_FLOW_CONTROL_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_mcbe_enable_flow_control_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f28 );
    system_isp_write_32( base + 0x11f28, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcbe_enable_flow_control_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f28 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Fifo1 watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  FIFO1 watermark for ISP flow control (out_fromat_mux_a1 output). Recommended value is 240.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO1_WATERMARK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO1_WATERMARK_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO1_WATERMARK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO1_WATERMARK_REG_ADDR 0x11f2c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO1_WATERMARK_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO1_WATERMARK_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcbe_fifo1_watermark_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f2c );
    system_isp_write_32( base + 0x11f2c, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcbe_fifo1_watermark_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f2c ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Fifo2 watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  FIFO2 watermark for ISP flow control (out_fromat_mux_a2 output). Recommended value is 240.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO2_WATERMARK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO2_WATERMARK_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO2_WATERMARK_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO2_WATERMARK_REG_ADDR 0x11f2c
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO2_WATERMARK_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO2_WATERMARK_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcbe_fifo2_watermark_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f2c );
    system_isp_write_32( base + 0x11f2c, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcbe_fifo2_watermark_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f2c ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Fifo3 watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  FIFO3 watermark for ISP flow control (out_fromat_mux_a3 output). Recommended value is 240.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO3_WATERMARK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO3_WATERMARK_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO3_WATERMARK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO3_WATERMARK_REG_ADDR 0x11f30
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO3_WATERMARK_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO3_WATERMARK_FIELD_MASK 0xff

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcbe_fifo3_watermark_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f30 );
    system_isp_write_32( base + 0x11f30, ( ( ( uint32_t )( data & 0xff ) ) << 0 ) | ( curr & 0xffffff00 ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcbe_fifo3_watermark_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f30 ) & 0xff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Fifo4 watermark
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  FIFO4 watermark for ISP flow control (pixel consistency plane output). Recommended value is 112.
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO4_WATERMARK_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO4_WATERMARK_DATASIZE 8
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO4_WATERMARK_FIELD_OFFSET 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO4_WATERMARK_REG_ADDR 0x11f30
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO4_WATERMARK_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_MCBE_FIFO4_WATERMARK_FIELD_MASK 0xff0000

// args: data (8-bit)
static __inline void acamera_config_frontend_copy_mcbe_fifo4_watermark_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f30 );
    system_isp_write_32( base + 0x11f30, ( ( ( uint32_t )( data & 0xff ) ) << 16 ) | ( curr & 0xff00ffff ) );
}
static __inline uint8_t acamera_config_frontend_copy_mcbe_fifo4_watermark_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f30 ) & 0xff0000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Group: Pipeline frontend
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Miscellaneous top-level ISP controls
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Enable config lock
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  Enable clock cross locking of the configuration updates
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_ENABLE_CONFIG_LOCK_DEFAULT 1
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_ENABLE_CONFIG_LOCK_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_ENABLE_CONFIG_LOCK_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_ENABLE_CONFIG_LOCK_REG_ADDR 0x1180c
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_ENABLE_CONFIG_LOCK_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_ENABLE_CONFIG_LOCK_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_pipeline_frontend_enable_config_lock_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1180c );
    system_isp_write_32( base + 0x1180c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_pipeline_frontend_enable_config_lock_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1180c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Disable MCFE
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Disable multichannel frontend
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_DISABLE_MCFE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_DISABLE_MCFE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_DISABLE_MCFE_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_DISABLE_MCFE_REG_ADDR 0x1180c
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_DISABLE_MCFE_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_DISABLE_MCFE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_pipeline_frontend_disable_mcfe_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1180c );
    system_isp_write_32( base + 0x1180c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_pipeline_frontend_disable_mcfe_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1180c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Bypass MCFE
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Bypass multichannel frontend
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_BYPASS_MCFE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_BYPASS_MCFE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_BYPASS_MCFE_FIELD_OFFSET 2
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_BYPASS_MCFE_REG_ADDR 0x1180c
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_BYPASS_MCFE_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_BYPASS_MCFE_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_pipeline_frontend_bypass_mcfe_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1180c );
    system_isp_write_32( base + 0x1180c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_config_frontend_copy_pipeline_frontend_bypass_mcfe_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1180c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Position Video test gen
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Video test generator position
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_POSITION_VIDEO_TEST_GEN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_POSITION_VIDEO_TEST_GEN_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_POSITION_VIDEO_TEST_GEN_FIELD_OFFSET 3
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_POSITION_VIDEO_TEST_GEN_REG_ADDR 0x1180c
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_POSITION_VIDEO_TEST_GEN_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_POSITION_VIDEO_TEST_GEN_FIELD_MASK 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_POSITION_VIDEO_TEST_GEN_AFTER_MCFE ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_POSITION_VIDEO_TEST_GEN_AFTER_INPUT_PORTS ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_pipeline_frontend_position_video_test_gen_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1180c );
    system_isp_write_32( base + 0x1180c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_config_frontend_copy_pipeline_frontend_position_video_test_gen_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1180c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Register: Histogram1 switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Location of the channel 1 histogram
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM1_SWITCH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM1_SWITCH_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM1_SWITCH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM1_SWITCH_REG_ADDR 0x11810
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM1_SWITCH_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM1_SWITCH_FIELD_MASK 0x3
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM1_SWITCH_SENSOR_INPUT_1_BITS_190_CONTRIBUTE_TO_HISTOGRAM ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM1_SWITCH_SENSOR_INPUT_1_BITS_110_CONTRIBUTE_TO_HISTOGRAM ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM1_SWITCH_ISP_PIPELINE_TAP_1 ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM1_SWITCH_OFF ( 3 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_pipeline_frontend_histogram1_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11810 );
    system_isp_write_32( base + 0x11810, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_config_frontend_copy_pipeline_frontend_histogram1_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11810 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Histogram2 switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Location of the channel 2 histogram
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM2_SWITCH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM2_SWITCH_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM2_SWITCH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM2_SWITCH_REG_ADDR 0x11814
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM2_SWITCH_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM2_SWITCH_FIELD_MASK 0x3
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM2_SWITCH_SENSOR_INPUT_2_BITS_190_CONTRIBUTE_TO_HISTOGRAM ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM2_SWITCH_SENSOR_INPUT_2_BITS_110_CONTRIBUTE_TO_HISTOGRAM ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM2_SWITCH_ISP_PIPELINE_TAP_2 ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM2_SWITCH_OFF ( 3 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_pipeline_frontend_histogram2_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11814 );
    system_isp_write_32( base + 0x11814, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_config_frontend_copy_pipeline_frontend_histogram2_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11814 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Histogram3 switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Location of the channel 3 histogram
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM3_SWITCH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM3_SWITCH_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM3_SWITCH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM3_SWITCH_REG_ADDR 0x11818
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM3_SWITCH_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM3_SWITCH_FIELD_MASK 0x3
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM3_SWITCH_SENSOR_INPUT_3_BITS_190_CONTRIBUTE_TO_HISTOGRAM ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM3_SWITCH_SENSOR_INPUT_3_BITS_110_CONTRIBUTE_TO_HISTOGRAM ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM3_SWITCH_ISP_PIPELINE_TAP_3 ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM3_SWITCH_OFF ( 3 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_pipeline_frontend_histogram3_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11818 );
    system_isp_write_32( base + 0x11818, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_config_frontend_copy_pipeline_frontend_histogram3_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11818 ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Histogram4 switch
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Location of the channel 4 histogram
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM4_SWITCH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM4_SWITCH_DATASIZE 2
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM4_SWITCH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM4_SWITCH_REG_ADDR 0x1181c
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM4_SWITCH_OFFSET 0x1c
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM4_SWITCH_FIELD_MASK 0x3
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM4_SWITCH_SENSOR_INPUT_4_BITS_190_CONTRIBUTE_TO_HISTOGRAM ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM4_SWITCH_SENSOR_INPUT_4_BITS_110_CONTRIBUTE_TO_HISTOGRAM ( 1 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM4_SWITCH_ISP_PIPELINE_TAP__4 ( 2 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_HISTOGRAM4_SWITCH_OFF ( 3 )

// args: data (2-bit)
static __inline void acamera_config_frontend_copy_pipeline_frontend_histogram4_switch_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1181c );
    system_isp_write_32( base + 0x1181c, ( ( ( uint32_t )( data & 0x3 ) ) << 0 ) | ( curr & 0xfffffffc ) );
}
static __inline uint8_t acamera_config_frontend_copy_pipeline_frontend_histogram4_switch_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1181c ) & 0x3 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Global FSM reset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Reset of state machines
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_GLOBAL_FSM_RESET_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_GLOBAL_FSM_RESET_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_GLOBAL_FSM_RESET_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_GLOBAL_FSM_RESET_REG_ADDR 0x11820
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_GLOBAL_FSM_RESET_OFFSET 0x20
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_GLOBAL_FSM_RESET_FIELD_MASK 0x1
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_GLOBAL_FSM_RESET_NORMAL_OPERATION ( 0 )
#define ACAMERA_CONFIG_FRONTEND_COPY_PIPELINE_FRONTEND_GLOBAL_FSM_RESET_SYNCHRONOUS_RESET_OF_FSMS_IN_DESIGN_FASTER_RECOVERY_AFTER_BROKEN_FRAME ( 1 )

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_pipeline_frontend_global_fsm_reset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11820 );
    system_isp_write_32( base + 0x11820, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_pipeline_frontend_global_fsm_reset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11820 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Check sensor 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Manual triggering of the fault
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_MANUAL_TRIGGER_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_MANUAL_TRIGGER_REG_ADDR 0x11f80
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_MANUAL_TRIGGER_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_MANUAL_TRIGGER_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_1_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f80 );
    system_isp_write_32( base + 0x11f80, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_check_sensor_1_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f80 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Field mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0=pulse; 1=edge
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_FIELD_MODE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_FIELD_MODE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_FIELD_MODE_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_FIELD_MODE_REG_ADDR 0x11f80
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_FIELD_MODE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_FIELD_MODE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_1_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f80 );
    system_isp_write_32( base + 0x11f80, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_check_sensor_1_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f80 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active width
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_WIDTH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_WIDTH_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_WIDTH_REG_ADDR 0x11f84
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_WIDTH_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_WIDTH_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_1_active_width_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11f84, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_1_active_width_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11f84 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active height
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_HEIGHT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_HEIGHT_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_HEIGHT_REG_ADDR 0x11f88
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_HEIGHT_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_ACTIVE_HEIGHT_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_1_active_height_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11f88, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_1_active_height_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11f88 );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MIN_REG_ADDR 0x11f8c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MIN_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_1_hblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11f8c, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_1_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11f8c );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MAX_REG_ADDR 0x11f90
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MAX_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_1_hblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11f90, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_1_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11f90 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MIN_REG_ADDR 0x11f94
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MIN_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_1_vblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11f94, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_1_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11f94 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MAX_REG_ADDR 0x11f98
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MAX_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_1_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_1_vblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11f98, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_1_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11f98 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Check sensor 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Manual triggering of the fault
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_MANUAL_TRIGGER_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_MANUAL_TRIGGER_REG_ADDR 0x11fa0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_MANUAL_TRIGGER_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_MANUAL_TRIGGER_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_2_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11fa0 );
    system_isp_write_32( base + 0x11fa0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_check_sensor_2_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11fa0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Field mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0=pulse; 1=edge
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_FIELD_MODE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_FIELD_MODE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_FIELD_MODE_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_FIELD_MODE_REG_ADDR 0x11fa0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_FIELD_MODE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_FIELD_MODE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_2_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11fa0 );
    system_isp_write_32( base + 0x11fa0, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_check_sensor_2_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11fa0 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active width
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_WIDTH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_WIDTH_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_WIDTH_REG_ADDR 0x11fa4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_WIDTH_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_WIDTH_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_2_active_width_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fa4, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_2_active_width_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fa4 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active height
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_HEIGHT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_HEIGHT_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_HEIGHT_REG_ADDR 0x11fa8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_HEIGHT_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_ACTIVE_HEIGHT_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_2_active_height_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fa8, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_2_active_height_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fa8 );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MIN_REG_ADDR 0x11fac
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MIN_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_2_hblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fac, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_2_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fac );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MAX_REG_ADDR 0x11fb0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MAX_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_2_hblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fb0, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_2_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fb0 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MIN_REG_ADDR 0x11fb4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MIN_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_2_vblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fb4, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_2_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fb4 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MAX_REG_ADDR 0x11fb8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MAX_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_2_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_2_vblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fb8, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_2_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fb8 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Check sensor 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Manual triggering of the fault
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_MANUAL_TRIGGER_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_MANUAL_TRIGGER_REG_ADDR 0x11fc0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_MANUAL_TRIGGER_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_MANUAL_TRIGGER_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_3_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11fc0 );
    system_isp_write_32( base + 0x11fc0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_check_sensor_3_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11fc0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Field mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0=pulse; 1=edge
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_FIELD_MODE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_FIELD_MODE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_FIELD_MODE_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_FIELD_MODE_REG_ADDR 0x11fc0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_FIELD_MODE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_FIELD_MODE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_3_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11fc0 );
    system_isp_write_32( base + 0x11fc0, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_check_sensor_3_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11fc0 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active width
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_WIDTH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_WIDTH_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_WIDTH_REG_ADDR 0x11fc4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_WIDTH_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_WIDTH_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_3_active_width_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fc4, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_3_active_width_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fc4 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active height
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_HEIGHT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_HEIGHT_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_HEIGHT_REG_ADDR 0x11fc8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_HEIGHT_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_ACTIVE_HEIGHT_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_3_active_height_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fc8, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_3_active_height_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fc8 );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MIN_REG_ADDR 0x11fcc
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MIN_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_3_hblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fcc, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_3_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fcc );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MAX_REG_ADDR 0x11fd0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MAX_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_3_hblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fd0, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_3_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fd0 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MIN_REG_ADDR 0x11fd4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MIN_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_3_vblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fd4, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_3_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fd4 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MAX_REG_ADDR 0x11fd8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MAX_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_3_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_3_vblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fd8, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_3_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fd8 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame Check sensor 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Manual trigger
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Manual triggering of the fault
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_MANUAL_TRIGGER_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_MANUAL_TRIGGER_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_MANUAL_TRIGGER_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_MANUAL_TRIGGER_REG_ADDR 0x11fe0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_MANUAL_TRIGGER_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_MANUAL_TRIGGER_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_4_manual_trigger_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11fe0 );
    system_isp_write_32( base + 0x11fe0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_check_sensor_4_manual_trigger_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11fe0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Field mode
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 0=pulse; 1=edge
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_FIELD_MODE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_FIELD_MODE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_FIELD_MODE_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_FIELD_MODE_REG_ADDR 0x11fe0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_FIELD_MODE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_FIELD_MODE_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_4_field_mode_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11fe0 );
    system_isp_write_32( base + 0x11fe0, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_check_sensor_4_field_mode_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11fe0 ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active width
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_WIDTH_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_WIDTH_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_WIDTH_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_WIDTH_REG_ADDR 0x11fe4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_WIDTH_OFFSET 0x4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_WIDTH_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_4_active_width_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fe4, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_4_active_width_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fe4 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected active height
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_HEIGHT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_HEIGHT_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_HEIGHT_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_HEIGHT_REG_ADDR 0x11fe8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_HEIGHT_OFFSET 0x8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_ACTIVE_HEIGHT_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_4_active_height_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fe8, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_4_active_height_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fe8 );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MIN_REG_ADDR 0x11fec
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MIN_OFFSET 0xc
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_4_hblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11fec, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_4_hblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fec );
}
// ------------------------------------------------------------------------------ //
// Register: Hblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal horizontal blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MAX_REG_ADDR 0x11ff0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MAX_OFFSET 0x10
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_HBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_4_hblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11ff0, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_4_hblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ff0 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank min
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected minimal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MIN_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MIN_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MIN_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MIN_REG_ADDR 0x11ff4
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MIN_OFFSET 0x14
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MIN_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_4_vblank_min_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11ff4, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_4_vblank_min_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ff4 );
}
// ------------------------------------------------------------------------------ //
// Register: Vblank max
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Expected maximal vertical blank
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MAX_DEFAULT 4294967295
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MAX_DATASIZE 32
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MAX_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MAX_REG_ADDR 0x11ff8
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MAX_OFFSET 0x18
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_CHECK_SENSOR_4_VBLANK_MAX_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_config_frontend_copy_frame_check_sensor_4_vblank_max_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11ff8, data );
}
static __inline uint32_t acamera_config_frontend_copy_frame_check_sensor_4_vblank_max_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11ff8 );
}
// ------------------------------------------------------------------------------ //
// Group: MCFE job ID
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: MCFE job ID
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_JOB_ID_MCFE_JOB_ID_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_JOB_ID_MCFE_JOB_ID_DATASIZE 16
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_JOB_ID_MCFE_JOB_ID_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_JOB_ID_MCFE_JOB_ID_REG_ADDR 0x11f40
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_JOB_ID_MCFE_JOB_ID_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_MCFE_JOB_ID_MCFE_JOB_ID_FIELD_MASK 0xffff

// args: data (16-bit)
static __inline uint16_t acamera_config_frontend_copy_mcfe_job_id_mcfe_job_id_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11f40 ) & 0xffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter sensor control
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Stat hold
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Hold the statistics for atomic read
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_HOLD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_HOLD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_HOLD_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_HOLD_REG_ADDR 0x11f3c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_HOLD_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_HOLD_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_counter_sensor_control_stat_hold_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f3c );
    system_isp_write_32( base + 0x11f3c, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_counter_sensor_control_stat_hold_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f3c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Stat reset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
//  1 - clear the counter
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_RESET_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_RESET_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_RESET_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_RESET_REG_ADDR 0x11f3c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_RESET_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_CONTROL_STAT_RESET_FIELD_MASK 0x2

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_counter_sensor_control_stat_reset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f3c );
    system_isp_write_32( base + 0x11f3c, ( ( ( uint32_t )( data & 0x1 ) ) << 1 ) | ( curr & 0xfffffffd ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_counter_sensor_control_stat_reset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f3c ) & 0x2 ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP control
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Stat hold
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Hold the statistics for atomic read
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_HOLD_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_HOLD_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_HOLD_FIELD_OFFSET 2
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_HOLD_REG_ADDR 0x11f3c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_HOLD_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_HOLD_FIELD_MASK 0x4

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_counter_isp_control_stat_hold_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f3c );
    system_isp_write_32( base + 0x11f3c, ( ( ( uint32_t )( data & 0x1 ) ) << 2 ) | ( curr & 0xfffffffb ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_control_stat_hold_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f3c ) & 0x4 ) >> 2 );
}
// ------------------------------------------------------------------------------ //
// Register: Stat reset
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// 1 - clear the counter
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_RESET_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_RESET_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_RESET_FIELD_OFFSET 3
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_RESET_REG_ADDR 0x11f3c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_RESET_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_CONTROL_STAT_RESET_FIELD_MASK 0x8

// args: data (1-bit)
static __inline void acamera_config_frontend_copy_frame_counter_isp_control_stat_reset_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f3c );
    system_isp_write_32( base + 0x11f3c, ( ( ( uint32_t )( data & 0x1 ) ) << 3 ) | ( curr & 0xfffffff7 ) );
}
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_control_stat_reset_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f3c ) & 0x8 ) >> 3 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter sensor 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_ACTIVE_REG_ADDR 0x11f44
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_sensor_1_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f44 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f44
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_sensor_1_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f44 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_REG_ADDR 0x11f44
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_1_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_sensor_1_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f44 ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter sensor 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_ACTIVE_REG_ADDR 0x11f48
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_sensor_2_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f48 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f48
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_sensor_2_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f48 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_REG_ADDR 0x11f48
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_2_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_sensor_2_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f48 ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter sensor 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_ACTIVE_REG_ADDR 0x11f4c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_sensor_3_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f4c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f4c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_sensor_3_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f4c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_REG_ADDR 0x11f4c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_3_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_sensor_3_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f4c ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter sensor 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_ACTIVE_REG_ADDR 0x11f50
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_sensor_4_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f50 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f50
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_sensor_4_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f50 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_REG_ADDR 0x11f50
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_SENSOR_4_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_sensor_4_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f50 ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP start
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_ACTIVE_REG_ADDR 0x11f54
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_start_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f54 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f54
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_start_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f54 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_REG_ADDR 0x11f54
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_START_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_isp_start_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f54 ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP VTPG
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_ACTIVE_REG_ADDR 0x11f58
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_vtpg_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f58 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f58
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_vtpg_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f58 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_REG_ADDR 0x11f58
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_VTPG_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_isp_vtpg_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f58 ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP Iridix
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_ACTIVE_REG_ADDR 0x11f5c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_iridix_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f5c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f5c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_iridix_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f5c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_REG_ADDR 0x11f5c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_IRIDIX_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_isp_iridix_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f5c ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP Demosaic
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_ACTIVE_REG_ADDR 0x11f60
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_demosaic_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f60 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f60
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_demosaic_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f60 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_REG_ADDR 0x11f60
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_DEMOSAIC_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_isp_demosaic_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f60 ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP out 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_ACTIVE_REG_ADDR 0x11f64
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_1_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f64 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f64
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_1_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f64 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_REG_ADDR 0x11f64
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_1_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_isp_out_1_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f64 ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP out 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_ACTIVE_REG_ADDR 0x11f68
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_2_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f68 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f68
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_2_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f68 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_REG_ADDR 0x11f68
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_2_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_isp_out_2_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f68 ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP out 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_ACTIVE_REG_ADDR 0x11f6c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_3_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f6c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f6c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_3_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f6c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_REG_ADDR 0x11f6c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_3_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_isp_out_3_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f6c ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP out AXI 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_ACTIVE_REG_ADDR 0x11f70
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_axi_1_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f70 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f70
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_axi_1_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f70 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_REG_ADDR 0x11f70
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_1_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_isp_out_axi_1_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f70 ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP out AXI 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_ACTIVE_REG_ADDR 0x11f74
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_axi_2_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f74 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f74
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_axi_2_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f74 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_REG_ADDR 0x11f74
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_2_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_isp_out_axi_2_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f74 ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP out AXI 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_ACTIVE_REG_ADDR 0x11f78
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_axi_3_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f78 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f78
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_out_axi_3_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f78 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_REG_ADDR 0x11f78
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_OUT_AXI_3_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_isp_out_axi_3_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f78 ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
// Group: Frame counter ISP PC AXI
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Frame active
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active video flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_ACTIVE_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_ACTIVE_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_ACTIVE_FIELD_OFFSET 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_ACTIVE_REG_ADDR 0x11f7c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_ACTIVE_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_ACTIVE_FIELD_MASK 0x1

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_pc_axi_frame_active_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f7c ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count overflow
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Counter overflow flag
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_OVERFLOW_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_OVERFLOW_DATASIZE 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_OVERFLOW_FIELD_OFFSET 31
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_OVERFLOW_REG_ADDR 0x11f7c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_OVERFLOW_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_OVERFLOW_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_config_frontend_copy_frame_counter_isp_pc_axi_frame_count_overflow_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f7c ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
// Register: Frame count
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame count
// ------------------------------------------------------------------------------ //

#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_DEFAULT 0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_DATASIZE 24
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_FIELD_OFFSET 1
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_REG_ADDR 0x11f7c
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_OFFSET 0x0
#define ACAMERA_CONFIG_FRONTEND_COPY_FRAME_COUNTER_ISP_PC_AXI_FRAME_COUNT_FIELD_MASK 0x1fffffe

// args: data (24-bit)
static __inline uint32_t acamera_config_frontend_copy_frame_counter_isp_pc_axi_frame_count_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x11f7c ) & 0x1fffffe ) >> 1 );
}
// ------------------------------------------------------------------------------ //
#endif //__ACAMERA_CONFIG_FRONTEND_COPY_CONFIG_H__
