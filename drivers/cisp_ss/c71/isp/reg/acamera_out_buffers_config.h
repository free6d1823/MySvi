//----------------------------------------------------------------------------
//   The confidential and proprietary information contained in this file may
//   only be used by a person authorised under and to the extent permitted
//   by a subsisting licensing agreement from ARM Limited or its affiliates.
//
//          (C) COPYRIGHT [2019] ARM Limited or its affiliates.
//              ALL RIGHTS RESERVED
//
//   This entire notice must be reproduced on all copies of this file
//   and copies of this file may only be made by a person if such person is
//   permitted to do so under the terms of a subsisting license agreement
//   from ARM Limited or its affiliates.
//----------------------------------------------------------------------------

#ifndef __ACAMERA_OUT_BUFFERS_CONFIG_H__
#define __ACAMERA_OUT_BUFFERS_CONFIG_H__

#include "system_isp_io.h"

// File generated by isp_config.py

// ------------------------------------------------------------------------------ //
// Instance 'out_buffers' of module 'out_buffers'
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_BASE_ADDR ( 0x1000 )
#define ACAMERA_OUT_BUFFERS_SIZE ( 0x800 )

// ------------------------------------------------------------------------------ //
// Group: out_buffers
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Configuration of frame buffers
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Register: Buffer valid 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 0 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_0_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_0_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_0_REG_ADDR 0x1000
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_0_OFFSET 0x0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_0_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1000 );
    system_isp_write_32( base + 0x1000, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1000 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_0_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_0_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_0_REG_ADDR 0x1000
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_0_OFFSET 0x0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_0_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1000 );
    system_isp_write_32( base + 0x1000, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1000 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_0_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_0_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_0_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_0_REG_ADDR 0x1000
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_0_OFFSET 0x0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_0_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1000 );
    system_isp_write_32( base + 0x1000, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1000 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_0_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_0_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_0_REG_ADDR 0x1000
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_0_OFFSET 0x0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_0_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1000 );
    system_isp_write_32( base + 0x1000, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1000 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_0_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_0_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_0_REG_ADDR 0x1000
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_0_OFFSET 0x0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_0_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1000 );
    system_isp_write_32( base + 0x1000, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1000 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_0_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_0_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_0_REG_ADDR 0x1000
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_0_OFFSET 0x0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_0_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1000 );
    system_isp_write_32( base + 0x1000, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1000 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_0_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_0_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_0_REG_ADDR 0x1004
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_0_OFFSET 0x4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_0_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_0_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1004, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_0_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1004 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_0_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_0_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_0_REG_ADDR 0x1008
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_0_OFFSET 0x8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_0_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_0_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1008, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_0_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1008 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_0_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_0_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_0_REG_ADDR 0x100c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_0_OFFSET 0xc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_0_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x100c );
    system_isp_write_32( base + 0x100c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x100c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_0_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_0_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_0_REG_ADDR 0x1010
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_0_OFFSET 0x10
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_0_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1010 );
    system_isp_write_32( base + 0x1010, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1010 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_0_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_0_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_0_REG_ADDR 0x1014
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_0_OFFSET 0x14
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_0_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_0_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1014 );
    system_isp_write_32( base + 0x1014, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_0_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1014 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_0_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_0_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_0_REG_ADDR 0x1018
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_0_OFFSET 0x18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_0_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_0_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1018 );
    system_isp_write_32( base + 0x1018, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_0_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1018 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 0
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_0_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_0_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_0_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_0_REG_ADDR 0x101c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_0_OFFSET 0x1c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_0_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_0_read( uint32_t base )
{
    return system_isp_read_32( base + 0x101c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 1 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_1_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_1_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_1_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_1_REG_ADDR 0x1020
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_1_OFFSET 0x20
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_1_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1020 );
    system_isp_write_32( base + 0x1020, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1020 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_1_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_1_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_1_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_1_REG_ADDR 0x1020
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_1_OFFSET 0x20
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_1_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1020 );
    system_isp_write_32( base + 0x1020, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1020 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_1_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_1_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_1_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_1_REG_ADDR 0x1020
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_1_OFFSET 0x20
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_1_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1020 );
    system_isp_write_32( base + 0x1020, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1020 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_1_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_1_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_1_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_1_REG_ADDR 0x1020
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_1_OFFSET 0x20
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_1_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1020 );
    system_isp_write_32( base + 0x1020, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1020 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_1_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_1_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_1_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_1_REG_ADDR 0x1020
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_1_OFFSET 0x20
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_1_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1020 );
    system_isp_write_32( base + 0x1020, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1020 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_1_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_1_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_1_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_1_REG_ADDR 0x1024
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_1_OFFSET 0x24
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_1_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_1_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1024, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_1_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1024 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_1_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_1_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_1_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_1_REG_ADDR 0x1028
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_1_OFFSET 0x28
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_1_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_1_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1028, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_1_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1028 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_1_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_1_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_1_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_1_REG_ADDR 0x102c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_1_OFFSET 0x2c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_1_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x102c );
    system_isp_write_32( base + 0x102c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x102c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_1_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_1_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_1_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_1_REG_ADDR 0x1030
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_1_OFFSET 0x30
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_1_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1030 );
    system_isp_write_32( base + 0x1030, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1030 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_1_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_1_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_1_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_1_REG_ADDR 0x1034
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_1_OFFSET 0x34
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_1_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_1_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1034 );
    system_isp_write_32( base + 0x1034, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_1_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1034 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_1_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_1_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_1_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_1_REG_ADDR 0x1038
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_1_OFFSET 0x38
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_1_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_1_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1038 );
    system_isp_write_32( base + 0x1038, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_1_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1038 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 1
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_1_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_1_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_1_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_1_REG_ADDR 0x103c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_1_OFFSET 0x3c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_1_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_1_read( uint32_t base )
{
    return system_isp_read_32( base + 0x103c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 2 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_2_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_2_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_2_REG_ADDR 0x1040
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_2_OFFSET 0x40
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_2_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1040 );
    system_isp_write_32( base + 0x1040, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1040 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_2_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_2_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_2_REG_ADDR 0x1040
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_2_OFFSET 0x40
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_2_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1040 );
    system_isp_write_32( base + 0x1040, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1040 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_2_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_2_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_2_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_2_REG_ADDR 0x1040
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_2_OFFSET 0x40
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_2_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1040 );
    system_isp_write_32( base + 0x1040, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1040 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_2_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_2_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_2_REG_ADDR 0x1040
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_2_OFFSET 0x40
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_2_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1040 );
    system_isp_write_32( base + 0x1040, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1040 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_2_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_2_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_2_REG_ADDR 0x1040
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_2_OFFSET 0x40
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_2_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1040 );
    system_isp_write_32( base + 0x1040, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1040 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_2_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_2_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_2_REG_ADDR 0x1040
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_2_OFFSET 0x40
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_2_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1040 );
    system_isp_write_32( base + 0x1040, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1040 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_2_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_2_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_2_REG_ADDR 0x1044
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_2_OFFSET 0x44
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_2_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_2_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1044, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_2_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1044 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_2_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_2_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_2_REG_ADDR 0x1048
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_2_OFFSET 0x48
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_2_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_2_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1048, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_2_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1048 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_2_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_2_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_2_REG_ADDR 0x104c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_2_OFFSET 0x4c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_2_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x104c );
    system_isp_write_32( base + 0x104c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x104c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_2_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_2_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_2_REG_ADDR 0x1050
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_2_OFFSET 0x50
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_2_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1050 );
    system_isp_write_32( base + 0x1050, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1050 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_2_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_2_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_2_REG_ADDR 0x1054
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_2_OFFSET 0x54
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_2_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_2_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1054 );
    system_isp_write_32( base + 0x1054, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_2_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1054 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_2_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_2_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_2_REG_ADDR 0x1058
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_2_OFFSET 0x58
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_2_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_2_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1058 );
    system_isp_write_32( base + 0x1058, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_2_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1058 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 2
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_2_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_2_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_2_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_2_REG_ADDR 0x105c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_2_OFFSET 0x5c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_2_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_2_read( uint32_t base )
{
    return system_isp_read_32( base + 0x105c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 3 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_3_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_3_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_3_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_3_REG_ADDR 0x1060
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_3_OFFSET 0x60
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_3_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1060 );
    system_isp_write_32( base + 0x1060, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1060 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_3_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_3_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_3_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_3_REG_ADDR 0x1060
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_3_OFFSET 0x60
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_3_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1060 );
    system_isp_write_32( base + 0x1060, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1060 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_3_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_3_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_3_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_3_REG_ADDR 0x1060
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_3_OFFSET 0x60
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_3_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1060 );
    system_isp_write_32( base + 0x1060, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1060 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_3_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_3_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_3_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_3_REG_ADDR 0x1060
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_3_OFFSET 0x60
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_3_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1060 );
    system_isp_write_32( base + 0x1060, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1060 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_3_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_3_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_3_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_3_REG_ADDR 0x1060
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_3_OFFSET 0x60
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_3_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1060 );
    system_isp_write_32( base + 0x1060, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1060 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_3_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_3_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_3_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_3_REG_ADDR 0x1064
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_3_OFFSET 0x64
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_3_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_3_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1064, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_3_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1064 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_3_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_3_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_3_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_3_REG_ADDR 0x1068
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_3_OFFSET 0x68
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_3_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_3_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1068, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_3_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1068 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_3_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_3_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_3_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_3_REG_ADDR 0x106c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_3_OFFSET 0x6c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_3_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x106c );
    system_isp_write_32( base + 0x106c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x106c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_3_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_3_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_3_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_3_REG_ADDR 0x1070
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_3_OFFSET 0x70
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_3_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1070 );
    system_isp_write_32( base + 0x1070, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1070 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_3_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_3_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_3_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_3_REG_ADDR 0x1074
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_3_OFFSET 0x74
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_3_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_3_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1074 );
    system_isp_write_32( base + 0x1074, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_3_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1074 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_3_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_3_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_3_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_3_REG_ADDR 0x1078
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_3_OFFSET 0x78
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_3_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_3_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1078 );
    system_isp_write_32( base + 0x1078, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_3_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1078 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 3
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_3_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_3_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_3_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_3_REG_ADDR 0x107c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_3_OFFSET 0x7c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_3_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_3_read( uint32_t base )
{
    return system_isp_read_32( base + 0x107c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 4 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_4_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_4_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_4_REG_ADDR 0x1080
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_4_OFFSET 0x80
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_4_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1080 );
    system_isp_write_32( base + 0x1080, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1080 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_4_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_4_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_4_REG_ADDR 0x1080
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_4_OFFSET 0x80
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_4_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1080 );
    system_isp_write_32( base + 0x1080, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1080 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_4_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_4_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_4_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_4_REG_ADDR 0x1080
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_4_OFFSET 0x80
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_4_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1080 );
    system_isp_write_32( base + 0x1080, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1080 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_4_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_4_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_4_REG_ADDR 0x1080
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_4_OFFSET 0x80
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_4_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1080 );
    system_isp_write_32( base + 0x1080, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1080 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_4_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_4_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_4_REG_ADDR 0x1080
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_4_OFFSET 0x80
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_4_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1080 );
    system_isp_write_32( base + 0x1080, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1080 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_4_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_4_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_4_REG_ADDR 0x1080
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_4_OFFSET 0x80
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_4_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1080 );
    system_isp_write_32( base + 0x1080, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1080 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_4_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_4_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_4_REG_ADDR 0x1084
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_4_OFFSET 0x84
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_4_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_4_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1084, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_4_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1084 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_4_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_4_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_4_REG_ADDR 0x1088
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_4_OFFSET 0x88
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_4_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_4_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1088, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_4_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1088 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_4_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_4_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_4_REG_ADDR 0x108c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_4_OFFSET 0x8c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_4_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_4_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x108c );
    system_isp_write_32( base + 0x108c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x108c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_4_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_4_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_4_REG_ADDR 0x1090
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_4_OFFSET 0x90
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_4_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_4_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1090 );
    system_isp_write_32( base + 0x1090, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1090 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_4_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_4_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_4_REG_ADDR 0x1094
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_4_OFFSET 0x94
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_4_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_4_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1094 );
    system_isp_write_32( base + 0x1094, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_4_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1094 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_4_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_4_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_4_REG_ADDR 0x1098
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_4_OFFSET 0x98
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_4_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_4_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1098 );
    system_isp_write_32( base + 0x1098, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_4_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1098 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 4
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_4_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_4_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_4_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_4_REG_ADDR 0x109c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_4_OFFSET 0x9c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_4_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_4_read( uint32_t base )
{
    return system_isp_read_32( base + 0x109c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 5 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_5_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_5_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_5_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_5_REG_ADDR 0x10a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_5_OFFSET 0xa0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_5_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10a0 );
    system_isp_write_32( base + 0x10a0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10a0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_5_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_5_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_5_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_5_REG_ADDR 0x10a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_5_OFFSET 0xa0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_5_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10a0 );
    system_isp_write_32( base + 0x10a0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10a0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_5_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_5_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_5_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_5_REG_ADDR 0x10a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_5_OFFSET 0xa0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_5_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10a0 );
    system_isp_write_32( base + 0x10a0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10a0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_5_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_5_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_5_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_5_REG_ADDR 0x10a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_5_OFFSET 0xa0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_5_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10a0 );
    system_isp_write_32( base + 0x10a0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10a0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_5_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_5_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_5_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_5_REG_ADDR 0x10a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_5_OFFSET 0xa0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_5_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10a0 );
    system_isp_write_32( base + 0x10a0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10a0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_5_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_5_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_5_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_5_REG_ADDR 0x10a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_5_OFFSET 0xa4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_5_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_5_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x10a4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_5_read( uint32_t base )
{
    return system_isp_read_32( base + 0x10a4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_5_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_5_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_5_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_5_REG_ADDR 0x10a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_5_OFFSET 0xa8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_5_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_5_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x10a8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_5_read( uint32_t base )
{
    return system_isp_read_32( base + 0x10a8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_5_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_5_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_5_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_5_REG_ADDR 0x10ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_5_OFFSET 0xac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_5_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_5_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10ac );
    system_isp_write_32( base + 0x10ac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_5_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x10ac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_5_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_5_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_5_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_5_REG_ADDR 0x10b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_5_OFFSET 0xb0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_5_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_5_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10b0 );
    system_isp_write_32( base + 0x10b0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_5_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x10b0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_5_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_5_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_5_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_5_REG_ADDR 0x10b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_5_OFFSET 0xb4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_5_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_5_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10b4 );
    system_isp_write_32( base + 0x10b4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_5_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x10b4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_5_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_5_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_5_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_5_REG_ADDR 0x10b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_5_OFFSET 0xb8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_5_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_5_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10b8 );
    system_isp_write_32( base + 0x10b8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_5_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10b8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 5
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_5_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_5_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_5_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_5_REG_ADDR 0x10bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_5_OFFSET 0xbc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_5_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_5_read( uint32_t base )
{
    return system_isp_read_32( base + 0x10bc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 6 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_6_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_6_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_6_REG_ADDR 0x10c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_6_OFFSET 0xc0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_6_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10c0 );
    system_isp_write_32( base + 0x10c0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10c0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_6_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_6_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_6_REG_ADDR 0x10c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_6_OFFSET 0xc0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_6_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10c0 );
    system_isp_write_32( base + 0x10c0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10c0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_6_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_6_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_6_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_6_REG_ADDR 0x10c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_6_OFFSET 0xc0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_6_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10c0 );
    system_isp_write_32( base + 0x10c0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10c0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_6_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_6_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_6_REG_ADDR 0x10c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_6_OFFSET 0xc0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_6_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10c0 );
    system_isp_write_32( base + 0x10c0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10c0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_6_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_6_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_6_REG_ADDR 0x10c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_6_OFFSET 0xc0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_6_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10c0 );
    system_isp_write_32( base + 0x10c0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10c0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_6_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_6_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_6_REG_ADDR 0x10c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_6_OFFSET 0xc0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_6_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10c0 );
    system_isp_write_32( base + 0x10c0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10c0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_6_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_6_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_6_REG_ADDR 0x10c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_6_OFFSET 0xc4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_6_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_6_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x10c4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_6_read( uint32_t base )
{
    return system_isp_read_32( base + 0x10c4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_6_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_6_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_6_REG_ADDR 0x10c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_6_OFFSET 0xc8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_6_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_6_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x10c8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_6_read( uint32_t base )
{
    return system_isp_read_32( base + 0x10c8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_6_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_6_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_6_REG_ADDR 0x10cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_6_OFFSET 0xcc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_6_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_6_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10cc );
    system_isp_write_32( base + 0x10cc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_6_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x10cc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_6_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_6_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_6_REG_ADDR 0x10d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_6_OFFSET 0xd0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_6_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_6_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10d0 );
    system_isp_write_32( base + 0x10d0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_6_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x10d0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_6_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_6_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_6_REG_ADDR 0x10d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_6_OFFSET 0xd4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_6_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_6_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10d4 );
    system_isp_write_32( base + 0x10d4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_6_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x10d4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_6_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_6_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_6_REG_ADDR 0x10d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_6_OFFSET 0xd8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_6_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_6_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10d8 );
    system_isp_write_32( base + 0x10d8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_6_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10d8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 6
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_6_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_6_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_6_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_6_REG_ADDR 0x10dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_6_OFFSET 0xdc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_6_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_6_read( uint32_t base )
{
    return system_isp_read_32( base + 0x10dc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 7 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_7_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_7_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_7_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_7_REG_ADDR 0x10e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_7_OFFSET 0xe0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_7_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10e0 );
    system_isp_write_32( base + 0x10e0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10e0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_7_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_7_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_7_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_7_REG_ADDR 0x10e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_7_OFFSET 0xe0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_7_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10e0 );
    system_isp_write_32( base + 0x10e0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10e0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_7_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_7_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_7_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_7_REG_ADDR 0x10e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_7_OFFSET 0xe0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_7_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10e0 );
    system_isp_write_32( base + 0x10e0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10e0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_7_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_7_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_7_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_7_REG_ADDR 0x10e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_7_OFFSET 0xe0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_7_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10e0 );
    system_isp_write_32( base + 0x10e0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10e0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_7_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_7_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_7_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_7_REG_ADDR 0x10e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_7_OFFSET 0xe0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_7_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10e0 );
    system_isp_write_32( base + 0x10e0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10e0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_7_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_7_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_7_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_7_REG_ADDR 0x10e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_7_OFFSET 0xe4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_7_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_7_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x10e4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_7_read( uint32_t base )
{
    return system_isp_read_32( base + 0x10e4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_7_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_7_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_7_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_7_REG_ADDR 0x10e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_7_OFFSET 0xe8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_7_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_7_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x10e8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_7_read( uint32_t base )
{
    return system_isp_read_32( base + 0x10e8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_7_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_7_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_7_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_7_REG_ADDR 0x10ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_7_OFFSET 0xec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_7_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_7_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10ec );
    system_isp_write_32( base + 0x10ec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_7_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x10ec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_7_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_7_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_7_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_7_REG_ADDR 0x10f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_7_OFFSET 0xf0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_7_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_7_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10f0 );
    system_isp_write_32( base + 0x10f0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_7_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x10f0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_7_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_7_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_7_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_7_REG_ADDR 0x10f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_7_OFFSET 0xf4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_7_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_7_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10f4 );
    system_isp_write_32( base + 0x10f4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_7_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x10f4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_7_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_7_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_7_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_7_REG_ADDR 0x10f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_7_OFFSET 0xf8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_7_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_7_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x10f8 );
    system_isp_write_32( base + 0x10f8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_7_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x10f8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 7
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_7_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_7_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_7_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_7_REG_ADDR 0x10fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_7_OFFSET 0xfc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_7_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_7_read( uint32_t base )
{
    return system_isp_read_32( base + 0x10fc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 8 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_8_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_8_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_8_REG_ADDR 0x1100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_8_OFFSET 0x100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_8_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1100 );
    system_isp_write_32( base + 0x1100, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1100 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_8_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_8_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_8_REG_ADDR 0x1100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_8_OFFSET 0x100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_8_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1100 );
    system_isp_write_32( base + 0x1100, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1100 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_8_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_8_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_8_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_8_REG_ADDR 0x1100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_8_OFFSET 0x100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_8_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1100 );
    system_isp_write_32( base + 0x1100, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1100 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_8_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_8_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_8_REG_ADDR 0x1100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_8_OFFSET 0x100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_8_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1100 );
    system_isp_write_32( base + 0x1100, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1100 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_8_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_8_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_8_REG_ADDR 0x1100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_8_OFFSET 0x100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_8_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1100 );
    system_isp_write_32( base + 0x1100, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1100 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_8_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_8_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_8_REG_ADDR 0x1100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_8_OFFSET 0x100
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_8_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1100 );
    system_isp_write_32( base + 0x1100, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1100 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_8_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_8_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_8_REG_ADDR 0x1104
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_8_OFFSET 0x104
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_8_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_8_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1104, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_8_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1104 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_8_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_8_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_8_REG_ADDR 0x1108
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_8_OFFSET 0x108
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_8_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_8_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1108, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_8_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1108 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_8_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_8_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_8_REG_ADDR 0x110c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_8_OFFSET 0x10c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_8_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_8_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x110c );
    system_isp_write_32( base + 0x110c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_8_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x110c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_8_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_8_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_8_REG_ADDR 0x1110
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_8_OFFSET 0x110
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_8_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_8_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1110 );
    system_isp_write_32( base + 0x1110, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_8_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1110 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_8_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_8_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_8_REG_ADDR 0x1114
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_8_OFFSET 0x114
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_8_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_8_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1114 );
    system_isp_write_32( base + 0x1114, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_8_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1114 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_8_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_8_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_8_REG_ADDR 0x1118
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_8_OFFSET 0x118
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_8_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_8_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1118 );
    system_isp_write_32( base + 0x1118, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_8_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1118 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 8
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_8_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_8_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_8_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_8_REG_ADDR 0x111c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_8_OFFSET 0x11c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_8_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_8_read( uint32_t base )
{
    return system_isp_read_32( base + 0x111c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 9 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_9_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_9_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_9_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_9_REG_ADDR 0x1120
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_9_OFFSET 0x120
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_9_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1120 );
    system_isp_write_32( base + 0x1120, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1120 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_9_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_9_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_9_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_9_REG_ADDR 0x1120
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_9_OFFSET 0x120
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_9_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1120 );
    system_isp_write_32( base + 0x1120, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1120 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_9_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_9_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_9_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_9_REG_ADDR 0x1120
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_9_OFFSET 0x120
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_9_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1120 );
    system_isp_write_32( base + 0x1120, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1120 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_9_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_9_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_9_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_9_REG_ADDR 0x1120
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_9_OFFSET 0x120
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_9_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1120 );
    system_isp_write_32( base + 0x1120, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1120 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_9_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_9_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_9_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_9_REG_ADDR 0x1120
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_9_OFFSET 0x120
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_9_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1120 );
    system_isp_write_32( base + 0x1120, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1120 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_9_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_9_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_9_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_9_REG_ADDR 0x1124
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_9_OFFSET 0x124
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_9_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_9_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1124, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_9_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1124 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_9_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_9_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_9_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_9_REG_ADDR 0x1128
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_9_OFFSET 0x128
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_9_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_9_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1128, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_9_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1128 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_9_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_9_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_9_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_9_REG_ADDR 0x112c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_9_OFFSET 0x12c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_9_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_9_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x112c );
    system_isp_write_32( base + 0x112c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_9_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x112c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_9_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_9_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_9_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_9_REG_ADDR 0x1130
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_9_OFFSET 0x130
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_9_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_9_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1130 );
    system_isp_write_32( base + 0x1130, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_9_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1130 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_9_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_9_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_9_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_9_REG_ADDR 0x1134
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_9_OFFSET 0x134
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_9_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_9_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1134 );
    system_isp_write_32( base + 0x1134, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_9_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1134 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_9_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_9_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_9_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_9_REG_ADDR 0x1138
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_9_OFFSET 0x138
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_9_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_9_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1138 );
    system_isp_write_32( base + 0x1138, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_9_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1138 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 9
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_9_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_9_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_9_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_9_REG_ADDR 0x113c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_9_OFFSET 0x13c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_9_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_9_read( uint32_t base )
{
    return system_isp_read_32( base + 0x113c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 10 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_10_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_10_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_10_REG_ADDR 0x1140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_10_OFFSET 0x140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_10_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1140 );
    system_isp_write_32( base + 0x1140, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1140 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_10_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_10_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_10_REG_ADDR 0x1140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_10_OFFSET 0x140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_10_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1140 );
    system_isp_write_32( base + 0x1140, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1140 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_10_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_10_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_10_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_10_REG_ADDR 0x1140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_10_OFFSET 0x140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_10_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1140 );
    system_isp_write_32( base + 0x1140, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1140 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_10_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_10_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_10_REG_ADDR 0x1140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_10_OFFSET 0x140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_10_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1140 );
    system_isp_write_32( base + 0x1140, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1140 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_10_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_10_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_10_REG_ADDR 0x1140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_10_OFFSET 0x140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_10_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1140 );
    system_isp_write_32( base + 0x1140, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1140 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_10_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_10_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_10_REG_ADDR 0x1140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_10_OFFSET 0x140
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_10_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1140 );
    system_isp_write_32( base + 0x1140, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1140 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_10_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_10_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_10_REG_ADDR 0x1144
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_10_OFFSET 0x144
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_10_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_10_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1144, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_10_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1144 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_10_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_10_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_10_REG_ADDR 0x1148
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_10_OFFSET 0x148
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_10_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_10_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1148, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_10_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1148 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_10_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_10_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_10_REG_ADDR 0x114c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_10_OFFSET 0x14c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_10_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x114c );
    system_isp_write_32( base + 0x114c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x114c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_10_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_10_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_10_REG_ADDR 0x1150
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_10_OFFSET 0x150
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_10_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1150 );
    system_isp_write_32( base + 0x1150, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1150 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_10_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_10_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_10_REG_ADDR 0x1154
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_10_OFFSET 0x154
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_10_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_10_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1154 );
    system_isp_write_32( base + 0x1154, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_10_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1154 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_10_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_10_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_10_REG_ADDR 0x1158
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_10_OFFSET 0x158
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_10_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_10_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1158 );
    system_isp_write_32( base + 0x1158, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_10_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1158 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 10
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_10_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_10_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_10_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_10_REG_ADDR 0x115c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_10_OFFSET 0x15c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_10_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_10_read( uint32_t base )
{
    return system_isp_read_32( base + 0x115c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 11 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_11_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_11_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_11_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_11_REG_ADDR 0x1160
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_11_OFFSET 0x160
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_11_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1160 );
    system_isp_write_32( base + 0x1160, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1160 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_11_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_11_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_11_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_11_REG_ADDR 0x1160
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_11_OFFSET 0x160
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_11_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1160 );
    system_isp_write_32( base + 0x1160, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1160 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_11_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_11_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_11_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_11_REG_ADDR 0x1160
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_11_OFFSET 0x160
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_11_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1160 );
    system_isp_write_32( base + 0x1160, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1160 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_11_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_11_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_11_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_11_REG_ADDR 0x1160
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_11_OFFSET 0x160
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_11_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1160 );
    system_isp_write_32( base + 0x1160, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1160 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_11_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_11_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_11_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_11_REG_ADDR 0x1160
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_11_OFFSET 0x160
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_11_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1160 );
    system_isp_write_32( base + 0x1160, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1160 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_11_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_11_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_11_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_11_REG_ADDR 0x1164
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_11_OFFSET 0x164
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_11_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_11_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1164, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_11_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1164 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_11_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_11_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_11_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_11_REG_ADDR 0x1168
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_11_OFFSET 0x168
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_11_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_11_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1168, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_11_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1168 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_11_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_11_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_11_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_11_REG_ADDR 0x116c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_11_OFFSET 0x16c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_11_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x116c );
    system_isp_write_32( base + 0x116c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x116c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_11_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_11_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_11_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_11_REG_ADDR 0x1170
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_11_OFFSET 0x170
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_11_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1170 );
    system_isp_write_32( base + 0x1170, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1170 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_11_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_11_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_11_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_11_REG_ADDR 0x1174
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_11_OFFSET 0x174
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_11_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_11_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1174 );
    system_isp_write_32( base + 0x1174, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_11_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1174 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_11_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_11_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_11_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_11_REG_ADDR 0x1178
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_11_OFFSET 0x178
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_11_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_11_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1178 );
    system_isp_write_32( base + 0x1178, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_11_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1178 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 11
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_11_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_11_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_11_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_11_REG_ADDR 0x117c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_11_OFFSET 0x17c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_11_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_11_read( uint32_t base )
{
    return system_isp_read_32( base + 0x117c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 12 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_12_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_12_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_12_REG_ADDR 0x1180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_12_OFFSET 0x180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_12_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1180 );
    system_isp_write_32( base + 0x1180, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1180 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_12_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_12_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_12_REG_ADDR 0x1180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_12_OFFSET 0x180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_12_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1180 );
    system_isp_write_32( base + 0x1180, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1180 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_12_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_12_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_12_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_12_REG_ADDR 0x1180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_12_OFFSET 0x180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_12_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1180 );
    system_isp_write_32( base + 0x1180, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1180 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_12_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_12_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_12_REG_ADDR 0x1180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_12_OFFSET 0x180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_12_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1180 );
    system_isp_write_32( base + 0x1180, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1180 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_12_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_12_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_12_REG_ADDR 0x1180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_12_OFFSET 0x180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_12_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1180 );
    system_isp_write_32( base + 0x1180, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1180 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_12_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_12_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_12_REG_ADDR 0x1180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_12_OFFSET 0x180
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_12_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1180 );
    system_isp_write_32( base + 0x1180, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1180 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_12_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_12_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_12_REG_ADDR 0x1184
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_12_OFFSET 0x184
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_12_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_12_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1184, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_12_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1184 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_12_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_12_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_12_REG_ADDR 0x1188
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_12_OFFSET 0x188
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_12_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_12_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1188, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_12_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1188 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_12_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_12_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_12_REG_ADDR 0x118c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_12_OFFSET 0x18c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_12_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x118c );
    system_isp_write_32( base + 0x118c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x118c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_12_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_12_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_12_REG_ADDR 0x1190
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_12_OFFSET 0x190
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_12_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1190 );
    system_isp_write_32( base + 0x1190, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1190 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_12_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_12_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_12_REG_ADDR 0x1194
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_12_OFFSET 0x194
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_12_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_12_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1194 );
    system_isp_write_32( base + 0x1194, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_12_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1194 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_12_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_12_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_12_REG_ADDR 0x1198
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_12_OFFSET 0x198
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_12_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_12_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1198 );
    system_isp_write_32( base + 0x1198, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_12_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1198 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 12
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_12_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_12_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_12_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_12_REG_ADDR 0x119c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_12_OFFSET 0x19c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_12_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_12_read( uint32_t base )
{
    return system_isp_read_32( base + 0x119c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 13 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_13_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_13_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_13_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_13_REG_ADDR 0x11a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_13_OFFSET 0x1a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_13_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11a0 );
    system_isp_write_32( base + 0x11a0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11a0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_13_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_13_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_13_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_13_REG_ADDR 0x11a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_13_OFFSET 0x1a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_13_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11a0 );
    system_isp_write_32( base + 0x11a0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11a0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_13_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_13_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_13_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_13_REG_ADDR 0x11a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_13_OFFSET 0x1a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_13_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11a0 );
    system_isp_write_32( base + 0x11a0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11a0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_13_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_13_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_13_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_13_REG_ADDR 0x11a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_13_OFFSET 0x1a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_13_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11a0 );
    system_isp_write_32( base + 0x11a0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11a0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_13_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_13_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_13_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_13_REG_ADDR 0x11a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_13_OFFSET 0x1a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_13_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11a0 );
    system_isp_write_32( base + 0x11a0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11a0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_13_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_13_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_13_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_13_REG_ADDR 0x11a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_13_OFFSET 0x1a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_13_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_13_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11a4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_13_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_13_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_13_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_13_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_13_REG_ADDR 0x11a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_13_OFFSET 0x1a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_13_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_13_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11a8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_13_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11a8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_13_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_13_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_13_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_13_REG_ADDR 0x11ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_13_OFFSET 0x1ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_13_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11ac );
    system_isp_write_32( base + 0x11ac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11ac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_13_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_13_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_13_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_13_REG_ADDR 0x11b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_13_OFFSET 0x1b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_13_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11b0 );
    system_isp_write_32( base + 0x11b0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11b0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_13_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_13_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_13_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_13_REG_ADDR 0x11b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_13_OFFSET 0x1b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_13_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_13_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11b4 );
    system_isp_write_32( base + 0x11b4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_13_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11b4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_13_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_13_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_13_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_13_REG_ADDR 0x11b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_13_OFFSET 0x1b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_13_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_13_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11b8 );
    system_isp_write_32( base + 0x11b8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_13_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11b8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 13
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_13_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_13_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_13_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_13_REG_ADDR 0x11bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_13_OFFSET 0x1bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_13_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_13_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11bc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 14 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_14_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_14_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_14_REG_ADDR 0x11c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_14_OFFSET 0x1c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_14_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c0 );
    system_isp_write_32( base + 0x11c0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_14_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_14_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_14_REG_ADDR 0x11c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_14_OFFSET 0x1c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_14_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c0 );
    system_isp_write_32( base + 0x11c0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_14_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_14_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_14_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_14_REG_ADDR 0x11c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_14_OFFSET 0x1c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_14_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c0 );
    system_isp_write_32( base + 0x11c0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_14_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_14_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_14_REG_ADDR 0x11c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_14_OFFSET 0x1c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_14_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c0 );
    system_isp_write_32( base + 0x11c0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_14_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_14_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_14_REG_ADDR 0x11c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_14_OFFSET 0x1c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_14_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c0 );
    system_isp_write_32( base + 0x11c0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_14_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_14_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_14_REG_ADDR 0x11c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_14_OFFSET 0x1c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_14_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11c0 );
    system_isp_write_32( base + 0x11c0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11c0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_14_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_14_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_14_REG_ADDR 0x11c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_14_OFFSET 0x1c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_14_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_14_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11c4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_14_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11c4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_14_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_14_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_14_REG_ADDR 0x11c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_14_OFFSET 0x1c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_14_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_14_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11c8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_14_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11c8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_14_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_14_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_14_REG_ADDR 0x11cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_14_OFFSET 0x1cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_14_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_14_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11cc );
    system_isp_write_32( base + 0x11cc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_14_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11cc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_14_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_14_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_14_REG_ADDR 0x11d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_14_OFFSET 0x1d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_14_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_14_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11d0 );
    system_isp_write_32( base + 0x11d0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_14_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11d0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_14_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_14_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_14_REG_ADDR 0x11d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_14_OFFSET 0x1d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_14_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_14_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11d4 );
    system_isp_write_32( base + 0x11d4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_14_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11d4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_14_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_14_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_14_REG_ADDR 0x11d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_14_OFFSET 0x1d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_14_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_14_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11d8 );
    system_isp_write_32( base + 0x11d8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_14_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11d8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 14
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_14_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_14_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_14_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_14_REG_ADDR 0x11dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_14_OFFSET 0x1dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_14_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_14_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11dc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 15 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_15_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_15_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_15_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_15_REG_ADDR 0x11e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_15_OFFSET 0x1e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_15_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11e0 );
    system_isp_write_32( base + 0x11e0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11e0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_15_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_15_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_15_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_15_REG_ADDR 0x11e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_15_OFFSET 0x1e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_15_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11e0 );
    system_isp_write_32( base + 0x11e0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11e0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_15_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_15_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_15_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_15_REG_ADDR 0x11e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_15_OFFSET 0x1e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_15_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11e0 );
    system_isp_write_32( base + 0x11e0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11e0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_15_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_15_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_15_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_15_REG_ADDR 0x11e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_15_OFFSET 0x1e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_15_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11e0 );
    system_isp_write_32( base + 0x11e0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11e0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_15_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_15_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_15_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_15_REG_ADDR 0x11e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_15_OFFSET 0x1e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_15_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11e0 );
    system_isp_write_32( base + 0x11e0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11e0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_15_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_15_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_15_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_15_REG_ADDR 0x11e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_15_OFFSET 0x1e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_15_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_15_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11e4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_15_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11e4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_15_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_15_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_15_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_15_REG_ADDR 0x11e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_15_OFFSET 0x1e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_15_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_15_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x11e8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_15_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11e8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_15_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_15_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_15_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_15_REG_ADDR 0x11ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_15_OFFSET 0x1ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_15_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_15_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11ec );
    system_isp_write_32( base + 0x11ec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_15_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11ec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_15_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_15_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_15_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_15_REG_ADDR 0x11f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_15_OFFSET 0x1f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_15_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_15_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f0 );
    system_isp_write_32( base + 0x11f0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_15_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11f0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_15_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_15_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_15_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_15_REG_ADDR 0x11f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_15_OFFSET 0x1f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_15_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_15_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f4 );
    system_isp_write_32( base + 0x11f4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_15_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x11f4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_15_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_15_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_15_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_15_REG_ADDR 0x11f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_15_OFFSET 0x1f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_15_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_15_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x11f8 );
    system_isp_write_32( base + 0x11f8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_15_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x11f8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 15
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_15_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_15_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_15_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_15_REG_ADDR 0x11fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_15_OFFSET 0x1fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_15_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_15_read( uint32_t base )
{
    return system_isp_read_32( base + 0x11fc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 16 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_16_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_16_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_16_REG_ADDR 0x1200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_16_OFFSET 0x200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_16_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1200 );
    system_isp_write_32( base + 0x1200, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1200 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_16_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_16_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_16_REG_ADDR 0x1200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_16_OFFSET 0x200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_16_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1200 );
    system_isp_write_32( base + 0x1200, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1200 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_16_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_16_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_16_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_16_REG_ADDR 0x1200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_16_OFFSET 0x200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_16_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1200 );
    system_isp_write_32( base + 0x1200, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1200 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_16_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_16_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_16_REG_ADDR 0x1200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_16_OFFSET 0x200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_16_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1200 );
    system_isp_write_32( base + 0x1200, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1200 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_16_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_16_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_16_REG_ADDR 0x1200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_16_OFFSET 0x200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_16_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1200 );
    system_isp_write_32( base + 0x1200, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1200 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_16_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_16_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_16_REG_ADDR 0x1200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_16_OFFSET 0x200
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_16_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1200 );
    system_isp_write_32( base + 0x1200, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1200 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_16_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_16_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_16_REG_ADDR 0x1204
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_16_OFFSET 0x204
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_16_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_16_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1204, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_16_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1204 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_16_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_16_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_16_REG_ADDR 0x1208
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_16_OFFSET 0x208
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_16_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_16_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1208, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_16_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1208 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_16_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_16_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_16_REG_ADDR 0x120c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_16_OFFSET 0x20c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_16_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_16_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x120c );
    system_isp_write_32( base + 0x120c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_16_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x120c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_16_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_16_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_16_REG_ADDR 0x1210
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_16_OFFSET 0x210
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_16_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_16_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1210 );
    system_isp_write_32( base + 0x1210, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_16_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1210 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_16_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_16_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_16_REG_ADDR 0x1214
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_16_OFFSET 0x214
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_16_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_16_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1214 );
    system_isp_write_32( base + 0x1214, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_16_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1214 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_16_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_16_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_16_REG_ADDR 0x1218
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_16_OFFSET 0x218
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_16_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_16_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1218 );
    system_isp_write_32( base + 0x1218, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_16_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1218 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 16
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_16_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_16_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_16_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_16_REG_ADDR 0x121c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_16_OFFSET 0x21c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_16_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_16_read( uint32_t base )
{
    return system_isp_read_32( base + 0x121c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 17 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_17_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_17_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_17_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_17_REG_ADDR 0x1220
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_17_OFFSET 0x220
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_17_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1220 );
    system_isp_write_32( base + 0x1220, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1220 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_17_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_17_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_17_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_17_REG_ADDR 0x1220
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_17_OFFSET 0x220
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_17_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1220 );
    system_isp_write_32( base + 0x1220, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1220 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_17_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_17_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_17_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_17_REG_ADDR 0x1220
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_17_OFFSET 0x220
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_17_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1220 );
    system_isp_write_32( base + 0x1220, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1220 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_17_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_17_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_17_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_17_REG_ADDR 0x1220
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_17_OFFSET 0x220
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_17_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1220 );
    system_isp_write_32( base + 0x1220, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1220 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_17_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_17_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_17_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_17_REG_ADDR 0x1220
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_17_OFFSET 0x220
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_17_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1220 );
    system_isp_write_32( base + 0x1220, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1220 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_17_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_17_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_17_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_17_REG_ADDR 0x1224
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_17_OFFSET 0x224
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_17_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_17_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1224, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_17_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1224 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_17_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_17_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_17_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_17_REG_ADDR 0x1228
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_17_OFFSET 0x228
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_17_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_17_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1228, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_17_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1228 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_17_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_17_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_17_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_17_REG_ADDR 0x122c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_17_OFFSET 0x22c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_17_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_17_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x122c );
    system_isp_write_32( base + 0x122c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_17_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x122c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_17_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_17_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_17_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_17_REG_ADDR 0x1230
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_17_OFFSET 0x230
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_17_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_17_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1230 );
    system_isp_write_32( base + 0x1230, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_17_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1230 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_17_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_17_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_17_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_17_REG_ADDR 0x1234
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_17_OFFSET 0x234
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_17_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_17_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1234 );
    system_isp_write_32( base + 0x1234, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_17_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1234 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_17_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_17_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_17_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_17_REG_ADDR 0x1238
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_17_OFFSET 0x238
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_17_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_17_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1238 );
    system_isp_write_32( base + 0x1238, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_17_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1238 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 17
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_17_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_17_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_17_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_17_REG_ADDR 0x123c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_17_OFFSET 0x23c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_17_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_17_read( uint32_t base )
{
    return system_isp_read_32( base + 0x123c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 18 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_18_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_18_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_18_REG_ADDR 0x1240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_18_OFFSET 0x240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_18_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1240 );
    system_isp_write_32( base + 0x1240, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1240 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_18_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_18_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_18_REG_ADDR 0x1240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_18_OFFSET 0x240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_18_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1240 );
    system_isp_write_32( base + 0x1240, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1240 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_18_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_18_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_18_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_18_REG_ADDR 0x1240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_18_OFFSET 0x240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_18_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1240 );
    system_isp_write_32( base + 0x1240, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1240 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_18_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_18_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_18_REG_ADDR 0x1240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_18_OFFSET 0x240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_18_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1240 );
    system_isp_write_32( base + 0x1240, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1240 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_18_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_18_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_18_REG_ADDR 0x1240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_18_OFFSET 0x240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_18_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1240 );
    system_isp_write_32( base + 0x1240, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1240 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_18_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_18_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_18_REG_ADDR 0x1240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_18_OFFSET 0x240
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_18_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1240 );
    system_isp_write_32( base + 0x1240, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1240 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_18_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_18_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_18_REG_ADDR 0x1244
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_18_OFFSET 0x244
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_18_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_18_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1244, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_18_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1244 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_18_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_18_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_18_REG_ADDR 0x1248
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_18_OFFSET 0x248
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_18_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_18_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1248, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_18_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1248 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_18_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_18_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_18_REG_ADDR 0x124c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_18_OFFSET 0x24c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_18_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_18_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x124c );
    system_isp_write_32( base + 0x124c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_18_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x124c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_18_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_18_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_18_REG_ADDR 0x1250
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_18_OFFSET 0x250
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_18_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_18_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1250 );
    system_isp_write_32( base + 0x1250, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_18_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1250 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_18_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_18_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_18_REG_ADDR 0x1254
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_18_OFFSET 0x254
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_18_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_18_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1254 );
    system_isp_write_32( base + 0x1254, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_18_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1254 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_18_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_18_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_18_REG_ADDR 0x1258
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_18_OFFSET 0x258
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_18_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_18_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1258 );
    system_isp_write_32( base + 0x1258, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_18_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1258 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 18
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_18_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_18_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_18_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_18_REG_ADDR 0x125c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_18_OFFSET 0x25c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_18_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_18_read( uint32_t base )
{
    return system_isp_read_32( base + 0x125c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 19 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_19_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_19_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_19_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_19_REG_ADDR 0x1260
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_19_OFFSET 0x260
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_19_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1260 );
    system_isp_write_32( base + 0x1260, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1260 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_19_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_19_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_19_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_19_REG_ADDR 0x1260
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_19_OFFSET 0x260
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_19_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1260 );
    system_isp_write_32( base + 0x1260, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1260 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_19_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_19_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_19_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_19_REG_ADDR 0x1260
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_19_OFFSET 0x260
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_19_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1260 );
    system_isp_write_32( base + 0x1260, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1260 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_19_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_19_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_19_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_19_REG_ADDR 0x1260
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_19_OFFSET 0x260
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_19_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1260 );
    system_isp_write_32( base + 0x1260, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1260 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_19_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_19_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_19_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_19_REG_ADDR 0x1260
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_19_OFFSET 0x260
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_19_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1260 );
    system_isp_write_32( base + 0x1260, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1260 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_19_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_19_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_19_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_19_REG_ADDR 0x1264
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_19_OFFSET 0x264
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_19_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_19_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1264, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_19_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1264 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_19_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_19_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_19_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_19_REG_ADDR 0x1268
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_19_OFFSET 0x268
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_19_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_19_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1268, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_19_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1268 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_19_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_19_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_19_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_19_REG_ADDR 0x126c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_19_OFFSET 0x26c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_19_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_19_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x126c );
    system_isp_write_32( base + 0x126c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_19_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x126c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_19_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_19_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_19_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_19_REG_ADDR 0x1270
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_19_OFFSET 0x270
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_19_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_19_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1270 );
    system_isp_write_32( base + 0x1270, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_19_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1270 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_19_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_19_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_19_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_19_REG_ADDR 0x1274
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_19_OFFSET 0x274
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_19_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_19_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1274 );
    system_isp_write_32( base + 0x1274, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_19_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1274 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_19_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_19_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_19_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_19_REG_ADDR 0x1278
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_19_OFFSET 0x278
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_19_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_19_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1278 );
    system_isp_write_32( base + 0x1278, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_19_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1278 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 19
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_19_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_19_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_19_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_19_REG_ADDR 0x127c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_19_OFFSET 0x27c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_19_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_19_read( uint32_t base )
{
    return system_isp_read_32( base + 0x127c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 20 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_20_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_20_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_20_REG_ADDR 0x1280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_20_OFFSET 0x280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_20_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1280 );
    system_isp_write_32( base + 0x1280, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1280 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_20_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_20_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_20_REG_ADDR 0x1280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_20_OFFSET 0x280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_20_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1280 );
    system_isp_write_32( base + 0x1280, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1280 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_20_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_20_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_20_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_20_REG_ADDR 0x1280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_20_OFFSET 0x280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_20_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1280 );
    system_isp_write_32( base + 0x1280, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1280 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_20_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_20_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_20_REG_ADDR 0x1280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_20_OFFSET 0x280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_20_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1280 );
    system_isp_write_32( base + 0x1280, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1280 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_20_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_20_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_20_REG_ADDR 0x1280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_20_OFFSET 0x280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_20_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1280 );
    system_isp_write_32( base + 0x1280, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1280 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_20_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_20_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_20_REG_ADDR 0x1280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_20_OFFSET 0x280
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_20_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1280 );
    system_isp_write_32( base + 0x1280, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1280 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_20_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_20_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_20_REG_ADDR 0x1284
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_20_OFFSET 0x284
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_20_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_20_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1284, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_20_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1284 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_20_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_20_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_20_REG_ADDR 0x1288
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_20_OFFSET 0x288
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_20_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_20_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1288, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_20_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1288 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_20_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_20_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_20_REG_ADDR 0x128c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_20_OFFSET 0x28c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_20_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_20_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x128c );
    system_isp_write_32( base + 0x128c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_20_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x128c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_20_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_20_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_20_REG_ADDR 0x1290
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_20_OFFSET 0x290
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_20_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_20_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1290 );
    system_isp_write_32( base + 0x1290, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_20_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1290 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_20_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_20_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_20_REG_ADDR 0x1294
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_20_OFFSET 0x294
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_20_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_20_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1294 );
    system_isp_write_32( base + 0x1294, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_20_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1294 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_20_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_20_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_20_REG_ADDR 0x1298
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_20_OFFSET 0x298
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_20_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_20_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1298 );
    system_isp_write_32( base + 0x1298, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_20_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1298 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 20
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_20_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_20_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_20_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_20_REG_ADDR 0x129c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_20_OFFSET 0x29c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_20_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_20_read( uint32_t base )
{
    return system_isp_read_32( base + 0x129c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 21 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_21_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_21_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_21_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_21_REG_ADDR 0x12a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_21_OFFSET 0x2a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_21_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12a0 );
    system_isp_write_32( base + 0x12a0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12a0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_21_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_21_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_21_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_21_REG_ADDR 0x12a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_21_OFFSET 0x2a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_21_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12a0 );
    system_isp_write_32( base + 0x12a0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12a0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_21_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_21_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_21_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_21_REG_ADDR 0x12a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_21_OFFSET 0x2a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_21_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12a0 );
    system_isp_write_32( base + 0x12a0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12a0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_21_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_21_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_21_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_21_REG_ADDR 0x12a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_21_OFFSET 0x2a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_21_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12a0 );
    system_isp_write_32( base + 0x12a0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12a0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_21_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_21_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_21_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_21_REG_ADDR 0x12a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_21_OFFSET 0x2a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_21_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12a0 );
    system_isp_write_32( base + 0x12a0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12a0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_21_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_21_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_21_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_21_REG_ADDR 0x12a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_21_OFFSET 0x2a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_21_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_21_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x12a4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_21_read( uint32_t base )
{
    return system_isp_read_32( base + 0x12a4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_21_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_21_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_21_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_21_REG_ADDR 0x12a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_21_OFFSET 0x2a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_21_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_21_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x12a8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_21_read( uint32_t base )
{
    return system_isp_read_32( base + 0x12a8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_21_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_21_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_21_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_21_REG_ADDR 0x12ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_21_OFFSET 0x2ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_21_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_21_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12ac );
    system_isp_write_32( base + 0x12ac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_21_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x12ac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_21_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_21_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_21_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_21_REG_ADDR 0x12b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_21_OFFSET 0x2b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_21_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_21_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12b0 );
    system_isp_write_32( base + 0x12b0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_21_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x12b0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_21_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_21_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_21_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_21_REG_ADDR 0x12b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_21_OFFSET 0x2b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_21_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_21_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12b4 );
    system_isp_write_32( base + 0x12b4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_21_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x12b4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_21_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_21_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_21_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_21_REG_ADDR 0x12b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_21_OFFSET 0x2b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_21_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_21_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12b8 );
    system_isp_write_32( base + 0x12b8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_21_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12b8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 21
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_21_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_21_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_21_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_21_REG_ADDR 0x12bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_21_OFFSET 0x2bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_21_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_21_read( uint32_t base )
{
    return system_isp_read_32( base + 0x12bc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 22 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_22_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_22_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_22_REG_ADDR 0x12c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_22_OFFSET 0x2c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_22_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12c0 );
    system_isp_write_32( base + 0x12c0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12c0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_22_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_22_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_22_REG_ADDR 0x12c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_22_OFFSET 0x2c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_22_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12c0 );
    system_isp_write_32( base + 0x12c0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12c0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_22_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_22_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_22_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_22_REG_ADDR 0x12c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_22_OFFSET 0x2c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_22_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12c0 );
    system_isp_write_32( base + 0x12c0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12c0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_22_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_22_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_22_REG_ADDR 0x12c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_22_OFFSET 0x2c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_22_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12c0 );
    system_isp_write_32( base + 0x12c0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12c0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_22_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_22_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_22_REG_ADDR 0x12c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_22_OFFSET 0x2c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_22_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12c0 );
    system_isp_write_32( base + 0x12c0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12c0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_22_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_22_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_22_REG_ADDR 0x12c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_22_OFFSET 0x2c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_22_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12c0 );
    system_isp_write_32( base + 0x12c0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12c0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_22_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_22_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_22_REG_ADDR 0x12c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_22_OFFSET 0x2c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_22_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_22_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x12c4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_22_read( uint32_t base )
{
    return system_isp_read_32( base + 0x12c4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_22_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_22_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_22_REG_ADDR 0x12c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_22_OFFSET 0x2c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_22_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_22_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x12c8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_22_read( uint32_t base )
{
    return system_isp_read_32( base + 0x12c8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_22_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_22_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_22_REG_ADDR 0x12cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_22_OFFSET 0x2cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_22_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_22_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12cc );
    system_isp_write_32( base + 0x12cc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_22_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x12cc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_22_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_22_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_22_REG_ADDR 0x12d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_22_OFFSET 0x2d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_22_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_22_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12d0 );
    system_isp_write_32( base + 0x12d0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_22_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x12d0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_22_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_22_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_22_REG_ADDR 0x12d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_22_OFFSET 0x2d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_22_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_22_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12d4 );
    system_isp_write_32( base + 0x12d4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_22_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x12d4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_22_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_22_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_22_REG_ADDR 0x12d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_22_OFFSET 0x2d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_22_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_22_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12d8 );
    system_isp_write_32( base + 0x12d8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_22_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12d8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 22
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_22_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_22_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_22_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_22_REG_ADDR 0x12dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_22_OFFSET 0x2dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_22_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_22_read( uint32_t base )
{
    return system_isp_read_32( base + 0x12dc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 23 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_23_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_23_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_23_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_23_REG_ADDR 0x12e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_23_OFFSET 0x2e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_23_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12e0 );
    system_isp_write_32( base + 0x12e0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12e0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_23_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_23_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_23_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_23_REG_ADDR 0x12e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_23_OFFSET 0x2e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_23_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12e0 );
    system_isp_write_32( base + 0x12e0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12e0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_23_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_23_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_23_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_23_REG_ADDR 0x12e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_23_OFFSET 0x2e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_23_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12e0 );
    system_isp_write_32( base + 0x12e0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12e0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_23_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_23_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_23_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_23_REG_ADDR 0x12e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_23_OFFSET 0x2e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_23_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12e0 );
    system_isp_write_32( base + 0x12e0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12e0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_23_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_23_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_23_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_23_REG_ADDR 0x12e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_23_OFFSET 0x2e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_23_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12e0 );
    system_isp_write_32( base + 0x12e0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12e0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_23_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_23_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_23_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_23_REG_ADDR 0x12e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_23_OFFSET 0x2e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_23_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_23_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x12e4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_23_read( uint32_t base )
{
    return system_isp_read_32( base + 0x12e4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_23_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_23_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_23_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_23_REG_ADDR 0x12e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_23_OFFSET 0x2e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_23_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_23_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x12e8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_23_read( uint32_t base )
{
    return system_isp_read_32( base + 0x12e8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_23_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_23_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_23_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_23_REG_ADDR 0x12ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_23_OFFSET 0x2ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_23_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_23_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12ec );
    system_isp_write_32( base + 0x12ec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_23_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x12ec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_23_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_23_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_23_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_23_REG_ADDR 0x12f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_23_OFFSET 0x2f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_23_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_23_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12f0 );
    system_isp_write_32( base + 0x12f0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_23_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x12f0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_23_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_23_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_23_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_23_REG_ADDR 0x12f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_23_OFFSET 0x2f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_23_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_23_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12f4 );
    system_isp_write_32( base + 0x12f4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_23_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x12f4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_23_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_23_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_23_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_23_REG_ADDR 0x12f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_23_OFFSET 0x2f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_23_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_23_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x12f8 );
    system_isp_write_32( base + 0x12f8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_23_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x12f8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 23
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_23_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_23_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_23_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_23_REG_ADDR 0x12fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_23_OFFSET 0x2fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_23_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_23_read( uint32_t base )
{
    return system_isp_read_32( base + 0x12fc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 24 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_24_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_24_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_24_REG_ADDR 0x1300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_24_OFFSET 0x300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_24_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1300 );
    system_isp_write_32( base + 0x1300, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1300 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_24_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_24_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_24_REG_ADDR 0x1300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_24_OFFSET 0x300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_24_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1300 );
    system_isp_write_32( base + 0x1300, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1300 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_24_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_24_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_24_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_24_REG_ADDR 0x1300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_24_OFFSET 0x300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_24_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1300 );
    system_isp_write_32( base + 0x1300, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1300 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_24_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_24_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_24_REG_ADDR 0x1300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_24_OFFSET 0x300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_24_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1300 );
    system_isp_write_32( base + 0x1300, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1300 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_24_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_24_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_24_REG_ADDR 0x1300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_24_OFFSET 0x300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_24_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1300 );
    system_isp_write_32( base + 0x1300, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1300 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_24_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_24_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_24_REG_ADDR 0x1300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_24_OFFSET 0x300
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_24_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1300 );
    system_isp_write_32( base + 0x1300, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1300 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_24_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_24_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_24_REG_ADDR 0x1304
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_24_OFFSET 0x304
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_24_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_24_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1304, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_24_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1304 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_24_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_24_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_24_REG_ADDR 0x1308
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_24_OFFSET 0x308
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_24_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_24_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1308, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_24_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1308 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_24_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_24_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_24_REG_ADDR 0x130c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_24_OFFSET 0x30c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_24_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_24_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x130c );
    system_isp_write_32( base + 0x130c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_24_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x130c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_24_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_24_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_24_REG_ADDR 0x1310
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_24_OFFSET 0x310
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_24_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_24_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1310 );
    system_isp_write_32( base + 0x1310, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_24_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1310 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_24_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_24_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_24_REG_ADDR 0x1314
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_24_OFFSET 0x314
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_24_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_24_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1314 );
    system_isp_write_32( base + 0x1314, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_24_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1314 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_24_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_24_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_24_REG_ADDR 0x1318
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_24_OFFSET 0x318
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_24_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_24_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1318 );
    system_isp_write_32( base + 0x1318, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_24_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1318 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 24
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_24_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_24_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_24_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_24_REG_ADDR 0x131c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_24_OFFSET 0x31c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_24_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_24_read( uint32_t base )
{
    return system_isp_read_32( base + 0x131c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 25 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_25_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_25_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_25_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_25_REG_ADDR 0x1320
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_25_OFFSET 0x320
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_25_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1320 );
    system_isp_write_32( base + 0x1320, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1320 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_25_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_25_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_25_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_25_REG_ADDR 0x1320
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_25_OFFSET 0x320
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_25_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1320 );
    system_isp_write_32( base + 0x1320, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1320 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_25_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_25_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_25_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_25_REG_ADDR 0x1320
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_25_OFFSET 0x320
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_25_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1320 );
    system_isp_write_32( base + 0x1320, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1320 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_25_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_25_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_25_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_25_REG_ADDR 0x1320
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_25_OFFSET 0x320
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_25_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1320 );
    system_isp_write_32( base + 0x1320, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1320 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_25_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_25_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_25_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_25_REG_ADDR 0x1320
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_25_OFFSET 0x320
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_25_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1320 );
    system_isp_write_32( base + 0x1320, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1320 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_25_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_25_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_25_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_25_REG_ADDR 0x1324
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_25_OFFSET 0x324
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_25_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_25_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1324, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_25_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1324 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_25_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_25_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_25_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_25_REG_ADDR 0x1328
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_25_OFFSET 0x328
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_25_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_25_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1328, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_25_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1328 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_25_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_25_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_25_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_25_REG_ADDR 0x132c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_25_OFFSET 0x32c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_25_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_25_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x132c );
    system_isp_write_32( base + 0x132c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_25_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x132c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_25_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_25_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_25_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_25_REG_ADDR 0x1330
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_25_OFFSET 0x330
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_25_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_25_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1330 );
    system_isp_write_32( base + 0x1330, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_25_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1330 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_25_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_25_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_25_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_25_REG_ADDR 0x1334
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_25_OFFSET 0x334
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_25_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_25_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1334 );
    system_isp_write_32( base + 0x1334, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_25_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1334 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_25_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_25_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_25_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_25_REG_ADDR 0x1338
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_25_OFFSET 0x338
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_25_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_25_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1338 );
    system_isp_write_32( base + 0x1338, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_25_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1338 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 25
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_25_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_25_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_25_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_25_REG_ADDR 0x133c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_25_OFFSET 0x33c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_25_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_25_read( uint32_t base )
{
    return system_isp_read_32( base + 0x133c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 26 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_26_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_26_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_26_REG_ADDR 0x1340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_26_OFFSET 0x340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_26_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1340 );
    system_isp_write_32( base + 0x1340, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1340 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_26_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_26_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_26_REG_ADDR 0x1340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_26_OFFSET 0x340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_26_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1340 );
    system_isp_write_32( base + 0x1340, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1340 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_26_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_26_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_26_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_26_REG_ADDR 0x1340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_26_OFFSET 0x340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_26_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1340 );
    system_isp_write_32( base + 0x1340, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1340 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_26_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_26_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_26_REG_ADDR 0x1340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_26_OFFSET 0x340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_26_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1340 );
    system_isp_write_32( base + 0x1340, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1340 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_26_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_26_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_26_REG_ADDR 0x1340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_26_OFFSET 0x340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_26_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1340 );
    system_isp_write_32( base + 0x1340, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1340 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_26_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_26_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_26_REG_ADDR 0x1340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_26_OFFSET 0x340
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_26_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1340 );
    system_isp_write_32( base + 0x1340, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1340 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_26_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_26_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_26_REG_ADDR 0x1344
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_26_OFFSET 0x344
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_26_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_26_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1344, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_26_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1344 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_26_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_26_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_26_REG_ADDR 0x1348
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_26_OFFSET 0x348
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_26_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_26_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1348, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_26_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1348 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_26_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_26_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_26_REG_ADDR 0x134c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_26_OFFSET 0x34c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_26_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_26_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x134c );
    system_isp_write_32( base + 0x134c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_26_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x134c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_26_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_26_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_26_REG_ADDR 0x1350
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_26_OFFSET 0x350
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_26_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_26_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1350 );
    system_isp_write_32( base + 0x1350, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_26_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1350 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_26_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_26_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_26_REG_ADDR 0x1354
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_26_OFFSET 0x354
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_26_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_26_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1354 );
    system_isp_write_32( base + 0x1354, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_26_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1354 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_26_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_26_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_26_REG_ADDR 0x1358
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_26_OFFSET 0x358
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_26_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_26_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1358 );
    system_isp_write_32( base + 0x1358, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_26_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1358 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 26
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_26_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_26_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_26_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_26_REG_ADDR 0x135c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_26_OFFSET 0x35c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_26_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_26_read( uint32_t base )
{
    return system_isp_read_32( base + 0x135c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 27 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_27_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_27_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_27_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_27_REG_ADDR 0x1360
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_27_OFFSET 0x360
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_27_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1360 );
    system_isp_write_32( base + 0x1360, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1360 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_27_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_27_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_27_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_27_REG_ADDR 0x1360
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_27_OFFSET 0x360
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_27_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1360 );
    system_isp_write_32( base + 0x1360, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1360 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_27_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_27_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_27_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_27_REG_ADDR 0x1360
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_27_OFFSET 0x360
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_27_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1360 );
    system_isp_write_32( base + 0x1360, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1360 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_27_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_27_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_27_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_27_REG_ADDR 0x1360
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_27_OFFSET 0x360
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_27_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1360 );
    system_isp_write_32( base + 0x1360, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1360 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_27_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_27_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_27_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_27_REG_ADDR 0x1360
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_27_OFFSET 0x360
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_27_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1360 );
    system_isp_write_32( base + 0x1360, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1360 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_27_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_27_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_27_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_27_REG_ADDR 0x1364
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_27_OFFSET 0x364
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_27_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_27_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1364, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_27_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1364 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_27_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_27_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_27_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_27_REG_ADDR 0x1368
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_27_OFFSET 0x368
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_27_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_27_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1368, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_27_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1368 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_27_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_27_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_27_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_27_REG_ADDR 0x136c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_27_OFFSET 0x36c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_27_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_27_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x136c );
    system_isp_write_32( base + 0x136c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_27_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x136c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_27_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_27_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_27_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_27_REG_ADDR 0x1370
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_27_OFFSET 0x370
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_27_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_27_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1370 );
    system_isp_write_32( base + 0x1370, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_27_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1370 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_27_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_27_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_27_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_27_REG_ADDR 0x1374
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_27_OFFSET 0x374
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_27_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_27_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1374 );
    system_isp_write_32( base + 0x1374, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_27_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1374 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_27_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_27_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_27_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_27_REG_ADDR 0x1378
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_27_OFFSET 0x378
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_27_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_27_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1378 );
    system_isp_write_32( base + 0x1378, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_27_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1378 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 27
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_27_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_27_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_27_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_27_REG_ADDR 0x137c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_27_OFFSET 0x37c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_27_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_27_read( uint32_t base )
{
    return system_isp_read_32( base + 0x137c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 28 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_28_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_28_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_28_REG_ADDR 0x1380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_28_OFFSET 0x380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_28_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1380 );
    system_isp_write_32( base + 0x1380, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1380 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_28_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_28_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_28_REG_ADDR 0x1380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_28_OFFSET 0x380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_28_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1380 );
    system_isp_write_32( base + 0x1380, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1380 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_28_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_28_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_28_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_28_REG_ADDR 0x1380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_28_OFFSET 0x380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_28_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1380 );
    system_isp_write_32( base + 0x1380, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1380 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_28_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_28_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_28_REG_ADDR 0x1380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_28_OFFSET 0x380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_28_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1380 );
    system_isp_write_32( base + 0x1380, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1380 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_28_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_28_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_28_REG_ADDR 0x1380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_28_OFFSET 0x380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_28_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1380 );
    system_isp_write_32( base + 0x1380, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1380 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_28_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_28_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_28_REG_ADDR 0x1380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_28_OFFSET 0x380
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_28_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1380 );
    system_isp_write_32( base + 0x1380, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1380 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_28_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_28_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_28_REG_ADDR 0x1384
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_28_OFFSET 0x384
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_28_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_28_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1384, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_28_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1384 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_28_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_28_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_28_REG_ADDR 0x1388
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_28_OFFSET 0x388
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_28_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_28_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1388, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_28_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1388 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_28_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_28_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_28_REG_ADDR 0x138c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_28_OFFSET 0x38c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_28_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_28_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x138c );
    system_isp_write_32( base + 0x138c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_28_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x138c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_28_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_28_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_28_REG_ADDR 0x1390
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_28_OFFSET 0x390
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_28_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_28_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1390 );
    system_isp_write_32( base + 0x1390, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_28_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1390 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_28_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_28_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_28_REG_ADDR 0x1394
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_28_OFFSET 0x394
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_28_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_28_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1394 );
    system_isp_write_32( base + 0x1394, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_28_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1394 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_28_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_28_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_28_REG_ADDR 0x1398
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_28_OFFSET 0x398
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_28_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_28_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1398 );
    system_isp_write_32( base + 0x1398, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_28_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1398 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 28
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_28_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_28_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_28_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_28_REG_ADDR 0x139c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_28_OFFSET 0x39c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_28_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_28_read( uint32_t base )
{
    return system_isp_read_32( base + 0x139c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 29 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_29_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_29_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_29_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_29_REG_ADDR 0x13a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_29_OFFSET 0x3a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_29_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13a0 );
    system_isp_write_32( base + 0x13a0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13a0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_29_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_29_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_29_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_29_REG_ADDR 0x13a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_29_OFFSET 0x3a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_29_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13a0 );
    system_isp_write_32( base + 0x13a0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13a0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_29_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_29_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_29_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_29_REG_ADDR 0x13a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_29_OFFSET 0x3a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_29_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13a0 );
    system_isp_write_32( base + 0x13a0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13a0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_29_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_29_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_29_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_29_REG_ADDR 0x13a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_29_OFFSET 0x3a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_29_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13a0 );
    system_isp_write_32( base + 0x13a0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13a0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_29_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_29_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_29_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_29_REG_ADDR 0x13a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_29_OFFSET 0x3a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_29_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13a0 );
    system_isp_write_32( base + 0x13a0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13a0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_29_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_29_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_29_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_29_REG_ADDR 0x13a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_29_OFFSET 0x3a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_29_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_29_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x13a4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_29_read( uint32_t base )
{
    return system_isp_read_32( base + 0x13a4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_29_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_29_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_29_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_29_REG_ADDR 0x13a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_29_OFFSET 0x3a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_29_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_29_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x13a8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_29_read( uint32_t base )
{
    return system_isp_read_32( base + 0x13a8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_29_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_29_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_29_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_29_REG_ADDR 0x13ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_29_OFFSET 0x3ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_29_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_29_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13ac );
    system_isp_write_32( base + 0x13ac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_29_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x13ac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_29_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_29_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_29_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_29_REG_ADDR 0x13b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_29_OFFSET 0x3b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_29_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_29_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13b0 );
    system_isp_write_32( base + 0x13b0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_29_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x13b0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_29_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_29_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_29_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_29_REG_ADDR 0x13b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_29_OFFSET 0x3b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_29_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_29_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13b4 );
    system_isp_write_32( base + 0x13b4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_29_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x13b4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_29_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_29_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_29_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_29_REG_ADDR 0x13b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_29_OFFSET 0x3b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_29_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_29_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13b8 );
    system_isp_write_32( base + 0x13b8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_29_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13b8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 29
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_29_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_29_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_29_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_29_REG_ADDR 0x13bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_29_OFFSET 0x3bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_29_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_29_read( uint32_t base )
{
    return system_isp_read_32( base + 0x13bc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 30 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_30_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_30_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_30_REG_ADDR 0x13c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_30_OFFSET 0x3c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_30_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13c0 );
    system_isp_write_32( base + 0x13c0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13c0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_30_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_30_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_30_REG_ADDR 0x13c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_30_OFFSET 0x3c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_30_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13c0 );
    system_isp_write_32( base + 0x13c0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13c0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_30_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_30_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_30_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_30_REG_ADDR 0x13c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_30_OFFSET 0x3c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_30_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13c0 );
    system_isp_write_32( base + 0x13c0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13c0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_30_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_30_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_30_REG_ADDR 0x13c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_30_OFFSET 0x3c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_30_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13c0 );
    system_isp_write_32( base + 0x13c0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13c0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_30_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_30_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_30_REG_ADDR 0x13c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_30_OFFSET 0x3c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_30_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13c0 );
    system_isp_write_32( base + 0x13c0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13c0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_30_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_30_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_30_REG_ADDR 0x13c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_30_OFFSET 0x3c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_30_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13c0 );
    system_isp_write_32( base + 0x13c0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13c0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_30_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_30_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_30_REG_ADDR 0x13c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_30_OFFSET 0x3c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_30_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_30_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x13c4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_30_read( uint32_t base )
{
    return system_isp_read_32( base + 0x13c4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_30_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_30_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_30_REG_ADDR 0x13c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_30_OFFSET 0x3c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_30_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_30_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x13c8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_30_read( uint32_t base )
{
    return system_isp_read_32( base + 0x13c8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_30_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_30_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_30_REG_ADDR 0x13cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_30_OFFSET 0x3cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_30_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_30_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13cc );
    system_isp_write_32( base + 0x13cc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_30_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x13cc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_30_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_30_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_30_REG_ADDR 0x13d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_30_OFFSET 0x3d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_30_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_30_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13d0 );
    system_isp_write_32( base + 0x13d0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_30_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x13d0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_30_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_30_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_30_REG_ADDR 0x13d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_30_OFFSET 0x3d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_30_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_30_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13d4 );
    system_isp_write_32( base + 0x13d4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_30_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x13d4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_30_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_30_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_30_REG_ADDR 0x13d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_30_OFFSET 0x3d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_30_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_30_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13d8 );
    system_isp_write_32( base + 0x13d8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_30_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13d8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 30
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_30_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_30_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_30_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_30_REG_ADDR 0x13dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_30_OFFSET 0x3dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_30_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_30_read( uint32_t base )
{
    return system_isp_read_32( base + 0x13dc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 31 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_31_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_31_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_31_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_31_REG_ADDR 0x13e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_31_OFFSET 0x3e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_31_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13e0 );
    system_isp_write_32( base + 0x13e0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13e0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_31_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_31_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_31_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_31_REG_ADDR 0x13e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_31_OFFSET 0x3e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_31_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13e0 );
    system_isp_write_32( base + 0x13e0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13e0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_31_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_31_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_31_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_31_REG_ADDR 0x13e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_31_OFFSET 0x3e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_31_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13e0 );
    system_isp_write_32( base + 0x13e0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13e0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_31_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_31_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_31_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_31_REG_ADDR 0x13e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_31_OFFSET 0x3e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_31_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13e0 );
    system_isp_write_32( base + 0x13e0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13e0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_31_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_31_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_31_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_31_REG_ADDR 0x13e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_31_OFFSET 0x3e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_31_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13e0 );
    system_isp_write_32( base + 0x13e0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13e0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_31_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_31_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_31_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_31_REG_ADDR 0x13e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_31_OFFSET 0x3e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_31_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_31_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x13e4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_31_read( uint32_t base )
{
    return system_isp_read_32( base + 0x13e4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_31_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_31_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_31_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_31_REG_ADDR 0x13e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_31_OFFSET 0x3e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_31_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_31_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x13e8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_31_read( uint32_t base )
{
    return system_isp_read_32( base + 0x13e8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_31_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_31_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_31_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_31_REG_ADDR 0x13ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_31_OFFSET 0x3ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_31_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_31_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13ec );
    system_isp_write_32( base + 0x13ec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_31_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x13ec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_31_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_31_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_31_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_31_REG_ADDR 0x13f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_31_OFFSET 0x3f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_31_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_31_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13f0 );
    system_isp_write_32( base + 0x13f0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_31_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x13f0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_31_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_31_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_31_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_31_REG_ADDR 0x13f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_31_OFFSET 0x3f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_31_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_31_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13f4 );
    system_isp_write_32( base + 0x13f4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_31_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x13f4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_31_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_31_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_31_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_31_REG_ADDR 0x13f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_31_OFFSET 0x3f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_31_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_31_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x13f8 );
    system_isp_write_32( base + 0x13f8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_31_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x13f8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 31
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_31_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_31_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_31_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_31_REG_ADDR 0x13fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_31_OFFSET 0x3fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_31_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_31_read( uint32_t base )
{
    return system_isp_read_32( base + 0x13fc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 32 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_32_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_32_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_32_REG_ADDR 0x1400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_32_OFFSET 0x400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_32_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_32_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1400 );
    system_isp_write_32( base + 0x1400, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_32_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1400 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_32_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_32_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_32_REG_ADDR 0x1400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_32_OFFSET 0x400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_32_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_32_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1400 );
    system_isp_write_32( base + 0x1400, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_32_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1400 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_32_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_32_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_32_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_32_REG_ADDR 0x1400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_32_OFFSET 0x400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_32_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_32_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1400 );
    system_isp_write_32( base + 0x1400, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_32_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1400 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_32_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_32_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_32_REG_ADDR 0x1400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_32_OFFSET 0x400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_32_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_32_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1400 );
    system_isp_write_32( base + 0x1400, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_32_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1400 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_32_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_32_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_32_REG_ADDR 0x1400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_32_OFFSET 0x400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_32_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_32_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1400 );
    system_isp_write_32( base + 0x1400, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_32_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1400 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_32_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_32_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_32_REG_ADDR 0x1400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_32_OFFSET 0x400
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_32_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_32_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1400 );
    system_isp_write_32( base + 0x1400, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_32_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1400 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_32_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_32_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_32_REG_ADDR 0x1404
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_32_OFFSET 0x404
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_32_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_32_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1404, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_32_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1404 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_32_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_32_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_32_REG_ADDR 0x1408
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_32_OFFSET 0x408
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_32_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_32_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1408, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_32_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1408 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_32_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_32_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_32_REG_ADDR 0x140c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_32_OFFSET 0x40c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_32_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_32_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x140c );
    system_isp_write_32( base + 0x140c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_32_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x140c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_32_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_32_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_32_REG_ADDR 0x1410
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_32_OFFSET 0x410
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_32_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_32_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1410 );
    system_isp_write_32( base + 0x1410, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_32_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1410 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_32_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_32_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_32_REG_ADDR 0x1414
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_32_OFFSET 0x414
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_32_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_32_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1414 );
    system_isp_write_32( base + 0x1414, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_32_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1414 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_32_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_32_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_32_REG_ADDR 0x1418
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_32_OFFSET 0x418
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_32_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_32_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1418 );
    system_isp_write_32( base + 0x1418, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_32_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1418 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 32
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_32_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_32_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_32_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_32_REG_ADDR 0x141c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_32_OFFSET 0x41c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_32_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_32_read( uint32_t base )
{
    return system_isp_read_32( base + 0x141c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 33 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_33_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_33_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_33_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_33_REG_ADDR 0x1420
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_33_OFFSET 0x420
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_33_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_33_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1420 );
    system_isp_write_32( base + 0x1420, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_33_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1420 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_33_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_33_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_33_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_33_REG_ADDR 0x1420
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_33_OFFSET 0x420
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_33_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_33_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1420 );
    system_isp_write_32( base + 0x1420, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_33_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1420 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_33_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_33_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_33_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_33_REG_ADDR 0x1420
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_33_OFFSET 0x420
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_33_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_33_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1420 );
    system_isp_write_32( base + 0x1420, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_33_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1420 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_33_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_33_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_33_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_33_REG_ADDR 0x1420
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_33_OFFSET 0x420
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_33_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_33_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1420 );
    system_isp_write_32( base + 0x1420, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_33_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1420 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_33_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_33_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_33_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_33_REG_ADDR 0x1420
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_33_OFFSET 0x420
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_33_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_33_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1420 );
    system_isp_write_32( base + 0x1420, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_33_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1420 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_33_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_33_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_33_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_33_REG_ADDR 0x1424
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_33_OFFSET 0x424
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_33_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_33_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1424, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_33_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1424 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_33_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_33_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_33_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_33_REG_ADDR 0x1428
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_33_OFFSET 0x428
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_33_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_33_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1428, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_33_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1428 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_33_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_33_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_33_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_33_REG_ADDR 0x142c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_33_OFFSET 0x42c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_33_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_33_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x142c );
    system_isp_write_32( base + 0x142c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_33_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x142c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_33_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_33_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_33_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_33_REG_ADDR 0x1430
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_33_OFFSET 0x430
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_33_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_33_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1430 );
    system_isp_write_32( base + 0x1430, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_33_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1430 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_33_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_33_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_33_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_33_REG_ADDR 0x1434
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_33_OFFSET 0x434
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_33_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_33_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1434 );
    system_isp_write_32( base + 0x1434, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_33_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1434 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_33_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_33_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_33_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_33_REG_ADDR 0x1438
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_33_OFFSET 0x438
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_33_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_33_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1438 );
    system_isp_write_32( base + 0x1438, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_33_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1438 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 33
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_33_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_33_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_33_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_33_REG_ADDR 0x143c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_33_OFFSET 0x43c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_33_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_33_read( uint32_t base )
{
    return system_isp_read_32( base + 0x143c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 34 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_34_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_34_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_34_REG_ADDR 0x1440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_34_OFFSET 0x440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_34_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_34_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1440 );
    system_isp_write_32( base + 0x1440, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_34_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1440 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_34_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_34_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_34_REG_ADDR 0x1440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_34_OFFSET 0x440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_34_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_34_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1440 );
    system_isp_write_32( base + 0x1440, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_34_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1440 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_34_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_34_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_34_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_34_REG_ADDR 0x1440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_34_OFFSET 0x440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_34_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_34_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1440 );
    system_isp_write_32( base + 0x1440, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_34_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1440 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_34_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_34_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_34_REG_ADDR 0x1440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_34_OFFSET 0x440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_34_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_34_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1440 );
    system_isp_write_32( base + 0x1440, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_34_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1440 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_34_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_34_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_34_REG_ADDR 0x1440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_34_OFFSET 0x440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_34_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_34_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1440 );
    system_isp_write_32( base + 0x1440, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_34_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1440 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_34_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_34_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_34_REG_ADDR 0x1440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_34_OFFSET 0x440
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_34_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_34_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1440 );
    system_isp_write_32( base + 0x1440, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_34_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1440 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_34_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_34_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_34_REG_ADDR 0x1444
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_34_OFFSET 0x444
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_34_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_34_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1444, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_34_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1444 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_34_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_34_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_34_REG_ADDR 0x1448
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_34_OFFSET 0x448
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_34_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_34_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1448, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_34_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1448 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_34_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_34_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_34_REG_ADDR 0x144c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_34_OFFSET 0x44c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_34_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_34_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x144c );
    system_isp_write_32( base + 0x144c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_34_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x144c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_34_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_34_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_34_REG_ADDR 0x1450
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_34_OFFSET 0x450
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_34_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_34_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1450 );
    system_isp_write_32( base + 0x1450, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_34_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1450 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_34_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_34_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_34_REG_ADDR 0x1454
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_34_OFFSET 0x454
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_34_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_34_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1454 );
    system_isp_write_32( base + 0x1454, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_34_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1454 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_34_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_34_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_34_REG_ADDR 0x1458
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_34_OFFSET 0x458
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_34_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_34_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1458 );
    system_isp_write_32( base + 0x1458, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_34_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1458 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 34
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_34_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_34_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_34_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_34_REG_ADDR 0x145c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_34_OFFSET 0x45c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_34_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_34_read( uint32_t base )
{
    return system_isp_read_32( base + 0x145c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 35 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_35_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_35_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_35_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_35_REG_ADDR 0x1460
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_35_OFFSET 0x460
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_35_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_35_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1460 );
    system_isp_write_32( base + 0x1460, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_35_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1460 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_35_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_35_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_35_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_35_REG_ADDR 0x1460
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_35_OFFSET 0x460
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_35_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_35_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1460 );
    system_isp_write_32( base + 0x1460, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_35_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1460 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_35_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_35_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_35_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_35_REG_ADDR 0x1460
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_35_OFFSET 0x460
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_35_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_35_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1460 );
    system_isp_write_32( base + 0x1460, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_35_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1460 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_35_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_35_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_35_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_35_REG_ADDR 0x1460
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_35_OFFSET 0x460
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_35_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_35_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1460 );
    system_isp_write_32( base + 0x1460, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_35_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1460 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_35_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_35_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_35_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_35_REG_ADDR 0x1460
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_35_OFFSET 0x460
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_35_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_35_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1460 );
    system_isp_write_32( base + 0x1460, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_35_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1460 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_35_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_35_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_35_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_35_REG_ADDR 0x1464
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_35_OFFSET 0x464
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_35_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_35_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1464, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_35_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1464 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_35_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_35_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_35_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_35_REG_ADDR 0x1468
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_35_OFFSET 0x468
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_35_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_35_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1468, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_35_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1468 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_35_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_35_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_35_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_35_REG_ADDR 0x146c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_35_OFFSET 0x46c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_35_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_35_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x146c );
    system_isp_write_32( base + 0x146c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_35_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x146c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_35_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_35_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_35_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_35_REG_ADDR 0x1470
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_35_OFFSET 0x470
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_35_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_35_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1470 );
    system_isp_write_32( base + 0x1470, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_35_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1470 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_35_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_35_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_35_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_35_REG_ADDR 0x1474
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_35_OFFSET 0x474
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_35_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_35_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1474 );
    system_isp_write_32( base + 0x1474, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_35_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1474 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_35_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_35_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_35_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_35_REG_ADDR 0x1478
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_35_OFFSET 0x478
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_35_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_35_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1478 );
    system_isp_write_32( base + 0x1478, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_35_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1478 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 35
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_35_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_35_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_35_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_35_REG_ADDR 0x147c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_35_OFFSET 0x47c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_35_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_35_read( uint32_t base )
{
    return system_isp_read_32( base + 0x147c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 36 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_36_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_36_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_36_REG_ADDR 0x1480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_36_OFFSET 0x480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_36_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_36_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1480 );
    system_isp_write_32( base + 0x1480, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_36_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1480 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_36_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_36_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_36_REG_ADDR 0x1480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_36_OFFSET 0x480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_36_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_36_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1480 );
    system_isp_write_32( base + 0x1480, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_36_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1480 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_36_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_36_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_36_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_36_REG_ADDR 0x1480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_36_OFFSET 0x480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_36_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_36_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1480 );
    system_isp_write_32( base + 0x1480, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_36_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1480 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_36_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_36_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_36_REG_ADDR 0x1480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_36_OFFSET 0x480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_36_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_36_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1480 );
    system_isp_write_32( base + 0x1480, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_36_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1480 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_36_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_36_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_36_REG_ADDR 0x1480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_36_OFFSET 0x480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_36_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_36_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1480 );
    system_isp_write_32( base + 0x1480, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_36_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1480 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_36_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_36_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_36_REG_ADDR 0x1480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_36_OFFSET 0x480
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_36_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_36_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1480 );
    system_isp_write_32( base + 0x1480, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_36_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1480 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_36_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_36_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_36_REG_ADDR 0x1484
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_36_OFFSET 0x484
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_36_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_36_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1484, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_36_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1484 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_36_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_36_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_36_REG_ADDR 0x1488
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_36_OFFSET 0x488
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_36_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_36_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1488, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_36_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1488 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_36_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_36_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_36_REG_ADDR 0x148c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_36_OFFSET 0x48c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_36_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_36_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x148c );
    system_isp_write_32( base + 0x148c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_36_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x148c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_36_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_36_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_36_REG_ADDR 0x1490
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_36_OFFSET 0x490
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_36_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_36_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1490 );
    system_isp_write_32( base + 0x1490, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_36_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1490 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_36_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_36_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_36_REG_ADDR 0x1494
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_36_OFFSET 0x494
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_36_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_36_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1494 );
    system_isp_write_32( base + 0x1494, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_36_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1494 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_36_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_36_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_36_REG_ADDR 0x1498
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_36_OFFSET 0x498
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_36_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_36_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1498 );
    system_isp_write_32( base + 0x1498, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_36_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1498 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 36
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_36_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_36_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_36_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_36_REG_ADDR 0x149c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_36_OFFSET 0x49c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_36_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_36_read( uint32_t base )
{
    return system_isp_read_32( base + 0x149c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 37 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_37_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_37_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_37_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_37_REG_ADDR 0x14a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_37_OFFSET 0x4a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_37_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_37_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14a0 );
    system_isp_write_32( base + 0x14a0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_37_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14a0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_37_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_37_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_37_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_37_REG_ADDR 0x14a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_37_OFFSET 0x4a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_37_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_37_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14a0 );
    system_isp_write_32( base + 0x14a0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_37_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14a0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_37_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_37_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_37_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_37_REG_ADDR 0x14a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_37_OFFSET 0x4a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_37_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_37_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14a0 );
    system_isp_write_32( base + 0x14a0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_37_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14a0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_37_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_37_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_37_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_37_REG_ADDR 0x14a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_37_OFFSET 0x4a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_37_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_37_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14a0 );
    system_isp_write_32( base + 0x14a0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_37_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14a0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_37_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_37_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_37_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_37_REG_ADDR 0x14a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_37_OFFSET 0x4a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_37_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_37_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14a0 );
    system_isp_write_32( base + 0x14a0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_37_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14a0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_37_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_37_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_37_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_37_REG_ADDR 0x14a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_37_OFFSET 0x4a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_37_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_37_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x14a4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_37_read( uint32_t base )
{
    return system_isp_read_32( base + 0x14a4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_37_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_37_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_37_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_37_REG_ADDR 0x14a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_37_OFFSET 0x4a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_37_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_37_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x14a8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_37_read( uint32_t base )
{
    return system_isp_read_32( base + 0x14a8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_37_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_37_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_37_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_37_REG_ADDR 0x14ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_37_OFFSET 0x4ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_37_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_37_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14ac );
    system_isp_write_32( base + 0x14ac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_37_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x14ac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_37_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_37_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_37_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_37_REG_ADDR 0x14b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_37_OFFSET 0x4b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_37_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_37_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14b0 );
    system_isp_write_32( base + 0x14b0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_37_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x14b0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_37_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_37_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_37_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_37_REG_ADDR 0x14b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_37_OFFSET 0x4b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_37_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_37_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14b4 );
    system_isp_write_32( base + 0x14b4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_37_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x14b4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_37_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_37_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_37_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_37_REG_ADDR 0x14b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_37_OFFSET 0x4b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_37_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_37_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14b8 );
    system_isp_write_32( base + 0x14b8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_37_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14b8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 37
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_37_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_37_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_37_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_37_REG_ADDR 0x14bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_37_OFFSET 0x4bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_37_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_37_read( uint32_t base )
{
    return system_isp_read_32( base + 0x14bc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 38 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_38_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_38_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_38_REG_ADDR 0x14c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_38_OFFSET 0x4c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_38_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_38_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14c0 );
    system_isp_write_32( base + 0x14c0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_38_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14c0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_38_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_38_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_38_REG_ADDR 0x14c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_38_OFFSET 0x4c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_38_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_38_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14c0 );
    system_isp_write_32( base + 0x14c0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_38_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14c0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_38_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_38_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_38_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_38_REG_ADDR 0x14c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_38_OFFSET 0x4c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_38_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_38_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14c0 );
    system_isp_write_32( base + 0x14c0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_38_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14c0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_38_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_38_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_38_REG_ADDR 0x14c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_38_OFFSET 0x4c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_38_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_38_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14c0 );
    system_isp_write_32( base + 0x14c0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_38_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14c0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_38_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_38_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_38_REG_ADDR 0x14c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_38_OFFSET 0x4c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_38_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_38_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14c0 );
    system_isp_write_32( base + 0x14c0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_38_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14c0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_38_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_38_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_38_REG_ADDR 0x14c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_38_OFFSET 0x4c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_38_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_38_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14c0 );
    system_isp_write_32( base + 0x14c0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_38_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14c0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_38_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_38_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_38_REG_ADDR 0x14c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_38_OFFSET 0x4c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_38_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_38_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x14c4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_38_read( uint32_t base )
{
    return system_isp_read_32( base + 0x14c4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_38_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_38_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_38_REG_ADDR 0x14c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_38_OFFSET 0x4c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_38_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_38_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x14c8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_38_read( uint32_t base )
{
    return system_isp_read_32( base + 0x14c8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_38_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_38_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_38_REG_ADDR 0x14cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_38_OFFSET 0x4cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_38_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_38_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14cc );
    system_isp_write_32( base + 0x14cc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_38_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x14cc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_38_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_38_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_38_REG_ADDR 0x14d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_38_OFFSET 0x4d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_38_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_38_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14d0 );
    system_isp_write_32( base + 0x14d0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_38_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x14d0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_38_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_38_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_38_REG_ADDR 0x14d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_38_OFFSET 0x4d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_38_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_38_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14d4 );
    system_isp_write_32( base + 0x14d4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_38_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x14d4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_38_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_38_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_38_REG_ADDR 0x14d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_38_OFFSET 0x4d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_38_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_38_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14d8 );
    system_isp_write_32( base + 0x14d8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_38_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14d8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 38
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_38_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_38_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_38_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_38_REG_ADDR 0x14dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_38_OFFSET 0x4dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_38_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_38_read( uint32_t base )
{
    return system_isp_read_32( base + 0x14dc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 39 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_39_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_39_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_39_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_39_REG_ADDR 0x14e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_39_OFFSET 0x4e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_39_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_39_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14e0 );
    system_isp_write_32( base + 0x14e0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_39_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14e0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_39_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_39_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_39_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_39_REG_ADDR 0x14e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_39_OFFSET 0x4e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_39_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_39_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14e0 );
    system_isp_write_32( base + 0x14e0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_39_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14e0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_39_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_39_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_39_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_39_REG_ADDR 0x14e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_39_OFFSET 0x4e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_39_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_39_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14e0 );
    system_isp_write_32( base + 0x14e0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_39_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14e0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_39_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_39_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_39_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_39_REG_ADDR 0x14e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_39_OFFSET 0x4e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_39_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_39_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14e0 );
    system_isp_write_32( base + 0x14e0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_39_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14e0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_39_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_39_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_39_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_39_REG_ADDR 0x14e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_39_OFFSET 0x4e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_39_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_39_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14e0 );
    system_isp_write_32( base + 0x14e0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_39_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14e0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_39_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_39_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_39_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_39_REG_ADDR 0x14e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_39_OFFSET 0x4e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_39_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_39_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x14e4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_39_read( uint32_t base )
{
    return system_isp_read_32( base + 0x14e4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_39_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_39_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_39_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_39_REG_ADDR 0x14e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_39_OFFSET 0x4e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_39_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_39_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x14e8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_39_read( uint32_t base )
{
    return system_isp_read_32( base + 0x14e8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_39_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_39_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_39_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_39_REG_ADDR 0x14ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_39_OFFSET 0x4ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_39_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_39_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14ec );
    system_isp_write_32( base + 0x14ec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_39_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x14ec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_39_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_39_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_39_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_39_REG_ADDR 0x14f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_39_OFFSET 0x4f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_39_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_39_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14f0 );
    system_isp_write_32( base + 0x14f0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_39_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x14f0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_39_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_39_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_39_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_39_REG_ADDR 0x14f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_39_OFFSET 0x4f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_39_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_39_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14f4 );
    system_isp_write_32( base + 0x14f4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_39_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x14f4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_39_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_39_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_39_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_39_REG_ADDR 0x14f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_39_OFFSET 0x4f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_39_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_39_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x14f8 );
    system_isp_write_32( base + 0x14f8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_39_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x14f8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 39
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_39_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_39_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_39_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_39_REG_ADDR 0x14fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_39_OFFSET 0x4fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_39_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_39_read( uint32_t base )
{
    return system_isp_read_32( base + 0x14fc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 40 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_40_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_40_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_40_REG_ADDR 0x1500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_40_OFFSET 0x500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_40_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_40_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1500 );
    system_isp_write_32( base + 0x1500, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_40_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1500 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_40_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_40_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_40_REG_ADDR 0x1500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_40_OFFSET 0x500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_40_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_40_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1500 );
    system_isp_write_32( base + 0x1500, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_40_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1500 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_40_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_40_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_40_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_40_REG_ADDR 0x1500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_40_OFFSET 0x500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_40_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_40_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1500 );
    system_isp_write_32( base + 0x1500, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_40_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1500 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_40_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_40_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_40_REG_ADDR 0x1500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_40_OFFSET 0x500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_40_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_40_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1500 );
    system_isp_write_32( base + 0x1500, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_40_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1500 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_40_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_40_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_40_REG_ADDR 0x1500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_40_OFFSET 0x500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_40_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_40_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1500 );
    system_isp_write_32( base + 0x1500, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_40_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1500 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_40_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_40_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_40_REG_ADDR 0x1500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_40_OFFSET 0x500
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_40_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_40_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1500 );
    system_isp_write_32( base + 0x1500, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_40_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1500 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_40_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_40_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_40_REG_ADDR 0x1504
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_40_OFFSET 0x504
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_40_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_40_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1504, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_40_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1504 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_40_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_40_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_40_REG_ADDR 0x1508
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_40_OFFSET 0x508
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_40_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_40_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1508, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_40_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1508 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_40_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_40_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_40_REG_ADDR 0x150c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_40_OFFSET 0x50c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_40_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_40_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x150c );
    system_isp_write_32( base + 0x150c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_40_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x150c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_40_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_40_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_40_REG_ADDR 0x1510
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_40_OFFSET 0x510
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_40_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_40_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1510 );
    system_isp_write_32( base + 0x1510, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_40_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1510 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_40_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_40_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_40_REG_ADDR 0x1514
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_40_OFFSET 0x514
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_40_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_40_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1514 );
    system_isp_write_32( base + 0x1514, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_40_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1514 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_40_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_40_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_40_REG_ADDR 0x1518
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_40_OFFSET 0x518
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_40_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_40_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1518 );
    system_isp_write_32( base + 0x1518, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_40_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1518 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 40
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_40_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_40_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_40_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_40_REG_ADDR 0x151c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_40_OFFSET 0x51c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_40_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_40_read( uint32_t base )
{
    return system_isp_read_32( base + 0x151c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 41 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_41_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_41_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_41_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_41_REG_ADDR 0x1520
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_41_OFFSET 0x520
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_41_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_41_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1520 );
    system_isp_write_32( base + 0x1520, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_41_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1520 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_41_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_41_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_41_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_41_REG_ADDR 0x1520
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_41_OFFSET 0x520
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_41_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_41_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1520 );
    system_isp_write_32( base + 0x1520, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_41_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1520 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_41_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_41_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_41_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_41_REG_ADDR 0x1520
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_41_OFFSET 0x520
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_41_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_41_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1520 );
    system_isp_write_32( base + 0x1520, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_41_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1520 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_41_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_41_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_41_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_41_REG_ADDR 0x1520
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_41_OFFSET 0x520
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_41_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_41_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1520 );
    system_isp_write_32( base + 0x1520, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_41_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1520 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_41_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_41_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_41_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_41_REG_ADDR 0x1520
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_41_OFFSET 0x520
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_41_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_41_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1520 );
    system_isp_write_32( base + 0x1520, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_41_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1520 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_41_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_41_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_41_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_41_REG_ADDR 0x1524
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_41_OFFSET 0x524
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_41_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_41_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1524, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_41_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1524 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_41_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_41_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_41_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_41_REG_ADDR 0x1528
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_41_OFFSET 0x528
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_41_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_41_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1528, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_41_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1528 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_41_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_41_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_41_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_41_REG_ADDR 0x152c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_41_OFFSET 0x52c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_41_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_41_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x152c );
    system_isp_write_32( base + 0x152c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_41_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x152c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_41_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_41_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_41_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_41_REG_ADDR 0x1530
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_41_OFFSET 0x530
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_41_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_41_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1530 );
    system_isp_write_32( base + 0x1530, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_41_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1530 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_41_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_41_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_41_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_41_REG_ADDR 0x1534
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_41_OFFSET 0x534
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_41_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_41_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1534 );
    system_isp_write_32( base + 0x1534, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_41_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1534 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_41_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_41_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_41_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_41_REG_ADDR 0x1538
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_41_OFFSET 0x538
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_41_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_41_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1538 );
    system_isp_write_32( base + 0x1538, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_41_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1538 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 41
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_41_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_41_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_41_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_41_REG_ADDR 0x153c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_41_OFFSET 0x53c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_41_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_41_read( uint32_t base )
{
    return system_isp_read_32( base + 0x153c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 42 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_42_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_42_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_42_REG_ADDR 0x1540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_42_OFFSET 0x540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_42_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_42_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1540 );
    system_isp_write_32( base + 0x1540, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_42_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1540 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_42_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_42_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_42_REG_ADDR 0x1540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_42_OFFSET 0x540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_42_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_42_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1540 );
    system_isp_write_32( base + 0x1540, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_42_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1540 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_42_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_42_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_42_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_42_REG_ADDR 0x1540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_42_OFFSET 0x540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_42_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_42_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1540 );
    system_isp_write_32( base + 0x1540, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_42_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1540 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_42_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_42_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_42_REG_ADDR 0x1540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_42_OFFSET 0x540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_42_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_42_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1540 );
    system_isp_write_32( base + 0x1540, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_42_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1540 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_42_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_42_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_42_REG_ADDR 0x1540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_42_OFFSET 0x540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_42_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_42_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1540 );
    system_isp_write_32( base + 0x1540, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_42_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1540 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_42_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_42_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_42_REG_ADDR 0x1540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_42_OFFSET 0x540
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_42_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_42_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1540 );
    system_isp_write_32( base + 0x1540, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_42_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1540 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_42_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_42_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_42_REG_ADDR 0x1544
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_42_OFFSET 0x544
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_42_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_42_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1544, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_42_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1544 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_42_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_42_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_42_REG_ADDR 0x1548
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_42_OFFSET 0x548
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_42_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_42_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1548, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_42_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1548 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_42_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_42_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_42_REG_ADDR 0x154c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_42_OFFSET 0x54c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_42_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_42_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x154c );
    system_isp_write_32( base + 0x154c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_42_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x154c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_42_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_42_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_42_REG_ADDR 0x1550
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_42_OFFSET 0x550
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_42_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_42_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1550 );
    system_isp_write_32( base + 0x1550, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_42_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1550 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_42_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_42_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_42_REG_ADDR 0x1554
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_42_OFFSET 0x554
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_42_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_42_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1554 );
    system_isp_write_32( base + 0x1554, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_42_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1554 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_42_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_42_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_42_REG_ADDR 0x1558
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_42_OFFSET 0x558
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_42_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_42_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1558 );
    system_isp_write_32( base + 0x1558, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_42_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1558 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 42
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_42_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_42_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_42_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_42_REG_ADDR 0x155c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_42_OFFSET 0x55c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_42_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_42_read( uint32_t base )
{
    return system_isp_read_32( base + 0x155c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 43 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_43_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_43_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_43_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_43_REG_ADDR 0x1560
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_43_OFFSET 0x560
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_43_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_43_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1560 );
    system_isp_write_32( base + 0x1560, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_43_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1560 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_43_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_43_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_43_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_43_REG_ADDR 0x1560
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_43_OFFSET 0x560
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_43_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_43_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1560 );
    system_isp_write_32( base + 0x1560, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_43_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1560 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_43_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_43_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_43_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_43_REG_ADDR 0x1560
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_43_OFFSET 0x560
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_43_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_43_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1560 );
    system_isp_write_32( base + 0x1560, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_43_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1560 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_43_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_43_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_43_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_43_REG_ADDR 0x1560
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_43_OFFSET 0x560
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_43_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_43_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1560 );
    system_isp_write_32( base + 0x1560, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_43_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1560 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_43_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_43_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_43_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_43_REG_ADDR 0x1560
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_43_OFFSET 0x560
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_43_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_43_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1560 );
    system_isp_write_32( base + 0x1560, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_43_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1560 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_43_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_43_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_43_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_43_REG_ADDR 0x1564
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_43_OFFSET 0x564
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_43_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_43_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1564, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_43_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1564 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_43_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_43_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_43_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_43_REG_ADDR 0x1568
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_43_OFFSET 0x568
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_43_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_43_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1568, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_43_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1568 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_43_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_43_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_43_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_43_REG_ADDR 0x156c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_43_OFFSET 0x56c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_43_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_43_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x156c );
    system_isp_write_32( base + 0x156c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_43_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x156c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_43_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_43_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_43_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_43_REG_ADDR 0x1570
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_43_OFFSET 0x570
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_43_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_43_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1570 );
    system_isp_write_32( base + 0x1570, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_43_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1570 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_43_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_43_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_43_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_43_REG_ADDR 0x1574
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_43_OFFSET 0x574
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_43_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_43_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1574 );
    system_isp_write_32( base + 0x1574, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_43_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1574 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_43_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_43_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_43_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_43_REG_ADDR 0x1578
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_43_OFFSET 0x578
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_43_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_43_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1578 );
    system_isp_write_32( base + 0x1578, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_43_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1578 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 43
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_43_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_43_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_43_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_43_REG_ADDR 0x157c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_43_OFFSET 0x57c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_43_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_43_read( uint32_t base )
{
    return system_isp_read_32( base + 0x157c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 44 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_44_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_44_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_44_REG_ADDR 0x1580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_44_OFFSET 0x580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_44_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_44_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1580 );
    system_isp_write_32( base + 0x1580, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_44_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1580 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_44_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_44_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_44_REG_ADDR 0x1580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_44_OFFSET 0x580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_44_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_44_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1580 );
    system_isp_write_32( base + 0x1580, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_44_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1580 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_44_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_44_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_44_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_44_REG_ADDR 0x1580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_44_OFFSET 0x580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_44_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_44_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1580 );
    system_isp_write_32( base + 0x1580, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_44_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1580 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_44_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_44_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_44_REG_ADDR 0x1580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_44_OFFSET 0x580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_44_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_44_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1580 );
    system_isp_write_32( base + 0x1580, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_44_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1580 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_44_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_44_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_44_REG_ADDR 0x1580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_44_OFFSET 0x580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_44_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_44_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1580 );
    system_isp_write_32( base + 0x1580, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_44_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1580 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_44_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_44_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_44_REG_ADDR 0x1580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_44_OFFSET 0x580
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_44_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_44_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1580 );
    system_isp_write_32( base + 0x1580, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_44_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1580 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_44_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_44_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_44_REG_ADDR 0x1584
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_44_OFFSET 0x584
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_44_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_44_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1584, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_44_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1584 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_44_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_44_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_44_REG_ADDR 0x1588
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_44_OFFSET 0x588
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_44_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_44_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1588, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_44_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1588 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_44_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_44_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_44_REG_ADDR 0x158c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_44_OFFSET 0x58c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_44_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_44_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x158c );
    system_isp_write_32( base + 0x158c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_44_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x158c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_44_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_44_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_44_REG_ADDR 0x1590
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_44_OFFSET 0x590
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_44_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_44_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1590 );
    system_isp_write_32( base + 0x1590, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_44_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1590 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_44_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_44_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_44_REG_ADDR 0x1594
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_44_OFFSET 0x594
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_44_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_44_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1594 );
    system_isp_write_32( base + 0x1594, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_44_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1594 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_44_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_44_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_44_REG_ADDR 0x1598
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_44_OFFSET 0x598
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_44_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_44_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1598 );
    system_isp_write_32( base + 0x1598, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_44_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1598 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 44
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_44_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_44_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_44_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_44_REG_ADDR 0x159c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_44_OFFSET 0x59c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_44_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_44_read( uint32_t base )
{
    return system_isp_read_32( base + 0x159c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 45 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_45_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_45_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_45_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_45_REG_ADDR 0x15a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_45_OFFSET 0x5a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_45_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_45_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15a0 );
    system_isp_write_32( base + 0x15a0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_45_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15a0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_45_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_45_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_45_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_45_REG_ADDR 0x15a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_45_OFFSET 0x5a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_45_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_45_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15a0 );
    system_isp_write_32( base + 0x15a0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_45_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15a0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_45_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_45_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_45_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_45_REG_ADDR 0x15a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_45_OFFSET 0x5a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_45_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_45_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15a0 );
    system_isp_write_32( base + 0x15a0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_45_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15a0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_45_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_45_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_45_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_45_REG_ADDR 0x15a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_45_OFFSET 0x5a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_45_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_45_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15a0 );
    system_isp_write_32( base + 0x15a0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_45_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15a0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_45_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_45_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_45_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_45_REG_ADDR 0x15a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_45_OFFSET 0x5a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_45_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_45_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15a0 );
    system_isp_write_32( base + 0x15a0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_45_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15a0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_45_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_45_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_45_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_45_REG_ADDR 0x15a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_45_OFFSET 0x5a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_45_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_45_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x15a4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_45_read( uint32_t base )
{
    return system_isp_read_32( base + 0x15a4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_45_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_45_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_45_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_45_REG_ADDR 0x15a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_45_OFFSET 0x5a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_45_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_45_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x15a8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_45_read( uint32_t base )
{
    return system_isp_read_32( base + 0x15a8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_45_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_45_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_45_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_45_REG_ADDR 0x15ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_45_OFFSET 0x5ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_45_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_45_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15ac );
    system_isp_write_32( base + 0x15ac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_45_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x15ac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_45_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_45_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_45_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_45_REG_ADDR 0x15b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_45_OFFSET 0x5b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_45_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_45_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15b0 );
    system_isp_write_32( base + 0x15b0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_45_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x15b0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_45_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_45_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_45_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_45_REG_ADDR 0x15b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_45_OFFSET 0x5b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_45_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_45_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15b4 );
    system_isp_write_32( base + 0x15b4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_45_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x15b4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_45_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_45_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_45_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_45_REG_ADDR 0x15b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_45_OFFSET 0x5b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_45_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_45_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15b8 );
    system_isp_write_32( base + 0x15b8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_45_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15b8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 45
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_45_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_45_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_45_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_45_REG_ADDR 0x15bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_45_OFFSET 0x5bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_45_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_45_read( uint32_t base )
{
    return system_isp_read_32( base + 0x15bc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 46 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_46_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_46_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_46_REG_ADDR 0x15c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_46_OFFSET 0x5c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_46_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_46_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15c0 );
    system_isp_write_32( base + 0x15c0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_46_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15c0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_46_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_46_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_46_REG_ADDR 0x15c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_46_OFFSET 0x5c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_46_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_46_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15c0 );
    system_isp_write_32( base + 0x15c0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_46_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15c0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_46_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_46_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_46_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_46_REG_ADDR 0x15c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_46_OFFSET 0x5c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_46_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_46_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15c0 );
    system_isp_write_32( base + 0x15c0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_46_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15c0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_46_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_46_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_46_REG_ADDR 0x15c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_46_OFFSET 0x5c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_46_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_46_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15c0 );
    system_isp_write_32( base + 0x15c0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_46_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15c0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_46_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_46_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_46_REG_ADDR 0x15c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_46_OFFSET 0x5c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_46_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_46_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15c0 );
    system_isp_write_32( base + 0x15c0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_46_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15c0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_46_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_46_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_46_REG_ADDR 0x15c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_46_OFFSET 0x5c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_46_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_46_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15c0 );
    system_isp_write_32( base + 0x15c0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_46_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15c0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_46_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_46_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_46_REG_ADDR 0x15c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_46_OFFSET 0x5c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_46_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_46_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x15c4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_46_read( uint32_t base )
{
    return system_isp_read_32( base + 0x15c4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_46_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_46_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_46_REG_ADDR 0x15c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_46_OFFSET 0x5c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_46_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_46_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x15c8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_46_read( uint32_t base )
{
    return system_isp_read_32( base + 0x15c8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_46_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_46_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_46_REG_ADDR 0x15cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_46_OFFSET 0x5cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_46_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_46_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15cc );
    system_isp_write_32( base + 0x15cc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_46_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x15cc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_46_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_46_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_46_REG_ADDR 0x15d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_46_OFFSET 0x5d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_46_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_46_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15d0 );
    system_isp_write_32( base + 0x15d0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_46_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x15d0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_46_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_46_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_46_REG_ADDR 0x15d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_46_OFFSET 0x5d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_46_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_46_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15d4 );
    system_isp_write_32( base + 0x15d4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_46_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x15d4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_46_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_46_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_46_REG_ADDR 0x15d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_46_OFFSET 0x5d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_46_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_46_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15d8 );
    system_isp_write_32( base + 0x15d8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_46_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15d8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 46
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_46_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_46_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_46_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_46_REG_ADDR 0x15dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_46_OFFSET 0x5dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_46_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_46_read( uint32_t base )
{
    return system_isp_read_32( base + 0x15dc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 47 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_47_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_47_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_47_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_47_REG_ADDR 0x15e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_47_OFFSET 0x5e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_47_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_47_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15e0 );
    system_isp_write_32( base + 0x15e0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_47_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15e0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_47_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_47_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_47_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_47_REG_ADDR 0x15e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_47_OFFSET 0x5e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_47_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_47_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15e0 );
    system_isp_write_32( base + 0x15e0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_47_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15e0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_47_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_47_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_47_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_47_REG_ADDR 0x15e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_47_OFFSET 0x5e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_47_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_47_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15e0 );
    system_isp_write_32( base + 0x15e0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_47_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15e0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_47_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_47_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_47_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_47_REG_ADDR 0x15e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_47_OFFSET 0x5e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_47_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_47_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15e0 );
    system_isp_write_32( base + 0x15e0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_47_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15e0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_47_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_47_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_47_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_47_REG_ADDR 0x15e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_47_OFFSET 0x5e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_47_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_47_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15e0 );
    system_isp_write_32( base + 0x15e0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_47_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15e0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_47_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_47_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_47_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_47_REG_ADDR 0x15e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_47_OFFSET 0x5e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_47_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_47_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x15e4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_47_read( uint32_t base )
{
    return system_isp_read_32( base + 0x15e4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_47_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_47_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_47_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_47_REG_ADDR 0x15e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_47_OFFSET 0x5e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_47_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_47_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x15e8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_47_read( uint32_t base )
{
    return system_isp_read_32( base + 0x15e8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_47_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_47_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_47_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_47_REG_ADDR 0x15ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_47_OFFSET 0x5ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_47_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_47_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15ec );
    system_isp_write_32( base + 0x15ec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_47_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x15ec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_47_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_47_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_47_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_47_REG_ADDR 0x15f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_47_OFFSET 0x5f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_47_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_47_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15f0 );
    system_isp_write_32( base + 0x15f0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_47_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x15f0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_47_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_47_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_47_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_47_REG_ADDR 0x15f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_47_OFFSET 0x5f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_47_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_47_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15f4 );
    system_isp_write_32( base + 0x15f4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_47_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x15f4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_47_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_47_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_47_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_47_REG_ADDR 0x15f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_47_OFFSET 0x5f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_47_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_47_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x15f8 );
    system_isp_write_32( base + 0x15f8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_47_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x15f8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 47
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_47_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_47_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_47_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_47_REG_ADDR 0x15fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_47_OFFSET 0x5fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_47_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_47_read( uint32_t base )
{
    return system_isp_read_32( base + 0x15fc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 48 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_48_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_48_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_48_REG_ADDR 0x1600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_48_OFFSET 0x600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_48_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_48_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1600 );
    system_isp_write_32( base + 0x1600, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_48_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1600 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_48_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_48_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_48_REG_ADDR 0x1600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_48_OFFSET 0x600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_48_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_48_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1600 );
    system_isp_write_32( base + 0x1600, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_48_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1600 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_48_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_48_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_48_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_48_REG_ADDR 0x1600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_48_OFFSET 0x600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_48_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_48_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1600 );
    system_isp_write_32( base + 0x1600, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_48_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1600 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_48_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_48_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_48_REG_ADDR 0x1600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_48_OFFSET 0x600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_48_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_48_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1600 );
    system_isp_write_32( base + 0x1600, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_48_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1600 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_48_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_48_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_48_REG_ADDR 0x1600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_48_OFFSET 0x600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_48_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_48_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1600 );
    system_isp_write_32( base + 0x1600, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_48_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1600 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_48_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_48_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_48_REG_ADDR 0x1600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_48_OFFSET 0x600
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_48_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_48_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1600 );
    system_isp_write_32( base + 0x1600, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_48_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1600 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_48_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_48_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_48_REG_ADDR 0x1604
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_48_OFFSET 0x604
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_48_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_48_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1604, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_48_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1604 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_48_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_48_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_48_REG_ADDR 0x1608
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_48_OFFSET 0x608
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_48_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_48_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1608, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_48_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1608 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_48_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_48_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_48_REG_ADDR 0x160c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_48_OFFSET 0x60c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_48_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_48_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x160c );
    system_isp_write_32( base + 0x160c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_48_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x160c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_48_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_48_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_48_REG_ADDR 0x1610
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_48_OFFSET 0x610
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_48_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_48_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1610 );
    system_isp_write_32( base + 0x1610, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_48_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1610 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_48_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_48_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_48_REG_ADDR 0x1614
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_48_OFFSET 0x614
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_48_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_48_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1614 );
    system_isp_write_32( base + 0x1614, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_48_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1614 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_48_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_48_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_48_REG_ADDR 0x1618
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_48_OFFSET 0x618
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_48_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_48_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1618 );
    system_isp_write_32( base + 0x1618, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_48_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1618 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 48
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_48_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_48_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_48_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_48_REG_ADDR 0x161c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_48_OFFSET 0x61c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_48_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_48_read( uint32_t base )
{
    return system_isp_read_32( base + 0x161c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 49 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_49_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_49_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_49_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_49_REG_ADDR 0x1620
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_49_OFFSET 0x620
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_49_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_49_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1620 );
    system_isp_write_32( base + 0x1620, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_49_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1620 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_49_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_49_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_49_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_49_REG_ADDR 0x1620
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_49_OFFSET 0x620
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_49_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_49_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1620 );
    system_isp_write_32( base + 0x1620, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_49_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1620 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_49_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_49_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_49_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_49_REG_ADDR 0x1620
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_49_OFFSET 0x620
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_49_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_49_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1620 );
    system_isp_write_32( base + 0x1620, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_49_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1620 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_49_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_49_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_49_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_49_REG_ADDR 0x1620
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_49_OFFSET 0x620
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_49_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_49_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1620 );
    system_isp_write_32( base + 0x1620, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_49_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1620 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_49_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_49_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_49_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_49_REG_ADDR 0x1620
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_49_OFFSET 0x620
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_49_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_49_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1620 );
    system_isp_write_32( base + 0x1620, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_49_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1620 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_49_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_49_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_49_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_49_REG_ADDR 0x1624
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_49_OFFSET 0x624
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_49_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_49_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1624, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_49_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1624 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_49_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_49_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_49_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_49_REG_ADDR 0x1628
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_49_OFFSET 0x628
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_49_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_49_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1628, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_49_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1628 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_49_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_49_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_49_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_49_REG_ADDR 0x162c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_49_OFFSET 0x62c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_49_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_49_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x162c );
    system_isp_write_32( base + 0x162c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_49_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x162c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_49_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_49_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_49_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_49_REG_ADDR 0x1630
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_49_OFFSET 0x630
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_49_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_49_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1630 );
    system_isp_write_32( base + 0x1630, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_49_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1630 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_49_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_49_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_49_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_49_REG_ADDR 0x1634
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_49_OFFSET 0x634
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_49_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_49_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1634 );
    system_isp_write_32( base + 0x1634, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_49_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1634 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_49_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_49_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_49_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_49_REG_ADDR 0x1638
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_49_OFFSET 0x638
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_49_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_49_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1638 );
    system_isp_write_32( base + 0x1638, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_49_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1638 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 49
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_49_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_49_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_49_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_49_REG_ADDR 0x163c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_49_OFFSET 0x63c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_49_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_49_read( uint32_t base )
{
    return system_isp_read_32( base + 0x163c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 50 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_50_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_50_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_50_REG_ADDR 0x1640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_50_OFFSET 0x640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_50_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_50_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1640 );
    system_isp_write_32( base + 0x1640, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_50_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1640 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_50_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_50_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_50_REG_ADDR 0x1640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_50_OFFSET 0x640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_50_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_50_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1640 );
    system_isp_write_32( base + 0x1640, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_50_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1640 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_50_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_50_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_50_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_50_REG_ADDR 0x1640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_50_OFFSET 0x640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_50_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_50_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1640 );
    system_isp_write_32( base + 0x1640, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_50_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1640 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_50_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_50_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_50_REG_ADDR 0x1640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_50_OFFSET 0x640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_50_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_50_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1640 );
    system_isp_write_32( base + 0x1640, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_50_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1640 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_50_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_50_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_50_REG_ADDR 0x1640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_50_OFFSET 0x640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_50_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_50_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1640 );
    system_isp_write_32( base + 0x1640, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_50_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1640 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_50_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_50_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_50_REG_ADDR 0x1640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_50_OFFSET 0x640
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_50_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_50_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1640 );
    system_isp_write_32( base + 0x1640, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_50_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1640 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_50_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_50_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_50_REG_ADDR 0x1644
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_50_OFFSET 0x644
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_50_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_50_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1644, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_50_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1644 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_50_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_50_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_50_REG_ADDR 0x1648
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_50_OFFSET 0x648
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_50_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_50_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1648, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_50_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1648 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_50_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_50_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_50_REG_ADDR 0x164c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_50_OFFSET 0x64c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_50_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_50_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x164c );
    system_isp_write_32( base + 0x164c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_50_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x164c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_50_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_50_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_50_REG_ADDR 0x1650
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_50_OFFSET 0x650
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_50_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_50_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1650 );
    system_isp_write_32( base + 0x1650, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_50_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1650 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_50_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_50_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_50_REG_ADDR 0x1654
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_50_OFFSET 0x654
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_50_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_50_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1654 );
    system_isp_write_32( base + 0x1654, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_50_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1654 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_50_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_50_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_50_REG_ADDR 0x1658
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_50_OFFSET 0x658
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_50_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_50_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1658 );
    system_isp_write_32( base + 0x1658, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_50_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1658 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 50
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_50_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_50_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_50_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_50_REG_ADDR 0x165c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_50_OFFSET 0x65c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_50_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_50_read( uint32_t base )
{
    return system_isp_read_32( base + 0x165c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 51 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_51_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_51_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_51_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_51_REG_ADDR 0x1660
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_51_OFFSET 0x660
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_51_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_51_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1660 );
    system_isp_write_32( base + 0x1660, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_51_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1660 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_51_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_51_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_51_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_51_REG_ADDR 0x1660
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_51_OFFSET 0x660
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_51_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_51_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1660 );
    system_isp_write_32( base + 0x1660, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_51_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1660 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_51_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_51_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_51_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_51_REG_ADDR 0x1660
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_51_OFFSET 0x660
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_51_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_51_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1660 );
    system_isp_write_32( base + 0x1660, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_51_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1660 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_51_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_51_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_51_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_51_REG_ADDR 0x1660
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_51_OFFSET 0x660
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_51_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_51_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1660 );
    system_isp_write_32( base + 0x1660, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_51_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1660 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_51_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_51_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_51_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_51_REG_ADDR 0x1660
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_51_OFFSET 0x660
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_51_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_51_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1660 );
    system_isp_write_32( base + 0x1660, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_51_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1660 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_51_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_51_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_51_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_51_REG_ADDR 0x1664
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_51_OFFSET 0x664
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_51_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_51_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1664, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_51_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1664 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_51_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_51_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_51_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_51_REG_ADDR 0x1668
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_51_OFFSET 0x668
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_51_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_51_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1668, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_51_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1668 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_51_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_51_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_51_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_51_REG_ADDR 0x166c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_51_OFFSET 0x66c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_51_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_51_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x166c );
    system_isp_write_32( base + 0x166c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_51_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x166c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_51_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_51_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_51_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_51_REG_ADDR 0x1670
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_51_OFFSET 0x670
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_51_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_51_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1670 );
    system_isp_write_32( base + 0x1670, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_51_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1670 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_51_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_51_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_51_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_51_REG_ADDR 0x1674
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_51_OFFSET 0x674
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_51_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_51_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1674 );
    system_isp_write_32( base + 0x1674, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_51_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1674 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_51_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_51_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_51_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_51_REG_ADDR 0x1678
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_51_OFFSET 0x678
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_51_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_51_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1678 );
    system_isp_write_32( base + 0x1678, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_51_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1678 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 51
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_51_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_51_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_51_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_51_REG_ADDR 0x167c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_51_OFFSET 0x67c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_51_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_51_read( uint32_t base )
{
    return system_isp_read_32( base + 0x167c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 52 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_52_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_52_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_52_REG_ADDR 0x1680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_52_OFFSET 0x680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_52_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_52_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1680 );
    system_isp_write_32( base + 0x1680, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_52_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1680 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_52_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_52_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_52_REG_ADDR 0x1680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_52_OFFSET 0x680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_52_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_52_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1680 );
    system_isp_write_32( base + 0x1680, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_52_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1680 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_52_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_52_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_52_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_52_REG_ADDR 0x1680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_52_OFFSET 0x680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_52_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_52_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1680 );
    system_isp_write_32( base + 0x1680, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_52_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1680 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_52_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_52_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_52_REG_ADDR 0x1680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_52_OFFSET 0x680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_52_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_52_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1680 );
    system_isp_write_32( base + 0x1680, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_52_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1680 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_52_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_52_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_52_REG_ADDR 0x1680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_52_OFFSET 0x680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_52_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_52_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1680 );
    system_isp_write_32( base + 0x1680, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_52_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1680 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_52_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_52_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_52_REG_ADDR 0x1680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_52_OFFSET 0x680
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_52_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_52_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1680 );
    system_isp_write_32( base + 0x1680, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_52_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1680 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_52_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_52_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_52_REG_ADDR 0x1684
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_52_OFFSET 0x684
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_52_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_52_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1684, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_52_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1684 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_52_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_52_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_52_REG_ADDR 0x1688
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_52_OFFSET 0x688
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_52_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_52_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1688, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_52_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1688 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_52_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_52_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_52_REG_ADDR 0x168c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_52_OFFSET 0x68c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_52_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_52_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x168c );
    system_isp_write_32( base + 0x168c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_52_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x168c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_52_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_52_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_52_REG_ADDR 0x1690
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_52_OFFSET 0x690
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_52_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_52_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1690 );
    system_isp_write_32( base + 0x1690, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_52_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1690 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_52_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_52_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_52_REG_ADDR 0x1694
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_52_OFFSET 0x694
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_52_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_52_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1694 );
    system_isp_write_32( base + 0x1694, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_52_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1694 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_52_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_52_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_52_REG_ADDR 0x1698
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_52_OFFSET 0x698
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_52_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_52_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1698 );
    system_isp_write_32( base + 0x1698, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_52_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1698 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 52
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_52_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_52_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_52_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_52_REG_ADDR 0x169c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_52_OFFSET 0x69c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_52_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_52_read( uint32_t base )
{
    return system_isp_read_32( base + 0x169c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 53 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_53_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_53_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_53_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_53_REG_ADDR 0x16a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_53_OFFSET 0x6a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_53_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_53_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16a0 );
    system_isp_write_32( base + 0x16a0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_53_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16a0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_53_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_53_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_53_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_53_REG_ADDR 0x16a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_53_OFFSET 0x6a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_53_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_53_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16a0 );
    system_isp_write_32( base + 0x16a0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_53_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16a0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_53_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_53_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_53_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_53_REG_ADDR 0x16a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_53_OFFSET 0x6a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_53_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_53_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16a0 );
    system_isp_write_32( base + 0x16a0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_53_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16a0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_53_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_53_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_53_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_53_REG_ADDR 0x16a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_53_OFFSET 0x6a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_53_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_53_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16a0 );
    system_isp_write_32( base + 0x16a0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_53_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16a0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_53_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_53_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_53_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_53_REG_ADDR 0x16a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_53_OFFSET 0x6a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_53_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_53_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16a0 );
    system_isp_write_32( base + 0x16a0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_53_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16a0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_53_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_53_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_53_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_53_REG_ADDR 0x16a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_53_OFFSET 0x6a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_53_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_53_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x16a4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_53_read( uint32_t base )
{
    return system_isp_read_32( base + 0x16a4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_53_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_53_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_53_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_53_REG_ADDR 0x16a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_53_OFFSET 0x6a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_53_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_53_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x16a8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_53_read( uint32_t base )
{
    return system_isp_read_32( base + 0x16a8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_53_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_53_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_53_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_53_REG_ADDR 0x16ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_53_OFFSET 0x6ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_53_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_53_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16ac );
    system_isp_write_32( base + 0x16ac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_53_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x16ac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_53_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_53_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_53_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_53_REG_ADDR 0x16b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_53_OFFSET 0x6b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_53_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_53_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16b0 );
    system_isp_write_32( base + 0x16b0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_53_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x16b0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_53_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_53_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_53_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_53_REG_ADDR 0x16b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_53_OFFSET 0x6b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_53_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_53_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16b4 );
    system_isp_write_32( base + 0x16b4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_53_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x16b4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_53_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_53_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_53_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_53_REG_ADDR 0x16b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_53_OFFSET 0x6b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_53_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_53_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16b8 );
    system_isp_write_32( base + 0x16b8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_53_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16b8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 53
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_53_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_53_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_53_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_53_REG_ADDR 0x16bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_53_OFFSET 0x6bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_53_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_53_read( uint32_t base )
{
    return system_isp_read_32( base + 0x16bc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 54 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_54_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_54_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_54_REG_ADDR 0x16c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_54_OFFSET 0x6c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_54_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_54_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16c0 );
    system_isp_write_32( base + 0x16c0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_54_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16c0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_54_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_54_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_54_REG_ADDR 0x16c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_54_OFFSET 0x6c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_54_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_54_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16c0 );
    system_isp_write_32( base + 0x16c0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_54_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16c0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_54_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_54_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_54_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_54_REG_ADDR 0x16c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_54_OFFSET 0x6c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_54_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_54_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16c0 );
    system_isp_write_32( base + 0x16c0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_54_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16c0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_54_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_54_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_54_REG_ADDR 0x16c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_54_OFFSET 0x6c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_54_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_54_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16c0 );
    system_isp_write_32( base + 0x16c0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_54_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16c0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_54_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_54_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_54_REG_ADDR 0x16c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_54_OFFSET 0x6c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_54_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_54_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16c0 );
    system_isp_write_32( base + 0x16c0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_54_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16c0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_54_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_54_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_54_REG_ADDR 0x16c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_54_OFFSET 0x6c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_54_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_54_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16c0 );
    system_isp_write_32( base + 0x16c0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_54_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16c0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_54_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_54_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_54_REG_ADDR 0x16c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_54_OFFSET 0x6c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_54_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_54_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x16c4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_54_read( uint32_t base )
{
    return system_isp_read_32( base + 0x16c4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_54_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_54_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_54_REG_ADDR 0x16c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_54_OFFSET 0x6c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_54_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_54_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x16c8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_54_read( uint32_t base )
{
    return system_isp_read_32( base + 0x16c8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_54_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_54_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_54_REG_ADDR 0x16cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_54_OFFSET 0x6cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_54_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_54_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16cc );
    system_isp_write_32( base + 0x16cc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_54_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x16cc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_54_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_54_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_54_REG_ADDR 0x16d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_54_OFFSET 0x6d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_54_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_54_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16d0 );
    system_isp_write_32( base + 0x16d0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_54_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x16d0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_54_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_54_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_54_REG_ADDR 0x16d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_54_OFFSET 0x6d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_54_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_54_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16d4 );
    system_isp_write_32( base + 0x16d4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_54_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x16d4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_54_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_54_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_54_REG_ADDR 0x16d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_54_OFFSET 0x6d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_54_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_54_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16d8 );
    system_isp_write_32( base + 0x16d8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_54_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16d8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 54
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_54_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_54_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_54_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_54_REG_ADDR 0x16dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_54_OFFSET 0x6dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_54_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_54_read( uint32_t base )
{
    return system_isp_read_32( base + 0x16dc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 55 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_55_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_55_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_55_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_55_REG_ADDR 0x16e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_55_OFFSET 0x6e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_55_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_55_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16e0 );
    system_isp_write_32( base + 0x16e0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_55_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16e0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_55_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_55_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_55_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_55_REG_ADDR 0x16e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_55_OFFSET 0x6e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_55_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_55_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16e0 );
    system_isp_write_32( base + 0x16e0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_55_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16e0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_55_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_55_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_55_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_55_REG_ADDR 0x16e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_55_OFFSET 0x6e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_55_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_55_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16e0 );
    system_isp_write_32( base + 0x16e0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_55_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16e0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_55_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_55_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_55_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_55_REG_ADDR 0x16e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_55_OFFSET 0x6e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_55_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_55_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16e0 );
    system_isp_write_32( base + 0x16e0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_55_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16e0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_55_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_55_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_55_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_55_REG_ADDR 0x16e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_55_OFFSET 0x6e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_55_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_55_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16e0 );
    system_isp_write_32( base + 0x16e0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_55_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16e0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_55_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_55_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_55_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_55_REG_ADDR 0x16e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_55_OFFSET 0x6e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_55_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_55_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x16e4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_55_read( uint32_t base )
{
    return system_isp_read_32( base + 0x16e4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_55_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_55_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_55_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_55_REG_ADDR 0x16e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_55_OFFSET 0x6e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_55_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_55_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x16e8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_55_read( uint32_t base )
{
    return system_isp_read_32( base + 0x16e8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_55_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_55_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_55_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_55_REG_ADDR 0x16ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_55_OFFSET 0x6ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_55_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_55_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16ec );
    system_isp_write_32( base + 0x16ec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_55_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x16ec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_55_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_55_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_55_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_55_REG_ADDR 0x16f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_55_OFFSET 0x6f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_55_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_55_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16f0 );
    system_isp_write_32( base + 0x16f0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_55_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x16f0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_55_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_55_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_55_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_55_REG_ADDR 0x16f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_55_OFFSET 0x6f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_55_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_55_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16f4 );
    system_isp_write_32( base + 0x16f4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_55_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x16f4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_55_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_55_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_55_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_55_REG_ADDR 0x16f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_55_OFFSET 0x6f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_55_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_55_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x16f8 );
    system_isp_write_32( base + 0x16f8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_55_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x16f8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 55
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_55_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_55_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_55_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_55_REG_ADDR 0x16fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_55_OFFSET 0x6fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_55_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_55_read( uint32_t base )
{
    return system_isp_read_32( base + 0x16fc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 56 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_56_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_56_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_56_REG_ADDR 0x1700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_56_OFFSET 0x700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_56_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_56_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1700 );
    system_isp_write_32( base + 0x1700, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_56_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1700 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_56_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_56_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_56_REG_ADDR 0x1700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_56_OFFSET 0x700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_56_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_56_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1700 );
    system_isp_write_32( base + 0x1700, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_56_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1700 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_56_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_56_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_56_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_56_REG_ADDR 0x1700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_56_OFFSET 0x700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_56_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_56_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1700 );
    system_isp_write_32( base + 0x1700, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_56_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1700 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_56_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_56_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_56_REG_ADDR 0x1700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_56_OFFSET 0x700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_56_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_56_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1700 );
    system_isp_write_32( base + 0x1700, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_56_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1700 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_56_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_56_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_56_REG_ADDR 0x1700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_56_OFFSET 0x700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_56_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_56_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1700 );
    system_isp_write_32( base + 0x1700, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_56_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1700 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_56_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_56_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_56_REG_ADDR 0x1700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_56_OFFSET 0x700
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_56_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_56_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1700 );
    system_isp_write_32( base + 0x1700, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_56_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1700 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_56_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_56_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_56_REG_ADDR 0x1704
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_56_OFFSET 0x704
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_56_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_56_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1704, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_56_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1704 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_56_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_56_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_56_REG_ADDR 0x1708
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_56_OFFSET 0x708
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_56_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_56_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1708, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_56_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1708 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_56_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_56_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_56_REG_ADDR 0x170c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_56_OFFSET 0x70c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_56_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_56_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x170c );
    system_isp_write_32( base + 0x170c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_56_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x170c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_56_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_56_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_56_REG_ADDR 0x1710
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_56_OFFSET 0x710
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_56_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_56_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1710 );
    system_isp_write_32( base + 0x1710, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_56_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1710 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_56_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_56_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_56_REG_ADDR 0x1714
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_56_OFFSET 0x714
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_56_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_56_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1714 );
    system_isp_write_32( base + 0x1714, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_56_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1714 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_56_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_56_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_56_REG_ADDR 0x1718
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_56_OFFSET 0x718
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_56_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_56_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1718 );
    system_isp_write_32( base + 0x1718, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_56_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1718 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 56
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_56_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_56_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_56_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_56_REG_ADDR 0x171c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_56_OFFSET 0x71c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_56_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_56_read( uint32_t base )
{
    return system_isp_read_32( base + 0x171c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 57 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_57_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_57_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_57_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_57_REG_ADDR 0x1720
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_57_OFFSET 0x720
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_57_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_57_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1720 );
    system_isp_write_32( base + 0x1720, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_57_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1720 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_57_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_57_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_57_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_57_REG_ADDR 0x1720
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_57_OFFSET 0x720
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_57_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_57_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1720 );
    system_isp_write_32( base + 0x1720, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_57_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1720 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_57_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_57_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_57_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_57_REG_ADDR 0x1720
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_57_OFFSET 0x720
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_57_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_57_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1720 );
    system_isp_write_32( base + 0x1720, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_57_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1720 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_57_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_57_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_57_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_57_REG_ADDR 0x1720
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_57_OFFSET 0x720
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_57_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_57_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1720 );
    system_isp_write_32( base + 0x1720, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_57_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1720 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_57_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_57_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_57_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_57_REG_ADDR 0x1720
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_57_OFFSET 0x720
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_57_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_57_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1720 );
    system_isp_write_32( base + 0x1720, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_57_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1720 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_57_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_57_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_57_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_57_REG_ADDR 0x1724
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_57_OFFSET 0x724
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_57_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_57_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1724, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_57_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1724 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_57_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_57_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_57_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_57_REG_ADDR 0x1728
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_57_OFFSET 0x728
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_57_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_57_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1728, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_57_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1728 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_57_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_57_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_57_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_57_REG_ADDR 0x172c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_57_OFFSET 0x72c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_57_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_57_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x172c );
    system_isp_write_32( base + 0x172c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_57_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x172c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_57_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_57_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_57_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_57_REG_ADDR 0x1730
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_57_OFFSET 0x730
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_57_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_57_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1730 );
    system_isp_write_32( base + 0x1730, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_57_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1730 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_57_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_57_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_57_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_57_REG_ADDR 0x1734
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_57_OFFSET 0x734
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_57_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_57_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1734 );
    system_isp_write_32( base + 0x1734, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_57_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1734 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_57_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_57_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_57_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_57_REG_ADDR 0x1738
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_57_OFFSET 0x738
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_57_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_57_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1738 );
    system_isp_write_32( base + 0x1738, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_57_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1738 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 57
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_57_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_57_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_57_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_57_REG_ADDR 0x173c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_57_OFFSET 0x73c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_57_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_57_read( uint32_t base )
{
    return system_isp_read_32( base + 0x173c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 58 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_58_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_58_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_58_REG_ADDR 0x1740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_58_OFFSET 0x740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_58_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_58_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1740 );
    system_isp_write_32( base + 0x1740, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_58_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1740 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_58_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_58_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_58_REG_ADDR 0x1740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_58_OFFSET 0x740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_58_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_58_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1740 );
    system_isp_write_32( base + 0x1740, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_58_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1740 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_58_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_58_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_58_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_58_REG_ADDR 0x1740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_58_OFFSET 0x740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_58_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_58_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1740 );
    system_isp_write_32( base + 0x1740, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_58_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1740 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_58_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_58_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_58_REG_ADDR 0x1740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_58_OFFSET 0x740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_58_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_58_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1740 );
    system_isp_write_32( base + 0x1740, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_58_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1740 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_58_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_58_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_58_REG_ADDR 0x1740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_58_OFFSET 0x740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_58_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_58_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1740 );
    system_isp_write_32( base + 0x1740, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_58_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1740 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_58_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_58_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_58_REG_ADDR 0x1740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_58_OFFSET 0x740
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_58_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_58_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1740 );
    system_isp_write_32( base + 0x1740, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_58_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1740 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_58_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_58_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_58_REG_ADDR 0x1744
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_58_OFFSET 0x744
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_58_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_58_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1744, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_58_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1744 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_58_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_58_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_58_REG_ADDR 0x1748
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_58_OFFSET 0x748
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_58_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_58_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1748, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_58_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1748 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_58_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_58_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_58_REG_ADDR 0x174c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_58_OFFSET 0x74c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_58_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_58_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x174c );
    system_isp_write_32( base + 0x174c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_58_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x174c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_58_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_58_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_58_REG_ADDR 0x1750
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_58_OFFSET 0x750
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_58_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_58_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1750 );
    system_isp_write_32( base + 0x1750, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_58_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1750 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_58_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_58_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_58_REG_ADDR 0x1754
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_58_OFFSET 0x754
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_58_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_58_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1754 );
    system_isp_write_32( base + 0x1754, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_58_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1754 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_58_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_58_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_58_REG_ADDR 0x1758
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_58_OFFSET 0x758
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_58_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_58_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1758 );
    system_isp_write_32( base + 0x1758, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_58_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1758 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 58
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_58_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_58_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_58_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_58_REG_ADDR 0x175c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_58_OFFSET 0x75c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_58_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_58_read( uint32_t base )
{
    return system_isp_read_32( base + 0x175c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 59 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_59_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_59_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_59_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_59_REG_ADDR 0x1760
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_59_OFFSET 0x760
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_59_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_59_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1760 );
    system_isp_write_32( base + 0x1760, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_59_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1760 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_59_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_59_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_59_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_59_REG_ADDR 0x1760
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_59_OFFSET 0x760
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_59_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_59_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1760 );
    system_isp_write_32( base + 0x1760, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_59_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1760 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_59_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_59_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_59_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_59_REG_ADDR 0x1760
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_59_OFFSET 0x760
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_59_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_59_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1760 );
    system_isp_write_32( base + 0x1760, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_59_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1760 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_59_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_59_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_59_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_59_REG_ADDR 0x1760
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_59_OFFSET 0x760
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_59_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_59_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1760 );
    system_isp_write_32( base + 0x1760, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_59_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1760 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_59_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_59_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_59_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_59_REG_ADDR 0x1760
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_59_OFFSET 0x760
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_59_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_59_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1760 );
    system_isp_write_32( base + 0x1760, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_59_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1760 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_59_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_59_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_59_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_59_REG_ADDR 0x1764
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_59_OFFSET 0x764
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_59_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_59_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1764, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_59_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1764 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_59_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_59_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_59_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_59_REG_ADDR 0x1768
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_59_OFFSET 0x768
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_59_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_59_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1768, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_59_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1768 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_59_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_59_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_59_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_59_REG_ADDR 0x176c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_59_OFFSET 0x76c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_59_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_59_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x176c );
    system_isp_write_32( base + 0x176c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_59_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x176c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_59_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_59_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_59_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_59_REG_ADDR 0x1770
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_59_OFFSET 0x770
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_59_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_59_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1770 );
    system_isp_write_32( base + 0x1770, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_59_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1770 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_59_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_59_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_59_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_59_REG_ADDR 0x1774
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_59_OFFSET 0x774
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_59_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_59_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1774 );
    system_isp_write_32( base + 0x1774, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_59_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1774 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_59_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_59_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_59_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_59_REG_ADDR 0x1778
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_59_OFFSET 0x778
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_59_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_59_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1778 );
    system_isp_write_32( base + 0x1778, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_59_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1778 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 59
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_59_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_59_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_59_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_59_REG_ADDR 0x177c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_59_OFFSET 0x77c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_59_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_59_read( uint32_t base )
{
    return system_isp_read_32( base + 0x177c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 60 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_60_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_60_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_60_REG_ADDR 0x1780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_60_OFFSET 0x780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_60_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_60_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1780 );
    system_isp_write_32( base + 0x1780, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_60_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1780 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_60_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_60_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_60_REG_ADDR 0x1780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_60_OFFSET 0x780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_60_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_60_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1780 );
    system_isp_write_32( base + 0x1780, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_60_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1780 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_60_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_60_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_60_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_60_REG_ADDR 0x1780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_60_OFFSET 0x780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_60_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_60_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1780 );
    system_isp_write_32( base + 0x1780, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_60_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1780 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_60_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_60_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_60_REG_ADDR 0x1780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_60_OFFSET 0x780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_60_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_60_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1780 );
    system_isp_write_32( base + 0x1780, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_60_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1780 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_60_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_60_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_60_REG_ADDR 0x1780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_60_OFFSET 0x780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_60_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_60_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1780 );
    system_isp_write_32( base + 0x1780, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_60_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1780 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_60_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_60_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_60_REG_ADDR 0x1780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_60_OFFSET 0x780
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_60_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_60_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1780 );
    system_isp_write_32( base + 0x1780, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_60_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1780 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_60_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_60_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_60_REG_ADDR 0x1784
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_60_OFFSET 0x784
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_60_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_60_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1784, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_60_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1784 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_60_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_60_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_60_REG_ADDR 0x1788
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_60_OFFSET 0x788
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_60_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_60_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x1788, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_60_read( uint32_t base )
{
    return system_isp_read_32( base + 0x1788 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_60_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_60_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_60_REG_ADDR 0x178c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_60_OFFSET 0x78c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_60_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_60_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x178c );
    system_isp_write_32( base + 0x178c, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_60_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x178c ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_60_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_60_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_60_REG_ADDR 0x1790
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_60_OFFSET 0x790
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_60_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_60_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1790 );
    system_isp_write_32( base + 0x1790, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_60_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1790 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_60_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_60_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_60_REG_ADDR 0x1794
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_60_OFFSET 0x794
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_60_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_60_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1794 );
    system_isp_write_32( base + 0x1794, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_60_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x1794 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_60_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_60_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_60_REG_ADDR 0x1798
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_60_OFFSET 0x798
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_60_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_60_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x1798 );
    system_isp_write_32( base + 0x1798, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_60_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1798 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 60
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_60_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_60_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_60_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_60_REG_ADDR 0x179c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_60_OFFSET 0x79c
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_60_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_60_read( uint32_t base )
{
    return system_isp_read_32( base + 0x179c );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 61 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_61_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_61_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_61_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_61_REG_ADDR 0x17a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_61_OFFSET 0x7a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_61_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_61_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17a0 );
    system_isp_write_32( base + 0x17a0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_61_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17a0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_61_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_61_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_61_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_61_REG_ADDR 0x17a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_61_OFFSET 0x7a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_61_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_61_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17a0 );
    system_isp_write_32( base + 0x17a0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_61_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17a0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_61_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_61_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_61_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_61_REG_ADDR 0x17a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_61_OFFSET 0x7a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_61_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_61_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17a0 );
    system_isp_write_32( base + 0x17a0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_61_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17a0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_61_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_61_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_61_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_61_REG_ADDR 0x17a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_61_OFFSET 0x7a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_61_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_61_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17a0 );
    system_isp_write_32( base + 0x17a0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_61_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17a0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_61_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_61_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_61_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_61_REG_ADDR 0x17a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_61_OFFSET 0x7a0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_61_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_61_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17a0 );
    system_isp_write_32( base + 0x17a0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_61_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17a0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_61_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_61_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_61_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_61_REG_ADDR 0x17a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_61_OFFSET 0x7a4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_61_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_61_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x17a4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_61_read( uint32_t base )
{
    return system_isp_read_32( base + 0x17a4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_61_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_61_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_61_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_61_REG_ADDR 0x17a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_61_OFFSET 0x7a8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_61_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_61_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x17a8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_61_read( uint32_t base )
{
    return system_isp_read_32( base + 0x17a8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_61_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_61_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_61_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_61_REG_ADDR 0x17ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_61_OFFSET 0x7ac
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_61_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_61_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17ac );
    system_isp_write_32( base + 0x17ac, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_61_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x17ac ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_61_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_61_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_61_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_61_REG_ADDR 0x17b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_61_OFFSET 0x7b0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_61_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_61_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17b0 );
    system_isp_write_32( base + 0x17b0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_61_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x17b0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_61_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_61_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_61_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_61_REG_ADDR 0x17b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_61_OFFSET 0x7b4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_61_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_61_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17b4 );
    system_isp_write_32( base + 0x17b4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_61_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x17b4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_61_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_61_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_61_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_61_REG_ADDR 0x17b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_61_OFFSET 0x7b8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_61_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_61_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17b8 );
    system_isp_write_32( base + 0x17b8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_61_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17b8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 61
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_61_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_61_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_61_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_61_REG_ADDR 0x17bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_61_OFFSET 0x7bc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_61_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_61_read( uint32_t base )
{
    return system_isp_read_32( base + 0x17bc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 62 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_62_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_62_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_62_REG_ADDR 0x17c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_62_OFFSET 0x7c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_62_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_62_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17c0 );
    system_isp_write_32( base + 0x17c0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_62_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17c0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_62_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_62_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_62_REG_ADDR 0x17c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_62_OFFSET 0x7c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_62_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_62_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17c0 );
    system_isp_write_32( base + 0x17c0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_62_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17c0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_62_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_62_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_62_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_62_REG_ADDR 0x17c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_62_OFFSET 0x7c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_62_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_62_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17c0 );
    system_isp_write_32( base + 0x17c0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_62_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17c0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_62_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_62_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_62_REG_ADDR 0x17c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_62_OFFSET 0x7c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_62_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_62_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17c0 );
    system_isp_write_32( base + 0x17c0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_62_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17c0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Clone flag 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer is paired with the next descriptor
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_62_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_62_FIELD_OFFSET 18
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_62_REG_ADDR 0x17c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_62_OFFSET 0x7c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_CLONE_FLAG_62_FIELD_MASK 0x40000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_clone_flag_62_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17c0 );
    system_isp_write_32( base + 0x17c0, ( ( ( uint32_t )( data & 0x1 ) ) << 18 ) | ( curr & 0xfffbffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_clone_flag_62_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17c0 ) & 0x40000 ) >> 18 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_62_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_62_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_62_REG_ADDR 0x17c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_62_OFFSET 0x7c0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_62_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_62_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17c0 );
    system_isp_write_32( base + 0x17c0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_62_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17c0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_62_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_62_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_62_REG_ADDR 0x17c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_62_OFFSET 0x7c4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_62_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_62_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x17c4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_62_read( uint32_t base )
{
    return system_isp_read_32( base + 0x17c4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_62_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_62_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_62_REG_ADDR 0x17c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_62_OFFSET 0x7c8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_62_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_62_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x17c8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_62_read( uint32_t base )
{
    return system_isp_read_32( base + 0x17c8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_62_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_62_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_62_REG_ADDR 0x17cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_62_OFFSET 0x7cc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_62_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_62_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17cc );
    system_isp_write_32( base + 0x17cc, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_62_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x17cc ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_62_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_62_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_62_REG_ADDR 0x17d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_62_OFFSET 0x7d0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_62_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_62_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17d0 );
    system_isp_write_32( base + 0x17d0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_62_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x17d0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_62_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_62_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_62_REG_ADDR 0x17d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_62_OFFSET 0x7d4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_62_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_62_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17d4 );
    system_isp_write_32( base + 0x17d4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_62_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x17d4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_62_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_62_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_62_REG_ADDR 0x17d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_62_OFFSET 0x7d8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_62_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_62_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17d8 );
    system_isp_write_32( base + 0x17d8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_62_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17d8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 62
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_62_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_62_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_62_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_62_REG_ADDR 0x17dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_62_OFFSET 0x7dc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_62_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_62_read( uint32_t base )
{
    return system_isp_read_32( base + 0x17dc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer valid 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer 63 configuration valid flag.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_63_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_63_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_63_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_63_REG_ADDR 0x17e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_63_OFFSET 0x7e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_VALID_63_FIELD_MASK 0x1

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_buffer_valid_63_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17e0 );
    system_isp_write_32( base + 0x17e0, ( ( ( uint32_t )( data & 0x1 ) ) << 0 ) | ( curr & 0xfffffffe ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_valid_63_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17e0 ) & 0x1 ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Data width 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Pixel data width in bits.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_63_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_63_DATASIZE 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_63_FIELD_OFFSET 8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_63_REG_ADDR 0x17e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_63_OFFSET 0x7e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_DATA_WIDTH_63_FIELD_MASK 0xff00

// args: data (8-bit)
static __inline void acamera_out_buffers_out_buffers_data_width_63_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17e0 );
    system_isp_write_32( base + 0x17e0, ( ( ( uint32_t )( data & 0xff ) ) << 8 ) | ( curr & 0xffff00ff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_data_width_63_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17e0 ) & 0xff00 ) >> 8 );
}
// ------------------------------------------------------------------------------ //
// Register: MSB align 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// MSB or LSB alignment of the data.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_63_DEFAULT 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_63_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_63_FIELD_OFFSET 16
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_63_REG_ADDR 0x17e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_63_OFFSET 0x7e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_MSB_ALIGN_63_FIELD_MASK 0x10000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_msb_align_63_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17e0 );
    system_isp_write_32( base + 0x17e0, ( ( ( uint32_t )( data & 0x1 ) ) << 16 ) | ( curr & 0xfffeffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_msb_align_63_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17e0 ) & 0x10000 ) >> 16 );
}
// ------------------------------------------------------------------------------ //
// Register: Pool flag 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the next buffer also belongs to the same pool.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_63_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_63_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_63_FIELD_OFFSET 17
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_63_REG_ADDR 0x17e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_63_OFFSET 0x7e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_POOL_FLAG_63_FIELD_MASK 0x20000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_pool_flag_63_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17e0 );
    system_isp_write_32( base + 0x17e0, ( ( ( uint32_t )( data & 0x1 ) ) << 17 ) | ( curr & 0xfffdffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_pool_flag_63_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17e0 ) & 0x20000 ) >> 17 );
}
// ------------------------------------------------------------------------------ //
// Register: Infinite flag 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// If set, the buffer marked as empty after writing and full after reading.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_63_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_63_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_63_FIELD_OFFSET 19
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_63_REG_ADDR 0x17e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_63_OFFSET 0x7e0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_INFINITE_FLAG_63_FIELD_MASK 0x80000

// args: data (1-bit)
static __inline void acamera_out_buffers_out_buffers_infinite_flag_63_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17e0 );
    system_isp_write_32( base + 0x17e0, ( ( ( uint32_t )( data & 0x1 ) ) << 19 ) | ( curr & 0xfff7ffff ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_infinite_flag_63_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17e0 ) & 0x80000 ) >> 19 );
}
// ------------------------------------------------------------------------------ //
// Register: Base address 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Frame buffer base address.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_63_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_63_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_63_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_63_REG_ADDR 0x17e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_63_OFFSET 0x7e4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BASE_ADDRESS_63_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_base_address_63_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x17e4, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_base_address_63_read( uint32_t base )
{
    return system_isp_read_32( base + 0x17e4 );
}
// ------------------------------------------------------------------------------ //
// Register: Line offset 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Offset in bytes between lines.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_63_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_63_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_63_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_63_REG_ADDR 0x17e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_63_OFFSET 0x7e8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_LINE_OFFSET_63_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline void acamera_out_buffers_out_buffers_line_offset_63_write( uint32_t base, uint32_t data )
{
    system_isp_write_32( base + 0x17e8, data );
}
static __inline uint32_t acamera_out_buffers_out_buffers_line_offset_63_read( uint32_t base )
{
    return system_isp_read_32( base + 0x17e8 );
}
// ------------------------------------------------------------------------------ //
// Register: Active width 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active width in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_63_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_63_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_63_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_63_REG_ADDR 0x17ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_63_OFFSET 0x7ec
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_WIDTH_63_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_width_63_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17ec );
    system_isp_write_32( base + 0x17ec, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_width_63_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x17ec ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Active height 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Active height in pixels.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_63_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_63_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_63_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_63_REG_ADDR 0x17f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_63_OFFSET 0x7f0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_ACTIVE_HEIGHT_63_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_active_height_63_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17f0 );
    system_isp_write_32( base + 0x17f0, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_active_height_63_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x17f0 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Height modulo 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Number of lines in curcular buffer.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_63_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_63_DATASIZE 13
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_63_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_63_REG_ADDR 0x17f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_63_OFFSET 0x7f4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_HEIGHT_MODULO_63_FIELD_MASK 0x1fff

// args: data (13-bit)
static __inline void acamera_out_buffers_out_buffers_height_modulo_63_write( uint32_t base, uint16_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17f4 );
    system_isp_write_32( base + 0x17f4, ( ( ( uint32_t )( data & 0x1fff ) ) << 0 ) | ( curr & 0xffffe000 ) );
}
static __inline uint16_t acamera_out_buffers_out_buffers_height_modulo_63_read( uint32_t base )
{
    return ( uint16_t )( ( system_isp_read_32( base + 0x17f4 ) & 0x1fff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Status 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer status: 0 - empty; 1 - filled; 2 - writing; 3 - write canceling; 4 - reading; 5 - read canceling; 6 - reading+writing; 7 - cancelled
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_63_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_63_DATASIZE 4
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_63_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_63_REG_ADDR 0x17f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_63_OFFSET 0x7f8
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_STATUS_63_FIELD_MASK 0xf

// args: data (4-bit)
static __inline void acamera_out_buffers_out_buffers_status_63_write( uint32_t base, uint8_t data )
{
    uint32_t curr = system_isp_read_32( base + 0x17f8 );
    system_isp_write_32( base + 0x17f8, ( ( ( uint32_t )( data & 0xf ) ) << 0 ) | ( curr & 0xfffffff0 ) );
}
static __inline uint8_t acamera_out_buffers_out_buffers_status_63_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x17f8 ) & 0xf ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer CRC 63
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer data CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_63_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_63_DATASIZE 32
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_63_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_63_REG_ADDR 0x17fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_63_OFFSET 0x7fc
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CRC_63_FIELD_MASK 0xffffffff

// args: data (32-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_crc_63_read( uint32_t base )
{
    return system_isp_read_32( base + 0x17fc );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer configuration CRC
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer configuration CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_CRC_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_CRC_DATASIZE 31
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_CRC_FIELD_OFFSET 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_CRC_REG_ADDR 0x1800
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_CRC_OFFSET 0x800
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_CRC_FIELD_MASK 0x7fffffff

// args: data (31-bit)
static __inline uint32_t acamera_out_buffers_out_buffers_buffer_configuration_crc_read( uint32_t base )
{
    return ( uint32_t )( ( system_isp_read_32( base + 0x1800 ) & 0x7fffffff ) >> 0 );
}
// ------------------------------------------------------------------------------ //
// Register: Buffer configuration valid CRC
// ------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------ //
// Buffer configuration valid CRC.
// ------------------------------------------------------------------------------ //

#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_DEFAULT 0
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_DATASIZE 1
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_FIELD_OFFSET 31
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_REG_ADDR 0x1800
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_OFFSET 0x800
#define ACAMERA_OUT_BUFFERS_OUT_BUFFERS_BUFFER_CONFIGURATION_VALID_CRC_FIELD_MASK 0x80000000

// args: data (1-bit)
static __inline uint8_t acamera_out_buffers_out_buffers_buffer_configuration_valid_crc_read( uint32_t base )
{
    return ( uint8_t )( ( system_isp_read_32( base + 0x1800 ) & 0x80000000 ) >> 31 );
}
// ------------------------------------------------------------------------------ //
#endif //__ACAMERA_OUT_BUFFERS_CONFIG_H__
