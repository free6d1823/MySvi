1. turn on optimizations for speed and BSS_IN_DATA options, then compile svi:
   make se1000_defconfig
   make menuconfig
      CONFIG_CLK_DRIVER=y
      CONFIG_BSS_IN_DATA=y
      CONFIG_CC_OPT_SPEED=y
   make clean;make

2. prepare hex files: init.file.(0/1/...).hex and vdkrom.hex
   cd ./howto/
   make vcs
   ./bin4zebu.sh vdkrom

3. setup your account (icdesign group) which can login IC security zone

4. Use NoMachine to login

5. download the RTL of se1000 w/ the following command
   git clone "http://icgerrit.siengine.com/design" design_workarea
   git checkout se1000

   git clone "http://icgerrit.siengine.com/soc_top_verif" soc_top_verif_workarea
   git checkout se1000

  Now you have two directory: design_workarea and soc_top_verif_workarea

6. setup env
   source soc_top_verif_workarea/verif/utils/local_dut.setup

7. complile the tb w/ the following command
   cd soc_top_verif_workarea/verif/soc/sim/svi
   *****use Makefile******
   make patch
   make build
   make run

   run.py --cfg ../build_cfg/soc/soc_svi.cfg --bld --inf --tcn svi_full

8.prepare files before run tb with svi
   cd soc_top_verif_workarea/verif/soc/sim/work/soc_svi/svi_full/

   upload init.file.*.hex and vdkrom.hex to this folder

   cp soc_top_verif_workarea/verif/soc/c_test/ap0_ss_test/smp_*.hex ./
   mv vdkrom.hex ./smp_*.hex

9.run tb with svi
   ./run.sh

10.debug the waveform with Verdi
   bsub -Is verdi -elab ../BUILD/simv.daidir/kdb -q -nologo -ssf tb_top_fsdb
   or "verdi -q -nologo -dbdir ../BUILD/simv.daidir"
   open tb_top.fsdb in verdif
   signal:
      chip_inst/u_ap0_ss/u_cluster/g_core[0]/g_little/u_ananke_core/u_vcpu/
        u_cpu/u_ananke_dpu/u_dpu_dp/pc_instr0_iss_i

11.how to profile if simulation is slow:
   add "-simprofile" when compilation
   add "-simprofile time+mem" when simulation
   then "profrpt -output report.dir -view cpu_all simprofile_dir/"
