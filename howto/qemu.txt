0. make virt_defconfig

1. qemu启动运行hvep的参数:

-kernel 在这个模式下，qemu本身会提供PSCI的支持
qemu-system-aarch64 -machine virt,gic-version=3,secure=on -m 1000 -cpu cortex-a72 -nographic -kernel hvep -s

-bios 在这个模式下，qemu会直接启动多cpu,bios程序需自己负责实现PSCI
qemu-system-aarch64 -machine virt,gic-version=3,secure=on -m 1000 -cpu cortex-a72 -nographic -bios arch/arm64/boot/hvep.bin -s -smp 2


2. 如何dump device tree
qemu-system-aarch64 -machine virt,gic-version=3,secure=on,virtualization=on,dumpdtb=virt.dtb -m 1000 -cpu cortex-a72 -nographic -smp 2

dtc -I dtb -O dts virt.dtb >virt.dts
dtc -I dts -O dtb virt.dts >virt.dtb


3. qemu直接启动kernel的参数, qemu会提供device tree
qemu-system-aarch64 -machine virt,gic-version=3,secure=on,virtualization=on -m 1000 -cpu cortex-a72 -nographic -kernel ~/linux/arch/arm64/boot/Image -initrd ~/buildroot/output/images/rootfs.cpio.gz -s -smp 2


4. qemu调试pci，usb和U盘
qemu-system-aarch64 -machine virt,gic-version=3,secure=on -m 1000 -cpu cortex-a72 -nographic -kernel hvep -s -device qemu-xhci
qemu-system-aarch64 -machine virt,gic-version=3,secure=on -m 1000 -cpu cortex-a72 -nographic -kernel hvep -s -device qemu-xhci,addr=6,bus=pcie.0
备注：addr=6,bus=pcie.0   addr是插槽，系统默认的pci bus叫pcie.0

调试U盘
qemu-system-aarch64 -machine virt,gic-version=3,secure=on -m 1000 -cpu cortex-a72 -nographic -kernel ./hvep -s \
-device qemu-xhci,addr=6,bus=pcie.0 \
-drive if=none,id=usbstick,file=myimage,format=raw \
-device usb-storage,bus=usb-bus.0,drive=usbstick,port=4
备注：usb bus的默认值是usb-bus.0，port指定在哪个端口


5. 使用gdb调试
user@u16:~/svi$ aarch64-linux-gnu-gdb hvep
(gdb) target remote :1234
Remote debugging using :1234
dsr_run_once (dsr=10) at drivers/dsr.c:63
63                      dsr = dsr_signalled(cpu, dsr);
(gdb)


6. hvep启动内核，通过semihosting提供内核和device tree下载
qemu-system-aarch64 -machine virt,gic-version=3,secure=on,virtualization=on -m 1000 -cpu cortex-a72 -nographic -bios arch/arm64/boot/hvep.bin -s -semihosting-config enable=on,target=native -smp 2

Step1: load kernel image, dtb, and filesystem into specific memory address
for example, on QEMU virt machine, load images by the following commands
	smhload ./Image 0x40280000
	smhload ./virt.dtb 0x40200000
	smhload ./rootfs.cpio.gz 0x44000000
Step2: Jump into kernel by command below:
	kernel 0x40280000 0x40200000

Note: the size of rootfs.cpio.gz should be matched with linux,initrd-start/linux,initrd-end in virt.dts